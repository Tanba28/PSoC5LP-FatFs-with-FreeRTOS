ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ff.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ld_word,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	ld_word, %function
  24              	ld_word:
  25              	.LFB0:
  26              		.file 1 "..\\..\\FatFs\\ff.c"
   1:..\..\FatFs/ff.c **** /*----------------------------------------------------------------------------/
   2:..\..\FatFs/ff.c **** /  FatFs - Generic FAT Filesystem Module  R0.14                               /
   3:..\..\FatFs/ff.c **** /-----------------------------------------------------------------------------/
   4:..\..\FatFs/ff.c **** /
   5:..\..\FatFs/ff.c **** / Copyright (C) 2019, ChaN, all right reserved.
   6:..\..\FatFs/ff.c **** /
   7:..\..\FatFs/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:..\..\FatFs/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:..\..\FatFs/ff.c **** / that the following condition is met:
  10:..\..\FatFs/ff.c **** /
  11:..\..\FatFs/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:..\..\FatFs/ff.c **** /    this condition and the following disclaimer.
  13:..\..\FatFs/ff.c **** /
  14:..\..\FatFs/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:..\..\FatFs/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:..\..\FatFs/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:..\..\FatFs/ff.c **** / by use of this software.
  18:..\..\FatFs/ff.c **** /
  19:..\..\FatFs/ff.c **** /----------------------------------------------------------------------------*/
  20:..\..\FatFs/ff.c **** 
  21:..\..\FatFs/ff.c **** 
  22:..\..\FatFs/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  23:..\..\FatFs/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  24:..\..\FatFs/ff.c **** 
  25:..\..\FatFs/ff.c **** 
  26:..\..\FatFs/ff.c **** /*--------------------------------------------------------------------------
  27:..\..\FatFs/ff.c **** 
  28:..\..\FatFs/ff.c ****    Module Private Definitions
  29:..\..\FatFs/ff.c **** 
  30:..\..\FatFs/ff.c **** ---------------------------------------------------------------------------*/
  31:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 2


  32:..\..\FatFs/ff.c **** #if FF_DEFINED != 86606	/* Revision ID */
  33:..\..\FatFs/ff.c **** #error Wrong include file (ff.h).
  34:..\..\FatFs/ff.c **** #endif
  35:..\..\FatFs/ff.c **** 
  36:..\..\FatFs/ff.c **** 
  37:..\..\FatFs/ff.c **** /* Limits and boundaries */
  38:..\..\FatFs/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  39:..\..\FatFs/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  40:..\..\FatFs/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  41:..\..\FatFs/ff.c **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  42:..\..\FatFs/ff.c **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  43:..\..\FatFs/ff.c **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  44:..\..\FatFs/ff.c **** 
  45:..\..\FatFs/ff.c **** 
  46:..\..\FatFs/ff.c **** /* Character code support macros */
  47:..\..\FatFs/ff.c **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  48:..\..\FatFs/ff.c **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  49:..\..\FatFs/ff.c **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  50:..\..\FatFs/ff.c **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  51:..\..\FatFs/ff.c **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  52:..\..\FatFs/ff.c **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  53:..\..\FatFs/ff.c **** 
  54:..\..\FatFs/ff.c **** 
  55:..\..\FatFs/ff.c **** /* Additional file access control and file status flags for internal use */
  56:..\..\FatFs/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  57:..\..\FatFs/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
  58:..\..\FatFs/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  59:..\..\FatFs/ff.c **** 
  60:..\..\FatFs/ff.c **** 
  61:..\..\FatFs/ff.c **** /* Additional file attribute bits for internal use */
  62:..\..\FatFs/ff.c **** #define AM_VOL		0x08	/* Volume label */
  63:..\..\FatFs/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
  64:..\..\FatFs/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
  65:..\..\FatFs/ff.c **** 
  66:..\..\FatFs/ff.c **** 
  67:..\..\FatFs/ff.c **** /* Name status flags in fn[11] */
  68:..\..\FatFs/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
  69:..\..\FatFs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  70:..\..\FatFs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
  71:..\..\FatFs/ff.c **** #define NS_LAST		0x04	/* Last segment */
  72:..\..\FatFs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
  73:..\..\FatFs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  74:..\..\FatFs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
  75:..\..\FatFs/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
  76:..\..\FatFs/ff.c **** #define NS_NONAME	0x80	/* Not followed */
  77:..\..\FatFs/ff.c **** 
  78:..\..\FatFs/ff.c **** 
  79:..\..\FatFs/ff.c **** /* exFAT directory entry types */
  80:..\..\FatFs/ff.c **** #define	ET_BITMAP	0x81	/* Allocation bitmap */
  81:..\..\FatFs/ff.c **** #define	ET_UPCASE	0x82	/* Up-case table */
  82:..\..\FatFs/ff.c **** #define	ET_VLABEL	0x83	/* Volume label */
  83:..\..\FatFs/ff.c **** #define	ET_FILEDIR	0x85	/* File and directory */
  84:..\..\FatFs/ff.c **** #define	ET_STREAM	0xC0	/* Stream extension */
  85:..\..\FatFs/ff.c **** #define	ET_FILENAME	0xC1	/* Name extension */
  86:..\..\FatFs/ff.c **** 
  87:..\..\FatFs/ff.c **** 
  88:..\..\FatFs/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 3


  89:..\..\FatFs/ff.c **** / because the C structure is not binary compatible between different platforms */
  90:..\..\FatFs/ff.c **** 
  91:..\..\FatFs/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  92:..\..\FatFs/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
  93:..\..\FatFs/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  94:..\..\FatFs/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  95:..\..\FatFs/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
  96:..\..\FatFs/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
  97:..\..\FatFs/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
  98:..\..\FatFs/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
  99:..\..\FatFs/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 100:..\..\FatFs/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 101:..\..\FatFs/ff.c **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
 102:..\..\FatFs/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 103:..\..\FatFs/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 104:..\..\FatFs/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 105:..\..\FatFs/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 106:..\..\FatFs/ff.c **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
 107:..\..\FatFs/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 108:..\..\FatFs/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 109:..\..\FatFs/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 110:..\..\FatFs/ff.c **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 111:..\..\FatFs/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 112:..\..\FatFs/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 113:..\..\FatFs/ff.c **** 
 114:..\..\FatFs/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 115:..\..\FatFs/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 116:..\..\FatFs/ff.c **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 117:..\..\FatFs/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 118:..\..\FatFs/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 119:..\..\FatFs/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 120:..\..\FatFs/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 121:..\..\FatFs/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 122:..\..\FatFs/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 123:..\..\FatFs/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 124:..\..\FatFs/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 125:..\..\FatFs/ff.c **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 126:..\..\FatFs/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 127:..\..\FatFs/ff.c **** 
 128:..\..\FatFs/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 129:..\..\FatFs/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 130:..\..\FatFs/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 131:..\..\FatFs/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 132:..\..\FatFs/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 133:..\..\FatFs/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 134:..\..\FatFs/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 135:..\..\FatFs/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 136:..\..\FatFs/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 137:..\..\FatFs/ff.c **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 138:..\..\FatFs/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 139:..\..\FatFs/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 140:..\..\FatFs/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 141:..\..\FatFs/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 142:..\..\FatFs/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 143:..\..\FatFs/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 144:..\..\FatFs/ff.c **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 145:..\..\FatFs/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 4


 146:..\..\FatFs/ff.c **** 
 147:..\..\FatFs/ff.c **** #define DIR_Name			0		/* Short file name (11-byte) */
 148:..\..\FatFs/ff.c **** #define DIR_Attr			11		/* Attribute (BYTE) */
 149:..\..\FatFs/ff.c **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 150:..\..\FatFs/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 151:..\..\FatFs/ff.c **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 152:..\..\FatFs/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 153:..\..\FatFs/ff.c **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 154:..\..\FatFs/ff.c **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 155:..\..\FatFs/ff.c **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 156:..\..\FatFs/ff.c **** #define DIR_FileSize		28		/* File size (DWORD) */
 157:..\..\FatFs/ff.c **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 158:..\..\FatFs/ff.c **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 159:..\..\FatFs/ff.c **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 160:..\..\FatFs/ff.c **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 161:..\..\FatFs/ff.c **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 162:..\..\FatFs/ff.c **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 163:..\..\FatFs/ff.c **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 164:..\..\FatFs/ff.c **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 165:..\..\FatFs/ff.c **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 166:..\..\FatFs/ff.c **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 167:..\..\FatFs/ff.c **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 168:..\..\FatFs/ff.c **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 169:..\..\FatFs/ff.c **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 170:..\..\FatFs/ff.c **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 171:..\..\FatFs/ff.c **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 172:..\..\FatFs/ff.c **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 173:..\..\FatFs/ff.c **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 174:..\..\FatFs/ff.c **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 175:..\..\FatFs/ff.c **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 176:..\..\FatFs/ff.c **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 177:..\..\FatFs/ff.c **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 178:..\..\FatFs/ff.c **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 179:..\..\FatFs/ff.c **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 180:..\..\FatFs/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 181:..\..\FatFs/ff.c **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 182:..\..\FatFs/ff.c **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 183:..\..\FatFs/ff.c **** 
 184:..\..\FatFs/ff.c **** #define SZDIRE				32		/* Size of a directory entry */
 185:..\..\FatFs/ff.c **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 186:..\..\FatFs/ff.c **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 187:..\..\FatFs/ff.c **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 188:..\..\FatFs/ff.c **** 
 189:..\..\FatFs/ff.c **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 190:..\..\FatFs/ff.c **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 191:..\..\FatFs/ff.c **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 192:..\..\FatFs/ff.c **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 193:..\..\FatFs/ff.c **** 
 194:..\..\FatFs/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 195:..\..\FatFs/ff.c **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 196:..\..\FatFs/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 197:..\..\FatFs/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 198:..\..\FatFs/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 199:..\..\FatFs/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 200:..\..\FatFs/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 201:..\..\FatFs/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 202:..\..\FatFs/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 5


 203:..\..\FatFs/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 204:..\..\FatFs/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 205:..\..\FatFs/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 206:..\..\FatFs/ff.c **** 
 207:..\..\FatFs/ff.c **** #define GPTH_Sign			0		/* GPT: Header signature (8-byte) */
 208:..\..\FatFs/ff.c **** #define GPTH_Rev			8		/* GPT: Revision (DWORD) */
 209:..\..\FatFs/ff.c **** #define GPTH_Size			12		/* GPT: Header size (DWORD) */
 210:..\..\FatFs/ff.c **** #define GPTH_Bcc			16		/* GPT: Header BCC (DWORD) */
 211:..\..\FatFs/ff.c **** #define GPTH_CurLba			24		/* GPT: Main header LBA (QWORD) */
 212:..\..\FatFs/ff.c **** #define GPTH_BakLba			32		/* GPT: Backup header LBA (QWORD) */
 213:..\..\FatFs/ff.c **** #define GPTH_FstLba			40		/* GPT: First LBA for partitions (QWORD) */
 214:..\..\FatFs/ff.c **** #define GPTH_LstLba			48		/* GPT: Last LBA for partitions (QWORD) */
 215:..\..\FatFs/ff.c **** #define GPTH_DskGuid		56		/* GPT: Disk GUID (16-byte) */
 216:..\..\FatFs/ff.c **** #define GPTH_PtOfs			72		/* GPT: Partation table LBA (QWORD) */
 217:..\..\FatFs/ff.c **** #define GPTH_PtNum			80		/* GPT: Number of table entries (DWORD) */
 218:..\..\FatFs/ff.c **** #define GPTH_PteSize		84		/* GPT: Size of table entry (DWORD) */
 219:..\..\FatFs/ff.c **** #define GPTH_PtBcc			88		/* GPT: Partation table BCC (DWORD) */
 220:..\..\FatFs/ff.c **** #define SZ_GPTE				128		/* GPT: Size of partition table entry */
 221:..\..\FatFs/ff.c **** #define GPTE_PtGuid			0		/* GPT PTE: Partition type GUID (16-byte) */
 222:..\..\FatFs/ff.c **** #define GPTE_UpGuid			16		/* GPT PTE: Partition unique GUID (16-byte) */
 223:..\..\FatFs/ff.c **** #define GPTE_FstLba			32		/* GPT PTE: First LBA (QWORD) */
 224:..\..\FatFs/ff.c **** #define GPTE_LstLba			40		/* GPT PTE: Last LBA inclusive (QWORD) */
 225:..\..\FatFs/ff.c **** #define GPTE_Flags			48		/* GPT PTE: Flags (QWORD) */
 226:..\..\FatFs/ff.c **** #define GPTE_Name			56		/* GPT PTE: Name */
 227:..\..\FatFs/ff.c **** 
 228:..\..\FatFs/ff.c **** 
 229:..\..\FatFs/ff.c **** /* Post process on fatal error in the file operations */
 230:..\..\FatFs/ff.c **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 231:..\..\FatFs/ff.c **** 
 232:..\..\FatFs/ff.c **** 
 233:..\..\FatFs/ff.c **** /* Re-entrancy related */
 234:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 235:..\..\FatFs/ff.c **** #if FF_USE_LFN == 1
 236:..\..\FatFs/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 237:..\..\FatFs/ff.c **** #endif
 238:..\..\FatFs/ff.c **** #define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 239:..\..\FatFs/ff.c **** #else
 240:..\..\FatFs/ff.c **** #define LEAVE_FF(fs, res)	return res
 241:..\..\FatFs/ff.c **** #endif
 242:..\..\FatFs/ff.c **** 
 243:..\..\FatFs/ff.c **** 
 244:..\..\FatFs/ff.c **** /* Definitions of logical drive - physical location conversion */
 245:..\..\FatFs/ff.c **** #if FF_MULTI_PARTITION
 246:..\..\FatFs/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 247:..\..\FatFs/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 248:..\..\FatFs/ff.c **** #else
 249:..\..\FatFs/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is associated with the same physical drive num
 250:..\..\FatFs/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 251:..\..\FatFs/ff.c **** #endif
 252:..\..\FatFs/ff.c **** 
 253:..\..\FatFs/ff.c **** 
 254:..\..\FatFs/ff.c **** /* Definitions of sector size */
 255:..\..\FatFs/ff.c **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 256:..\..\FatFs/ff.c **** #error Wrong sector size configuration
 257:..\..\FatFs/ff.c **** #endif
 258:..\..\FatFs/ff.c **** #if FF_MAX_SS == FF_MIN_SS
 259:..\..\FatFs/ff.c **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 6


 260:..\..\FatFs/ff.c **** #else
 261:..\..\FatFs/ff.c **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 262:..\..\FatFs/ff.c **** #endif
 263:..\..\FatFs/ff.c **** 
 264:..\..\FatFs/ff.c **** 
 265:..\..\FatFs/ff.c **** /* Timestamp */
 266:..\..\FatFs/ff.c **** #if FF_FS_NORTC == 1
 267:..\..\FatFs/ff.c **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 268:..\..\FatFs/ff.c **** #error Invalid FF_FS_NORTC settings
 269:..\..\FatFs/ff.c **** #endif
 270:..\..\FatFs/ff.c **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 271:..\..\FatFs/ff.c **** #else
 272:..\..\FatFs/ff.c **** #define GET_FATTIME()	get_fattime()
 273:..\..\FatFs/ff.c **** #endif
 274:..\..\FatFs/ff.c **** 
 275:..\..\FatFs/ff.c **** 
 276:..\..\FatFs/ff.c **** /* File lock controls */
 277:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 278:..\..\FatFs/ff.c **** #if FF_FS_READONLY
 279:..\..\FatFs/ff.c **** #error FF_FS_LOCK must be 0 at read-only configuration
 280:..\..\FatFs/ff.c **** #endif
 281:..\..\FatFs/ff.c **** typedef struct {
 282:..\..\FatFs/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 283:..\..\FatFs/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 284:..\..\FatFs/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 285:..\..\FatFs/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 286:..\..\FatFs/ff.c **** } FILESEM;
 287:..\..\FatFs/ff.c **** #endif
 288:..\..\FatFs/ff.c **** 
 289:..\..\FatFs/ff.c **** 
 290:..\..\FatFs/ff.c **** /* SBCS up-case tables (\x80-\xFF) */
 291:..\..\FatFs/ff.c **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 292:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 293:..\..\FatFs/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 294:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 295:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 296:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 297:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 298:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 299:..\..\FatFs/ff.c **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 300:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 301:..\..\FatFs/ff.c **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 302:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 303:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 304:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 305:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 306:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 307:..\..\FatFs/ff.c **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 308:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 309:..\..\FatFs/ff.c **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 310:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 311:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 312:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 313:..\..\FatFs/ff.c **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 314:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 315:..\..\FatFs/ff.c **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 316:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 7


 317:..\..\FatFs/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 318:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 319:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 320:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 321:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 322:..\..\FatFs/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 323:..\..\FatFs/ff.c **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 324:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 325:..\..\FatFs/ff.c **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 326:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 327:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 328:..\..\FatFs/ff.c **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 329:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 330:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 331:..\..\FatFs/ff.c **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 332:..\..\FatFs/ff.c **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 333:..\..\FatFs/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 334:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 335:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 336:..\..\FatFs/ff.c **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 337:..\..\FatFs/ff.c **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 338:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 339:..\..\FatFs/ff.c **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 340:..\..\FatFs/ff.c **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 341:..\..\FatFs/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 342:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 343:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 344:..\..\FatFs/ff.c **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 345:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 346:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 347:..\..\FatFs/ff.c **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 348:..\..\FatFs/ff.c **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 349:..\..\FatFs/ff.c **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 350:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 351:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 352:..\..\FatFs/ff.c **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 353:..\..\FatFs/ff.c **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 354:..\..\FatFs/ff.c **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 355:..\..\FatFs/ff.c **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 356:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 357:..\..\FatFs/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 358:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 359:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 360:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 361:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 362:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 363:..\..\FatFs/ff.c **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 364:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 365:..\..\FatFs/ff.c **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 366:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 367:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 368:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 369:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 370:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 371:..\..\FatFs/ff.c **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 372:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 373:..\..\FatFs/ff.c **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 8


 374:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 375:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 376:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 377:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 378:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 379:..\..\FatFs/ff.c **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 380:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 381:..\..\FatFs/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 382:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 383:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 384:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 385:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 386:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 387:..\..\FatFs/ff.c **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 388:..\..\FatFs/ff.c **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 389:..\..\FatFs/ff.c **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 390:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 391:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 392:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 393:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 394:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 395:..\..\FatFs/ff.c **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 396:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 397:..\..\FatFs/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 398:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 399:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 400:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 401:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 402:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 403:..\..\FatFs/ff.c **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 404:..\..\FatFs/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 405:..\..\FatFs/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 406:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 407:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 408:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 409:..\..\FatFs/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 410:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 411:..\..\FatFs/ff.c **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 412:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 413:..\..\FatFs/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 414:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 415:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 416:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 417:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 418:..\..\FatFs/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 419:..\..\FatFs/ff.c **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 420:..\..\FatFs/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 421:..\..\FatFs/ff.c **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 422:..\..\FatFs/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 423:..\..\FatFs/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 424:..\..\FatFs/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 425:..\..\FatFs/ff.c **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 426:..\..\FatFs/ff.c **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 427:..\..\FatFs/ff.c **** 
 428:..\..\FatFs/ff.c **** 
 429:..\..\FatFs/ff.c **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 430:..\..\FatFs/ff.c **** /*                  <------>    <------>    <------>    <------>    <------>  */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 9


 431:..\..\FatFs/ff.c **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 432:..\..\FatFs/ff.c **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 433:..\..\FatFs/ff.c **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 434:..\..\FatFs/ff.c **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 435:..\..\FatFs/ff.c **** 
 436:..\..\FatFs/ff.c **** 
 437:..\..\FatFs/ff.c **** /* Macros for table definitions */
 438:..\..\FatFs/ff.c **** #define MERGE_2STR(a, b) a ## b
 439:..\..\FatFs/ff.c **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 440:..\..\FatFs/ff.c **** 
 441:..\..\FatFs/ff.c **** 
 442:..\..\FatFs/ff.c **** 
 443:..\..\FatFs/ff.c **** 
 444:..\..\FatFs/ff.c **** /*--------------------------------------------------------------------------
 445:..\..\FatFs/ff.c **** 
 446:..\..\FatFs/ff.c ****    Module Private Work Area
 447:..\..\FatFs/ff.c **** 
 448:..\..\FatFs/ff.c **** ---------------------------------------------------------------------------*/
 449:..\..\FatFs/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 450:..\..\FatFs/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 451:..\..\FatFs/ff.c **** /  not compliance with C standard. */
 452:..\..\FatFs/ff.c **** 
 453:..\..\FatFs/ff.c **** /*--------------------------------*/
 454:..\..\FatFs/ff.c **** /* File/Volume controls           */
 455:..\..\FatFs/ff.c **** /*--------------------------------*/
 456:..\..\FatFs/ff.c **** 
 457:..\..\FatFs/ff.c **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 458:..\..\FatFs/ff.c **** #error Wrong FF_VOLUMES setting
 459:..\..\FatFs/ff.c **** #endif
 460:..\..\FatFs/ff.c **** static FATFS* FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 461:..\..\FatFs/ff.c **** static WORD Fsid;					/* Filesystem mount ID */
 462:..\..\FatFs/ff.c **** 
 463:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
 464:..\..\FatFs/ff.c **** static BYTE CurrVol;				/* Current drive */
 465:..\..\FatFs/ff.c **** #endif
 466:..\..\FatFs/ff.c **** 
 467:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 468:..\..\FatFs/ff.c **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 469:..\..\FatFs/ff.c **** #endif
 470:..\..\FatFs/ff.c **** 
 471:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID
 472:..\..\FatFs/ff.c **** #ifdef FF_VOLUME_STRS
 473:..\..\FatFs/ff.c **** static const char* const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 474:..\..\FatFs/ff.c **** #endif
 475:..\..\FatFs/ff.c **** #endif
 476:..\..\FatFs/ff.c **** 
 477:..\..\FatFs/ff.c **** #if FF_LBA64
 478:..\..\FatFs/ff.c **** #if FF_MIN_GPT > 0x100000000
 479:..\..\FatFs/ff.c **** #error Wrong FF_MIN_GPT setting
 480:..\..\FatFs/ff.c **** #endif
 481:..\..\FatFs/ff.c **** static const BYTE GUID_MS_Basic[16] = {0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,0x87,0xC0,0x68,0xB6,
 482:..\..\FatFs/ff.c **** #endif
 483:..\..\FatFs/ff.c **** 
 484:..\..\FatFs/ff.c **** 
 485:..\..\FatFs/ff.c **** 
 486:..\..\FatFs/ff.c **** /*--------------------------------*/
 487:..\..\FatFs/ff.c **** /* LFN/Directory working buffer   */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 10


 488:..\..\FatFs/ff.c **** /*--------------------------------*/
 489:..\..\FatFs/ff.c **** 
 490:..\..\FatFs/ff.c **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 491:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 492:..\..\FatFs/ff.c **** #error LFN must be enabled when enable exFAT
 493:..\..\FatFs/ff.c **** #endif
 494:..\..\FatFs/ff.c **** #define DEF_NAMBUF
 495:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)
 496:..\..\FatFs/ff.c **** #define FREE_NAMBUF()
 497:..\..\FatFs/ff.c **** #define LEAVE_MKFS(res)	return res
 498:..\..\FatFs/ff.c **** 
 499:..\..\FatFs/ff.c **** #else					/* LFN configurations */
 500:..\..\FatFs/ff.c **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 501:..\..\FatFs/ff.c **** #error Wrong setting of FF_MAX_LFN
 502:..\..\FatFs/ff.c **** #endif
 503:..\..\FatFs/ff.c **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 504:..\..\FatFs/ff.c **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 505:..\..\FatFs/ff.c **** #endif
 506:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 507:..\..\FatFs/ff.c **** #error Wrong setting of FF_LFN_UNICODE
 508:..\..\FatFs/ff.c **** #endif
 509:..\..\FatFs/ff.c **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 510:..\..\FatFs/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 511:..\..\FatFs/ff.c **** 
 512:..\..\FatFs/ff.c **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 513:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 514:..\..\FatFs/ff.c **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 515:..\..\FatFs/ff.c **** #endif
 516:..\..\FatFs/ff.c **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 517:..\..\FatFs/ff.c **** #define DEF_NAMBUF
 518:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)
 519:..\..\FatFs/ff.c **** #define FREE_NAMBUF()
 520:..\..\FatFs/ff.c **** #define LEAVE_MKFS(res)	return res
 521:..\..\FatFs/ff.c **** 
 522:..\..\FatFs/ff.c **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 523:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 524:..\..\FatFs/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 525:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 526:..\..\FatFs/ff.c **** #define FREE_NAMBUF()
 527:..\..\FatFs/ff.c **** #else
 528:..\..\FatFs/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 529:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 530:..\..\FatFs/ff.c **** #define FREE_NAMBUF()
 531:..\..\FatFs/ff.c **** #endif
 532:..\..\FatFs/ff.c **** #define LEAVE_MKFS(res)	return res
 533:..\..\FatFs/ff.c **** 
 534:..\..\FatFs/ff.c **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 535:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 536:..\..\FatFs/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 537:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 538:..\..\FatFs/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 539:..\..\FatFs/ff.c **** #else
 540:..\..\FatFs/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 541:..\..\FatFs/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
 542:..\..\FatFs/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 543:..\..\FatFs/ff.c **** #endif
 544:..\..\FatFs/ff.c **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 11


 545:..\..\FatFs/ff.c **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 546:..\..\FatFs/ff.c **** 
 547:..\..\FatFs/ff.c **** #else
 548:..\..\FatFs/ff.c **** #error Wrong setting of FF_USE_LFN
 549:..\..\FatFs/ff.c **** 
 550:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN == 1 */
 551:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN == 0 */
 552:..\..\FatFs/ff.c **** 
 553:..\..\FatFs/ff.c **** 
 554:..\..\FatFs/ff.c **** 
 555:..\..\FatFs/ff.c **** /*--------------------------------*/
 556:..\..\FatFs/ff.c **** /* Code conversion tables         */
 557:..\..\FatFs/ff.c **** /*--------------------------------*/
 558:..\..\FatFs/ff.c **** 
 559:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0		/* Run-time code page configuration */
 560:..\..\FatFs/ff.c **** #define CODEPAGE CodePage
 561:..\..\FatFs/ff.c **** static WORD CodePage;	/* Current code page */
 562:..\..\FatFs/ff.c **** static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range tab
 563:..\..\FatFs/ff.c **** 
 564:..\..\FatFs/ff.c **** static const BYTE Ct437[] = TBL_CT437;
 565:..\..\FatFs/ff.c **** static const BYTE Ct720[] = TBL_CT720;
 566:..\..\FatFs/ff.c **** static const BYTE Ct737[] = TBL_CT737;
 567:..\..\FatFs/ff.c **** static const BYTE Ct771[] = TBL_CT771;
 568:..\..\FatFs/ff.c **** static const BYTE Ct775[] = TBL_CT775;
 569:..\..\FatFs/ff.c **** static const BYTE Ct850[] = TBL_CT850;
 570:..\..\FatFs/ff.c **** static const BYTE Ct852[] = TBL_CT852;
 571:..\..\FatFs/ff.c **** static const BYTE Ct855[] = TBL_CT855;
 572:..\..\FatFs/ff.c **** static const BYTE Ct857[] = TBL_CT857;
 573:..\..\FatFs/ff.c **** static const BYTE Ct860[] = TBL_CT860;
 574:..\..\FatFs/ff.c **** static const BYTE Ct861[] = TBL_CT861;
 575:..\..\FatFs/ff.c **** static const BYTE Ct862[] = TBL_CT862;
 576:..\..\FatFs/ff.c **** static const BYTE Ct863[] = TBL_CT863;
 577:..\..\FatFs/ff.c **** static const BYTE Ct864[] = TBL_CT864;
 578:..\..\FatFs/ff.c **** static const BYTE Ct865[] = TBL_CT865;
 579:..\..\FatFs/ff.c **** static const BYTE Ct866[] = TBL_CT866;
 580:..\..\FatFs/ff.c **** static const BYTE Ct869[] = TBL_CT869;
 581:..\..\FatFs/ff.c **** static const BYTE Dc932[] = TBL_DC932;
 582:..\..\FatFs/ff.c **** static const BYTE Dc936[] = TBL_DC936;
 583:..\..\FatFs/ff.c **** static const BYTE Dc949[] = TBL_DC949;
 584:..\..\FatFs/ff.c **** static const BYTE Dc950[] = TBL_DC950;
 585:..\..\FatFs/ff.c **** 
 586:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 587:..\..\FatFs/ff.c **** #define CODEPAGE FF_CODE_PAGE
 588:..\..\FatFs/ff.c **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 589:..\..\FatFs/ff.c **** 
 590:..\..\FatFs/ff.c **** #else					/* Static code page configuration (DBCS) */
 591:..\..\FatFs/ff.c **** #define CODEPAGE FF_CODE_PAGE
 592:..\..\FatFs/ff.c **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 593:..\..\FatFs/ff.c **** 
 594:..\..\FatFs/ff.c **** #endif
 595:..\..\FatFs/ff.c **** 
 596:..\..\FatFs/ff.c **** 
 597:..\..\FatFs/ff.c **** 
 598:..\..\FatFs/ff.c **** 
 599:..\..\FatFs/ff.c **** /*--------------------------------------------------------------------------
 600:..\..\FatFs/ff.c **** 
 601:..\..\FatFs/ff.c ****    Module Private Functions
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 12


 602:..\..\FatFs/ff.c **** 
 603:..\..\FatFs/ff.c **** ---------------------------------------------------------------------------*/
 604:..\..\FatFs/ff.c **** 
 605:..\..\FatFs/ff.c **** 
 606:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 607:..\..\FatFs/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 608:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 609:..\..\FatFs/ff.c **** 
 610:..\..\FatFs/ff.c **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 611:..\..\FatFs/ff.c **** {
  27              		.loc 1 611 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 612:..\..\FatFs/ff.c **** 	WORD rv;
 613:..\..\FatFs/ff.c **** 
 614:..\..\FatFs/ff.c **** 	rv = ptr[1];
  33              		.loc 1 614 0
  34 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  35              	.LVL1:
 615:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[0];
  36              		.loc 1 615 0
  37 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  38              	.LVL2:
 616:..\..\FatFs/ff.c **** 	return rv;
 617:..\..\FatFs/ff.c **** }
  39              		.loc 1 617 0
  40 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  41              	.LVL3:
  42 0008 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE0:
  45              		.size	ld_word, .-ld_word
  46 000a 00BF     		.section	.text.ld_dword,"ax",%progbits
  47              		.align	2
  48              		.thumb
  49              		.thumb_func
  50              		.type	ld_dword, %function
  51              	ld_dword:
  52              	.LFB1:
 618:..\..\FatFs/ff.c **** 
 619:..\..\FatFs/ff.c **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 620:..\..\FatFs/ff.c **** {
  53              		.loc 1 620 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL4:
 621:..\..\FatFs/ff.c **** 	DWORD rv;
 622:..\..\FatFs/ff.c **** 
 623:..\..\FatFs/ff.c **** 	rv = ptr[3];
  59              		.loc 1 623 0
  60 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  61              	.LVL5:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 13


 624:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[2];
  62              		.loc 1 624 0
  63 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  64 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  65              	.LVL6:
 625:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[1];
  66              		.loc 1 625 0
  67 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  68 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  69              	.LVL7:
 626:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[0];
  70              		.loc 1 626 0
  71 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  72              	.LVL8:
 627:..\..\FatFs/ff.c **** 	return rv;
 628:..\..\FatFs/ff.c **** }
  73              		.loc 1 628 0
  74 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  75              	.LVL9:
  76 0014 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE1:
  79              		.size	ld_dword, .-ld_dword
  80 0016 00BF     		.section	.text.st_word,"ax",%progbits
  81              		.align	2
  82              		.thumb
  83              		.thumb_func
  84              		.type	st_word, %function
  85              	st_word:
  86              	.LFB2:
 629:..\..\FatFs/ff.c **** 
 630:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 631:..\..\FatFs/ff.c **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 632:..\..\FatFs/ff.c **** {
 633:..\..\FatFs/ff.c **** 	QWORD rv;
 634:..\..\FatFs/ff.c **** 
 635:..\..\FatFs/ff.c **** 	rv = ptr[7];
 636:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[6];
 637:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[5];
 638:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[4];
 639:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[3];
 640:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[2];
 641:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[1];
 642:..\..\FatFs/ff.c **** 	rv = rv << 8 | ptr[0];
 643:..\..\FatFs/ff.c **** 	return rv;
 644:..\..\FatFs/ff.c **** }
 645:..\..\FatFs/ff.c **** #endif
 646:..\..\FatFs/ff.c **** 
 647:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 648:..\..\FatFs/ff.c **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 649:..\..\FatFs/ff.c **** {
  87              		.loc 1 649 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL10:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 14


 650:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
  93              		.loc 1 650 0
  94 0000 0170     		strb	r1, [r0]
  95              	.LVL11:
 651:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val;
  96              		.loc 1 651 0
  97 0002 090A     		lsrs	r1, r1, #8
  98              	.LVL12:
  99 0004 4170     		strb	r1, [r0, #1]
 100 0006 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE2:
 103              		.size	st_word, .-st_word
 104              		.section	.text.st_dword,"ax",%progbits
 105              		.align	2
 106              		.thumb
 107              		.thumb_func
 108              		.type	st_dword, %function
 109              	st_dword:
 110              	.LFB3:
 652:..\..\FatFs/ff.c **** }
 653:..\..\FatFs/ff.c **** 
 654:..\..\FatFs/ff.c **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 655:..\..\FatFs/ff.c **** {
 111              		.loc 1 655 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.LVL13:
 656:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 117              		.loc 1 656 0
 118 0000 0170     		strb	r1, [r0]
 119              	.LVL14:
 657:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 120              		.loc 1 657 0
 121 0002 C1F30723 		ubfx	r3, r1, #8, #8
 122 0006 4370     		strb	r3, [r0, #1]
 123              	.LVL15:
 658:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 124              		.loc 1 658 0
 125 0008 C1F30743 		ubfx	r3, r1, #16, #8
 126 000c 8370     		strb	r3, [r0, #2]
 127              	.LVL16:
 659:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val;
 128              		.loc 1 659 0
 129 000e 090E     		lsrs	r1, r1, #24
 130              	.LVL17:
 131 0010 C170     		strb	r1, [r0, #3]
 132 0012 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE3:
 135              		.size	st_dword, .-st_dword
 136              		.section	.text.mem_cpy,"ax",%progbits
 137              		.align	2
 138              		.thumb
 139              		.thumb_func
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 15


 140              		.type	mem_cpy, %function
 141              	mem_cpy:
 142              	.LFB4:
 660:..\..\FatFs/ff.c **** }
 661:..\..\FatFs/ff.c **** 
 662:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 663:..\..\FatFs/ff.c **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 664:..\..\FatFs/ff.c **** {
 665:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 666:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 667:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 668:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 669:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 670:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 671:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 672:..\..\FatFs/ff.c **** 	*ptr++ = (BYTE)val;
 673:..\..\FatFs/ff.c **** }
 674:..\..\FatFs/ff.c **** #endif
 675:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
 676:..\..\FatFs/ff.c **** 
 677:..\..\FatFs/ff.c **** 
 678:..\..\FatFs/ff.c **** 
 679:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 680:..\..\FatFs/ff.c **** /* String functions                                                      */
 681:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 682:..\..\FatFs/ff.c **** 
 683:..\..\FatFs/ff.c **** /* Copy memory to memory */
 684:..\..\FatFs/ff.c **** static void mem_cpy (void* dst, const void* src, UINT cnt)
 685:..\..\FatFs/ff.c **** {
 143              		.loc 1 685 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.LVL18:
 686:..\..\FatFs/ff.c **** 	BYTE *d = (BYTE*)dst;
 687:..\..\FatFs/ff.c **** 	const BYTE *s = (const BYTE*)src;
 688:..\..\FatFs/ff.c **** 
 689:..\..\FatFs/ff.c **** 	if (cnt != 0) {
 149              		.loc 1 689 0
 150 0000 1346     		mov	r3, r2
 151 0002 2AB1     		cbz	r2, .L5
 152              	.LVL19:
 153              	.L7:
 690:..\..\FatFs/ff.c **** 		do {
 691:..\..\FatFs/ff.c **** 			*d++ = *s++;
 154              		.loc 1 691 0 discriminator 1
 155 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 156 0006 0270     		strb	r2, [r0]
 157              	.LVL20:
 158 0008 0130     		adds	r0, r0, #1
 159              	.LVL21:
 160 000a 0131     		adds	r1, r1, #1
 161              	.LVL22:
 692:..\..\FatFs/ff.c **** 		} while (--cnt);
 162              		.loc 1 692 0 discriminator 1
 163 000c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 16


 164              	.LVL23:
 165 000e F9D1     		bne	.L7
 166              	.L5:
 167 0010 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE4:
 170              		.size	mem_cpy, .-mem_cpy
 171 0012 00BF     		.section	.text.mem_set,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	mem_set, %function
 176              	mem_set:
 177              	.LFB5:
 693:..\..\FatFs/ff.c **** 	}
 694:..\..\FatFs/ff.c **** }
 695:..\..\FatFs/ff.c **** 
 696:..\..\FatFs/ff.c **** 
 697:..\..\FatFs/ff.c **** /* Fill memory block */
 698:..\..\FatFs/ff.c **** static void mem_set (void* dst, int val, UINT cnt)
 699:..\..\FatFs/ff.c **** {
 178              		.loc 1 699 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              	.LVL24:
 184              	.L9:
 700:..\..\FatFs/ff.c **** 	BYTE *d = (BYTE*)dst;
 701:..\..\FatFs/ff.c **** 
 702:..\..\FatFs/ff.c **** 	do {
 703:..\..\FatFs/ff.c **** 		*d++ = (BYTE)val;
 185              		.loc 1 703 0 discriminator 1
 186 0000 0170     		strb	r1, [r0]
 187              	.LVL25:
 188 0002 0130     		adds	r0, r0, #1
 189              	.LVL26:
 704:..\..\FatFs/ff.c **** 	} while (--cnt);
 190              		.loc 1 704 0 discriminator 1
 191 0004 013A     		subs	r2, r2, #1
 192              	.LVL27:
 193 0006 FBD1     		bne	.L9
 705:..\..\FatFs/ff.c **** }
 194              		.loc 1 705 0
 195 0008 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE5:
 198              		.size	mem_set, .-mem_set
 199 000a 00BF     		.section	.text.mem_cmp,"ax",%progbits
 200              		.align	2
 201              		.thumb
 202              		.thumb_func
 203              		.type	mem_cmp, %function
 204              	mem_cmp:
 205              	.LFB6:
 706:..\..\FatFs/ff.c **** 
 707:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 17


 708:..\..\FatFs/ff.c **** /* Compare memory block */
 709:..\..\FatFs/ff.c **** static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
 710:..\..\FatFs/ff.c **** {
 206              		.loc 1 710 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211              	.LVL28:
 212 0000 30B4     		push	{r4, r5}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 4, -8
 215              		.cfi_offset 5, -4
 216              	.LVL29:
 217              	.L12:
 711:..\..\FatFs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 712:..\..\FatFs/ff.c **** 	int r = 0;
 713:..\..\FatFs/ff.c **** 
 714:..\..\FatFs/ff.c **** 	do {
 715:..\..\FatFs/ff.c **** 		r = *d++ - *s++;
 218              		.loc 1 715 0 discriminator 2
 219 0002 451C     		adds	r5, r0, #1
 220              	.LVL30:
 221 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 222              	.LVL31:
 223 0006 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 224 0008 1B1A     		subs	r3, r3, r0
 225              	.LVL32:
 716:..\..\FatFs/ff.c **** 	} while (--cnt && r == 0);
 226              		.loc 1 716 0 discriminator 2
 227 000a 013A     		subs	r2, r2, #1
 228              	.LVL33:
 229 000c 04D0     		beq	.L11
 230 000e 4C1C     		adds	r4, r1, #1
 231              	.LVL34:
 715:..\..\FatFs/ff.c **** 	} while (--cnt && r == 0);
 232              		.loc 1 715 0 discriminator 1
 233 0010 2846     		mov	r0, r5
 234 0012 2146     		mov	r1, r4
 235              		.loc 1 716 0 discriminator 1
 236 0014 002B     		cmp	r3, #0
 237 0016 F4D0     		beq	.L12
 238              	.LVL35:
 239              	.L11:
 717:..\..\FatFs/ff.c **** 
 718:..\..\FatFs/ff.c **** 	return r;
 719:..\..\FatFs/ff.c **** }
 240              		.loc 1 719 0
 241 0018 1846     		mov	r0, r3
 242 001a 30BC     		pop	{r4, r5}
 243              		.cfi_restore 5
 244              		.cfi_restore 4
 245              		.cfi_def_cfa_offset 0
 246              	.LVL36:
 247 001c 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE6:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 18


 250              		.size	mem_cmp, .-mem_cmp
 251 001e 00BF     		.section	.text.chk_chr,"ax",%progbits
 252              		.align	2
 253              		.thumb
 254              		.thumb_func
 255              		.type	chk_chr, %function
 256              	chk_chr:
 257              	.LFB7:
 720:..\..\FatFs/ff.c **** 
 721:..\..\FatFs/ff.c **** 
 722:..\..\FatFs/ff.c **** /* Check if chr is contained in the string */
 723:..\..\FatFs/ff.c **** static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
 724:..\..\FatFs/ff.c **** {
 258              		.loc 1 724 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL37:
 725:..\..\FatFs/ff.c **** 	while (*str && *str != chr) str++;
 264              		.loc 1 725 0
 265 0000 00E0     		b	.L15
 266              	.L17:
 267              		.loc 1 725 0 is_stmt 0 discriminator 3
 268 0002 0130     		adds	r0, r0, #1
 269              	.LVL38:
 270              	.L15:
 271              		.loc 1 725 0 discriminator 1
 272 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 273 0006 0BB1     		cbz	r3, .L16
 274              		.loc 1 725 0 discriminator 2
 275 0008 8B42     		cmp	r3, r1
 276 000a FAD1     		bne	.L17
 277              	.L16:
 726:..\..\FatFs/ff.c **** 	return *str;
 727:..\..\FatFs/ff.c **** }
 278              		.loc 1 727 0 is_stmt 1
 279 000c 1846     		mov	r0, r3
 280              	.LVL39:
 281 000e 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE7:
 284              		.size	chk_chr, .-chk_chr
 285              		.section	.text.dbc_1st,"ax",%progbits
 286              		.align	2
 287              		.thumb
 288              		.thumb_func
 289              		.type	dbc_1st, %function
 290              	dbc_1st:
 291              	.LFB8:
 728:..\..\FatFs/ff.c **** 
 729:..\..\FatFs/ff.c **** 
 730:..\..\FatFs/ff.c **** /* Test if the byte is DBC 1st byte */
 731:..\..\FatFs/ff.c **** static int dbc_1st (BYTE c)
 732:..\..\FatFs/ff.c **** {
 292              		.loc 1 732 0
 293              		.cfi_startproc
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 19


 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297              	.LVL40:
 733:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 734:..\..\FatFs/ff.c **** 	if (DbcTbl && c >= DbcTbl[0]) {
 735:..\..\FatFs/ff.c **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 736:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 737:..\..\FatFs/ff.c **** 	}
 738:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 739:..\..\FatFs/ff.c **** 	if (c >= DbcTbl[0]) {
 298              		.loc 1 739 0
 299 0000 8028     		cmp	r0, #128
 300 0002 07D9     		bls	.L20
 740:..\..\FatFs/ff.c **** 		if (c <= DbcTbl[1]) return 1;
 301              		.loc 1 740 0
 302 0004 9F28     		cmp	r0, #159
 303 0006 07D9     		bls	.L21
 741:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 304              		.loc 1 741 0
 305 0008 DF28     		cmp	r0, #223
 306 000a 07D9     		bls	.L22
 307              		.loc 1 741 0 is_stmt 0 discriminator 1
 308 000c FC28     		cmp	r0, #252
 309 000e 07D9     		bls	.L23
 742:..\..\FatFs/ff.c **** 	}
 743:..\..\FatFs/ff.c **** #else						/* SBCS fixed code page */
 744:..\..\FatFs/ff.c **** 	if (c != 0) return 0;	/* Always false */
 745:..\..\FatFs/ff.c **** #endif
 746:..\..\FatFs/ff.c **** 	return 0;
 310              		.loc 1 746 0 is_stmt 1
 311 0010 0020     		movs	r0, #0
 312              	.LVL41:
 313 0012 7047     		bx	lr
 314              	.LVL42:
 315              	.L20:
 316 0014 0020     		movs	r0, #0
 317              	.LVL43:
 318 0016 7047     		bx	lr
 319              	.LVL44:
 320              	.L21:
 740:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 321              		.loc 1 740 0
 322 0018 0120     		movs	r0, #1
 323              	.LVL45:
 324 001a 7047     		bx	lr
 325              	.LVL46:
 326              	.L22:
 327              		.loc 1 746 0
 328 001c 0020     		movs	r0, #0
 329              	.LVL47:
 330 001e 7047     		bx	lr
 331              	.LVL48:
 332              	.L23:
 741:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 333              		.loc 1 741 0
 334 0020 0120     		movs	r0, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 20


 335              	.LVL49:
 747:..\..\FatFs/ff.c **** }
 336              		.loc 1 747 0
 337 0022 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE8:
 340              		.size	dbc_1st, .-dbc_1st
 341              		.section	.text.dbc_2nd,"ax",%progbits
 342              		.align	2
 343              		.thumb
 344              		.thumb_func
 345              		.type	dbc_2nd, %function
 346              	dbc_2nd:
 347              	.LFB9:
 748:..\..\FatFs/ff.c **** 
 749:..\..\FatFs/ff.c **** 
 750:..\..\FatFs/ff.c **** /* Test if the byte is DBC 2nd byte */
 751:..\..\FatFs/ff.c **** static int dbc_2nd (BYTE c)
 752:..\..\FatFs/ff.c **** {
 348              		.loc 1 752 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL50:
 753:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 754:..\..\FatFs/ff.c **** 	if (DbcTbl && c >= DbcTbl[4]) {
 755:..\..\FatFs/ff.c **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 756:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 757:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 758:..\..\FatFs/ff.c **** 	}
 759:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 760:..\..\FatFs/ff.c **** 	if (c >= DbcTbl[4]) {
 354              		.loc 1 760 0
 355 0000 3F28     		cmp	r0, #63
 356 0002 08D9     		bls	.L27
 761:..\..\FatFs/ff.c **** 		if (c <= DbcTbl[5]) return 1;
 357              		.loc 1 761 0
 358 0004 7E28     		cmp	r0, #126
 359 0006 08D9     		bls	.L28
 762:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 360              		.loc 1 762 0
 361 0008 8028     		cmp	r0, #128
 362 000a 01D3     		bcc	.L26
 363              		.loc 1 762 0 is_stmt 0 discriminator 1
 364 000c FC28     		cmp	r0, #252
 365 000e 06D9     		bls	.L29
 366              	.L26:
 763:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 367              		.loc 1 763 0 is_stmt 1 discriminator 1
 368 0010 38B1     		cbz	r0, .L30
 764:..\..\FatFs/ff.c **** 	}
 765:..\..\FatFs/ff.c **** #else						/* SBCS fixed code page */
 766:..\..\FatFs/ff.c **** 	if (c != 0) return 0;	/* Always false */
 767:..\..\FatFs/ff.c **** #endif
 768:..\..\FatFs/ff.c **** 	return 0;
 369              		.loc 1 768 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 21


 370 0012 0020     		movs	r0, #0
 371              	.LVL51:
 372 0014 7047     		bx	lr
 373              	.LVL52:
 374              	.L27:
 375 0016 0020     		movs	r0, #0
 376              	.LVL53:
 377 0018 7047     		bx	lr
 378              	.LVL54:
 379              	.L28:
 761:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 380              		.loc 1 761 0
 381 001a 0120     		movs	r0, #1
 382              	.LVL55:
 383 001c 7047     		bx	lr
 384              	.LVL56:
 385              	.L29:
 762:..\..\FatFs/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 386              		.loc 1 762 0
 387 001e 0120     		movs	r0, #1
 388              	.LVL57:
 389 0020 7047     		bx	lr
 390              	.LVL58:
 391              	.L30:
 763:..\..\FatFs/ff.c **** 	}
 392              		.loc 1 763 0
 393 0022 0120     		movs	r0, #1
 394              	.LVL59:
 769:..\..\FatFs/ff.c **** }
 395              		.loc 1 769 0
 396 0024 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE9:
 399              		.size	dbc_2nd, .-dbc_2nd
 400 0026 00BF     		.section	.text.clst2sect,"ax",%progbits
 401              		.align	2
 402              		.thumb
 403              		.thumb_func
 404              		.type	clst2sect, %function
 405              	clst2sect:
 406              	.LFB13:
 770:..\..\FatFs/ff.c **** 
 771:..\..\FatFs/ff.c **** 
 772:..\..\FatFs/ff.c **** #if FF_USE_LFN
 773:..\..\FatFs/ff.c **** 
 774:..\..\FatFs/ff.c **** /* Get a Unicode code point from the TCHAR string in defined API encodeing */
 775:..\..\FatFs/ff.c **** static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0x
 776:..\..\FatFs/ff.c **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 777:..\..\FatFs/ff.c **** )
 778:..\..\FatFs/ff.c **** {
 779:..\..\FatFs/ff.c **** 	DWORD uc;
 780:..\..\FatFs/ff.c **** 	const TCHAR *p = *str;
 781:..\..\FatFs/ff.c **** 
 782:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 783:..\..\FatFs/ff.c **** 	WCHAR wc;
 784:..\..\FatFs/ff.c **** 
 785:..\..\FatFs/ff.c **** 	uc = *p++;	/* Get a unit */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 22


 786:..\..\FatFs/ff.c **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 787:..\..\FatFs/ff.c **** 		wc = *p++;		/* Get low surrogate */
 788:..\..\FatFs/ff.c **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 789:..\..\FatFs/ff.c **** 		uc = uc << 16 | wc;
 790:..\..\FatFs/ff.c **** 	}
 791:..\..\FatFs/ff.c **** 
 792:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 793:..\..\FatFs/ff.c **** 	BYTE b;
 794:..\..\FatFs/ff.c **** 	int nf;
 795:..\..\FatFs/ff.c **** 
 796:..\..\FatFs/ff.c **** 	uc = (BYTE)*p++;	/* Get an encoding unit */
 797:..\..\FatFs/ff.c **** 	if (uc & 0x80) {	/* Multiple byte code? */
 798:..\..\FatFs/ff.c **** 		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 799:..\..\FatFs/ff.c **** 			uc &= 0x1F; nf = 1;
 800:..\..\FatFs/ff.c **** 		} else {
 801:..\..\FatFs/ff.c **** 			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 802:..\..\FatFs/ff.c **** 				uc &= 0x0F; nf = 2;
 803:..\..\FatFs/ff.c **** 			} else {
 804:..\..\FatFs/ff.c **** 				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 805:..\..\FatFs/ff.c **** 					uc &= 0x07; nf = 3;
 806:..\..\FatFs/ff.c **** 				} else {					/* Wrong sequence */
 807:..\..\FatFs/ff.c **** 					return 0xFFFFFFFF;
 808:..\..\FatFs/ff.c **** 				}
 809:..\..\FatFs/ff.c **** 			}
 810:..\..\FatFs/ff.c **** 		}
 811:..\..\FatFs/ff.c **** 		do {	/* Get trailing bytes */
 812:..\..\FatFs/ff.c **** 			b = (BYTE)*p++;
 813:..\..\FatFs/ff.c **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 814:..\..\FatFs/ff.c **** 			uc = uc << 6 | (b & 0x3F);
 815:..\..\FatFs/ff.c **** 		} while (--nf != 0);
 816:..\..\FatFs/ff.c **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 817:..\..\FatFs/ff.c **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 818:..\..\FatFs/ff.c **** 	}
 819:..\..\FatFs/ff.c **** 
 820:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 821:..\..\FatFs/ff.c **** 	uc = (TCHAR)*p++;	/* Get a unit */
 822:..\..\FatFs/ff.c **** 	if (uc >= 0x110000 || IsSurrogate(uc)) return 0xFFFFFFFF;	/* Wrong code? */
 823:..\..\FatFs/ff.c **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 824:..\..\FatFs/ff.c **** 
 825:..\..\FatFs/ff.c **** #else		/* ANSI/OEM input */
 826:..\..\FatFs/ff.c **** 	BYTE b;
 827:..\..\FatFs/ff.c **** 	WCHAR wc;
 828:..\..\FatFs/ff.c **** 
 829:..\..\FatFs/ff.c **** 	wc = (BYTE)*p++;			/* Get a byte */
 830:..\..\FatFs/ff.c **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 831:..\..\FatFs/ff.c **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 832:..\..\FatFs/ff.c **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 833:..\..\FatFs/ff.c **** 		wc = (wc << 8) + b;		/* Make a DBC */
 834:..\..\FatFs/ff.c **** 	}
 835:..\..\FatFs/ff.c **** 	if (wc != 0) {
 836:..\..\FatFs/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 837:..\..\FatFs/ff.c **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 838:..\..\FatFs/ff.c **** 	}
 839:..\..\FatFs/ff.c **** 	uc = wc;
 840:..\..\FatFs/ff.c **** 
 841:..\..\FatFs/ff.c **** #endif
 842:..\..\FatFs/ff.c **** 	*str = p;	/* Next read pointer */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 23


 843:..\..\FatFs/ff.c **** 	return uc;
 844:..\..\FatFs/ff.c **** }
 845:..\..\FatFs/ff.c **** 
 846:..\..\FatFs/ff.c **** 
 847:..\..\FatFs/ff.c **** /* Output a TCHAR string in defined API encoding */
 848:..\..\FatFs/ff.c **** static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 849:..\..\FatFs/ff.c **** 	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
 850:..\..\FatFs/ff.c **** 	TCHAR* buf,	/* Output buffer */
 851:..\..\FatFs/ff.c **** 	UINT szb	/* Size of the buffer */
 852:..\..\FatFs/ff.c **** )
 853:..\..\FatFs/ff.c **** {
 854:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 855:..\..\FatFs/ff.c **** 	WCHAR hs, wc;
 856:..\..\FatFs/ff.c **** 
 857:..\..\FatFs/ff.c **** 	hs = (WCHAR)(chr >> 16);
 858:..\..\FatFs/ff.c **** 	wc = (WCHAR)chr;
 859:..\..\FatFs/ff.c **** 	if (hs == 0) {	/* Single encoding unit? */
 860:..\..\FatFs/ff.c **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 861:..\..\FatFs/ff.c **** 		*buf = wc;
 862:..\..\FatFs/ff.c **** 		return 1;
 863:..\..\FatFs/ff.c **** 	}
 864:..\..\FatFs/ff.c **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 865:..\..\FatFs/ff.c **** 	*buf++ = hs;
 866:..\..\FatFs/ff.c **** 	*buf++ = wc;
 867:..\..\FatFs/ff.c **** 	return 2;
 868:..\..\FatFs/ff.c **** 
 869:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 870:..\..\FatFs/ff.c **** 	DWORD hc;
 871:..\..\FatFs/ff.c **** 
 872:..\..\FatFs/ff.c **** 	if (chr < 0x80) {	/* Single byte code? */
 873:..\..\FatFs/ff.c **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 874:..\..\FatFs/ff.c **** 		*buf = (TCHAR)chr;
 875:..\..\FatFs/ff.c **** 		return 1;
 876:..\..\FatFs/ff.c **** 	}
 877:..\..\FatFs/ff.c **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 878:..\..\FatFs/ff.c **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 879:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 880:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 881:..\..\FatFs/ff.c **** 		return 2;
 882:..\..\FatFs/ff.c **** 	}
 883:..\..\FatFs/ff.c **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 884:..\..\FatFs/ff.c **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 885:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 886:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 887:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 888:..\..\FatFs/ff.c **** 		return 3;
 889:..\..\FatFs/ff.c **** 	}
 890:..\..\FatFs/ff.c **** 	/* 4-byte sequence */
 891:..\..\FatFs/ff.c **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 892:..\..\FatFs/ff.c **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 893:..\..\FatFs/ff.c **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 894:..\..\FatFs/ff.c **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 895:..\..\FatFs/ff.c **** 	chr = (hc | chr) + 0x10000;
 896:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 897:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 898:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 899:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 24


 900:..\..\FatFs/ff.c **** 	return 4;
 901:..\..\FatFs/ff.c **** 
 902:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 903:..\..\FatFs/ff.c **** 	DWORD hc;
 904:..\..\FatFs/ff.c **** 
 905:..\..\FatFs/ff.c **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 906:..\..\FatFs/ff.c **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 907:..\..\FatFs/ff.c **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 908:..\..\FatFs/ff.c **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 909:..\..\FatFs/ff.c **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 910:..\..\FatFs/ff.c **** 		chr = (hc | chr) + 0x10000;
 911:..\..\FatFs/ff.c **** 	}
 912:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)chr;
 913:..\..\FatFs/ff.c **** 	return 1;
 914:..\..\FatFs/ff.c **** 
 915:..\..\FatFs/ff.c **** #else						/* ANSI/OEM output */
 916:..\..\FatFs/ff.c **** 	WCHAR wc;
 917:..\..\FatFs/ff.c **** 
 918:..\..\FatFs/ff.c **** 	wc = ff_uni2oem(chr, CODEPAGE);
 919:..\..\FatFs/ff.c **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 920:..\..\FatFs/ff.c **** 		if (szb < 2) return 0;
 921:..\..\FatFs/ff.c **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 922:..\..\FatFs/ff.c **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 923:..\..\FatFs/ff.c **** 		return 2;
 924:..\..\FatFs/ff.c **** 	}
 925:..\..\FatFs/ff.c **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 926:..\..\FatFs/ff.c **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 927:..\..\FatFs/ff.c **** 	return 1;
 928:..\..\FatFs/ff.c **** #endif
 929:..\..\FatFs/ff.c **** }
 930:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN */
 931:..\..\FatFs/ff.c **** 
 932:..\..\FatFs/ff.c **** 
 933:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 934:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 935:..\..\FatFs/ff.c **** /* Request/Release grant to access the volume                            */
 936:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 937:..\..\FatFs/ff.c **** static int lock_fs (		/* 1:Ok, 0:timeout */
 938:..\..\FatFs/ff.c **** 	FATFS* fs		/* Filesystem object */
 939:..\..\FatFs/ff.c **** )
 940:..\..\FatFs/ff.c **** {
 941:..\..\FatFs/ff.c **** 	return ff_req_grant(fs->sobj);
 942:..\..\FatFs/ff.c **** }
 943:..\..\FatFs/ff.c **** 
 944:..\..\FatFs/ff.c **** 
 945:..\..\FatFs/ff.c **** static void unlock_fs (
 946:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Filesystem object */
 947:..\..\FatFs/ff.c **** 	FRESULT res		/* Result code to be returned */
 948:..\..\FatFs/ff.c **** )
 949:..\..\FatFs/ff.c **** {
 950:..\..\FatFs/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 951:..\..\FatFs/ff.c **** 		ff_rel_grant(fs->sobj);
 952:..\..\FatFs/ff.c **** 	}
 953:..\..\FatFs/ff.c **** }
 954:..\..\FatFs/ff.c **** 
 955:..\..\FatFs/ff.c **** #endif
 956:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 25


 957:..\..\FatFs/ff.c **** 
 958:..\..\FatFs/ff.c **** 
 959:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 960:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 961:..\..\FatFs/ff.c **** /* File lock control functions                                           */
 962:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
 963:..\..\FatFs/ff.c **** 
 964:..\..\FatFs/ff.c **** static FRESULT chk_lock (	/* Check if the file can be accessed */
 965:..\..\FatFs/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 966:..\..\FatFs/ff.c **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 967:..\..\FatFs/ff.c **** )
 968:..\..\FatFs/ff.c **** {
 969:..\..\FatFs/ff.c **** 	UINT i, be;
 970:..\..\FatFs/ff.c **** 
 971:..\..\FatFs/ff.c **** 	/* Search open object table for the object */
 972:..\..\FatFs/ff.c **** 	be = 0;
 973:..\..\FatFs/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 974:..\..\FatFs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 975:..\..\FatFs/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 976:..\..\FatFs/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 977:..\..\FatFs/ff.c **** 				Files[i].ofs == dp->dptr) break;
 978:..\..\FatFs/ff.c **** 		} else {			/* Blank entry */
 979:..\..\FatFs/ff.c **** 			be = 1;
 980:..\..\FatFs/ff.c **** 		}
 981:..\..\FatFs/ff.c **** 	}
 982:..\..\FatFs/ff.c **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 983:..\..\FatFs/ff.c **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 984:..\..\FatFs/ff.c **** 	}
 985:..\..\FatFs/ff.c **** 
 986:..\..\FatFs/ff.c **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 987:..\..\FatFs/ff.c **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 988:..\..\FatFs/ff.c **** }
 989:..\..\FatFs/ff.c **** 
 990:..\..\FatFs/ff.c **** 
 991:..\..\FatFs/ff.c **** static int enq_lock (void)	/* Check if an entry is available for a new object */
 992:..\..\FatFs/ff.c **** {
 993:..\..\FatFs/ff.c **** 	UINT i;
 994:..\..\FatFs/ff.c **** 
 995:..\..\FatFs/ff.c **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 996:..\..\FatFs/ff.c **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 997:..\..\FatFs/ff.c **** }
 998:..\..\FatFs/ff.c **** 
 999:..\..\FatFs/ff.c **** 
1000:..\..\FatFs/ff.c **** static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
1001:..\..\FatFs/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
1002:..\..\FatFs/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
1003:..\..\FatFs/ff.c **** )
1004:..\..\FatFs/ff.c **** {
1005:..\..\FatFs/ff.c **** 	UINT i;
1006:..\..\FatFs/ff.c **** 
1007:..\..\FatFs/ff.c **** 
1008:..\..\FatFs/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
1009:..\..\FatFs/ff.c **** 		if (Files[i].fs == dp->obj.fs
1010:..\..\FatFs/ff.c **** 		 && Files[i].clu == dp->obj.sclust
1011:..\..\FatFs/ff.c **** 		 && Files[i].ofs == dp->dptr) break;
1012:..\..\FatFs/ff.c **** 	}
1013:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 26


1014:..\..\FatFs/ff.c **** 	if (i == FF_FS_LOCK) {				/* Not opened. Register it as new. */
1015:..\..\FatFs/ff.c **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
1016:..\..\FatFs/ff.c **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
1017:..\..\FatFs/ff.c **** 		Files[i].fs = dp->obj.fs;
1018:..\..\FatFs/ff.c **** 		Files[i].clu = dp->obj.sclust;
1019:..\..\FatFs/ff.c **** 		Files[i].ofs = dp->dptr;
1020:..\..\FatFs/ff.c **** 		Files[i].ctr = 0;
1021:..\..\FatFs/ff.c **** 	}
1022:..\..\FatFs/ff.c **** 
1023:..\..\FatFs/ff.c **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
1024:..\..\FatFs/ff.c **** 
1025:..\..\FatFs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
1026:..\..\FatFs/ff.c **** 
1027:..\..\FatFs/ff.c **** 	return i + 1;	/* Index number origin from 1 */
1028:..\..\FatFs/ff.c **** }
1029:..\..\FatFs/ff.c **** 
1030:..\..\FatFs/ff.c **** 
1031:..\..\FatFs/ff.c **** static FRESULT dec_lock (	/* Decrement object open counter */
1032:..\..\FatFs/ff.c **** 	UINT i			/* Semaphore index (1..) */
1033:..\..\FatFs/ff.c **** )
1034:..\..\FatFs/ff.c **** {
1035:..\..\FatFs/ff.c **** 	WORD n;
1036:..\..\FatFs/ff.c **** 	FRESULT res;
1037:..\..\FatFs/ff.c **** 
1038:..\..\FatFs/ff.c **** 
1039:..\..\FatFs/ff.c **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
1040:..\..\FatFs/ff.c **** 		n = Files[i].ctr;
1041:..\..\FatFs/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
1042:..\..\FatFs/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
1043:..\..\FatFs/ff.c **** 		Files[i].ctr = n;
1044:..\..\FatFs/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
1045:..\..\FatFs/ff.c **** 		res = FR_OK;
1046:..\..\FatFs/ff.c **** 	} else {
1047:..\..\FatFs/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
1048:..\..\FatFs/ff.c **** 	}
1049:..\..\FatFs/ff.c **** 	return res;
1050:..\..\FatFs/ff.c **** }
1051:..\..\FatFs/ff.c **** 
1052:..\..\FatFs/ff.c **** 
1053:..\..\FatFs/ff.c **** static void clear_lock (	/* Clear lock entries of the volume */
1054:..\..\FatFs/ff.c **** 	FATFS *fs
1055:..\..\FatFs/ff.c **** )
1056:..\..\FatFs/ff.c **** {
1057:..\..\FatFs/ff.c **** 	UINT i;
1058:..\..\FatFs/ff.c **** 
1059:..\..\FatFs/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
1060:..\..\FatFs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
1061:..\..\FatFs/ff.c **** 	}
1062:..\..\FatFs/ff.c **** }
1063:..\..\FatFs/ff.c **** 
1064:..\..\FatFs/ff.c **** #endif	/* FF_FS_LOCK != 0 */
1065:..\..\FatFs/ff.c **** 
1066:..\..\FatFs/ff.c **** 
1067:..\..\FatFs/ff.c **** 
1068:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1069:..\..\FatFs/ff.c **** /* Move/Flush disk access window in the filesystem object                */
1070:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 27


1071:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1072:..\..\FatFs/ff.c **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1073:..\..\FatFs/ff.c **** 	FATFS* fs			/* Filesystem object */
1074:..\..\FatFs/ff.c **** )
1075:..\..\FatFs/ff.c **** {
1076:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
1077:..\..\FatFs/ff.c **** 
1078:..\..\FatFs/ff.c **** 
1079:..\..\FatFs/ff.c **** 	if (fs->wflag) {	/* Is the disk access window dirty? */
1080:..\..\FatFs/ff.c **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
1081:..\..\FatFs/ff.c **** 			fs->wflag = 0;	/* Clear window dirty flag */
1082:..\..\FatFs/ff.c **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1083:..\..\FatFs/ff.c **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
1084:..\..\FatFs/ff.c **** 			}
1085:..\..\FatFs/ff.c **** 		} else {
1086:..\..\FatFs/ff.c **** 			res = FR_DISK_ERR;
1087:..\..\FatFs/ff.c **** 		}
1088:..\..\FatFs/ff.c **** 	}
1089:..\..\FatFs/ff.c **** 	return res;
1090:..\..\FatFs/ff.c **** }
1091:..\..\FatFs/ff.c **** #endif
1092:..\..\FatFs/ff.c **** 
1093:..\..\FatFs/ff.c **** 
1094:..\..\FatFs/ff.c **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1095:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Filesystem object */
1096:..\..\FatFs/ff.c **** 	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
1097:..\..\FatFs/ff.c **** )
1098:..\..\FatFs/ff.c **** {
1099:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
1100:..\..\FatFs/ff.c **** 
1101:..\..\FatFs/ff.c **** 
1102:..\..\FatFs/ff.c **** 	if (sect != fs->winsect) {	/* Window offset changed? */
1103:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1104:..\..\FatFs/ff.c **** 		res = sync_window(fs);		/* Flush the window */
1105:..\..\FatFs/ff.c **** #endif
1106:..\..\FatFs/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
1107:..\..\FatFs/ff.c **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
1108:..\..\FatFs/ff.c **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
1109:..\..\FatFs/ff.c **** 				res = FR_DISK_ERR;
1110:..\..\FatFs/ff.c **** 			}
1111:..\..\FatFs/ff.c **** 			fs->winsect = sect;
1112:..\..\FatFs/ff.c **** 		}
1113:..\..\FatFs/ff.c **** 	}
1114:..\..\FatFs/ff.c **** 	return res;
1115:..\..\FatFs/ff.c **** }
1116:..\..\FatFs/ff.c **** 
1117:..\..\FatFs/ff.c **** 
1118:..\..\FatFs/ff.c **** 
1119:..\..\FatFs/ff.c **** 
1120:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1121:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1122:..\..\FatFs/ff.c **** /* Synchronize filesystem and data on the storage                        */
1123:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1124:..\..\FatFs/ff.c **** 
1125:..\..\FatFs/ff.c **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1126:..\..\FatFs/ff.c **** 	FATFS* fs		/* Filesystem object */
1127:..\..\FatFs/ff.c **** )
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 28


1128:..\..\FatFs/ff.c **** {
1129:..\..\FatFs/ff.c **** 	FRESULT res;
1130:..\..\FatFs/ff.c **** 
1131:..\..\FatFs/ff.c **** 
1132:..\..\FatFs/ff.c **** 	res = sync_window(fs);
1133:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
1134:..\..\FatFs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1135:..\..\FatFs/ff.c **** 			/* Create FSInfo structure */
1136:..\..\FatFs/ff.c **** 			mem_set(fs->win, 0, sizeof fs->win);
1137:..\..\FatFs/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
1138:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1139:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1140:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1141:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1142:..\..\FatFs/ff.c **** 			/* Write it into the FSInfo sector */
1143:..\..\FatFs/ff.c **** 			fs->winsect = fs->volbase + 1;
1144:..\..\FatFs/ff.c **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1145:..\..\FatFs/ff.c **** 			fs->fsi_flag = 0;
1146:..\..\FatFs/ff.c **** 		}
1147:..\..\FatFs/ff.c **** 		/* Make sure that no pending write process in the lower layer */
1148:..\..\FatFs/ff.c **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1149:..\..\FatFs/ff.c **** 	}
1150:..\..\FatFs/ff.c **** 
1151:..\..\FatFs/ff.c **** 	return res;
1152:..\..\FatFs/ff.c **** }
1153:..\..\FatFs/ff.c **** 
1154:..\..\FatFs/ff.c **** #endif
1155:..\..\FatFs/ff.c **** 
1156:..\..\FatFs/ff.c **** 
1157:..\..\FatFs/ff.c **** 
1158:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1159:..\..\FatFs/ff.c **** /* Get physical sector number from cluster number                        */
1160:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1161:..\..\FatFs/ff.c **** 
1162:..\..\FatFs/ff.c **** static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1163:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Filesystem object */
1164:..\..\FatFs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
1165:..\..\FatFs/ff.c **** )
1166:..\..\FatFs/ff.c **** {
 407              		.loc 1 1166 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL60:
1167:..\..\FatFs/ff.c **** 	clst -= 2;		/* Cluster number is origin from 2 */
 413              		.loc 1 1167 0
 414 0000 0239     		subs	r1, r1, #2
 415              	.LVL61:
1168:..\..\FatFs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 416              		.loc 1 1168 0
 417 0002 8369     		ldr	r3, [r0, #24]
 418 0004 023B     		subs	r3, r3, #2
 419 0006 9942     		cmp	r1, r3
 420 0008 04D2     		bcs	.L33
1169:..\..\FatFs/ff.c **** 	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 421              		.loc 1 1169 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 29


 422 000a C36A     		ldr	r3, [r0, #44]
 423 000c 4089     		ldrh	r0, [r0, #10]
 424              	.LVL62:
 425 000e 00FB0130 		mla	r0, r0, r1, r3
 426 0012 7047     		bx	lr
 427              	.LVL63:
 428              	.L33:
1168:..\..\FatFs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 429              		.loc 1 1168 0
 430 0014 0020     		movs	r0, #0
 431              	.LVL64:
1170:..\..\FatFs/ff.c **** }
 432              		.loc 1 1170 0
 433 0016 7047     		bx	lr
 434              		.cfi_endproc
 435              	.LFE13:
 436              		.size	clst2sect, .-clst2sect
 437              		.section	.text.ld_clust,"ax",%progbits
 438              		.align	2
 439              		.thumb
 440              		.thumb_func
 441              		.type	ld_clust, %function
 442              	ld_clust:
 443              	.LFB22:
1171:..\..\FatFs/ff.c **** 
1172:..\..\FatFs/ff.c **** 
1173:..\..\FatFs/ff.c **** 
1174:..\..\FatFs/ff.c **** 
1175:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1176:..\..\FatFs/ff.c **** /* FAT access - Read value of a FAT entry                                */
1177:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1178:..\..\FatFs/ff.c **** 
1179:..\..\FatFs/ff.c **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1180:..\..\FatFs/ff.c **** 	FFOBJID* obj,	/* Corresponding object */
1181:..\..\FatFs/ff.c **** 	DWORD clst		/* Cluster number to get the value */
1182:..\..\FatFs/ff.c **** )
1183:..\..\FatFs/ff.c **** {
1184:..\..\FatFs/ff.c **** 	UINT wc, bc;
1185:..\..\FatFs/ff.c **** 	DWORD val;
1186:..\..\FatFs/ff.c **** 	FATFS *fs = obj->fs;
1187:..\..\FatFs/ff.c **** 
1188:..\..\FatFs/ff.c **** 
1189:..\..\FatFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1190:..\..\FatFs/ff.c **** 		val = 1;	/* Internal error */
1191:..\..\FatFs/ff.c **** 
1192:..\..\FatFs/ff.c **** 	} else {
1193:..\..\FatFs/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1194:..\..\FatFs/ff.c **** 
1195:..\..\FatFs/ff.c **** 		switch (fs->fs_type) {
1196:..\..\FatFs/ff.c **** 		case FS_FAT12 :
1197:..\..\FatFs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1198:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1199:..\..\FatFs/ff.c **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1200:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1201:..\..\FatFs/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1202:..\..\FatFs/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1203:..\..\FatFs/ff.c **** 			break;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 30


1204:..\..\FatFs/ff.c **** 
1205:..\..\FatFs/ff.c **** 		case FS_FAT16 :
1206:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1207:..\..\FatFs/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1208:..\..\FatFs/ff.c **** 			break;
1209:..\..\FatFs/ff.c **** 
1210:..\..\FatFs/ff.c **** 		case FS_FAT32 :
1211:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1212:..\..\FatFs/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
1213:..\..\FatFs/ff.c **** 			break;
1214:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
1215:..\..\FatFs/ff.c **** 		case FS_EXFAT :
1216:..\..\FatFs/ff.c **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1217:..\..\FatFs/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1218:..\..\FatFs/ff.c **** 				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters -
1219:..\..\FatFs/ff.c **** 
1220:..\..\FatFs/ff.c **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1221:..\..\FatFs/ff.c **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1222:..\..\FatFs/ff.c **** 					break;
1223:..\..\FatFs/ff.c **** 				}
1224:..\..\FatFs/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1225:..\..\FatFs/ff.c **** 					val = clst + 1; 	/* Generate the value */
1226:..\..\FatFs/ff.c **** 					break;
1227:..\..\FatFs/ff.c **** 				}
1228:..\..\FatFs/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1229:..\..\FatFs/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1230:..\..\FatFs/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1231:..\..\FatFs/ff.c **** 					} else {
1232:..\..\FatFs/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1233:..\..\FatFs/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1234:..\..\FatFs/ff.c **** 					}
1235:..\..\FatFs/ff.c **** 					break;
1236:..\..\FatFs/ff.c **** 				}
1237:..\..\FatFs/ff.c **** 			}
1238:..\..\FatFs/ff.c **** 			/* go to default */
1239:..\..\FatFs/ff.c **** #endif
1240:..\..\FatFs/ff.c **** 		default:
1241:..\..\FatFs/ff.c **** 			val = 1;	/* Internal error */
1242:..\..\FatFs/ff.c **** 		}
1243:..\..\FatFs/ff.c **** 	}
1244:..\..\FatFs/ff.c **** 
1245:..\..\FatFs/ff.c **** 	return val;
1246:..\..\FatFs/ff.c **** }
1247:..\..\FatFs/ff.c **** 
1248:..\..\FatFs/ff.c **** 
1249:..\..\FatFs/ff.c **** 
1250:..\..\FatFs/ff.c **** 
1251:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1252:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1253:..\..\FatFs/ff.c **** /* FAT access - Change value of a FAT entry                              */
1254:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1255:..\..\FatFs/ff.c **** 
1256:..\..\FatFs/ff.c **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1257:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Corresponding filesystem object */
1258:..\..\FatFs/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1259:..\..\FatFs/ff.c **** 	DWORD val		/* New value to be set to the entry */
1260:..\..\FatFs/ff.c **** )
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 31


1261:..\..\FatFs/ff.c **** {
1262:..\..\FatFs/ff.c **** 	UINT bc;
1263:..\..\FatFs/ff.c **** 	BYTE *p;
1264:..\..\FatFs/ff.c **** 	FRESULT res = FR_INT_ERR;
1265:..\..\FatFs/ff.c **** 
1266:..\..\FatFs/ff.c **** 
1267:..\..\FatFs/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1268:..\..\FatFs/ff.c **** 		switch (fs->fs_type) {
1269:..\..\FatFs/ff.c **** 		case FS_FAT12 :
1270:..\..\FatFs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1271:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1272:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
1273:..\..\FatFs/ff.c **** 			p = fs->win + bc++ % SS(fs);
1274:..\..\FatFs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
1275:..\..\FatFs/ff.c **** 			fs->wflag = 1;
1276:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1277:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
1278:..\..\FatFs/ff.c **** 			p = fs->win + bc % SS(fs);
1279:..\..\FatFs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
1280:..\..\FatFs/ff.c **** 			fs->wflag = 1;
1281:..\..\FatFs/ff.c **** 			break;
1282:..\..\FatFs/ff.c **** 
1283:..\..\FatFs/ff.c **** 		case FS_FAT16 :
1284:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1285:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
1286:..\..\FatFs/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1287:..\..\FatFs/ff.c **** 			fs->wflag = 1;
1288:..\..\FatFs/ff.c **** 			break;
1289:..\..\FatFs/ff.c **** 
1290:..\..\FatFs/ff.c **** 		case FS_FAT32 :
1291:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
1292:..\..\FatFs/ff.c **** 		case FS_EXFAT :
1293:..\..\FatFs/ff.c **** #endif
1294:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1295:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
1296:..\..\FatFs/ff.c **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1297:..\..\FatFs/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1298:..\..\FatFs/ff.c **** 			}
1299:..\..\FatFs/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1300:..\..\FatFs/ff.c **** 			fs->wflag = 1;
1301:..\..\FatFs/ff.c **** 			break;
1302:..\..\FatFs/ff.c **** 		}
1303:..\..\FatFs/ff.c **** 	}
1304:..\..\FatFs/ff.c **** 	return res;
1305:..\..\FatFs/ff.c **** }
1306:..\..\FatFs/ff.c **** 
1307:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
1308:..\..\FatFs/ff.c **** 
1309:..\..\FatFs/ff.c **** 
1310:..\..\FatFs/ff.c **** 
1311:..\..\FatFs/ff.c **** 
1312:..\..\FatFs/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
1313:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1314:..\..\FatFs/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1315:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1316:..\..\FatFs/ff.c **** 
1317:..\..\FatFs/ff.c **** /*--------------------------------------*/
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 32


1318:..\..\FatFs/ff.c **** /* Find a contiguous free cluster block */
1319:..\..\FatFs/ff.c **** /*--------------------------------------*/
1320:..\..\FatFs/ff.c **** 
1321:..\..\FatFs/ff.c **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1322:..\..\FatFs/ff.c **** 	FATFS* fs,	/* Filesystem object */
1323:..\..\FatFs/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1324:..\..\FatFs/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1325:..\..\FatFs/ff.c **** )
1326:..\..\FatFs/ff.c **** {
1327:..\..\FatFs/ff.c **** 	BYTE bm, bv;
1328:..\..\FatFs/ff.c **** 	UINT i;
1329:..\..\FatFs/ff.c **** 	DWORD val, scl, ctr;
1330:..\..\FatFs/ff.c **** 
1331:..\..\FatFs/ff.c **** 
1332:..\..\FatFs/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1333:..\..\FatFs/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1334:..\..\FatFs/ff.c **** 	scl = val = clst; ctr = 0;
1335:..\..\FatFs/ff.c **** 	for (;;) {
1336:..\..\FatFs/ff.c **** 		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1337:..\..\FatFs/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1338:..\..\FatFs/ff.c **** 		do {
1339:..\..\FatFs/ff.c **** 			do {
1340:..\..\FatFs/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1341:..\..\FatFs/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1342:..\..\FatFs/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1343:..\..\FatFs/ff.c **** 				}
1344:..\..\FatFs/ff.c **** 				if (bv == 0) {	/* Is it a free cluster? */
1345:..\..\FatFs/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1346:..\..\FatFs/ff.c **** 				} else {
1347:..\..\FatFs/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1348:..\..\FatFs/ff.c **** 				}
1349:..\..\FatFs/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1350:..\..\FatFs/ff.c **** 			} while (bm != 0);
1351:..\..\FatFs/ff.c **** 			bm = 1;
1352:..\..\FatFs/ff.c **** 		} while (++i < SS(fs));
1353:..\..\FatFs/ff.c **** 	}
1354:..\..\FatFs/ff.c **** }
1355:..\..\FatFs/ff.c **** 
1356:..\..\FatFs/ff.c **** 
1357:..\..\FatFs/ff.c **** /*----------------------------------------*/
1358:..\..\FatFs/ff.c **** /* Set/Clear a block of allocation bitmap */
1359:..\..\FatFs/ff.c **** /*----------------------------------------*/
1360:..\..\FatFs/ff.c **** 
1361:..\..\FatFs/ff.c **** static FRESULT change_bitmap (
1362:..\..\FatFs/ff.c **** 	FATFS* fs,	/* Filesystem object */
1363:..\..\FatFs/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1364:..\..\FatFs/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1365:..\..\FatFs/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1366:..\..\FatFs/ff.c **** )
1367:..\..\FatFs/ff.c **** {
1368:..\..\FatFs/ff.c **** 	BYTE bm;
1369:..\..\FatFs/ff.c **** 	UINT i;
1370:..\..\FatFs/ff.c **** 	LBA_t sect;
1371:..\..\FatFs/ff.c **** 
1372:..\..\FatFs/ff.c **** 
1373:..\..\FatFs/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1374:..\..\FatFs/ff.c **** 	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 33


1375:..\..\FatFs/ff.c **** 	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
1376:..\..\FatFs/ff.c **** 	bm = 1 << (clst % 8);					/* Bit mask in the byte */
1377:..\..\FatFs/ff.c **** 	for (;;) {
1378:..\..\FatFs/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1379:..\..\FatFs/ff.c **** 		do {
1380:..\..\FatFs/ff.c **** 			do {
1381:..\..\FatFs/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1382:..\..\FatFs/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1383:..\..\FatFs/ff.c **** 				fs->wflag = 1;
1384:..\..\FatFs/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1385:..\..\FatFs/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1386:..\..\FatFs/ff.c **** 			bm = 1;
1387:..\..\FatFs/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1388:..\..\FatFs/ff.c **** 		i = 0;
1389:..\..\FatFs/ff.c **** 	}
1390:..\..\FatFs/ff.c **** }
1391:..\..\FatFs/ff.c **** 
1392:..\..\FatFs/ff.c **** 
1393:..\..\FatFs/ff.c **** /*---------------------------------------------*/
1394:..\..\FatFs/ff.c **** /* Fill the first fragment of the FAT chain    */
1395:..\..\FatFs/ff.c **** /*---------------------------------------------*/
1396:..\..\FatFs/ff.c **** 
1397:..\..\FatFs/ff.c **** static FRESULT fill_first_frag (
1398:..\..\FatFs/ff.c **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1399:..\..\FatFs/ff.c **** )
1400:..\..\FatFs/ff.c **** {
1401:..\..\FatFs/ff.c **** 	FRESULT res;
1402:..\..\FatFs/ff.c **** 	DWORD cl, n;
1403:..\..\FatFs/ff.c **** 
1404:..\..\FatFs/ff.c **** 
1405:..\..\FatFs/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1406:..\..\FatFs/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1407:..\..\FatFs/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1408:..\..\FatFs/ff.c **** 			if (res != FR_OK) return res;
1409:..\..\FatFs/ff.c **** 		}
1410:..\..\FatFs/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1411:..\..\FatFs/ff.c **** 	}
1412:..\..\FatFs/ff.c **** 	return FR_OK;
1413:..\..\FatFs/ff.c **** }
1414:..\..\FatFs/ff.c **** 
1415:..\..\FatFs/ff.c **** 
1416:..\..\FatFs/ff.c **** /*---------------------------------------------*/
1417:..\..\FatFs/ff.c **** /* Fill the last fragment of the FAT chain     */
1418:..\..\FatFs/ff.c **** /*---------------------------------------------*/
1419:..\..\FatFs/ff.c **** 
1420:..\..\FatFs/ff.c **** static FRESULT fill_last_frag (
1421:..\..\FatFs/ff.c **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1422:..\..\FatFs/ff.c **** 	DWORD lcl,		/* Last cluster of the fragment */
1423:..\..\FatFs/ff.c **** 	DWORD term		/* Value to set the last FAT entry */
1424:..\..\FatFs/ff.c **** )
1425:..\..\FatFs/ff.c **** {
1426:..\..\FatFs/ff.c **** 	FRESULT res;
1427:..\..\FatFs/ff.c **** 
1428:..\..\FatFs/ff.c **** 
1429:..\..\FatFs/ff.c **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1430:..\..\FatFs/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1431:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 34


1432:..\..\FatFs/ff.c **** 		obj->n_frag--;
1433:..\..\FatFs/ff.c **** 	}
1434:..\..\FatFs/ff.c **** 	return FR_OK;
1435:..\..\FatFs/ff.c **** }
1436:..\..\FatFs/ff.c **** 
1437:..\..\FatFs/ff.c **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1438:..\..\FatFs/ff.c **** 
1439:..\..\FatFs/ff.c **** 
1440:..\..\FatFs/ff.c **** 
1441:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1442:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1443:..\..\FatFs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1444:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1445:..\..\FatFs/ff.c **** 
1446:..\..\FatFs/ff.c **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1447:..\..\FatFs/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1448:..\..\FatFs/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1449:..\..\FatFs/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
1450:..\..\FatFs/ff.c **** )
1451:..\..\FatFs/ff.c **** {
1452:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
1453:..\..\FatFs/ff.c **** 	DWORD nxt;
1454:..\..\FatFs/ff.c **** 	FATFS *fs = obj->fs;
1455:..\..\FatFs/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1456:..\..\FatFs/ff.c **** 	DWORD scl = clst, ecl = clst;
1457:..\..\FatFs/ff.c **** #endif
1458:..\..\FatFs/ff.c **** #if FF_USE_TRIM
1459:..\..\FatFs/ff.c **** 	LBA_t rt[2];
1460:..\..\FatFs/ff.c **** #endif
1461:..\..\FatFs/ff.c **** 
1462:..\..\FatFs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1463:..\..\FatFs/ff.c **** 
1464:..\..\FatFs/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1465:..\..\FatFs/ff.c **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1466:..\..\FatFs/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1467:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
1468:..\..\FatFs/ff.c **** 	}
1469:..\..\FatFs/ff.c **** 
1470:..\..\FatFs/ff.c **** 	/* Remove the chain */
1471:..\..\FatFs/ff.c **** 	do {
1472:..\..\FatFs/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1473:..\..\FatFs/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
1474:..\..\FatFs/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1475:..\..\FatFs/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1476:..\..\FatFs/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1477:..\..\FatFs/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1478:..\..\FatFs/ff.c **** 			if (res != FR_OK) return res;
1479:..\..\FatFs/ff.c **** 		}
1480:..\..\FatFs/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1481:..\..\FatFs/ff.c **** 			fs->free_clst++;
1482:..\..\FatFs/ff.c **** 			fs->fsi_flag |= 1;
1483:..\..\FatFs/ff.c **** 		}
1484:..\..\FatFs/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1485:..\..\FatFs/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1486:..\..\FatFs/ff.c **** 			ecl = nxt;
1487:..\..\FatFs/ff.c **** 		} else {				/* End of contiguous cluster block */
1488:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 35


1489:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1490:..\..\FatFs/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1491:..\..\FatFs/ff.c **** 				if (res != FR_OK) return res;
1492:..\..\FatFs/ff.c **** 			}
1493:..\..\FatFs/ff.c **** #endif
1494:..\..\FatFs/ff.c **** #if FF_USE_TRIM
1495:..\..\FatFs/ff.c **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
1496:..\..\FatFs/ff.c **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
1497:..\..\FatFs/ff.c **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be
1498:..\..\FatFs/ff.c **** #endif
1499:..\..\FatFs/ff.c **** 			scl = ecl = nxt;
1500:..\..\FatFs/ff.c **** 		}
1501:..\..\FatFs/ff.c **** #endif
1502:..\..\FatFs/ff.c **** 		clst = nxt;					/* Next cluster */
1503:..\..\FatFs/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1504:..\..\FatFs/ff.c **** 
1505:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
1506:..\..\FatFs/ff.c **** 	/* Some post processes for chain status */
1507:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1508:..\..\FatFs/ff.c **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1509:..\..\FatFs/ff.c **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1510:..\..\FatFs/ff.c **** 		} else {
1511:..\..\FatFs/ff.c **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1512:..\..\FatFs/ff.c **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1513:..\..\FatFs/ff.c **** 				while (clst != pclst) {
1514:..\..\FatFs/ff.c **** 					nxt = get_fat(obj, clst);
1515:..\..\FatFs/ff.c **** 					if (nxt < 2) return FR_INT_ERR;
1516:..\..\FatFs/ff.c **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1517:..\..\FatFs/ff.c **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1518:..\..\FatFs/ff.c **** 					clst++;
1519:..\..\FatFs/ff.c **** 				}
1520:..\..\FatFs/ff.c **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1521:..\..\FatFs/ff.c **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1522:..\..\FatFs/ff.c **** 				}
1523:..\..\FatFs/ff.c **** 			} else {
1524:..\..\FatFs/ff.c **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1525:..\..\FatFs/ff.c **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1526:..\..\FatFs/ff.c **** 				}
1527:..\..\FatFs/ff.c **** 			}
1528:..\..\FatFs/ff.c **** 		}
1529:..\..\FatFs/ff.c **** 	}
1530:..\..\FatFs/ff.c **** #endif
1531:..\..\FatFs/ff.c **** 	return FR_OK;
1532:..\..\FatFs/ff.c **** }
1533:..\..\FatFs/ff.c **** 
1534:..\..\FatFs/ff.c **** 
1535:..\..\FatFs/ff.c **** 
1536:..\..\FatFs/ff.c **** 
1537:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1538:..\..\FatFs/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1539:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1540:..\..\FatFs/ff.c **** 
1541:..\..\FatFs/ff.c **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1542:..\..\FatFs/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1543:..\..\FatFs/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1544:..\..\FatFs/ff.c **** )
1545:..\..\FatFs/ff.c **** {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 36


1546:..\..\FatFs/ff.c **** 	DWORD cs, ncl, scl;
1547:..\..\FatFs/ff.c **** 	FRESULT res;
1548:..\..\FatFs/ff.c **** 	FATFS *fs = obj->fs;
1549:..\..\FatFs/ff.c **** 
1550:..\..\FatFs/ff.c **** 
1551:..\..\FatFs/ff.c **** 	if (clst == 0) {	/* Create a new chain */
1552:..\..\FatFs/ff.c **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
1553:..\..\FatFs/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1554:..\..\FatFs/ff.c **** 	}
1555:..\..\FatFs/ff.c **** 	else {				/* Stretch a chain */
1556:..\..\FatFs/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1557:..\..\FatFs/ff.c **** 		if (cs < 2) return 1;				/* Test for insanity */
1558:..\..\FatFs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1559:..\..\FatFs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1560:..\..\FatFs/ff.c **** 		scl = clst;							/* Cluster to start to find */
1561:..\..\FatFs/ff.c **** 	}
1562:..\..\FatFs/ff.c **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
1563:..\..\FatFs/ff.c **** 
1564:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
1565:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1566:..\..\FatFs/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1567:..\..\FatFs/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1568:..\..\FatFs/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1569:..\..\FatFs/ff.c **** 		if (res == FR_INT_ERR) return 1;
1570:..\..\FatFs/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1571:..\..\FatFs/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1572:..\..\FatFs/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1573:..\..\FatFs/ff.c **** 		} else {									/* It is a stretched chain */
1574:..\..\FatFs/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1575:..\..\FatFs/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1576:..\..\FatFs/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1577:..\..\FatFs/ff.c **** 			}
1578:..\..\FatFs/ff.c **** 		}
1579:..\..\FatFs/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1580:..\..\FatFs/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1581:..\..\FatFs/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1582:..\..\FatFs/ff.c **** 			} else {				/* New fragment */
1583:..\..\FatFs/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1584:..\..\FatFs/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1585:..\..\FatFs/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1586:..\..\FatFs/ff.c **** 			}
1587:..\..\FatFs/ff.c **** 		}
1588:..\..\FatFs/ff.c **** 	} else
1589:..\..\FatFs/ff.c **** #endif
1590:..\..\FatFs/ff.c **** 	{	/* On the FAT/FAT32 volume */
1591:..\..\FatFs/ff.c **** 		ncl = 0;
1592:..\..\FatFs/ff.c **** 		if (scl == clst) {						/* Stretching an existing chain? */
1593:..\..\FatFs/ff.c **** 			ncl = scl + 1;						/* Test if next cluster is free */
1594:..\..\FatFs/ff.c **** 			if (ncl >= fs->n_fatent) ncl = 2;
1595:..\..\FatFs/ff.c **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
1596:..\..\FatFs/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1597:..\..\FatFs/ff.c **** 			if (cs != 0) {						/* Not free? */
1598:..\..\FatFs/ff.c **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1599:..\..\FatFs/ff.c **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1600:..\..\FatFs/ff.c **** 				ncl = 0;
1601:..\..\FatFs/ff.c **** 			}
1602:..\..\FatFs/ff.c **** 		}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 37


1603:..\..\FatFs/ff.c **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1604:..\..\FatFs/ff.c **** 			ncl = scl;	/* Start cluster */
1605:..\..\FatFs/ff.c **** 			for (;;) {
1606:..\..\FatFs/ff.c **** 				ncl++;							/* Next cluster */
1607:..\..\FatFs/ff.c **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1608:..\..\FatFs/ff.c **** 					ncl = 2;
1609:..\..\FatFs/ff.c **** 					if (ncl > scl) return 0;	/* No free cluster found? */
1610:..\..\FatFs/ff.c **** 				}
1611:..\..\FatFs/ff.c **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
1612:..\..\FatFs/ff.c **** 				if (cs == 0) break;				/* Found a free cluster? */
1613:..\..\FatFs/ff.c **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1614:..\..\FatFs/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
1615:..\..\FatFs/ff.c **** 			}
1616:..\..\FatFs/ff.c **** 		}
1617:..\..\FatFs/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1618:..\..\FatFs/ff.c **** 		if (res == FR_OK && clst != 0) {
1619:..\..\FatFs/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1620:..\..\FatFs/ff.c **** 		}
1621:..\..\FatFs/ff.c **** 	}
1622:..\..\FatFs/ff.c **** 
1623:..\..\FatFs/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1624:..\..\FatFs/ff.c **** 		fs->last_clst = ncl;
1625:..\..\FatFs/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1626:..\..\FatFs/ff.c **** 		fs->fsi_flag |= 1;
1627:..\..\FatFs/ff.c **** 	} else {
1628:..\..\FatFs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1629:..\..\FatFs/ff.c **** 	}
1630:..\..\FatFs/ff.c **** 
1631:..\..\FatFs/ff.c **** 	return ncl;		/* Return new cluster number or error status */
1632:..\..\FatFs/ff.c **** }
1633:..\..\FatFs/ff.c **** 
1634:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
1635:..\..\FatFs/ff.c **** 
1636:..\..\FatFs/ff.c **** 
1637:..\..\FatFs/ff.c **** 
1638:..\..\FatFs/ff.c **** 
1639:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
1640:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1641:..\..\FatFs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1642:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1643:..\..\FatFs/ff.c **** 
1644:..\..\FatFs/ff.c **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1645:..\..\FatFs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1646:..\..\FatFs/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1647:..\..\FatFs/ff.c **** )
1648:..\..\FatFs/ff.c **** {
1649:..\..\FatFs/ff.c **** 	DWORD cl, ncl, *tbl;
1650:..\..\FatFs/ff.c **** 	FATFS *fs = fp->obj.fs;
1651:..\..\FatFs/ff.c **** 
1652:..\..\FatFs/ff.c **** 
1653:..\..\FatFs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1654:..\..\FatFs/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1655:..\..\FatFs/ff.c **** 	for (;;) {
1656:..\..\FatFs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1657:..\..\FatFs/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1658:..\..\FatFs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1659:..\..\FatFs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 38


1660:..\..\FatFs/ff.c **** 	}
1661:..\..\FatFs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1662:..\..\FatFs/ff.c **** }
1663:..\..\FatFs/ff.c **** 
1664:..\..\FatFs/ff.c **** #endif	/* FF_USE_FASTSEEK */
1665:..\..\FatFs/ff.c **** 
1666:..\..\FatFs/ff.c **** 
1667:..\..\FatFs/ff.c **** 
1668:..\..\FatFs/ff.c **** 
1669:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1670:..\..\FatFs/ff.c **** /* Directory handling - Fill a cluster with zeros                        */
1671:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1672:..\..\FatFs/ff.c **** 
1673:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1674:..\..\FatFs/ff.c **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1675:..\..\FatFs/ff.c **** 	FATFS *fs,		/* Filesystem object */
1676:..\..\FatFs/ff.c **** 	DWORD clst		/* Directory table to clear */
1677:..\..\FatFs/ff.c **** )
1678:..\..\FatFs/ff.c **** {
1679:..\..\FatFs/ff.c **** 	LBA_t sect;
1680:..\..\FatFs/ff.c **** 	UINT n, szb;
1681:..\..\FatFs/ff.c **** 	BYTE *ibuf;
1682:..\..\FatFs/ff.c **** 
1683:..\..\FatFs/ff.c **** 
1684:..\..\FatFs/ff.c **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1685:..\..\FatFs/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
1686:..\..\FatFs/ff.c **** 	fs->winsect = sect;				/* Set window to top of the cluster */
1687:..\..\FatFs/ff.c **** 	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
1688:..\..\FatFs/ff.c **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1689:..\..\FatFs/ff.c **** 	/* Allocate a temporary buffer */
1690:..\..\FatFs/ff.c **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1691:..\..\FatFs/ff.c **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1692:..\..\FatFs/ff.c **** 		mem_set(ibuf, 0, szb);
1693:..\..\FatFs/ff.c **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1694:..\..\FatFs/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1695:..\..\FatFs/ff.c **** 		ff_memfree(ibuf);
1696:..\..\FatFs/ff.c **** 	} else
1697:..\..\FatFs/ff.c **** #endif
1698:..\..\FatFs/ff.c **** 	{
1699:..\..\FatFs/ff.c **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
1700:..\..\FatFs/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1701:..\..\FatFs/ff.c **** 	}
1702:..\..\FatFs/ff.c **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1703:..\..\FatFs/ff.c **** }
1704:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
1705:..\..\FatFs/ff.c **** 
1706:..\..\FatFs/ff.c **** 
1707:..\..\FatFs/ff.c **** 
1708:..\..\FatFs/ff.c **** 
1709:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1710:..\..\FatFs/ff.c **** /* Directory handling - Set directory index                              */
1711:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1712:..\..\FatFs/ff.c **** 
1713:..\..\FatFs/ff.c **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1714:..\..\FatFs/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1715:..\..\FatFs/ff.c **** 	DWORD ofs		/* Offset of directory table */
1716:..\..\FatFs/ff.c **** )
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 39


1717:..\..\FatFs/ff.c **** {
1718:..\..\FatFs/ff.c **** 	DWORD csz, clst;
1719:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
1720:..\..\FatFs/ff.c **** 
1721:..\..\FatFs/ff.c **** 
1722:..\..\FatFs/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
1723:..\..\FatFs/ff.c **** 		return FR_INT_ERR;
1724:..\..\FatFs/ff.c **** 	}
1725:..\..\FatFs/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
1726:..\..\FatFs/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1727:..\..\FatFs/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1728:..\..\FatFs/ff.c **** 		clst = (DWORD)fs->dirbase;
1729:..\..\FatFs/ff.c **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1730:..\..\FatFs/ff.c **** 	}
1731:..\..\FatFs/ff.c **** 
1732:..\..\FatFs/ff.c **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1733:..\..\FatFs/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1734:..\..\FatFs/ff.c **** 		dp->sect = fs->dirbase;
1735:..\..\FatFs/ff.c **** 
1736:..\..\FatFs/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1737:..\..\FatFs/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1738:..\..\FatFs/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
1739:..\..\FatFs/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1740:..\..\FatFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1741:..\..\FatFs/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1742:..\..\FatFs/ff.c **** 			ofs -= csz;
1743:..\..\FatFs/ff.c **** 		}
1744:..\..\FatFs/ff.c **** 		dp->sect = clst2sect(fs, clst);
1745:..\..\FatFs/ff.c **** 	}
1746:..\..\FatFs/ff.c **** 	dp->clust = clst;					/* Current cluster# */
1747:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return FR_INT_ERR;
1748:..\..\FatFs/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1749:..\..\FatFs/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1750:..\..\FatFs/ff.c **** 
1751:..\..\FatFs/ff.c **** 	return FR_OK;
1752:..\..\FatFs/ff.c **** }
1753:..\..\FatFs/ff.c **** 
1754:..\..\FatFs/ff.c **** 
1755:..\..\FatFs/ff.c **** 
1756:..\..\FatFs/ff.c **** 
1757:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1758:..\..\FatFs/ff.c **** /* Directory handling - Move directory table index next                  */
1759:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1760:..\..\FatFs/ff.c **** 
1761:..\..\FatFs/ff.c **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1762:..\..\FatFs/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1763:..\..\FatFs/ff.c **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1764:..\..\FatFs/ff.c **** )
1765:..\..\FatFs/ff.c **** {
1766:..\..\FatFs/ff.c **** 	DWORD ofs, clst;
1767:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
1768:..\..\FatFs/ff.c **** 
1769:..\..\FatFs/ff.c **** 
1770:..\..\FatFs/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1771:..\..\FatFs/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
1772:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
1773:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 40


1774:..\..\FatFs/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1775:..\..\FatFs/ff.c **** 		dp->sect++;				/* Next sector */
1776:..\..\FatFs/ff.c **** 
1777:..\..\FatFs/ff.c **** 		if (dp->clust == 0) {	/* Static table */
1778:..\..\FatFs/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1779:..\..\FatFs/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
1780:..\..\FatFs/ff.c **** 			}
1781:..\..\FatFs/ff.c **** 		}
1782:..\..\FatFs/ff.c **** 		else {					/* Dynamic table */
1783:..\..\FatFs/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1784:..\..\FatFs/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1785:..\..\FatFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1786:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1787:..\..\FatFs/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1788:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1789:..\..\FatFs/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
1790:..\..\FatFs/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
1791:..\..\FatFs/ff.c **** 					}
1792:..\..\FatFs/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1793:..\..\FatFs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1794:..\..\FatFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1795:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1796:..\..\FatFs/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1797:..\..\FatFs/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1798:..\..\FatFs/ff.c **** #else
1799:..\..\FatFs/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1800:..\..\FatFs/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1801:..\..\FatFs/ff.c **** #endif
1802:..\..\FatFs/ff.c **** 				}
1803:..\..\FatFs/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
1804:..\..\FatFs/ff.c **** 				dp->sect = clst2sect(fs, clst);
1805:..\..\FatFs/ff.c **** 			}
1806:..\..\FatFs/ff.c **** 		}
1807:..\..\FatFs/ff.c **** 	}
1808:..\..\FatFs/ff.c **** 	dp->dptr = ofs;						/* Current entry */
1809:..\..\FatFs/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1810:..\..\FatFs/ff.c **** 
1811:..\..\FatFs/ff.c **** 	return FR_OK;
1812:..\..\FatFs/ff.c **** }
1813:..\..\FatFs/ff.c **** 
1814:..\..\FatFs/ff.c **** 
1815:..\..\FatFs/ff.c **** 
1816:..\..\FatFs/ff.c **** 
1817:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1818:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1819:..\..\FatFs/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1820:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1821:..\..\FatFs/ff.c **** 
1822:..\..\FatFs/ff.c **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1823:..\..\FatFs/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1824:..\..\FatFs/ff.c **** 	UINT nent				/* Number of contiguous entries to allocate */
1825:..\..\FatFs/ff.c **** )
1826:..\..\FatFs/ff.c **** {
1827:..\..\FatFs/ff.c **** 	FRESULT res;
1828:..\..\FatFs/ff.c **** 	UINT n;
1829:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
1830:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 41


1831:..\..\FatFs/ff.c **** 
1832:..\..\FatFs/ff.c **** 	res = dir_sdi(dp, 0);
1833:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
1834:..\..\FatFs/ff.c **** 		n = 0;
1835:..\..\FatFs/ff.c **** 		do {
1836:..\..\FatFs/ff.c **** 			res = move_window(fs, dp->sect);
1837:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
1838:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
1839:..\..\FatFs/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1840:..\..\FatFs/ff.c **** #else
1841:..\..\FatFs/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1842:..\..\FatFs/ff.c **** #endif
1843:..\..\FatFs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1844:..\..\FatFs/ff.c **** 			} else {
1845:..\..\FatFs/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1846:..\..\FatFs/ff.c **** 			}
1847:..\..\FatFs/ff.c **** 			res = dir_next(dp, 1);
1848:..\..\FatFs/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1849:..\..\FatFs/ff.c **** 	}
1850:..\..\FatFs/ff.c **** 
1851:..\..\FatFs/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1852:..\..\FatFs/ff.c **** 	return res;
1853:..\..\FatFs/ff.c **** }
1854:..\..\FatFs/ff.c **** 
1855:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
1856:..\..\FatFs/ff.c **** 
1857:..\..\FatFs/ff.c **** 
1858:..\..\FatFs/ff.c **** 
1859:..\..\FatFs/ff.c **** 
1860:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1861:..\..\FatFs/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1862:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
1863:..\..\FatFs/ff.c **** 
1864:..\..\FatFs/ff.c **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1865:..\..\FatFs/ff.c **** 	FATFS* fs,			/* Pointer to the fs object */
1866:..\..\FatFs/ff.c **** 	const BYTE* dir		/* Pointer to the key entry */
1867:..\..\FatFs/ff.c **** )
1868:..\..\FatFs/ff.c **** {
 444              		.loc 1 1868 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL65:
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              		.cfi_def_cfa_offset 16
 451              		.cfi_offset 4, -16
 452              		.cfi_offset 5, -12
 453              		.cfi_offset 6, -8
 454              		.cfi_offset 14, -4
 455 0002 0646     		mov	r6, r0
 456 0004 0D46     		mov	r5, r1
1869:..\..\FatFs/ff.c **** 	DWORD cl;
1870:..\..\FatFs/ff.c **** 
1871:..\..\FatFs/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 457              		.loc 1 1871 0
 458 0006 01F11A00 		add	r0, r1, #26
 459              	.LVL66:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 42


 460 000a FFF7FEFF 		bl	ld_word
 461              	.LVL67:
 462 000e 0446     		mov	r4, r0
 463              	.LVL68:
1872:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 464              		.loc 1 1872 0
 465 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 466 0012 032B     		cmp	r3, #3
 467 0014 05D1     		bne	.L35
1873:..\..\FatFs/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 468              		.loc 1 1873 0
 469 0016 05F11400 		add	r0, r5, #20
 470              	.LVL69:
 471 001a FFF7FEFF 		bl	ld_word
 472              	.LVL70:
 473 001e 44EA0040 		orr	r0, r4, r0, lsl #16
 474              	.LVL71:
 475              	.L35:
1874:..\..\FatFs/ff.c **** 	}
1875:..\..\FatFs/ff.c **** 
1876:..\..\FatFs/ff.c **** 	return cl;
1877:..\..\FatFs/ff.c **** }
 476              		.loc 1 1877 0
 477 0022 70BD     		pop	{r4, r5, r6, pc}
 478              		.cfi_endproc
 479              	.LFE22:
 480              		.size	ld_clust, .-ld_clust
 481              		.section	.text.st_clust,"ax",%progbits
 482              		.align	2
 483              		.thumb
 484              		.thumb_func
 485              		.type	st_clust, %function
 486              	st_clust:
 487              	.LFB23:
1878:..\..\FatFs/ff.c **** 
1879:..\..\FatFs/ff.c **** 
1880:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1881:..\..\FatFs/ff.c **** static void st_clust (
1882:..\..\FatFs/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1883:..\..\FatFs/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1884:..\..\FatFs/ff.c **** 	DWORD cl	/* Value to be set */
1885:..\..\FatFs/ff.c **** )
1886:..\..\FatFs/ff.c **** {
 488              		.loc 1 1886 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              	.LVL72:
 493 0000 70B5     		push	{r4, r5, r6, lr}
 494              		.cfi_def_cfa_offset 16
 495              		.cfi_offset 4, -16
 496              		.cfi_offset 5, -12
 497              		.cfi_offset 6, -8
 498              		.cfi_offset 14, -4
 499 0002 0646     		mov	r6, r0
 500 0004 0C46     		mov	r4, r1
 501 0006 1546     		mov	r5, r2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 43


1887:..\..\FatFs/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 502              		.loc 1 1887 0
 503 0008 91B2     		uxth	r1, r2
 504              	.LVL73:
 505 000a 04F11A00 		add	r0, r4, #26
 506              	.LVL74:
 507 000e FFF7FEFF 		bl	st_word
 508              	.LVL75:
1888:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 509              		.loc 1 1888 0
 510 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 511 0014 032B     		cmp	r3, #3
 512 0016 04D1     		bne	.L37
1889:..\..\FatFs/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 513              		.loc 1 1889 0
 514 0018 290C     		lsrs	r1, r5, #16
 515 001a 04F11400 		add	r0, r4, #20
 516 001e FFF7FEFF 		bl	st_word
 517              	.LVL76:
 518              	.L37:
 519 0022 70BD     		pop	{r4, r5, r6, pc}
 520              		.cfi_endproc
 521              	.LFE23:
 522              		.size	st_clust, .-st_clust
 523              		.section	.text.get_fileinfo,"ax",%progbits
 524              		.align	2
 525              		.thumb
 526              		.thumb_func
 527              		.type	get_fileinfo, %function
 528              	get_fileinfo:
 529              	.LFB28:
1890:..\..\FatFs/ff.c **** 	}
1891:..\..\FatFs/ff.c **** }
1892:..\..\FatFs/ff.c **** #endif
1893:..\..\FatFs/ff.c **** 
1894:..\..\FatFs/ff.c **** 
1895:..\..\FatFs/ff.c **** 
1896:..\..\FatFs/ff.c **** #if FF_USE_LFN
1897:..\..\FatFs/ff.c **** /*--------------------------------------------------------*/
1898:..\..\FatFs/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1899:..\..\FatFs/ff.c **** /*--------------------------------------------------------*/
1900:..\..\FatFs/ff.c **** 
1901:..\..\FatFs/ff.c **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1902:..\..\FatFs/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1903:..\..\FatFs/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1904:..\..\FatFs/ff.c **** )
1905:..\..\FatFs/ff.c **** {
1906:..\..\FatFs/ff.c **** 	UINT i, s;
1907:..\..\FatFs/ff.c **** 	WCHAR wc, uc;
1908:..\..\FatFs/ff.c **** 
1909:..\..\FatFs/ff.c **** 
1910:..\..\FatFs/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1911:..\..\FatFs/ff.c **** 
1912:..\..\FatFs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1913:..\..\FatFs/ff.c **** 
1914:..\..\FatFs/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1915:..\..\FatFs/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 44


1916:..\..\FatFs/ff.c **** 		if (wc != 0) {
1917:..\..\FatFs/ff.c **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1918:..\..\FatFs/ff.c **** 				return 0;					/* Not matched */
1919:..\..\FatFs/ff.c **** 			}
1920:..\..\FatFs/ff.c **** 			wc = uc;
1921:..\..\FatFs/ff.c **** 		} else {
1922:..\..\FatFs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1923:..\..\FatFs/ff.c **** 		}
1924:..\..\FatFs/ff.c **** 	}
1925:..\..\FatFs/ff.c **** 
1926:..\..\FatFs/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1927:..\..\FatFs/ff.c **** 
1928:..\..\FatFs/ff.c **** 	return 1;		/* The part of LFN matched */
1929:..\..\FatFs/ff.c **** }
1930:..\..\FatFs/ff.c **** 
1931:..\..\FatFs/ff.c **** 
1932:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1933:..\..\FatFs/ff.c **** /*-----------------------------------------------------*/
1934:..\..\FatFs/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1935:..\..\FatFs/ff.c **** /*-----------------------------------------------------*/
1936:..\..\FatFs/ff.c **** 
1937:..\..\FatFs/ff.c **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1938:..\..\FatFs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1939:..\..\FatFs/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1940:..\..\FatFs/ff.c **** )
1941:..\..\FatFs/ff.c **** {
1942:..\..\FatFs/ff.c **** 	UINT i, s;
1943:..\..\FatFs/ff.c **** 	WCHAR wc, uc;
1944:..\..\FatFs/ff.c **** 
1945:..\..\FatFs/ff.c **** 
1946:..\..\FatFs/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1947:..\..\FatFs/ff.c **** 
1948:..\..\FatFs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1949:..\..\FatFs/ff.c **** 
1950:..\..\FatFs/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1951:..\..\FatFs/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1952:..\..\FatFs/ff.c **** 		if (wc != 0) {
1953:..\..\FatFs/ff.c **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1954:..\..\FatFs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1955:..\..\FatFs/ff.c **** 		} else {
1956:..\..\FatFs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1957:..\..\FatFs/ff.c **** 		}
1958:..\..\FatFs/ff.c **** 	}
1959:..\..\FatFs/ff.c **** 
1960:..\..\FatFs/ff.c **** 	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not termin
1961:..\..\FatFs/ff.c **** 		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1962:..\..\FatFs/ff.c **** 		lfnbuf[i] = 0;
1963:..\..\FatFs/ff.c **** 	}
1964:..\..\FatFs/ff.c **** 
1965:..\..\FatFs/ff.c **** 	return 1;		/* The part of LFN is valid */
1966:..\..\FatFs/ff.c **** }
1967:..\..\FatFs/ff.c **** #endif
1968:..\..\FatFs/ff.c **** 
1969:..\..\FatFs/ff.c **** 
1970:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
1971:..\..\FatFs/ff.c **** /*-----------------------------------------*/
1972:..\..\FatFs/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 45


1973:..\..\FatFs/ff.c **** /*-----------------------------------------*/
1974:..\..\FatFs/ff.c **** 
1975:..\..\FatFs/ff.c **** static void put_lfn (
1976:..\..\FatFs/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1977:..\..\FatFs/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1978:..\..\FatFs/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1979:..\..\FatFs/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1980:..\..\FatFs/ff.c **** )
1981:..\..\FatFs/ff.c **** {
1982:..\..\FatFs/ff.c **** 	UINT i, s;
1983:..\..\FatFs/ff.c **** 	WCHAR wc;
1984:..\..\FatFs/ff.c **** 
1985:..\..\FatFs/ff.c **** 
1986:..\..\FatFs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1987:..\..\FatFs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1988:..\..\FatFs/ff.c **** 	dir[LDIR_Type] = 0;
1989:..\..\FatFs/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1990:..\..\FatFs/ff.c **** 
1991:..\..\FatFs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1992:..\..\FatFs/ff.c **** 	s = wc = 0;
1993:..\..\FatFs/ff.c **** 	do {
1994:..\..\FatFs/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1995:..\..\FatFs/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1996:..\..\FatFs/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
1997:..\..\FatFs/ff.c **** 	} while (++s < 13);
1998:..\..\FatFs/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1999:..\..\FatFs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2000:..\..\FatFs/ff.c **** }
2001:..\..\FatFs/ff.c **** 
2002:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
2003:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN */
2004:..\..\FatFs/ff.c **** 
2005:..\..\FatFs/ff.c **** 
2006:..\..\FatFs/ff.c **** 
2007:..\..\FatFs/ff.c **** #if FF_USE_LFN && !FF_FS_READONLY
2008:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2009:..\..\FatFs/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
2010:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2011:..\..\FatFs/ff.c **** 
2012:..\..\FatFs/ff.c **** static void gen_numname (
2013:..\..\FatFs/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
2014:..\..\FatFs/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
2015:..\..\FatFs/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
2016:..\..\FatFs/ff.c **** 	UINT seq			/* Sequence number */
2017:..\..\FatFs/ff.c **** )
2018:..\..\FatFs/ff.c **** {
2019:..\..\FatFs/ff.c **** 	BYTE ns[8], c;
2020:..\..\FatFs/ff.c **** 	UINT i, j;
2021:..\..\FatFs/ff.c **** 	WCHAR wc;
2022:..\..\FatFs/ff.c **** 	DWORD sreg;
2023:..\..\FatFs/ff.c **** 
2024:..\..\FatFs/ff.c **** 
2025:..\..\FatFs/ff.c **** 	mem_cpy(dst, src, 11);
2026:..\..\FatFs/ff.c **** 
2027:..\..\FatFs/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
2028:..\..\FatFs/ff.c **** 		sreg = seq;
2029:..\..\FatFs/ff.c **** 		while (*lfn) {	/* Create a CRC as hash value */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 46


2030:..\..\FatFs/ff.c **** 			wc = *lfn++;
2031:..\..\FatFs/ff.c **** 			for (i = 0; i < 16; i++) {
2032:..\..\FatFs/ff.c **** 				sreg = (sreg << 1) + (wc & 1);
2033:..\..\FatFs/ff.c **** 				wc >>= 1;
2034:..\..\FatFs/ff.c **** 				if (sreg & 0x10000) sreg ^= 0x11021;
2035:..\..\FatFs/ff.c **** 			}
2036:..\..\FatFs/ff.c **** 		}
2037:..\..\FatFs/ff.c **** 		seq = (UINT)sreg;
2038:..\..\FatFs/ff.c **** 	}
2039:..\..\FatFs/ff.c **** 
2040:..\..\FatFs/ff.c **** 	/* itoa (hexdecimal) */
2041:..\..\FatFs/ff.c **** 	i = 7;
2042:..\..\FatFs/ff.c **** 	do {
2043:..\..\FatFs/ff.c **** 		c = (BYTE)((seq % 16) + '0');
2044:..\..\FatFs/ff.c **** 		if (c > '9') c += 7;
2045:..\..\FatFs/ff.c **** 		ns[i--] = c;
2046:..\..\FatFs/ff.c **** 		seq /= 16;
2047:..\..\FatFs/ff.c **** 	} while (seq);
2048:..\..\FatFs/ff.c **** 	ns[i] = '~';
2049:..\..\FatFs/ff.c **** 
2050:..\..\FatFs/ff.c **** 	/* Append the number to the SFN body */
2051:..\..\FatFs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
2052:..\..\FatFs/ff.c **** 		if (dbc_1st(dst[j])) {
2053:..\..\FatFs/ff.c **** 			if (j == i - 1) break;
2054:..\..\FatFs/ff.c **** 			j++;
2055:..\..\FatFs/ff.c **** 		}
2056:..\..\FatFs/ff.c **** 	}
2057:..\..\FatFs/ff.c **** 	do {
2058:..\..\FatFs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
2059:..\..\FatFs/ff.c **** 	} while (j < 8);
2060:..\..\FatFs/ff.c **** }
2061:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2062:..\..\FatFs/ff.c **** 
2063:..\..\FatFs/ff.c **** 
2064:..\..\FatFs/ff.c **** 
2065:..\..\FatFs/ff.c **** #if FF_USE_LFN
2066:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2067:..\..\FatFs/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2068:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2069:..\..\FatFs/ff.c **** 
2070:..\..\FatFs/ff.c **** static BYTE sum_sfn (
2071:..\..\FatFs/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
2072:..\..\FatFs/ff.c **** )
2073:..\..\FatFs/ff.c **** {
2074:..\..\FatFs/ff.c **** 	BYTE sum = 0;
2075:..\..\FatFs/ff.c **** 	UINT n = 11;
2076:..\..\FatFs/ff.c **** 
2077:..\..\FatFs/ff.c **** 	do {
2078:..\..\FatFs/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
2079:..\..\FatFs/ff.c **** 	} while (--n);
2080:..\..\FatFs/ff.c **** 	return sum;
2081:..\..\FatFs/ff.c **** }
2082:..\..\FatFs/ff.c **** 
2083:..\..\FatFs/ff.c **** #endif	/* FF_USE_LFN */
2084:..\..\FatFs/ff.c **** 
2085:..\..\FatFs/ff.c **** 
2086:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 47


2087:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
2088:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2089:..\..\FatFs/ff.c **** /* exFAT: Checksum                                                       */
2090:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2091:..\..\FatFs/ff.c **** 
2092:..\..\FatFs/ff.c **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
2093:..\..\FatFs/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
2094:..\..\FatFs/ff.c **** )
2095:..\..\FatFs/ff.c **** {
2096:..\..\FatFs/ff.c **** 	UINT i, szblk;
2097:..\..\FatFs/ff.c **** 	WORD sum;
2098:..\..\FatFs/ff.c **** 
2099:..\..\FatFs/ff.c **** 
2100:..\..\FatFs/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2101:..\..\FatFs/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
2102:..\..\FatFs/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2103:..\..\FatFs/ff.c **** 			i++;
2104:..\..\FatFs/ff.c **** 		} else {
2105:..\..\FatFs/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2106:..\..\FatFs/ff.c **** 		}
2107:..\..\FatFs/ff.c **** 	}
2108:..\..\FatFs/ff.c **** 	return sum;
2109:..\..\FatFs/ff.c **** }
2110:..\..\FatFs/ff.c **** 
2111:..\..\FatFs/ff.c **** 
2112:..\..\FatFs/ff.c **** 
2113:..\..\FatFs/ff.c **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2114:..\..\FatFs/ff.c **** 	const WCHAR* name	/* File name to be calculated */
2115:..\..\FatFs/ff.c **** )
2116:..\..\FatFs/ff.c **** {
2117:..\..\FatFs/ff.c **** 	WCHAR chr;
2118:..\..\FatFs/ff.c **** 	WORD sum = 0;
2119:..\..\FatFs/ff.c **** 
2120:..\..\FatFs/ff.c **** 
2121:..\..\FatFs/ff.c **** 	while ((chr = *name++) != 0) {
2122:..\..\FatFs/ff.c **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2123:..\..\FatFs/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2124:..\..\FatFs/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2125:..\..\FatFs/ff.c **** 	}
2126:..\..\FatFs/ff.c **** 	return sum;
2127:..\..\FatFs/ff.c **** }
2128:..\..\FatFs/ff.c **** 
2129:..\..\FatFs/ff.c **** 
2130:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
2131:..\..\FatFs/ff.c **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2132:..\..\FatFs/ff.c **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2133:..\..\FatFs/ff.c **** 	DWORD sum			/* Previous sum value */
2134:..\..\FatFs/ff.c **** )
2135:..\..\FatFs/ff.c **** {
2136:..\..\FatFs/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2137:..\..\FatFs/ff.c **** 	return sum;
2138:..\..\FatFs/ff.c **** }
2139:..\..\FatFs/ff.c **** #endif
2140:..\..\FatFs/ff.c **** 
2141:..\..\FatFs/ff.c **** 
2142:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2143:..\..\FatFs/ff.c **** /*------------------------------------------------------*/
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 48


2144:..\..\FatFs/ff.c **** /* exFAT: Get object information from a directory block */
2145:..\..\FatFs/ff.c **** /*------------------------------------------------------*/
2146:..\..\FatFs/ff.c **** 
2147:..\..\FatFs/ff.c **** static void get_xfileinfo (
2148:..\..\FatFs/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
2149:..\..\FatFs/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
2150:..\..\FatFs/ff.c **** )
2151:..\..\FatFs/ff.c **** {
2152:..\..\FatFs/ff.c **** 	WCHAR wc, hs;
2153:..\..\FatFs/ff.c **** 	UINT di, si, nc;
2154:..\..\FatFs/ff.c **** 
2155:..\..\FatFs/ff.c **** 	/* Get file name from the entry block */
2156:..\..\FatFs/ff.c **** 	si = SZDIRE * 2;	/* 1st C1 entry */
2157:..\..\FatFs/ff.c **** 	nc = 0; hs = 0; di = 0;
2158:..\..\FatFs/ff.c **** 	while (nc < dirb[XDIR_NumName]) {
2159:..\..\FatFs/ff.c **** 		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
2160:..\..\FatFs/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
2161:..\..\FatFs/ff.c **** 		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
2162:..\..\FatFs/ff.c **** 		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2163:..\..\FatFs/ff.c **** 			hs = wc; continue;	/* Get low surrogate */
2164:..\..\FatFs/ff.c **** 		}
2165:..\..\FatFs/ff.c **** 		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding
2166:..\..\FatFs/ff.c **** 		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
2167:..\..\FatFs/ff.c **** 		di += wc;
2168:..\..\FatFs/ff.c **** 		hs = 0;
2169:..\..\FatFs/ff.c **** 	}
2170:..\..\FatFs/ff.c **** 	if (hs != 0) di = 0;					/* Broken surrogate pair? */
2171:..\..\FatFs/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
2172:..\..\FatFs/ff.c **** 	fno->fname[di] = 0;						/* Terminate the name */
2173:..\..\FatFs/ff.c **** 	fno->altname[0] = 0;					/* exFAT does not support SFN */
2174:..\..\FatFs/ff.c **** 
2175:..\..\FatFs/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
2176:..\..\FatFs/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
2177:..\..\FatFs/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
2178:..\..\FatFs/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
2179:..\..\FatFs/ff.c **** }
2180:..\..\FatFs/ff.c **** 
2181:..\..\FatFs/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2182:..\..\FatFs/ff.c **** 
2183:..\..\FatFs/ff.c **** 
2184:..\..\FatFs/ff.c **** /*-----------------------------------*/
2185:..\..\FatFs/ff.c **** /* exFAT: Get a directry entry block */
2186:..\..\FatFs/ff.c **** /*-----------------------------------*/
2187:..\..\FatFs/ff.c **** 
2188:..\..\FatFs/ff.c **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2189:..\..\FatFs/ff.c **** 	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
2190:..\..\FatFs/ff.c **** )
2191:..\..\FatFs/ff.c **** {
2192:..\..\FatFs/ff.c **** 	FRESULT res;
2193:..\..\FatFs/ff.c **** 	UINT i, sz_ent;
2194:..\..\FatFs/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
2195:..\..\FatFs/ff.c **** 
2196:..\..\FatFs/ff.c **** 
2197:..\..\FatFs/ff.c **** 	/* Load file-directory entry */
2198:..\..\FatFs/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2199:..\..\FatFs/ff.c **** 	if (res != FR_OK) return res;
2200:..\..\FatFs/ff.c **** 	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 49


2201:..\..\FatFs/ff.c **** 	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2202:..\..\FatFs/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2203:..\..\FatFs/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2204:..\..\FatFs/ff.c **** 
2205:..\..\FatFs/ff.c **** 	/* Load stream-extension entry */
2206:..\..\FatFs/ff.c **** 	res = dir_next(dp, 0);
2207:..\..\FatFs/ff.c **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2208:..\..\FatFs/ff.c **** 	if (res != FR_OK) return res;
2209:..\..\FatFs/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2210:..\..\FatFs/ff.c **** 	if (res != FR_OK) return res;
2211:..\..\FatFs/ff.c **** 	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
2212:..\..\FatFs/ff.c **** 	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2213:..\..\FatFs/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2214:..\..\FatFs/ff.c **** 
2215:..\..\FatFs/ff.c **** 	/* Load file-name entries */
2216:..\..\FatFs/ff.c **** 	i = 2 * SZDIRE;	/* Name offset to load */
2217:..\..\FatFs/ff.c **** 	do {
2218:..\..\FatFs/ff.c **** 		res = dir_next(dp, 0);
2219:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2220:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
2221:..\..\FatFs/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2222:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
2223:..\..\FatFs/ff.c **** 		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
2224:..\..\FatFs/ff.c **** 		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2225:..\..\FatFs/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2226:..\..\FatFs/ff.c **** 
2227:..\..\FatFs/ff.c **** 	/* Sanity check (do it for only accessible object) */
2228:..\..\FatFs/ff.c **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2229:..\..\FatFs/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2230:..\..\FatFs/ff.c **** 	}
2231:..\..\FatFs/ff.c **** 	return FR_OK;
2232:..\..\FatFs/ff.c **** }
2233:..\..\FatFs/ff.c **** 
2234:..\..\FatFs/ff.c **** 
2235:..\..\FatFs/ff.c **** /*------------------------------------------------------------------*/
2236:..\..\FatFs/ff.c **** /* exFAT: Initialize object allocation info with loaded entry block */
2237:..\..\FatFs/ff.c **** /*------------------------------------------------------------------*/
2238:..\..\FatFs/ff.c **** 
2239:..\..\FatFs/ff.c **** static void init_alloc_info (
2240:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Filesystem object */
2241:..\..\FatFs/ff.c **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2242:..\..\FatFs/ff.c **** )
2243:..\..\FatFs/ff.c **** {
2244:..\..\FatFs/ff.c **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2245:..\..\FatFs/ff.c **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2246:..\..\FatFs/ff.c **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2247:..\..\FatFs/ff.c **** 	obj->n_frag = 0;										/* No last fragment info */
2248:..\..\FatFs/ff.c **** }
2249:..\..\FatFs/ff.c **** 
2250:..\..\FatFs/ff.c **** 
2251:..\..\FatFs/ff.c **** 
2252:..\..\FatFs/ff.c **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2253:..\..\FatFs/ff.c **** /*------------------------------------------------*/
2254:..\..\FatFs/ff.c **** /* exFAT: Load the object's directory entry block */
2255:..\..\FatFs/ff.c **** /*------------------------------------------------*/
2256:..\..\FatFs/ff.c **** 
2257:..\..\FatFs/ff.c **** static FRESULT load_obj_xdir (
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 50


2258:..\..\FatFs/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2259:..\..\FatFs/ff.c **** 	const FFOBJID* obj	/* Object with its containing directory information */
2260:..\..\FatFs/ff.c **** )
2261:..\..\FatFs/ff.c **** {
2262:..\..\FatFs/ff.c **** 	FRESULT res;
2263:..\..\FatFs/ff.c **** 
2264:..\..\FatFs/ff.c **** 	/* Open object containing directory */
2265:..\..\FatFs/ff.c **** 	dp->obj.fs = obj->fs;
2266:..\..\FatFs/ff.c **** 	dp->obj.sclust = obj->c_scl;
2267:..\..\FatFs/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2268:..\..\FatFs/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2269:..\..\FatFs/ff.c **** 	dp->obj.n_frag = 0;
2270:..\..\FatFs/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2271:..\..\FatFs/ff.c **** 
2272:..\..\FatFs/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2273:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
2274:..\..\FatFs/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2275:..\..\FatFs/ff.c **** 	}
2276:..\..\FatFs/ff.c **** 	return res;
2277:..\..\FatFs/ff.c **** }
2278:..\..\FatFs/ff.c **** #endif
2279:..\..\FatFs/ff.c **** 
2280:..\..\FatFs/ff.c **** 
2281:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
2282:..\..\FatFs/ff.c **** /*----------------------------------------*/
2283:..\..\FatFs/ff.c **** /* exFAT: Store the directory entry block */
2284:..\..\FatFs/ff.c **** /*----------------------------------------*/
2285:..\..\FatFs/ff.c **** 
2286:..\..\FatFs/ff.c **** static FRESULT store_xdir (
2287:..\..\FatFs/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2288:..\..\FatFs/ff.c **** )
2289:..\..\FatFs/ff.c **** {
2290:..\..\FatFs/ff.c **** 	FRESULT res;
2291:..\..\FatFs/ff.c **** 	UINT nent;
2292:..\..\FatFs/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2293:..\..\FatFs/ff.c **** 
2294:..\..\FatFs/ff.c **** 	/* Create set sum */
2295:..\..\FatFs/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2296:..\..\FatFs/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2297:..\..\FatFs/ff.c **** 
2298:..\..\FatFs/ff.c **** 	/* Store the direcotry entry block to the directory */
2299:..\..\FatFs/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2300:..\..\FatFs/ff.c **** 	while (res == FR_OK) {
2301:..\..\FatFs/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2302:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
2303:..\..\FatFs/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2304:..\..\FatFs/ff.c **** 		dp->obj.fs->wflag = 1;
2305:..\..\FatFs/ff.c **** 		if (--nent == 0) break;
2306:..\..\FatFs/ff.c **** 		dirb += SZDIRE;
2307:..\..\FatFs/ff.c **** 		res = dir_next(dp, 0);
2308:..\..\FatFs/ff.c **** 	}
2309:..\..\FatFs/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2310:..\..\FatFs/ff.c **** }
2311:..\..\FatFs/ff.c **** 
2312:..\..\FatFs/ff.c **** 
2313:..\..\FatFs/ff.c **** 
2314:..\..\FatFs/ff.c **** /*-------------------------------------------*/
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 51


2315:..\..\FatFs/ff.c **** /* exFAT: Create a new directory enrty block */
2316:..\..\FatFs/ff.c **** /*-------------------------------------------*/
2317:..\..\FatFs/ff.c **** 
2318:..\..\FatFs/ff.c **** static void create_xdir (
2319:..\..\FatFs/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2320:..\..\FatFs/ff.c **** 	const WCHAR* lfn	/* Pointer to the object name */
2321:..\..\FatFs/ff.c **** )
2322:..\..\FatFs/ff.c **** {
2323:..\..\FatFs/ff.c **** 	UINT i;
2324:..\..\FatFs/ff.c **** 	BYTE nc1, nlen;
2325:..\..\FatFs/ff.c **** 	WCHAR wc;
2326:..\..\FatFs/ff.c **** 
2327:..\..\FatFs/ff.c **** 
2328:..\..\FatFs/ff.c **** 	/* Create file-directory and stream-extension entry */
2329:..\..\FatFs/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2330:..\..\FatFs/ff.c **** 	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
2331:..\..\FatFs/ff.c **** 	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
2332:..\..\FatFs/ff.c **** 
2333:..\..\FatFs/ff.c **** 	/* Create file-name entries */
2334:..\..\FatFs/ff.c **** 	i = SZDIRE * 2;	/* Top of file_name entries */
2335:..\..\FatFs/ff.c **** 	nlen = nc1 = 0; wc = 1;
2336:..\..\FatFs/ff.c **** 	do {
2337:..\..\FatFs/ff.c **** 		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
2338:..\..\FatFs/ff.c **** 		do {	/* Fill name field */
2339:..\..\FatFs/ff.c **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2340:..\..\FatFs/ff.c **** 			st_word(dirb + i, wc); 		/* Store it */
2341:..\..\FatFs/ff.c **** 			i += 2;
2342:..\..\FatFs/ff.c **** 		} while (i % SZDIRE != 0);
2343:..\..\FatFs/ff.c **** 		nc1++;
2344:..\..\FatFs/ff.c **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2345:..\..\FatFs/ff.c **** 
2346:..\..\FatFs/ff.c **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2347:..\..\FatFs/ff.c **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2348:..\..\FatFs/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2349:..\..\FatFs/ff.c **** }
2350:..\..\FatFs/ff.c **** 
2351:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
2352:..\..\FatFs/ff.c **** #endif	/* FF_FS_EXFAT */
2353:..\..\FatFs/ff.c **** 
2354:..\..\FatFs/ff.c **** 
2355:..\..\FatFs/ff.c **** 
2356:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2357:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2358:..\..\FatFs/ff.c **** /* Read an object from the directory                                     */
2359:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2360:..\..\FatFs/ff.c **** 
2361:..\..\FatFs/ff.c **** #define DIR_READ_FILE(dp) dir_read(dp, 0)
2362:..\..\FatFs/ff.c **** #define DIR_READ_LABEL(dp) dir_read(dp, 1)
2363:..\..\FatFs/ff.c **** 
2364:..\..\FatFs/ff.c **** static FRESULT dir_read (
2365:..\..\FatFs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2366:..\..\FatFs/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2367:..\..\FatFs/ff.c **** )
2368:..\..\FatFs/ff.c **** {
2369:..\..\FatFs/ff.c **** 	FRESULT res = FR_NO_FILE;
2370:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
2371:..\..\FatFs/ff.c **** 	BYTE attr, b;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 52


2372:..\..\FatFs/ff.c **** #if FF_USE_LFN
2373:..\..\FatFs/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2374:..\..\FatFs/ff.c **** #endif
2375:..\..\FatFs/ff.c **** 
2376:..\..\FatFs/ff.c **** 	while (dp->sect) {
2377:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
2378:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
2379:..\..\FatFs/ff.c **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
2380:..\..\FatFs/ff.c **** 		if (b == 0) {
2381:..\..\FatFs/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2382:..\..\FatFs/ff.c **** 		}
2383:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
2384:..\..\FatFs/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2385:..\..\FatFs/ff.c **** 			if (FF_USE_LABEL && vol) {
2386:..\..\FatFs/ff.c **** 				if (b == ET_VLABEL) break;	/* Volume label entry? */
2387:..\..\FatFs/ff.c **** 			} else {
2388:..\..\FatFs/ff.c **** 				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
2389:..\..\FatFs/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2390:..\..\FatFs/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2391:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
2392:..\..\FatFs/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2393:..\..\FatFs/ff.c **** 					}
2394:..\..\FatFs/ff.c **** 					break;
2395:..\..\FatFs/ff.c **** 				}
2396:..\..\FatFs/ff.c **** 			}
2397:..\..\FatFs/ff.c **** 		} else
2398:..\..\FatFs/ff.c **** #endif
2399:..\..\FatFs/ff.c **** 		{	/* On the FAT/FAT32 volume */
2400:..\..\FatFs/ff.c **** 			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2401:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2402:..\..\FatFs/ff.c **** 			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without val
2403:..\..\FatFs/ff.c **** 				ord = 0xFF;
2404:..\..\FatFs/ff.c **** 			} else {
2405:..\..\FatFs/ff.c **** 				if (attr == AM_LFN) {			/* An LFN entry is found */
2406:..\..\FatFs/ff.c **** 					if (b & LLEF) {			/* Is it start of an LFN sequence? */
2407:..\..\FatFs/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2408:..\..\FatFs/ff.c **** 						b &= (BYTE)~LLEF; ord = b;
2409:..\..\FatFs/ff.c **** 						dp->blk_ofs = dp->dptr;
2410:..\..\FatFs/ff.c **** 					}
2411:..\..\FatFs/ff.c **** 					/* Check LFN validity and capture it */
2412:..\..\FatFs/ff.c **** 					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2413:..\..\FatFs/ff.c **** 				} else {					/* An SFN entry is found */
2414:..\..\FatFs/ff.c **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2415:..\..\FatFs/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2416:..\..\FatFs/ff.c **** 					}
2417:..\..\FatFs/ff.c **** 					break;
2418:..\..\FatFs/ff.c **** 				}
2419:..\..\FatFs/ff.c **** 			}
2420:..\..\FatFs/ff.c **** #else		/* Non LFN configuration */
2421:..\..\FatFs/ff.c **** 			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is
2422:..\..\FatFs/ff.c **** 				break;
2423:..\..\FatFs/ff.c **** 			}
2424:..\..\FatFs/ff.c **** #endif
2425:..\..\FatFs/ff.c **** 		}
2426:..\..\FatFs/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
2427:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
2428:..\..\FatFs/ff.c **** 	}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 53


2429:..\..\FatFs/ff.c **** 
2430:..\..\FatFs/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2431:..\..\FatFs/ff.c **** 	return res;
2432:..\..\FatFs/ff.c **** }
2433:..\..\FatFs/ff.c **** 
2434:..\..\FatFs/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2435:..\..\FatFs/ff.c **** 
2436:..\..\FatFs/ff.c **** 
2437:..\..\FatFs/ff.c **** 
2438:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2439:..\..\FatFs/ff.c **** /* Directory handling - Find an object in the directory                  */
2440:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2441:..\..\FatFs/ff.c **** 
2442:..\..\FatFs/ff.c **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2443:..\..\FatFs/ff.c **** 	DIR* dp					/* Pointer to the directory object with the file name */
2444:..\..\FatFs/ff.c **** )
2445:..\..\FatFs/ff.c **** {
2446:..\..\FatFs/ff.c **** 	FRESULT res;
2447:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
2448:..\..\FatFs/ff.c **** 	BYTE c;
2449:..\..\FatFs/ff.c **** #if FF_USE_LFN
2450:..\..\FatFs/ff.c **** 	BYTE a, ord, sum;
2451:..\..\FatFs/ff.c **** #endif
2452:..\..\FatFs/ff.c **** 
2453:..\..\FatFs/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2454:..\..\FatFs/ff.c **** 	if (res != FR_OK) return res;
2455:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
2456:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2457:..\..\FatFs/ff.c **** 		BYTE nc;
2458:..\..\FatFs/ff.c **** 		UINT di, ni;
2459:..\..\FatFs/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2460:..\..\FatFs/ff.c **** 
2461:..\..\FatFs/ff.c **** 		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
2462:..\..\FatFs/ff.c **** #if FF_MAX_LFN < 255
2463:..\..\FatFs/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object
2464:..\..\FatFs/ff.c **** #endif
2465:..\..\FatFs/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2466:..\..\FatFs/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2467:..\..\FatFs/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2468:..\..\FatFs/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2469:..\..\FatFs/ff.c **** 			}
2470:..\..\FatFs/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2471:..\..\FatFs/ff.c **** 		}
2472:..\..\FatFs/ff.c **** 		return res;
2473:..\..\FatFs/ff.c **** 	}
2474:..\..\FatFs/ff.c **** #endif
2475:..\..\FatFs/ff.c **** 	/* On the FAT/FAT32 volume */
2476:..\..\FatFs/ff.c **** #if FF_USE_LFN
2477:..\..\FatFs/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2478:..\..\FatFs/ff.c **** #endif
2479:..\..\FatFs/ff.c **** 	do {
2480:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
2481:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
2482:..\..\FatFs/ff.c **** 		c = dp->dir[DIR_Name];
2483:..\..\FatFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2484:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2485:..\..\FatFs/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 54


2486:..\..\FatFs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2487:..\..\FatFs/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2488:..\..\FatFs/ff.c **** 		} else {
2489:..\..\FatFs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2490:..\..\FatFs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2491:..\..\FatFs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2492:..\..\FatFs/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2493:..\..\FatFs/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2494:..\..\FatFs/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2495:..\..\FatFs/ff.c **** 					}
2496:..\..\FatFs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2497:..\..\FatFs/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2498:..\..\FatFs/ff.c **** 				}
2499:..\..\FatFs/ff.c **** 			} else {					/* An SFN entry is found */
2500:..\..\FatFs/ff.c **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2501:..\..\FatFs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2502:..\..\FatFs/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2503:..\..\FatFs/ff.c **** 			}
2504:..\..\FatFs/ff.c **** 		}
2505:..\..\FatFs/ff.c **** #else		/* Non LFN configuration */
2506:..\..\FatFs/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2507:..\..\FatFs/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2508:..\..\FatFs/ff.c **** #endif
2509:..\..\FatFs/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
2510:..\..\FatFs/ff.c **** 	} while (res == FR_OK);
2511:..\..\FatFs/ff.c **** 
2512:..\..\FatFs/ff.c **** 	return res;
2513:..\..\FatFs/ff.c **** }
2514:..\..\FatFs/ff.c **** 
2515:..\..\FatFs/ff.c **** 
2516:..\..\FatFs/ff.c **** 
2517:..\..\FatFs/ff.c **** 
2518:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
2519:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2520:..\..\FatFs/ff.c **** /* Register an object to the directory                                   */
2521:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2522:..\..\FatFs/ff.c **** 
2523:..\..\FatFs/ff.c **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
2524:..\..\FatFs/ff.c **** 	DIR* dp						/* Target directory with object name to be created */
2525:..\..\FatFs/ff.c **** )
2526:..\..\FatFs/ff.c **** {
2527:..\..\FatFs/ff.c **** 	FRESULT res;
2528:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
2529:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2530:..\..\FatFs/ff.c **** 	UINT n, nlen, nent;
2531:..\..\FatFs/ff.c **** 	BYTE sn[12], sum;
2532:..\..\FatFs/ff.c **** 
2533:..\..\FatFs/ff.c **** 
2534:..\..\FatFs/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2535:..\..\FatFs/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2536:..\..\FatFs/ff.c **** 
2537:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
2538:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2539:..\..\FatFs/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2540:..\..\FatFs/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate directory entries */
2541:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
2542:..\..\FatFs/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 55


2543:..\..\FatFs/ff.c **** 
2544:..\..\FatFs/ff.c **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
2545:..\..\FatFs/ff.c **** 			dp->obj.stat &= ~4;
2546:..\..\FatFs/ff.c **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2547:..\..\FatFs/ff.c **** 			if (res != FR_OK) return res;
2548:..\..\FatFs/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2549:..\..\FatFs/ff.c **** 			if (res != FR_OK) return res;
2550:..\..\FatFs/ff.c **** 			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
2551:..\..\FatFs/ff.c **** 				DIR dj;
2552:..\..\FatFs/ff.c **** 
2553:..\..\FatFs/ff.c **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2554:..\..\FatFs/ff.c **** 				if (res != FR_OK) return res;
2555:..\..\FatFs/ff.c **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size 
2556:..\..\FatFs/ff.c **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
2557:..\..\FatFs/ff.c **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2558:..\..\FatFs/ff.c **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
2559:..\..\FatFs/ff.c **** 				res = store_xdir(&dj);				/* Store the object status */
2560:..\..\FatFs/ff.c **** 				if (res != FR_OK) return res;
2561:..\..\FatFs/ff.c **** 			}
2562:..\..\FatFs/ff.c **** 		}
2563:..\..\FatFs/ff.c **** 
2564:..\..\FatFs/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2565:..\..\FatFs/ff.c **** 		return FR_OK;
2566:..\..\FatFs/ff.c **** 	}
2567:..\..\FatFs/ff.c **** #endif
2568:..\..\FatFs/ff.c **** 	/* On the FAT/FAT32 volume */
2569:..\..\FatFs/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2570:..\..\FatFs/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2571:..\..\FatFs/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2572:..\..\FatFs/ff.c **** 		for (n = 1; n < 100; n++) {
2573:..\..\FatFs/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2574:..\..\FatFs/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2575:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
2576:..\..\FatFs/ff.c **** 		}
2577:..\..\FatFs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2578:..\..\FatFs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2579:..\..\FatFs/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2580:..\..\FatFs/ff.c **** 	}
2581:..\..\FatFs/ff.c **** 
2582:..\..\FatFs/ff.c **** 	/* Create an SFN with/without LFNs. */
2583:..\..\FatFs/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2584:..\..\FatFs/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2585:..\..\FatFs/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2586:..\..\FatFs/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2587:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
2588:..\..\FatFs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2589:..\..\FatFs/ff.c **** 			do {					/* Store LFN entries in bottom first */
2590:..\..\FatFs/ff.c **** 				res = move_window(fs, dp->sect);
2591:..\..\FatFs/ff.c **** 				if (res != FR_OK) break;
2592:..\..\FatFs/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2593:..\..\FatFs/ff.c **** 				fs->wflag = 1;
2594:..\..\FatFs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2595:..\..\FatFs/ff.c **** 			} while (res == FR_OK && --nent);
2596:..\..\FatFs/ff.c **** 		}
2597:..\..\FatFs/ff.c **** 	}
2598:..\..\FatFs/ff.c **** 
2599:..\..\FatFs/ff.c **** #else	/* Non LFN configuration */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 56


2600:..\..\FatFs/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2601:..\..\FatFs/ff.c **** 
2602:..\..\FatFs/ff.c **** #endif
2603:..\..\FatFs/ff.c **** 
2604:..\..\FatFs/ff.c **** 	/* Set SFN entry */
2605:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
2606:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
2607:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
2608:..\..\FatFs/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2609:..\..\FatFs/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2610:..\..\FatFs/ff.c **** #if FF_USE_LFN
2611:..\..\FatFs/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2612:..\..\FatFs/ff.c **** #endif
2613:..\..\FatFs/ff.c **** 			fs->wflag = 1;
2614:..\..\FatFs/ff.c **** 		}
2615:..\..\FatFs/ff.c **** 	}
2616:..\..\FatFs/ff.c **** 
2617:..\..\FatFs/ff.c **** 	return res;
2618:..\..\FatFs/ff.c **** }
2619:..\..\FatFs/ff.c **** 
2620:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
2621:..\..\FatFs/ff.c **** 
2622:..\..\FatFs/ff.c **** 
2623:..\..\FatFs/ff.c **** 
2624:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2625:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2626:..\..\FatFs/ff.c **** /* Remove an object from the directory                                   */
2627:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2628:..\..\FatFs/ff.c **** 
2629:..\..\FatFs/ff.c **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2630:..\..\FatFs/ff.c **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2631:..\..\FatFs/ff.c **** )
2632:..\..\FatFs/ff.c **** {
2633:..\..\FatFs/ff.c **** 	FRESULT res;
2634:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
2635:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2636:..\..\FatFs/ff.c **** 	DWORD last = dp->dptr;
2637:..\..\FatFs/ff.c **** 
2638:..\..\FatFs/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2639:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
2640:..\..\FatFs/ff.c **** 		do {
2641:..\..\FatFs/ff.c **** 			res = move_window(fs, dp->sect);
2642:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
2643:..\..\FatFs/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2644:..\..\FatFs/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2645:..\..\FatFs/ff.c **** 			} else {									/* On the FAT/FAT32 volume */
2646:..\..\FatFs/ff.c **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
2647:..\..\FatFs/ff.c **** 			}
2648:..\..\FatFs/ff.c **** 			fs->wflag = 1;
2649:..\..\FatFs/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2650:..\..\FatFs/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2651:..\..\FatFs/ff.c **** 		} while (res == FR_OK);
2652:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2653:..\..\FatFs/ff.c **** 	}
2654:..\..\FatFs/ff.c **** #else			/* Non LFN configuration */
2655:..\..\FatFs/ff.c **** 
2656:..\..\FatFs/ff.c **** 	res = move_window(fs, dp->sect);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 57


2657:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
2658:..\..\FatFs/ff.c **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
2659:..\..\FatFs/ff.c **** 		fs->wflag = 1;
2660:..\..\FatFs/ff.c **** 	}
2661:..\..\FatFs/ff.c **** #endif
2662:..\..\FatFs/ff.c **** 
2663:..\..\FatFs/ff.c **** 	return res;
2664:..\..\FatFs/ff.c **** }
2665:..\..\FatFs/ff.c **** 
2666:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2667:..\..\FatFs/ff.c **** 
2668:..\..\FatFs/ff.c **** 
2669:..\..\FatFs/ff.c **** 
2670:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2671:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2672:..\..\FatFs/ff.c **** /* Get file information from directory entry                             */
2673:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2674:..\..\FatFs/ff.c **** 
2675:..\..\FatFs/ff.c **** static void get_fileinfo (
2676:..\..\FatFs/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2677:..\..\FatFs/ff.c **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2678:..\..\FatFs/ff.c **** )
2679:..\..\FatFs/ff.c **** {
 530              		.loc 1 2679 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL77:
2680:..\..\FatFs/ff.c **** 	UINT si, di;
2681:..\..\FatFs/ff.c **** #if FF_USE_LFN
2682:..\..\FatFs/ff.c **** 	BYTE lcf;
2683:..\..\FatFs/ff.c **** 	WCHAR wc, hs;
2684:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
2685:..\..\FatFs/ff.c **** #else
2686:..\..\FatFs/ff.c **** 	TCHAR c;
2687:..\..\FatFs/ff.c **** #endif
2688:..\..\FatFs/ff.c **** 
2689:..\..\FatFs/ff.c **** 
2690:..\..\FatFs/ff.c **** 	fno->fname[0] = 0;			/* Invaidate file info */
 535              		.loc 1 2690 0
 536 0000 0023     		movs	r3, #0
 537 0002 4B72     		strb	r3, [r1, #9]
2691:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 538              		.loc 1 2691 0
 539 0004 8369     		ldr	r3, [r0, #24]
 540 0006 7BB3     		cbz	r3, .L49
2679:..\..\FatFs/ff.c **** 	UINT si, di;
 541              		.loc 1 2679 0
 542 0008 70B5     		push	{r4, r5, r6, lr}
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 4, -16
 545              		.cfi_offset 5, -12
 546              		.cfi_offset 6, -8
 547              		.cfi_offset 14, -4
 548 000a 0024     		movs	r4, #0
 549 000c 2346     		mov	r3, r4
 550 000e 11E0     		b	.L42
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 58


 551              	.LVL78:
 552              	.L46:
2692:..\..\FatFs/ff.c **** 
2693:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2694:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
2695:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2696:..\..\FatFs/ff.c **** 		get_xfileinfo(fs->dirbuf, fno);
2697:..\..\FatFs/ff.c **** 		return;
2698:..\..\FatFs/ff.c **** 	} else
2699:..\..\FatFs/ff.c **** #endif
2700:..\..\FatFs/ff.c **** 	{	/* On the FAT/FAT32 volume */
2701:..\..\FatFs/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2702:..\..\FatFs/ff.c **** 			si = di = hs = 0;
2703:..\..\FatFs/ff.c **** 			while (fs->lfnbuf[si] != 0) {
2704:..\..\FatFs/ff.c **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
2705:..\..\FatFs/ff.c **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2706:..\..\FatFs/ff.c **** 					hs = wc; continue;		/* Get low surrogate */
2707:..\..\FatFs/ff.c **** 				}
2708:..\..\FatFs/ff.c **** 				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or 
2709:..\..\FatFs/ff.c **** 				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
2710:..\..\FatFs/ff.c **** 				di += wc;
2711:..\..\FatFs/ff.c **** 				hs = 0;
2712:..\..\FatFs/ff.c **** 			}
2713:..\..\FatFs/ff.c **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
2714:..\..\FatFs/ff.c **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
2715:..\..\FatFs/ff.c **** 		}
2716:..\..\FatFs/ff.c **** 	}
2717:..\..\FatFs/ff.c **** 
2718:..\..\FatFs/ff.c **** 	si = di = 0;
2719:..\..\FatFs/ff.c **** 	while (si < 11) {		/* Get SFN from SFN entry */
2720:..\..\FatFs/ff.c **** 		wc = dp->dir[si++];			/* Get a char */
2721:..\..\FatFs/ff.c **** 		if (wc == ' ') continue;	/* Skip padding spaces */
2722:..\..\FatFs/ff.c **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
2723:..\..\FatFs/ff.c **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
2724:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2725:..\..\FatFs/ff.c **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2726:..\..\FatFs/ff.c **** 			wc = wc << 8 | dp->dir[si++];
2727:..\..\FatFs/ff.c **** 		}
2728:..\..\FatFs/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2729:..\..\FatFs/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
2730:..\..\FatFs/ff.c **** 		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
2731:..\..\FatFs/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
2732:..\..\FatFs/ff.c **** 		di += wc;
2733:..\..\FatFs/ff.c **** #else					/* ANSI/OEM output */
2734:..\..\FatFs/ff.c **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
2735:..\..\FatFs/ff.c **** #endif
2736:..\..\FatFs/ff.c **** 	}
2737:..\..\FatFs/ff.c **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
2738:..\..\FatFs/ff.c **** 
2739:..\..\FatFs/ff.c **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
2740:..\..\FatFs/ff.c **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
2741:..\..\FatFs/ff.c **** 			fno->fname[di++] = '?';
2742:..\..\FatFs/ff.c **** 		} else {
2743:..\..\FatFs/ff.c **** 			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] wi
2744:..\..\FatFs/ff.c **** 				wc = (WCHAR)fno->altname[si];
2745:..\..\FatFs/ff.c **** 				if (wc == '.') lcf = NS_EXT;
2746:..\..\FatFs/ff.c **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 59


2747:..\..\FatFs/ff.c **** 				fno->fname[di] = (TCHAR)wc;
2748:..\..\FatFs/ff.c **** 			}
2749:..\..\FatFs/ff.c **** 		}
2750:..\..\FatFs/ff.c **** 		fno->fname[di] = 0;	/* Terminate the LFN */
2751:..\..\FatFs/ff.c **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
2752:..\..\FatFs/ff.c **** 	}
2753:..\..\FatFs/ff.c **** 
2754:..\..\FatFs/ff.c **** #else	/* Non-LFN configuration */
2755:..\..\FatFs/ff.c **** 	si = di = 0;
2756:..\..\FatFs/ff.c **** 	while (si < 11) {		/* Copy name body and extension */
2757:..\..\FatFs/ff.c **** 		c = (TCHAR)dp->dir[si++];
 553              		.loc 1 2757 0
 554 0010 C569     		ldr	r5, [r0, #28]
 555 0012 5A1C     		adds	r2, r3, #1
 556              	.LVL79:
 557 0014 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 558              	.LVL80:
2758:..\..\FatFs/ff.c **** 		if (c == ' ') continue;		/* Skip padding spaces */
 559              		.loc 1 2758 0
 560 0016 202B     		cmp	r3, #32
 561 0018 0BD0     		beq	.L43
2759:..\..\FatFs/ff.c **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 562              		.loc 1 2759 0
 563 001a 052B     		cmp	r3, #5
 564 001c 00D1     		bne	.L44
 565 001e E523     		movs	r3, #229
 566              	.LVL81:
 567              	.L44:
2760:..\..\FatFs/ff.c **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 568              		.loc 1 2760 0
 569 0020 092A     		cmp	r2, #9
 570 0022 03D1     		bne	.L45
 571              	.LVL82:
 572              		.loc 1 2760 0 is_stmt 0 discriminator 1
 573 0024 0D19     		adds	r5, r1, r4
 574 0026 2E26     		movs	r6, #46
 575 0028 6E72     		strb	r6, [r5, #9]
 576 002a 0134     		adds	r4, r4, #1
 577              	.LVL83:
 578              	.L45:
2761:..\..\FatFs/ff.c **** 		fno->fname[di++] = c;
 579              		.loc 1 2761 0 is_stmt 1
 580 002c 0D19     		adds	r5, r1, r4
 581 002e 6B72     		strb	r3, [r5, #9]
 582 0030 0134     		adds	r4, r4, #1
 583              	.LVL84:
 584              	.L43:
 585 0032 1346     		mov	r3, r2
 586              	.LVL85:
 587              	.L42:
2756:..\..\FatFs/ff.c **** 		c = (TCHAR)dp->dir[si++];
 588              		.loc 1 2756 0
 589 0034 0A2B     		cmp	r3, #10
 590 0036 EBD9     		bls	.L46
 591 0038 0E46     		mov	r6, r1
 592 003a 0546     		mov	r5, r0
2762:..\..\FatFs/ff.c **** 	}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 60


2763:..\..\FatFs/ff.c **** 	fno->fname[di] = 0;
 593              		.loc 1 2763 0
 594 003c 0C44     		add	r4, r4, r1
 595              	.LVL86:
 596 003e 0023     		movs	r3, #0
 597              	.LVL87:
 598 0040 6372     		strb	r3, [r4, #9]
2764:..\..\FatFs/ff.c **** #endif
2765:..\..\FatFs/ff.c **** 
2766:..\..\FatFs/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 599              		.loc 1 2766 0
 600 0042 C369     		ldr	r3, [r0, #28]
 601 0044 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 602 0046 0B72     		strb	r3, [r1, #8]
2767:..\..\FatFs/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 603              		.loc 1 2767 0
 604 0048 C069     		ldr	r0, [r0, #28]
 605              	.LVL88:
 606 004a 1C30     		adds	r0, r0, #28
 607 004c FFF7FEFF 		bl	ld_dword
 608              	.LVL89:
 609 0050 3060     		str	r0, [r6]
2768:..\..\FatFs/ff.c **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 610              		.loc 1 2768 0
 611 0052 E869     		ldr	r0, [r5, #28]
 612 0054 1630     		adds	r0, r0, #22
 613 0056 FFF7FEFF 		bl	ld_word
 614              	.LVL90:
 615 005a F080     		strh	r0, [r6, #6]	@ movhi
2769:..\..\FatFs/ff.c **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 616              		.loc 1 2769 0
 617 005c E869     		ldr	r0, [r5, #28]
 618 005e 1830     		adds	r0, r0, #24
 619 0060 FFF7FEFF 		bl	ld_word
 620              	.LVL91:
 621 0064 B080     		strh	r0, [r6, #4]	@ movhi
 622 0066 70BD     		pop	{r4, r5, r6, pc}
 623              	.LVL92:
 624              	.L49:
 625              		.cfi_def_cfa_offset 0
 626              		.cfi_restore 4
 627              		.cfi_restore 5
 628              		.cfi_restore 6
 629              		.cfi_restore 14
 630 0068 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE28:
 633              		.size	get_fileinfo, .-get_fileinfo
 634 006a 00BF     		.section	.text.create_name,"ax",%progbits
 635              		.align	2
 636              		.thumb
 637              		.thumb_func
 638              		.type	create_name, %function
 639              	create_name:
 640              	.LFB29:
2770:..\..\FatFs/ff.c **** }
2771:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 61


2772:..\..\FatFs/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2773:..\..\FatFs/ff.c **** 
2774:..\..\FatFs/ff.c **** 
2775:..\..\FatFs/ff.c **** 
2776:..\..\FatFs/ff.c **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2777:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2778:..\..\FatFs/ff.c **** /* Pattern matching                                                      */
2779:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2780:..\..\FatFs/ff.c **** 
2781:..\..\FatFs/ff.c **** static DWORD get_achar (	/* Get a character and advances ptr */
2782:..\..\FatFs/ff.c **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2783:..\..\FatFs/ff.c **** )
2784:..\..\FatFs/ff.c **** {
2785:..\..\FatFs/ff.c **** 	DWORD chr;
2786:..\..\FatFs/ff.c **** 
2787:..\..\FatFs/ff.c **** 
2788:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
2789:..\..\FatFs/ff.c **** 	chr = tchar2uni(ptr);
2790:..\..\FatFs/ff.c **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2791:..\..\FatFs/ff.c **** 	chr = ff_wtoupper(chr);
2792:..\..\FatFs/ff.c **** 
2793:..\..\FatFs/ff.c **** #else									/* ANSI/OEM input */
2794:..\..\FatFs/ff.c **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2795:..\..\FatFs/ff.c **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2796:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
2797:..\..\FatFs/ff.c **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2798:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE < 900
2799:..\..\FatFs/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2800:..\..\FatFs/ff.c **** #endif
2801:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2802:..\..\FatFs/ff.c **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2803:..\..\FatFs/ff.c **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2804:..\..\FatFs/ff.c **** 	}
2805:..\..\FatFs/ff.c **** #endif
2806:..\..\FatFs/ff.c **** 
2807:..\..\FatFs/ff.c **** #endif
2808:..\..\FatFs/ff.c **** 	return chr;
2809:..\..\FatFs/ff.c **** }
2810:..\..\FatFs/ff.c **** 
2811:..\..\FatFs/ff.c **** 
2812:..\..\FatFs/ff.c **** static int pattern_matching (	/* 0:not matched, 1:matched */
2813:..\..\FatFs/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2814:..\..\FatFs/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2815:..\..\FatFs/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2816:..\..\FatFs/ff.c **** 	int inf				/* Infinite search (* specified) */
2817:..\..\FatFs/ff.c **** )
2818:..\..\FatFs/ff.c **** {
2819:..\..\FatFs/ff.c **** 	const TCHAR *pp, *np;
2820:..\..\FatFs/ff.c **** 	DWORD pc, nc;
2821:..\..\FatFs/ff.c **** 	int nm, nx;
2822:..\..\FatFs/ff.c **** 
2823:..\..\FatFs/ff.c **** 
2824:..\..\FatFs/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2825:..\..\FatFs/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2826:..\..\FatFs/ff.c **** 	}
2827:..\..\FatFs/ff.c **** 	if (*pat == 0 && inf) return 1;	/* (short circuit) */
2828:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 62


2829:..\..\FatFs/ff.c **** 	do {
2830:..\..\FatFs/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2831:..\..\FatFs/ff.c **** 		for (;;) {
2832:..\..\FatFs/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2833:..\..\FatFs/ff.c **** 				nm = nx = 0;
2834:..\..\FatFs/ff.c **** 				do {				/* Analyze the wildcard block */
2835:..\..\FatFs/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2836:..\..\FatFs/ff.c **** 				} while (*pp == '?' || *pp == '*');
2837:..\..\FatFs/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2838:..\..\FatFs/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2839:..\..\FatFs/ff.c **** 			}
2840:..\..\FatFs/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2841:..\..\FatFs/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2842:..\..\FatFs/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2843:..\..\FatFs/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2844:..\..\FatFs/ff.c **** 		}
2845:..\..\FatFs/ff.c **** 		get_achar(&nam);			/* nam++ */
2846:..\..\FatFs/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2847:..\..\FatFs/ff.c **** 
2848:..\..\FatFs/ff.c **** 	return 0;
2849:..\..\FatFs/ff.c **** }
2850:..\..\FatFs/ff.c **** 
2851:..\..\FatFs/ff.c **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2852:..\..\FatFs/ff.c **** 
2853:..\..\FatFs/ff.c **** 
2854:..\..\FatFs/ff.c **** 
2855:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2856:..\..\FatFs/ff.c **** /* Pick a top segment and create the object name in directory form       */
2857:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
2858:..\..\FatFs/ff.c **** 
2859:..\..\FatFs/ff.c **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2860:..\..\FatFs/ff.c **** 	DIR* dp,					/* Pointer to the directory object */
2861:..\..\FatFs/ff.c **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2862:..\..\FatFs/ff.c **** )
2863:..\..\FatFs/ff.c **** {
 641              		.loc 1 2863 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 8
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              	.LVL93:
 646 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 647              		.cfi_def_cfa_offset 36
 648              		.cfi_offset 4, -36
 649              		.cfi_offset 5, -32
 650              		.cfi_offset 6, -28
 651              		.cfi_offset 7, -24
 652              		.cfi_offset 8, -20
 653              		.cfi_offset 9, -16
 654              		.cfi_offset 10, -12
 655              		.cfi_offset 11, -8
 656              		.cfi_offset 14, -4
 657 0004 83B0     		sub	sp, sp, #12
 658              		.cfi_def_cfa_offset 48
 659 0006 0190     		str	r0, [sp, #4]
 660 0008 8B46     		mov	fp, r1
2864:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2865:..\..\FatFs/ff.c **** 	BYTE b, cf;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 63


2866:..\..\FatFs/ff.c **** 	WCHAR wc, *lfn;
2867:..\..\FatFs/ff.c **** 	DWORD uc;
2868:..\..\FatFs/ff.c **** 	UINT i, ni, si, di;
2869:..\..\FatFs/ff.c **** 	const TCHAR *p;
2870:..\..\FatFs/ff.c **** 
2871:..\..\FatFs/ff.c **** 
2872:..\..\FatFs/ff.c **** 	/* Create LFN into LFN working buffer */
2873:..\..\FatFs/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2874:..\..\FatFs/ff.c **** 	for (;;) {
2875:..\..\FatFs/ff.c **** 		uc = tchar2uni(&p);			/* Get a character */
2876:..\..\FatFs/ff.c **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
2877:..\..\FatFs/ff.c **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
2878:..\..\FatFs/ff.c **** 		wc = (WCHAR)uc;
2879:..\..\FatFs/ff.c **** 		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is fou
2880:..\..\FatFs/ff.c **** 		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characte
2881:..\..\FatFs/ff.c **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2882:..\..\FatFs/ff.c **** 		lfn[di++] = wc;					/* Store the Unicode character */
2883:..\..\FatFs/ff.c **** 	}
2884:..\..\FatFs/ff.c **** 	if (wc < ' ') {				/* End of path? */
2885:..\..\FatFs/ff.c **** 		cf = NS_LAST;			/* Set last segment flag */
2886:..\..\FatFs/ff.c **** 	} else {
2887:..\..\FatFs/ff.c **** 		cf = 0;					/* Next segment follows */
2888:..\..\FatFs/ff.c **** 		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
2889:..\..\FatFs/ff.c **** 	}
2890:..\..\FatFs/ff.c **** 	*path = p;					/* Return pointer to the next segment */
2891:..\..\FatFs/ff.c **** 
2892:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
2893:..\..\FatFs/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2894:..\..\FatFs/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2895:..\..\FatFs/ff.c **** 		lfn[di] = 0;
2896:..\..\FatFs/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
2897:..\..\FatFs/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2898:..\..\FatFs/ff.c **** 		}
2899:..\..\FatFs/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2900:..\..\FatFs/ff.c **** 		return FR_OK;
2901:..\..\FatFs/ff.c **** 	}
2902:..\..\FatFs/ff.c **** #endif
2903:..\..\FatFs/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2904:..\..\FatFs/ff.c **** 		wc = lfn[di - 1];
2905:..\..\FatFs/ff.c **** 		if (wc != ' ' && wc != '.') break;
2906:..\..\FatFs/ff.c **** 		di--;
2907:..\..\FatFs/ff.c **** 	}
2908:..\..\FatFs/ff.c **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
2909:..\..\FatFs/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
2910:..\..\FatFs/ff.c **** 
2911:..\..\FatFs/ff.c **** 	/* Create SFN in directory form */
2912:..\..\FatFs/ff.c **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
2913:..\..\FatFs/ff.c **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
2914:..\..\FatFs/ff.c **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
2915:..\..\FatFs/ff.c **** 
2916:..\..\FatFs/ff.c **** 	mem_set(dp->fn, ' ', 11);
2917:..\..\FatFs/ff.c **** 	i = b = 0; ni = 8;
2918:..\..\FatFs/ff.c **** 	for (;;) {
2919:..\..\FatFs/ff.c **** 		wc = lfn[si++];					/* Get an LFN character */
2920:..\..\FatFs/ff.c **** 		if (wc == 0) break;				/* Break on end of the LFN */
2921:..\..\FatFs/ff.c **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
2922:..\..\FatFs/ff.c **** 			cf |= NS_LOSS | NS_LFN;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 64


2923:..\..\FatFs/ff.c **** 			continue;
2924:..\..\FatFs/ff.c **** 		}
2925:..\..\FatFs/ff.c **** 
2926:..\..\FatFs/ff.c **** 		if (i >= ni || si == di) {		/* End of field? */
2927:..\..\FatFs/ff.c **** 			if (ni == 11) {				/* Name extension overflow? */
2928:..\..\FatFs/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2929:..\..\FatFs/ff.c **** 				break;
2930:..\..\FatFs/ff.c **** 			}
2931:..\..\FatFs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
2932:..\..\FatFs/ff.c **** 			if (si > di) break;						/* No name extension? */
2933:..\..\FatFs/ff.c **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
2934:..\..\FatFs/ff.c **** 			continue;
2935:..\..\FatFs/ff.c **** 		}
2936:..\..\FatFs/ff.c **** 
2937:..\..\FatFs/ff.c **** 		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
2938:..\..\FatFs/ff.c **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
2939:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
2940:..\..\FatFs/ff.c **** 			if (ExCvt) {	/* At SBCS */
2941:..\..\FatFs/ff.c **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2942:..\..\FatFs/ff.c **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2943:..\..\FatFs/ff.c **** 			} else {		/* At DBCS */
2944:..\..\FatFs/ff.c **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2945:..\..\FatFs/ff.c **** 			}
2946:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE < 900	/* SBCS cfg */
2947:..\..\FatFs/ff.c **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2948:..\..\FatFs/ff.c **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2949:..\..\FatFs/ff.c **** #else						/* DBCS cfg */
2950:..\..\FatFs/ff.c **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2951:..\..\FatFs/ff.c **** #endif
2952:..\..\FatFs/ff.c **** 		}
2953:..\..\FatFs/ff.c **** 
2954:..\..\FatFs/ff.c **** 		if (wc >= 0x100) {				/* Is this a DBC? */
2955:..\..\FatFs/ff.c **** 			if (i >= ni - 1) {			/* Field overflow? */
2956:..\..\FatFs/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2957:..\..\FatFs/ff.c **** 				i = ni; continue;		/* Next field */
2958:..\..\FatFs/ff.c **** 			}
2959:..\..\FatFs/ff.c **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
2960:..\..\FatFs/ff.c **** 		} else {						/* SBC */
2961:..\..\FatFs/ff.c **** 			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
2962:..\..\FatFs/ff.c **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2963:..\..\FatFs/ff.c **** 			} else {
2964:..\..\FatFs/ff.c **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
2965:..\..\FatFs/ff.c **** 					b |= 2;
2966:..\..\FatFs/ff.c **** 				}
2967:..\..\FatFs/ff.c **** 				if (IsLower(wc)) {		/* ASCII lower case? */
2968:..\..\FatFs/ff.c **** 					b |= 1; wc -= 0x20;
2969:..\..\FatFs/ff.c **** 				}
2970:..\..\FatFs/ff.c **** 			}
2971:..\..\FatFs/ff.c **** 		}
2972:..\..\FatFs/ff.c **** 		dp->fn[i++] = (BYTE)wc;
2973:..\..\FatFs/ff.c **** 	}
2974:..\..\FatFs/ff.c **** 
2975:..\..\FatFs/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2976:..\..\FatFs/ff.c **** 
2977:..\..\FatFs/ff.c **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
2978:..\..\FatFs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
2979:..\..\FatFs/ff.c **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 65


2980:..\..\FatFs/ff.c **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
2981:..\..\FatFs/ff.c **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
2982:..\..\FatFs/ff.c **** 	}
2983:..\..\FatFs/ff.c **** 
2984:..\..\FatFs/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
2985:..\..\FatFs/ff.c **** 
2986:..\..\FatFs/ff.c **** 	return FR_OK;
2987:..\..\FatFs/ff.c **** 
2988:..\..\FatFs/ff.c **** 
2989:..\..\FatFs/ff.c **** #else	/* FF_USE_LFN : Non-LFN configuration */
2990:..\..\FatFs/ff.c **** 	BYTE c, d, *sfn;
2991:..\..\FatFs/ff.c **** 	UINT ni, si, i;
2992:..\..\FatFs/ff.c **** 	const char *p;
2993:..\..\FatFs/ff.c **** 
2994:..\..\FatFs/ff.c **** 	/* Create file name in directory form */
2995:..\..\FatFs/ff.c **** 	p = *path; sfn = dp->fn;
 661              		.loc 1 2995 0
 662 000a 0D68     		ldr	r5, [r1]
 663              	.LVL94:
 664 000c 00F12009 		add	r9, r0, #32
 665              	.LVL95:
2996:..\..\FatFs/ff.c **** 	mem_set(sfn, ' ', 11);
 666              		.loc 1 2996 0
 667 0010 0B22     		movs	r2, #11
 668 0012 2021     		movs	r1, #32
 669              	.LVL96:
 670 0014 4846     		mov	r0, r9
 671              	.LVL97:
 672 0016 FFF7FEFF 		bl	mem_set
 673              	.LVL98:
2997:..\..\FatFs/ff.c **** 	si = i = 0; ni = 8;
2998:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
2999:..\..\FatFs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 674              		.loc 1 2999 0
 675 001a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 676 001c 2E2B     		cmp	r3, #46
 677 001e 1FD1     		bne	.L68
 678 0020 0021     		movs	r1, #0
 679 0022 0B46     		mov	r3, r1
 680              	.LVL99:
 681              	.L53:
3000:..\..\FatFs/ff.c **** 		for (;;) {
3001:..\..\FatFs/ff.c **** 			c = (BYTE)p[si++];
 682              		.loc 1 3001 0
 683 0024 5A1C     		adds	r2, r3, #1
 684              	.LVL100:
 685 0026 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 686              	.LVL101:
3002:..\..\FatFs/ff.c **** 			if (c != '.' || si >= 3) break;
 687              		.loc 1 3002 0
 688 0028 2E2B     		cmp	r3, #46
 689 002a 06D1     		bne	.L52
 690              		.loc 1 3002 0 is_stmt 0 discriminator 1
 691 002c 022A     		cmp	r2, #2
 692 002e 04D8     		bhi	.L52
 693              	.LVL102:
3003:..\..\FatFs/ff.c **** 			sfn[i++] = c;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 66


 694              		.loc 1 3003 0 is_stmt 1
 695 0030 09F80130 		strb	r3, [r9, r1]
3001:..\..\FatFs/ff.c **** 			if (c != '.' || si >= 3) break;
 696              		.loc 1 3001 0
 697 0034 1346     		mov	r3, r2
 698              	.LVL103:
 699              		.loc 1 3003 0
 700 0036 0131     		adds	r1, r1, #1
 701              	.LVL104:
3004:..\..\FatFs/ff.c **** 		}
 702              		.loc 1 3004 0
 703 0038 F4E7     		b	.L53
 704              	.LVL105:
 705              	.L52:
3005:..\..\FatFs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 706              		.loc 1 3005 0
 707 003a 2F2B     		cmp	r3, #47
 708 003c 03D0     		beq	.L54
 709              		.loc 1 3005 0 is_stmt 0 discriminator 1
 710 003e 5C2B     		cmp	r3, #92
 711 0040 01D0     		beq	.L54
 712              		.loc 1 3005 0 discriminator 2
 713 0042 202B     		cmp	r3, #32
 714 0044 6ED8     		bhi	.L69
 715              	.L54:
3006:..\..\FatFs/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
 716              		.loc 1 3006 0 is_stmt 1
 717 0046 1544     		add	r5, r5, r2
 718              	.LVL106:
 719 0048 CBF80050 		str	r5, [fp]
3007:..\..\FatFs/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
 720              		.loc 1 3007 0
 721 004c 202B     		cmp	r3, #32
 722 004e 01D8     		bhi	.L70
 723 0050 2423     		movs	r3, #36
 724              	.LVL107:
 725 0052 00E0     		b	.L56
 726              	.LVL108:
 727              	.L70:
 728 0054 2023     		movs	r3, #32
 729              	.LVL109:
 730              	.L56:
 731              		.loc 1 3007 0 is_stmt 0 discriminator 4
 732 0056 019A     		ldr	r2, [sp, #4]
 733              	.LVL110:
 734 0058 82F82B30 		strb	r3, [r2, #43]
3008:..\..\FatFs/ff.c **** 		return FR_OK;
 735              		.loc 1 3008 0 is_stmt 1 discriminator 4
 736 005c 0020     		movs	r0, #0
 737 005e 6EE0     		b	.L55
 738              	.LVL111:
 739              	.L68:
 740 0060 0026     		movs	r6, #0
 741 0062 B046     		mov	r8, r6
 742 0064 4FF0080A 		mov	r10, #8
 743              	.LVL112:
 744              	.L51:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 67


3009:..\..\FatFs/ff.c **** 	}
3010:..\..\FatFs/ff.c **** #endif
3011:..\..\FatFs/ff.c **** 	for (;;) {
3012:..\..\FatFs/ff.c **** 		c = (BYTE)p[si++];				/* Get a byte */
 745              		.loc 1 3012 0
 746 0068 08F10107 		add	r7, r8, #1
 747              	.LVL113:
 748 006c 15F80840 		ldrb	r4, [r5, r8]	@ zero_extendqisi2
 749              	.LVL114:
3013:..\..\FatFs/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 750              		.loc 1 3013 0
 751 0070 202C     		cmp	r4, #32
 752 0072 40D9     		bls	.L57
3014:..\..\FatFs/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 753              		.loc 1 3014 0
 754 0074 2F2C     		cmp	r4, #47
 755 0076 03D0     		beq	.L58
 756              		.loc 1 3014 0 is_stmt 0 discriminator 1
 757 0078 5C2C     		cmp	r4, #92
 758 007a 07D1     		bne	.L78
 759 007c 00E0     		b	.L58
 760              	.L60:
3015:..\..\FatFs/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 761              		.loc 1 3015 0 is_stmt 1 discriminator 4
 762 007e 0137     		adds	r7, r7, #1
 763              	.LVL115:
 764              	.L58:
 765              		.loc 1 3015 0 is_stmt 0 discriminator 1
 766 0080 EB5D     		ldrb	r3, [r5, r7]	@ zero_extendqisi2
 767 0082 2F2B     		cmp	r3, #47
 768 0084 FBD0     		beq	.L60
 769              		.loc 1 3015 0 discriminator 3
 770 0086 5C2B     		cmp	r3, #92
 771 0088 F9D0     		beq	.L60
 772 008a 34E0     		b	.L57
 773              	.L78:
3016:..\..\FatFs/ff.c **** 			break;
3017:..\..\FatFs/ff.c **** 		}
3018:..\..\FatFs/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 774              		.loc 1 3018 0 is_stmt 1
 775 008c 2E2C     		cmp	r4, #46
 776 008e 01D0     		beq	.L61
 777              		.loc 1 3018 0 is_stmt 0 discriminator 1
 778 0090 B245     		cmp	r10, r6
 779 0092 09D8     		bhi	.L62
 780              	.L61:
3019:..\..\FatFs/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 781              		.loc 1 3019 0 is_stmt 1
 782 0094 BAF10B0F 		cmp	r10, #11
 783 0098 46D0     		beq	.L71
 784              		.loc 1 3019 0 is_stmt 0 discriminator 2
 785 009a 2E2C     		cmp	r4, #46
 786 009c 46D1     		bne	.L72
3012:..\..\FatFs/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 787              		.loc 1 3012 0 is_stmt 1
 788 009e B846     		mov	r8, r7
3020:..\..\FatFs/ff.c **** 			i = 8; ni = 11;				/* Enter file extension field */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 68


 789              		.loc 1 3020 0
 790 00a0 0826     		movs	r6, #8
 791              	.LVL116:
 792 00a2 4FF00B0A 		mov	r10, #11
 793              	.LVL117:
 794 00a6 DFE7     		b	.L51
 795              	.LVL118:
 796              	.L62:
3021:..\..\FatFs/ff.c **** 			continue;
3022:..\..\FatFs/ff.c **** 		}
3023:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
3024:..\..\FatFs/ff.c **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
3025:..\..\FatFs/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
3026:..\..\FatFs/ff.c **** 		}
3027:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE < 900
3028:..\..\FatFs/ff.c **** 		if (c >= 0x80) {				/* Is SBC extended character? */
3029:..\..\FatFs/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
3030:..\..\FatFs/ff.c **** 		}
3031:..\..\FatFs/ff.c **** #endif
3032:..\..\FatFs/ff.c **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 797              		.loc 1 3032 0
 798 00a8 2046     		mov	r0, r4
 799 00aa FFF7FEFF 		bl	dbc_1st
 800              	.LVL119:
 801 00ae 88B1     		cbz	r0, .L64
3033:..\..\FatFs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 802              		.loc 1 3033 0
 803 00b0 08F10208 		add	r8, r8, #2
 804              	.LVL120:
 805 00b4 EF5D     		ldrb	r7, [r5, r7]	@ zero_extendqisi2
 806              	.LVL121:
3034:..\..\FatFs/ff.c **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 807              		.loc 1 3034 0
 808 00b6 3846     		mov	r0, r7
 809 00b8 FFF7FEFF 		bl	dbc_2nd
 810              	.LVL122:
 811 00bc C0B3     		cbz	r0, .L73
 812              		.loc 1 3034 0 is_stmt 0 discriminator 2
 813 00be 0AF1FF33 		add	r3, r10, #-1
 814 00c2 9E42     		cmp	r6, r3
 815 00c4 36D2     		bcs	.L74
3035:..\..\FatFs/ff.c **** 			sfn[i++] = c;
 816              		.loc 1 3035 0 is_stmt 1
 817 00c6 731C     		adds	r3, r6, #1
 818              	.LVL123:
 819 00c8 09F80640 		strb	r4, [r9, r6]
 820              	.LVL124:
3036:..\..\FatFs/ff.c **** 			sfn[i++] = d;
 821              		.loc 1 3036 0
 822 00cc 09F80370 		strb	r7, [r9, r3]
 823 00d0 0236     		adds	r6, r6, #2
 824              	.LVL125:
 825 00d2 C9E7     		b	.L51
 826              	.LVL126:
 827              	.L64:
3037:..\..\FatFs/ff.c **** 		} else {						/* SBC */
3038:..\..\FatFs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 69


 828              		.loc 1 3038 0
 829 00d4 2146     		mov	r1, r4
 830 00d6 1B48     		ldr	r0, .L80
 831 00d8 FFF7FEFF 		bl	chk_chr
 832              	.LVL127:
 833 00dc 60BB     		cbnz	r0, .L75
3039:..\..\FatFs/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 834              		.loc 1 3039 0
 835 00de A4F16103 		sub	r3, r4, #97
 836 00e2 DBB2     		uxtb	r3, r3
 837 00e4 192B     		cmp	r3, #25
 838 00e6 01D8     		bhi	.L65
 839              		.loc 1 3039 0 is_stmt 0 discriminator 1
 840 00e8 203C     		subs	r4, r4, #32
 841              	.LVL128:
 842 00ea E4B2     		uxtb	r4, r4
 843              	.LVL129:
 844              	.L65:
3040:..\..\FatFs/ff.c **** 			sfn[i++] = c;
 845              		.loc 1 3040 0 is_stmt 1
 846 00ec 09F80640 		strb	r4, [r9, r6]
 847 00f0 0136     		adds	r6, r6, #1
 848              	.LVL130:
3012:..\..\FatFs/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 849              		.loc 1 3012 0
 850 00f2 B846     		mov	r8, r7
 851 00f4 B8E7     		b	.L51
 852              	.L57:
3041:..\..\FatFs/ff.c **** 		}
3042:..\..\FatFs/ff.c **** 	}
3043:..\..\FatFs/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 853              		.loc 1 3043 0
 854 00f6 3D44     		add	r5, r5, r7
 855              	.LVL131:
 856 00f8 CBF80050 		str	r5, [fp]
3044:..\..\FatFs/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 857              		.loc 1 3044 0
 858 00fc F6B1     		cbz	r6, .L76
3045:..\..\FatFs/ff.c **** 
3046:..\..\FatFs/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 859              		.loc 1 3046 0
 860 00fe 019B     		ldr	r3, [sp, #4]
 861 0100 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 862 0104 E52B     		cmp	r3, #229
 863 0106 03D1     		bne	.L66
 864              		.loc 1 3046 0 is_stmt 0 discriminator 1
 865 0108 0523     		movs	r3, #5
 866 010a 019A     		ldr	r2, [sp, #4]
 867 010c 82F82030 		strb	r3, [r2, #32]
 868              	.L66:
3047:..\..\FatFs/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 869              		.loc 1 3047 0 is_stmt 1
 870 0110 202C     		cmp	r4, #32
 871 0112 01D8     		bhi	.L77
 872 0114 0423     		movs	r3, #4
 873 0116 00E0     		b	.L67
 874              	.L77:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 70


 875 0118 0023     		movs	r3, #0
 876              	.L67:
 877              		.loc 1 3047 0 is_stmt 0 discriminator 4
 878 011a 019A     		ldr	r2, [sp, #4]
 879 011c 82F82B30 		strb	r3, [r2, #43]
3048:..\..\FatFs/ff.c **** 
3049:..\..\FatFs/ff.c **** 	return FR_OK;
 880              		.loc 1 3049 0 is_stmt 1 discriminator 4
 881 0120 0020     		movs	r0, #0
 882 0122 0CE0     		b	.L55
 883              	.LVL132:
 884              	.L69:
3005:..\..\FatFs/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
 885              		.loc 1 3005 0
 886 0124 0620     		movs	r0, #6
 887 0126 0AE0     		b	.L55
 888              	.LVL133:
 889              	.L71:
3019:..\..\FatFs/ff.c **** 			i = 8; ni = 11;				/* Enter file extension field */
 890              		.loc 1 3019 0
 891 0128 0620     		movs	r0, #6
 892 012a 08E0     		b	.L55
 893              	.L72:
 894 012c 0620     		movs	r0, #6
 895 012e 06E0     		b	.L55
 896              	.LVL134:
 897              	.L73:
3034:..\..\FatFs/ff.c **** 			sfn[i++] = c;
 898              		.loc 1 3034 0
 899 0130 0620     		movs	r0, #6
 900 0132 04E0     		b	.L55
 901              	.L74:
 902 0134 0620     		movs	r0, #6
 903 0136 02E0     		b	.L55
 904              	.LVL135:
 905              	.L75:
3038:..\..\FatFs/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 906              		.loc 1 3038 0
 907 0138 0620     		movs	r0, #6
 908 013a 00E0     		b	.L55
 909              	.LVL136:
 910              	.L76:
3044:..\..\FatFs/ff.c **** 
 911              		.loc 1 3044 0
 912 013c 0620     		movs	r0, #6
 913              	.LVL137:
 914              	.L55:
3050:..\..\FatFs/ff.c **** #endif /* FF_USE_LFN */
3051:..\..\FatFs/ff.c **** }
 915              		.loc 1 3051 0
 916 013e 03B0     		add	sp, sp, #12
 917              		.cfi_def_cfa_offset 36
 918              		@ sp needed
 919 0140 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 920              	.LVL138:
 921              	.L81:
 922              		.align	2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 71


 923              	.L80:
 924 0144 00000000 		.word	.LC0
 925              		.cfi_endproc
 926              	.LFE29:
 927              		.size	create_name, .-create_name
 928              		.section	.text.get_ldnumber,"ax",%progbits
 929              		.align	2
 930              		.thumb
 931              		.thumb_func
 932              		.type	get_ldnumber, %function
 933              	get_ldnumber:
 934              	.LFB31:
3052:..\..\FatFs/ff.c **** 
3053:..\..\FatFs/ff.c **** 
3054:..\..\FatFs/ff.c **** 
3055:..\..\FatFs/ff.c **** 
3056:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3057:..\..\FatFs/ff.c **** /* Follow a file path                                                    */
3058:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3059:..\..\FatFs/ff.c **** 
3060:..\..\FatFs/ff.c **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3061:..\..\FatFs/ff.c **** 	DIR* dp,					/* Directory object to return last directory and found object */
3062:..\..\FatFs/ff.c **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3063:..\..\FatFs/ff.c **** )
3064:..\..\FatFs/ff.c **** {
3065:..\..\FatFs/ff.c **** 	FRESULT res;
3066:..\..\FatFs/ff.c **** 	BYTE ns;
3067:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
3068:..\..\FatFs/ff.c **** 
3069:..\..\FatFs/ff.c **** 
3070:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
3071:..\..\FatFs/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
3072:..\..\FatFs/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
3073:..\..\FatFs/ff.c **** 	} else
3074:..\..\FatFs/ff.c **** #endif
3075:..\..\FatFs/ff.c **** 	{										/* With heading separator */
3076:..\..\FatFs/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
3077:..\..\FatFs/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
3078:..\..\FatFs/ff.c **** 	}
3079:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3080:..\..\FatFs/ff.c **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3081:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
3082:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3083:..\..\FatFs/ff.c **** 		DIR dj;
3084:..\..\FatFs/ff.c **** 
3085:..\..\FatFs/ff.c **** 		dp->obj.c_scl = fs->cdc_scl;
3086:..\..\FatFs/ff.c **** 		dp->obj.c_size = fs->cdc_size;
3087:..\..\FatFs/ff.c **** 		dp->obj.c_ofs = fs->cdc_ofs;
3088:..\..\FatFs/ff.c **** 		res = load_obj_xdir(&dj, &dp->obj);
3089:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
3090:..\..\FatFs/ff.c **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3091:..\..\FatFs/ff.c **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3092:..\..\FatFs/ff.c **** 	}
3093:..\..\FatFs/ff.c **** #endif
3094:..\..\FatFs/ff.c **** #endif
3095:..\..\FatFs/ff.c **** 
3096:..\..\FatFs/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 72


3097:..\..\FatFs/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
3098:..\..\FatFs/ff.c **** 		res = dir_sdi(dp, 0);
3099:..\..\FatFs/ff.c **** 
3100:..\..\FatFs/ff.c **** 	} else {								/* Follow path */
3101:..\..\FatFs/ff.c **** 		for (;;) {
3102:..\..\FatFs/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
3103:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
3104:..\..\FatFs/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
3105:..\..\FatFs/ff.c **** 			ns = dp->fn[NSFLAG];
3106:..\..\FatFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
3107:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
3108:..\..\FatFs/ff.c **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
3109:..\..\FatFs/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
3110:..\..\FatFs/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
3111:..\..\FatFs/ff.c **** 						res = FR_OK;
3112:..\..\FatFs/ff.c **** 					} else {							/* Could not find the object */
3113:..\..\FatFs/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
3114:..\..\FatFs/ff.c **** 					}
3115:..\..\FatFs/ff.c **** 				}
3116:..\..\FatFs/ff.c **** 				break;
3117:..\..\FatFs/ff.c **** 			}
3118:..\..\FatFs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
3119:..\..\FatFs/ff.c **** 			/* Get into the sub-directory */
3120:..\..\FatFs/ff.c **** 			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
3121:..\..\FatFs/ff.c **** 				res = FR_NO_PATH; break;
3122:..\..\FatFs/ff.c **** 			}
3123:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3124:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
3125:..\..\FatFs/ff.c **** 				dp->obj.c_scl = dp->obj.sclust;
3126:..\..\FatFs/ff.c **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3127:..\..\FatFs/ff.c **** 				dp->obj.c_ofs = dp->blk_ofs;
3128:..\..\FatFs/ff.c **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3129:..\..\FatFs/ff.c **** 			} else
3130:..\..\FatFs/ff.c **** #endif
3131:..\..\FatFs/ff.c **** 			{
3132:..\..\FatFs/ff.c **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
3133:..\..\FatFs/ff.c **** 			}
3134:..\..\FatFs/ff.c **** 		}
3135:..\..\FatFs/ff.c **** 	}
3136:..\..\FatFs/ff.c **** 
3137:..\..\FatFs/ff.c **** 	return res;
3138:..\..\FatFs/ff.c **** }
3139:..\..\FatFs/ff.c **** 
3140:..\..\FatFs/ff.c **** 
3141:..\..\FatFs/ff.c **** 
3142:..\..\FatFs/ff.c **** 
3143:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3144:..\..\FatFs/ff.c **** /* Get logical drive number from path name                               */
3145:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3146:..\..\FatFs/ff.c **** 
3147:..\..\FatFs/ff.c **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3148:..\..\FatFs/ff.c **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3149:..\..\FatFs/ff.c **** )
3150:..\..\FatFs/ff.c **** {
 935              		.loc 1 3150 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 73


 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              		@ link register save eliminated.
 940              	.LVL139:
 941 0000 10B4     		push	{r4}
 942              		.cfi_def_cfa_offset 4
 943              		.cfi_offset 4, -4
 944              	.LVL140:
3151:..\..\FatFs/ff.c **** 	const TCHAR *tp, *tt;
3152:..\..\FatFs/ff.c **** 	TCHAR tc;
3153:..\..\FatFs/ff.c **** 	int i, vol = -1;
3154:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3155:..\..\FatFs/ff.c **** 	const char *sp;
3156:..\..\FatFs/ff.c **** 	char c;
3157:..\..\FatFs/ff.c **** #endif
3158:..\..\FatFs/ff.c **** 
3159:..\..\FatFs/ff.c **** 	tt = tp = *path;
 945              		.loc 1 3159 0
 946 0002 0468     		ldr	r4, [r0]
 947              	.LVL141:
3160:..\..\FatFs/ff.c **** 	if (!tp) return vol;	/* Invalid path name? */
 948              		.loc 1 3160 0
 949 0004 FCB1     		cbz	r4, .L88
 950 0006 2246     		mov	r2, r4
 951              	.LVL142:
 952              	.L85:
3161:..\..\FatFs/ff.c **** 	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the p
 953              		.loc 1 3161 0 discriminator 2
 954 0008 511C     		adds	r1, r2, #1
 955              	.LVL143:
 956 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 957              	.LVL144:
 958 000c 202B     		cmp	r3, #32
 959 000e 02D9     		bls	.L84
 960              		.loc 1 3161 0 is_stmt 0 discriminator 1
 961 0010 0A46     		mov	r2, r1
 962 0012 3A2B     		cmp	r3, #58
 963 0014 F8D1     		bne	.L85
 964              	.L84:
3162:..\..\FatFs/ff.c **** 
3163:..\..\FatFs/ff.c **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 965              		.loc 1 3163 0 is_stmt 1
 966 0016 3A2B     		cmp	r3, #58
 967 0018 12D1     		bne	.L86
 968              	.LVL145:
3164:..\..\FatFs/ff.c **** 		i = FF_VOLUMES;
3165:..\..\FatFs/ff.c **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 969              		.loc 1 3165 0
 970 001a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 971              	.LVL146:
 972 001c A3F13002 		sub	r2, r3, #48
 973 0020 D2B2     		uxtb	r2, r2
 974 0022 092A     		cmp	r2, #9
 975 0024 04D8     		bhi	.L89
 976              		.loc 1 3165 0 is_stmt 0 discriminator 1
 977 0026 0234     		adds	r4, r4, #2
 978              	.LVL147:
 979 0028 A142     		cmp	r1, r4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 74


 980 002a 03D1     		bne	.L90
3166:..\..\FatFs/ff.c **** 			i = (int)*tp - '0';	/* Get the LD number */
 981              		.loc 1 3166 0 is_stmt 1
 982 002c 303B     		subs	r3, r3, #48
 983              	.LVL148:
 984 002e 02E0     		b	.L87
 985              	.LVL149:
 986              	.L89:
3164:..\..\FatFs/ff.c **** 		i = FF_VOLUMES;
 987              		.loc 1 3164 0
 988 0030 0123     		movs	r3, #1
 989 0032 00E0     		b	.L87
 990              	.LVL150:
 991              	.L90:
 992 0034 0123     		movs	r3, #1
 993              	.LVL151:
 994              	.L87:
3167:..\..\FatFs/ff.c **** 		}
3168:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3169:..\..\FatFs/ff.c **** 		else {
3170:..\..\FatFs/ff.c **** 			i = 0;
3171:..\..\FatFs/ff.c **** 			do {
3172:..\..\FatFs/ff.c **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3173:..\..\FatFs/ff.c **** 				do {	/* Compare the volume ID with path name */
3174:..\..\FatFs/ff.c **** 					c = *sp++; tc = *tp++;
3175:..\..\FatFs/ff.c **** 					if (IsLower(c)) c -= 0x20;
3176:..\..\FatFs/ff.c **** 					if (IsLower(tc)) tc -= 0x20;
3177:..\..\FatFs/ff.c **** 				} while (c && (TCHAR)c == tc);
3178:..\..\FatFs/ff.c **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3179:..\..\FatFs/ff.c **** 		}
3180:..\..\FatFs/ff.c **** #endif
3181:..\..\FatFs/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 995              		.loc 1 3181 0
 996 0036 002B     		cmp	r3, #0
 997 0038 08DC     		bgt	.L91
 998              	.LVL152:
3182:..\..\FatFs/ff.c **** 			vol = i;		/* Drive number */
3183:..\..\FatFs/ff.c **** 			*path = tt;		/* Snip the drive prefix off */
 999              		.loc 1 3183 0
 1000 003a 0160     		str	r1, [r0]
 1001              	.LVL153:
3182:..\..\FatFs/ff.c **** 			vol = i;		/* Drive number */
 1002              		.loc 1 3182 0
 1003 003c 1846     		mov	r0, r3
 1004              	.LVL154:
 1005 003e 07E0     		b	.L83
 1006              	.LVL155:
 1007              	.L86:
3184:..\..\FatFs/ff.c **** 		}
3185:..\..\FatFs/ff.c **** 		return vol;
3186:..\..\FatFs/ff.c **** 	}
3187:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3188:..\..\FatFs/ff.c **** 	if (*tp == '/') {
3189:..\..\FatFs/ff.c **** 		i = 0;
3190:..\..\FatFs/ff.c **** 		do {
3191:..\..\FatFs/ff.c **** 			sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3192:..\..\FatFs/ff.c **** 			do {	/* Compare the volume ID with path name */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 75


3193:..\..\FatFs/ff.c **** 				c = *sp++; tc = *(++tp);
3194:..\..\FatFs/ff.c **** 				if (IsLower(c)) c -= 0x20;
3195:..\..\FatFs/ff.c **** 				if (IsLower(tc)) tc -= 0x20;
3196:..\..\FatFs/ff.c **** 			} while (c && (TCHAR)c == tc);
3197:..\..\FatFs/ff.c **** 		} while ((c || (tc != '/' && (UINT)tc >= (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES);	/* Repe
3198:..\..\FatFs/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3199:..\..\FatFs/ff.c **** 			vol = i;		/* Drive number */
3200:..\..\FatFs/ff.c **** 			*path = tp;		/* Snip the drive prefix off */
3201:..\..\FatFs/ff.c **** 			return vol;
3202:..\..\FatFs/ff.c **** 		}
3203:..\..\FatFs/ff.c **** 	}
3204:..\..\FatFs/ff.c **** #endif
3205:..\..\FatFs/ff.c **** 	/* No drive prefix is found */
3206:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
3207:..\..\FatFs/ff.c **** 	vol = CurrVol;	/* Default drive is current drive */
 1008              		.loc 1 3207 0
 1009 0040 044B     		ldr	r3, .L93
 1010              	.LVL156:
 1011 0042 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1012              	.LVL157:
3208:..\..\FatFs/ff.c **** #else
3209:..\..\FatFs/ff.c **** 	vol = 0;		/* Default drive is 0 */
3210:..\..\FatFs/ff.c **** #endif
3211:..\..\FatFs/ff.c **** 	return vol;		/* Return the default drive */
 1013              		.loc 1 3211 0
 1014 0044 04E0     		b	.L83
 1015              	.LVL158:
 1016              	.L88:
3160:..\..\FatFs/ff.c **** 	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the p
 1017              		.loc 1 3160 0
 1018 0046 4FF0FF30 		mov	r0, #-1
 1019              	.LVL159:
 1020 004a 01E0     		b	.L83
 1021              	.LVL160:
 1022              	.L91:
3153:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 1023              		.loc 1 3153 0
 1024 004c 4FF0FF30 		mov	r0, #-1
 1025              	.LVL161:
 1026              	.L83:
3212:..\..\FatFs/ff.c **** }
 1027              		.loc 1 3212 0
 1028 0050 10BC     		pop	{r4}
 1029              		.cfi_restore 4
 1030              		.cfi_def_cfa_offset 0
 1031 0052 7047     		bx	lr
 1032              	.L94:
 1033              		.align	2
 1034              	.L93:
 1035 0054 00000000 		.word	.LANCHOR0
 1036              		.cfi_endproc
 1037              	.LFE31:
 1038              		.size	get_ldnumber, .-get_ldnumber
 1039              		.section	.text.putc_init,"ax",%progbits
 1040              		.align	2
 1041              		.thumb
 1042              		.thumb_func
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 76


 1043              		.type	putc_init, %function
 1044              	putc_init:
 1045              	.LFB59:
3213:..\..\FatFs/ff.c **** 
3214:..\..\FatFs/ff.c **** 
3215:..\..\FatFs/ff.c **** 
3216:..\..\FatFs/ff.c **** 
3217:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3218:..\..\FatFs/ff.c **** /* GPT support functions                                                 */
3219:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3220:..\..\FatFs/ff.c **** 
3221:..\..\FatFs/ff.c **** #if FF_LBA64
3222:..\..\FatFs/ff.c **** 
3223:..\..\FatFs/ff.c **** /* Calculate CRC32 in byte-by-byte */
3224:..\..\FatFs/ff.c **** 
3225:..\..\FatFs/ff.c **** static DWORD crc32 (	/* Returns next CRC value */
3226:..\..\FatFs/ff.c **** 	DWORD crc,			/* Current CRC value */
3227:..\..\FatFs/ff.c **** 	BYTE d				/* A byte to be processed */
3228:..\..\FatFs/ff.c **** )
3229:..\..\FatFs/ff.c **** {
3230:..\..\FatFs/ff.c **** 	BYTE b;
3231:..\..\FatFs/ff.c **** 
3232:..\..\FatFs/ff.c **** 
3233:..\..\FatFs/ff.c **** 	for (b = 1; b; b <<= 1) {
3234:..\..\FatFs/ff.c **** 		crc ^= (d & b) ? 1 : 0;
3235:..\..\FatFs/ff.c **** 		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
3236:..\..\FatFs/ff.c **** 	}
3237:..\..\FatFs/ff.c **** 	return crc;
3238:..\..\FatFs/ff.c **** }
3239:..\..\FatFs/ff.c **** 
3240:..\..\FatFs/ff.c **** 
3241:..\..\FatFs/ff.c **** /* Check validity of GPT header */
3242:..\..\FatFs/ff.c **** 
3243:..\..\FatFs/ff.c **** static int test_gpt_header (	/* 0:Invalid, 1:Valid */
3244:..\..\FatFs/ff.c **** 	const BYTE* gpth			/* Pointer to the GPT header */
3245:..\..\FatFs/ff.c **** )
3246:..\..\FatFs/ff.c **** {
3247:..\..\FatFs/ff.c **** 	UINT i;
3248:..\..\FatFs/ff.c **** 	DWORD bcc;
3249:..\..\FatFs/ff.c **** 
3250:..\..\FatFs/ff.c **** 
3251:..\..\FatFs/ff.c **** 	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16)) return 0;	/* Check sign, vers
3252:..\..\FatFs/ff.c **** 	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++) {		/* Check header BCC */
3253:..\..\FatFs/ff.c **** 		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
3254:..\..\FatFs/ff.c **** 	}
3255:..\..\FatFs/ff.c **** 	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
3256:..\..\FatFs/ff.c **** 	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes
3257:..\..\FatFs/ff.c **** 	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;	/* Table size (must be 128 entries or less) */
3258:..\..\FatFs/ff.c **** 
3259:..\..\FatFs/ff.c **** 	return 1;
3260:..\..\FatFs/ff.c **** }
3261:..\..\FatFs/ff.c **** 
3262:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
3263:..\..\FatFs/ff.c **** 
3264:..\..\FatFs/ff.c **** /* Generate random value */
3265:..\..\FatFs/ff.c **** static DWORD make_rand (
3266:..\..\FatFs/ff.c **** 	DWORD seed,		/* Seed value */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 77


3267:..\..\FatFs/ff.c **** 	BYTE* buff,		/* Output buffer */
3268:..\..\FatFs/ff.c **** 	UINT n			/* Data length */
3269:..\..\FatFs/ff.c **** )
3270:..\..\FatFs/ff.c **** {
3271:..\..\FatFs/ff.c **** 	UINT r;
3272:..\..\FatFs/ff.c **** 
3273:..\..\FatFs/ff.c **** 
3274:..\..\FatFs/ff.c **** 	if (seed == 0) seed = 1;
3275:..\..\FatFs/ff.c **** 	do {
3276:..\..\FatFs/ff.c **** 		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the
3277:..\..\FatFs/ff.c **** 		*buff++ = (BYTE)seed;
3278:..\..\FatFs/ff.c **** 	} while (--n);
3279:..\..\FatFs/ff.c **** 	return seed;
3280:..\..\FatFs/ff.c **** }
3281:..\..\FatFs/ff.c **** 
3282:..\..\FatFs/ff.c **** #endif
3283:..\..\FatFs/ff.c **** #endif
3284:..\..\FatFs/ff.c **** 
3285:..\..\FatFs/ff.c **** 
3286:..\..\FatFs/ff.c **** 
3287:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3288:..\..\FatFs/ff.c **** /* Load a sector and check if it is an FAT VBR                           */
3289:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3290:..\..\FatFs/ff.c **** 
3291:..\..\FatFs/ff.c **** /* Check what the sector is */
3292:..\..\FatFs/ff.c **** 
3293:..\..\FatFs/ff.c **** static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk erro
3294:..\..\FatFs/ff.c **** 	FATFS* fs,			/* Filesystem object */
3295:..\..\FatFs/ff.c **** 	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
3296:..\..\FatFs/ff.c **** )
3297:..\..\FatFs/ff.c **** {
3298:..\..\FatFs/ff.c **** 	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
3299:..\..\FatFs/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
3300:..\..\FatFs/ff.c **** 
3301:..\..\FatFs/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardles
3302:..\..\FatFs/ff.c **** 
3303:..\..\FatFs/ff.c **** 	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Che
3304:..\..\FatFs/ff.c **** 
3305:..\..\FatFs/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/
3306:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
3307:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
3308:..\..\FatFs/ff.c **** 	}
3309:..\..\FatFs/ff.c **** 	return 2;	/* Valid BS but not FAT */
3310:..\..\FatFs/ff.c **** }
3311:..\..\FatFs/ff.c **** 
3312:..\..\FatFs/ff.c **** 
3313:..\..\FatFs/ff.c **** /* Find an FAT volume */
3314:..\..\FatFs/ff.c **** /* (It supports only generic partitioning rules, MBR, GPT and SFD) */
3315:..\..\FatFs/ff.c **** 
3316:..\..\FatFs/ff.c **** static UINT find_volume (	/* Returns BS status found in the hosting drive */
3317:..\..\FatFs/ff.c **** 	FATFS* fs,		/* Filesystem object */
3318:..\..\FatFs/ff.c **** 	UINT part		/* Partition to fined = 0:auto, 1..:forced */
3319:..\..\FatFs/ff.c **** )
3320:..\..\FatFs/ff.c **** {
3321:..\..\FatFs/ff.c **** 	UINT fmt, i;
3322:..\..\FatFs/ff.c **** 	DWORD mbr_pt[4];
3323:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 78


3324:..\..\FatFs/ff.c **** 
3325:..\..\FatFs/ff.c **** 	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
3326:..\..\FatFs/ff.c **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, n
3327:..\..\FatFs/ff.c **** 
3328:..\..\FatFs/ff.c **** 	/* Sector 0 is not an FAT VBR or forced partition number wants a partition */
3329:..\..\FatFs/ff.c **** 
3330:..\..\FatFs/ff.c **** #if FF_LBA64
3331:..\..\FatFs/ff.c **** 	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
3332:..\..\FatFs/ff.c **** 		DWORD n_ent, v_ent, ofs;
3333:..\..\FatFs/ff.c **** 		QWORD pt_lba;
3334:..\..\FatFs/ff.c **** 
3335:..\..\FatFs/ff.c **** 		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
3336:..\..\FatFs/ff.c **** 		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
3337:..\..\FatFs/ff.c **** 		n_ent = ld_dword(fs->win + GPTH_PtNum);		/* Number of entries */
3338:..\..\FatFs/ff.c **** 		pt_lba = ld_qword(fs->win + GPTH_PtOfs);	/* Table location */
3339:..\..\FatFs/ff.c **** 		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
3340:..\..\FatFs/ff.c **** 			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
3341:..\..\FatFs/ff.c **** 			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
3342:..\..\FatFs/ff.c **** 			if (!mem_cmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
3343:..\..\FatFs/ff.c **** 				v_ent++;
3344:..\..\FatFs/ff.c **** 				fmt = check_fs(fs, ld_qword(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
3345:..\..\FatFs/ff.c **** 				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
3346:..\..\FatFs/ff.c **** 				if (part != 0 && v_ent == part) return fmt;		/* Forced partition order (regardless of it is val
3347:..\..\FatFs/ff.c **** 			}
3348:..\..\FatFs/ff.c **** 		}
3349:..\..\FatFs/ff.c **** 		return 3;	/* Not found */
3350:..\..\FatFs/ff.c **** 	}
3351:..\..\FatFs/ff.c **** #endif
3352:..\..\FatFs/ff.c **** 	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
3353:..\..\FatFs/ff.c **** 	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
3354:..\..\FatFs/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
3355:..\..\FatFs/ff.c **** 	}
3356:..\..\FatFs/ff.c **** 	i = part ? part - 1 : 0;		/* Table index to find first */
3357:..\..\FatFs/ff.c **** 	do {							/* Find an FAT volume */
3358:..\..\FatFs/ff.c **** 		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
3359:..\..\FatFs/ff.c **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
3360:..\..\FatFs/ff.c **** 	return fmt;
3361:..\..\FatFs/ff.c **** }
3362:..\..\FatFs/ff.c **** 
3363:..\..\FatFs/ff.c **** 
3364:..\..\FatFs/ff.c **** 
3365:..\..\FatFs/ff.c **** 
3366:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3367:..\..\FatFs/ff.c **** /* Determine logical drive number and mount the volume if needed         */
3368:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3369:..\..\FatFs/ff.c **** 
3370:..\..\FatFs/ff.c **** static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3371:..\..\FatFs/ff.c **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3372:..\..\FatFs/ff.c **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3373:..\..\FatFs/ff.c **** 	BYTE mode					/* !=0: Check write protection for write access */
3374:..\..\FatFs/ff.c **** )
3375:..\..\FatFs/ff.c **** {
3376:..\..\FatFs/ff.c **** 	int vol;
3377:..\..\FatFs/ff.c **** 	DSTATUS stat;
3378:..\..\FatFs/ff.c **** 	LBA_t bsect;
3379:..\..\FatFs/ff.c **** 	DWORD tsect, sysect, fasize, nclst, szbfat;
3380:..\..\FatFs/ff.c **** 	WORD nrsv;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 79


3381:..\..\FatFs/ff.c **** 	FATFS *fs;
3382:..\..\FatFs/ff.c **** 	UINT fmt;
3383:..\..\FatFs/ff.c **** 
3384:..\..\FatFs/ff.c **** 
3385:..\..\FatFs/ff.c **** 	/* Get logical drive number */
3386:..\..\FatFs/ff.c **** 	*rfs = 0;
3387:..\..\FatFs/ff.c **** 	vol = get_ldnumber(path);
3388:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3389:..\..\FatFs/ff.c **** 
3390:..\..\FatFs/ff.c **** 	/* Check if the filesystem object is valid or not */
3391:..\..\FatFs/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
3392:..\..\FatFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
3393:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
3394:..\..\FatFs/ff.c **** 	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
3395:..\..\FatFs/ff.c **** #endif
3396:..\..\FatFs/ff.c **** 	*rfs = fs;							/* Return pointer to the filesystem object */
3397:..\..\FatFs/ff.c **** 
3398:..\..\FatFs/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3399:..\..\FatFs/ff.c **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
3400:..\..\FatFs/ff.c **** 		stat = disk_status(fs->pdrv);
3401:..\..\FatFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3402:..\..\FatFs/ff.c **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3403:..\..\FatFs/ff.c **** 				return FR_WRITE_PROTECTED;
3404:..\..\FatFs/ff.c **** 			}
3405:..\..\FatFs/ff.c **** 			return FR_OK;				/* The filesystem object is already valid */
3406:..\..\FatFs/ff.c **** 		}
3407:..\..\FatFs/ff.c **** 	}
3408:..\..\FatFs/ff.c **** 
3409:..\..\FatFs/ff.c **** 	/* The filesystem object is not valid. */
3410:..\..\FatFs/ff.c **** 	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize
3411:..\..\FatFs/ff.c **** 
3412:..\..\FatFs/ff.c **** 	fs->fs_type = 0;					/* Clear the filesystem object */
3413:..\..\FatFs/ff.c **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
3414:..\..\FatFs/ff.c **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
3415:..\..\FatFs/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3416:..\..\FatFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3417:..\..\FatFs/ff.c **** 	}
3418:..\..\FatFs/ff.c **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3419:..\..\FatFs/ff.c **** 		return FR_WRITE_PROTECTED;
3420:..\..\FatFs/ff.c **** 	}
3421:..\..\FatFs/ff.c **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3422:..\..\FatFs/ff.c **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3423:..\..\FatFs/ff.c **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3424:..\..\FatFs/ff.c **** #endif
3425:..\..\FatFs/ff.c **** 
3426:..\..\FatFs/ff.c **** 	/* Find an FAT volume on the drive */
3427:..\..\FatFs/ff.c **** 	fmt = find_volume(fs, LD2PT(vol));
3428:..\..\FatFs/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3429:..\..\FatFs/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3430:..\..\FatFs/ff.c **** 	bsect = fs->winsect;					/* Volume location */
3431:..\..\FatFs/ff.c **** 
3432:..\..\FatFs/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3433:..\..\FatFs/ff.c **** 
3434:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3435:..\..\FatFs/ff.c **** 	if (fmt == 1) {
3436:..\..\FatFs/ff.c **** 		QWORD maxlba;
3437:..\..\FatFs/ff.c **** 		DWORD so, cv, bcl, i;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 80


3438:..\..\FatFs/ff.c **** 
3439:..\..\FatFs/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3440:..\..\FatFs/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3441:..\..\FatFs/ff.c **** 
3442:..\..\FatFs/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3443:..\..\FatFs/ff.c **** 
3444:..\..\FatFs/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3445:..\..\FatFs/ff.c **** 			return FR_NO_FILESYSTEM;
3446:..\..\FatFs/ff.c **** 		}
3447:..\..\FatFs/ff.c **** 
3448:..\..\FatFs/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3449:..\..\FatFs/ff.c **** 		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-b
3450:..\..\FatFs/ff.c **** 
3451:..\..\FatFs/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3452:..\..\FatFs/ff.c **** 
3453:..\..\FatFs/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3454:..\..\FatFs/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3455:..\..\FatFs/ff.c **** 
3456:..\..\FatFs/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3457:..\..\FatFs/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3458:..\..\FatFs/ff.c **** 
3459:..\..\FatFs/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3460:..\..\FatFs/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3461:..\..\FatFs/ff.c **** 		fs->n_fatent = nclst + 2;
3462:..\..\FatFs/ff.c **** 
3463:..\..\FatFs/ff.c **** 		/* Boundaries and Limits */
3464:..\..\FatFs/ff.c **** 		fs->volbase = bsect;
3465:..\..\FatFs/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3466:..\..\FatFs/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3467:..\..\FatFs/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3468:..\..\FatFs/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3469:..\..\FatFs/ff.c **** 
3470:..\..\FatFs/ff.c **** 		/* Get bitmap location and check if it is contiguous (implementation assumption) */
3471:..\..\FatFs/ff.c **** 		so = i = 0;
3472:..\..\FatFs/ff.c **** 		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
3473:..\..\FatFs/ff.c **** 			if (i == 0) {
3474:..\..\FatFs/ff.c **** 				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
3475:..\..\FatFs/ff.c **** 				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
3476:..\..\FatFs/ff.c **** 				so++;
3477:..\..\FatFs/ff.c **** 			}
3478:..\..\FatFs/ff.c **** 			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
3479:..\..\FatFs/ff.c **** 			i = (i + SZDIRE) % SS(fs);	/* Next entry */
3480:..\..\FatFs/ff.c **** 		}
3481:..\..\FatFs/ff.c **** 		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
3482:..\..\FatFs/ff.c **** 		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
3483:..\..\FatFs/ff.c **** 		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
3484:..\..\FatFs/ff.c **** 		for (;;) {	/* Check if bitmap is contiguous */
3485:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
3486:..\..\FatFs/ff.c **** 			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
3487:..\..\FatFs/ff.c **** 			if (cv == 0xFFFFFFFF) break;				/* Last link? */
3488:..\..\FatFs/ff.c **** 			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
3489:..\..\FatFs/ff.c **** 		}
3490:..\..\FatFs/ff.c **** 
3491:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3492:..\..\FatFs/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3493:..\..\FatFs/ff.c **** #endif
3494:..\..\FatFs/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 81


3495:..\..\FatFs/ff.c **** 	} else
3496:..\..\FatFs/ff.c **** #endif	/* FF_FS_EXFAT */
3497:..\..\FatFs/ff.c **** 	{
3498:..\..\FatFs/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3499:..\..\FatFs/ff.c **** 
3500:..\..\FatFs/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3501:..\..\FatFs/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
3502:..\..\FatFs/ff.c **** 		fs->fsize = fasize;
3503:..\..\FatFs/ff.c **** 
3504:..\..\FatFs/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3505:..\..\FatFs/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3506:..\..\FatFs/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3507:..\..\FatFs/ff.c **** 
3508:..\..\FatFs/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3509:..\..\FatFs/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3510:..\..\FatFs/ff.c **** 
3511:..\..\FatFs/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3512:..\..\FatFs/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3513:..\..\FatFs/ff.c **** 
3514:..\..\FatFs/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3515:..\..\FatFs/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3516:..\..\FatFs/ff.c **** 
3517:..\..\FatFs/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3518:..\..\FatFs/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3519:..\..\FatFs/ff.c **** 
3520:..\..\FatFs/ff.c **** 		/* Determine the FAT sub type */
3521:..\..\FatFs/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3522:..\..\FatFs/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3523:..\..\FatFs/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3524:..\..\FatFs/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3525:..\..\FatFs/ff.c **** 		fmt = 0;
3526:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
3527:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3528:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3529:..\..\FatFs/ff.c **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
3530:..\..\FatFs/ff.c **** 
3531:..\..\FatFs/ff.c **** 		/* Boundaries and Limits */
3532:..\..\FatFs/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3533:..\..\FatFs/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
3534:..\..\FatFs/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3535:..\..\FatFs/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
3536:..\..\FatFs/ff.c **** 		if (fmt == FS_FAT32) {
3537:..\..\FatFs/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
3538:..\..\FatFs/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3539:..\..\FatFs/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3540:..\..\FatFs/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3541:..\..\FatFs/ff.c **** 		} else {
3542:..\..\FatFs/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
3543:..\..\FatFs/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3544:..\..\FatFs/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3545:..\..\FatFs/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3546:..\..\FatFs/ff.c **** 		}
3547:..\..\FatFs/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3548:..\..\FatFs/ff.c **** 
3549:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3550:..\..\FatFs/ff.c **** 		/* Get FSInfo if available */
3551:..\..\FatFs/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 82


3552:..\..\FatFs/ff.c **** 		fs->fsi_flag = 0x80;
3553:..\..\FatFs/ff.c **** #if (FF_FS_NOFSINFO & 3) != 3
3554:..\..\FatFs/ff.c **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
3555:..\..\FatFs/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3556:..\..\FatFs/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
3557:..\..\FatFs/ff.c **** 		{
3558:..\..\FatFs/ff.c **** 			fs->fsi_flag = 0;
3559:..\..\FatFs/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
3560:..\..\FatFs/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3561:..\..\FatFs/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3562:..\..\FatFs/ff.c **** 			{
3563:..\..\FatFs/ff.c **** #if (FF_FS_NOFSINFO & 1) == 0
3564:..\..\FatFs/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3565:..\..\FatFs/ff.c **** #endif
3566:..\..\FatFs/ff.c **** #if (FF_FS_NOFSINFO & 2) == 0
3567:..\..\FatFs/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3568:..\..\FatFs/ff.c **** #endif
3569:..\..\FatFs/ff.c **** 			}
3570:..\..\FatFs/ff.c **** 		}
3571:..\..\FatFs/ff.c **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3572:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
3573:..\..\FatFs/ff.c **** 	}
3574:..\..\FatFs/ff.c **** 
3575:..\..\FatFs/ff.c **** 	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
3576:..\..\FatFs/ff.c **** 	fs->id = ++Fsid;		/* Volume mount ID */
3577:..\..\FatFs/ff.c **** #if FF_USE_LFN == 1
3578:..\..\FatFs/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3579:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3580:..\..\FatFs/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3581:..\..\FatFs/ff.c **** #endif
3582:..\..\FatFs/ff.c **** #endif
3583:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
3584:..\..\FatFs/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
3585:..\..\FatFs/ff.c **** #endif
3586:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0			/* Clear file lock semaphores */
3587:..\..\FatFs/ff.c **** 	clear_lock(fs);
3588:..\..\FatFs/ff.c **** #endif
3589:..\..\FatFs/ff.c **** 	return FR_OK;
3590:..\..\FatFs/ff.c **** }
3591:..\..\FatFs/ff.c **** 
3592:..\..\FatFs/ff.c **** 
3593:..\..\FatFs/ff.c **** 
3594:..\..\FatFs/ff.c **** 
3595:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3596:..\..\FatFs/ff.c **** /* Check if the file/directory object is valid or not                    */
3597:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3598:..\..\FatFs/ff.c **** 
3599:..\..\FatFs/ff.c **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3600:..\..\FatFs/ff.c **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity
3601:..\..\FatFs/ff.c **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3602:..\..\FatFs/ff.c **** )
3603:..\..\FatFs/ff.c **** {
3604:..\..\FatFs/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
3605:..\..\FatFs/ff.c **** 
3606:..\..\FatFs/ff.c **** 
3607:..\..\FatFs/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
3608:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 83


3609:..\..\FatFs/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3610:..\..\FatFs/ff.c **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initializ
3611:..\..\FatFs/ff.c **** 				res = FR_OK;
3612:..\..\FatFs/ff.c **** 			} else {
3613:..\..\FatFs/ff.c **** 				unlock_fs(obj->fs, FR_OK);
3614:..\..\FatFs/ff.c **** 			}
3615:..\..\FatFs/ff.c **** 		} else {
3616:..\..\FatFs/ff.c **** 			res = FR_TIMEOUT;
3617:..\..\FatFs/ff.c **** 		}
3618:..\..\FatFs/ff.c **** #else
3619:..\..\FatFs/ff.c **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
3620:..\..\FatFs/ff.c **** 			res = FR_OK;
3621:..\..\FatFs/ff.c **** 		}
3622:..\..\FatFs/ff.c **** #endif
3623:..\..\FatFs/ff.c **** 	}
3624:..\..\FatFs/ff.c **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
3625:..\..\FatFs/ff.c **** 	return res;
3626:..\..\FatFs/ff.c **** }
3627:..\..\FatFs/ff.c **** 
3628:..\..\FatFs/ff.c **** 
3629:..\..\FatFs/ff.c **** 
3630:..\..\FatFs/ff.c **** 
3631:..\..\FatFs/ff.c **** /*---------------------------------------------------------------------------
3632:..\..\FatFs/ff.c **** 
3633:..\..\FatFs/ff.c ****    Public Functions (FatFs API)
3634:..\..\FatFs/ff.c **** 
3635:..\..\FatFs/ff.c **** ----------------------------------------------------------------------------*/
3636:..\..\FatFs/ff.c **** 
3637:..\..\FatFs/ff.c **** 
3638:..\..\FatFs/ff.c **** 
3639:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3640:..\..\FatFs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3641:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3642:..\..\FatFs/ff.c **** 
3643:..\..\FatFs/ff.c **** FRESULT f_mount (
3644:..\..\FatFs/ff.c **** 	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
3645:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3646:..\..\FatFs/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3647:..\..\FatFs/ff.c **** )
3648:..\..\FatFs/ff.c **** {
3649:..\..\FatFs/ff.c **** 	FATFS *cfs;
3650:..\..\FatFs/ff.c **** 	int vol;
3651:..\..\FatFs/ff.c **** 	FRESULT res;
3652:..\..\FatFs/ff.c **** 	const TCHAR *rp = path;
3653:..\..\FatFs/ff.c **** 
3654:..\..\FatFs/ff.c **** 
3655:..\..\FatFs/ff.c **** 	/* Get logical drive number */
3656:..\..\FatFs/ff.c **** 	vol = get_ldnumber(&rp);
3657:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3658:..\..\FatFs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
3659:..\..\FatFs/ff.c **** 
3660:..\..\FatFs/ff.c **** 	if (cfs) {
3661:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
3662:..\..\FatFs/ff.c **** 		clear_lock(cfs);
3663:..\..\FatFs/ff.c **** #endif
3664:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT						/* Discard sync object of the current volume */
3665:..\..\FatFs/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 84


3666:..\..\FatFs/ff.c **** #endif
3667:..\..\FatFs/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
3668:..\..\FatFs/ff.c **** 	}
3669:..\..\FatFs/ff.c **** 
3670:..\..\FatFs/ff.c **** 	if (fs) {
3671:..\..\FatFs/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
3672:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
3673:..\..\FatFs/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3674:..\..\FatFs/ff.c **** #endif
3675:..\..\FatFs/ff.c **** 	}
3676:..\..\FatFs/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
3677:..\..\FatFs/ff.c **** 
3678:..\..\FatFs/ff.c **** 	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
3679:..\..\FatFs/ff.c **** 
3680:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
3681:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
3682:..\..\FatFs/ff.c **** }
3683:..\..\FatFs/ff.c **** 
3684:..\..\FatFs/ff.c **** 
3685:..\..\FatFs/ff.c **** 
3686:..\..\FatFs/ff.c **** 
3687:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3688:..\..\FatFs/ff.c **** /* Open or Create a File                                                 */
3689:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3690:..\..\FatFs/ff.c **** 
3691:..\..\FatFs/ff.c **** FRESULT f_open (
3692:..\..\FatFs/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3693:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3694:..\..\FatFs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3695:..\..\FatFs/ff.c **** )
3696:..\..\FatFs/ff.c **** {
3697:..\..\FatFs/ff.c **** 	FRESULT res;
3698:..\..\FatFs/ff.c **** 	DIR dj;
3699:..\..\FatFs/ff.c **** 	FATFS *fs;
3700:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3701:..\..\FatFs/ff.c **** 	DWORD cl, bcs, clst;
3702:..\..\FatFs/ff.c **** 	LBA_t sc;
3703:..\..\FatFs/ff.c **** 	FSIZE_t ofs;
3704:..\..\FatFs/ff.c **** #endif
3705:..\..\FatFs/ff.c **** 	DEF_NAMBUF
3706:..\..\FatFs/ff.c **** 
3707:..\..\FatFs/ff.c **** 
3708:..\..\FatFs/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
3709:..\..\FatFs/ff.c **** 
3710:..\..\FatFs/ff.c **** 	/* Get logical drive number */
3711:..\..\FatFs/ff.c **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
3712:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, mode);
3713:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
3714:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
3715:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
3716:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3717:..\..\FatFs/ff.c **** #if !FF_FS_READONLY	/* Read/Write configuration */
3718:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
3719:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3720:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;
3721:..\..\FatFs/ff.c **** 			}
3722:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 85


3723:..\..\FatFs/ff.c **** 			else {
3724:..\..\FatFs/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
3725:..\..\FatFs/ff.c **** 			}
3726:..\..\FatFs/ff.c **** #endif
3727:..\..\FatFs/ff.c **** 		}
3728:..\..\FatFs/ff.c **** 		/* Create or Open a file */
3729:..\..\FatFs/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3730:..\..\FatFs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
3731:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
3732:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
3733:..\..\FatFs/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3734:..\..\FatFs/ff.c **** #else
3735:..\..\FatFs/ff.c **** 					res = dir_register(&dj);
3736:..\..\FatFs/ff.c **** #endif
3737:..\..\FatFs/ff.c **** 				}
3738:..\..\FatFs/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
3739:..\..\FatFs/ff.c **** 			}
3740:..\..\FatFs/ff.c **** 			else {								/* Any object with the same name is already existing */
3741:..\..\FatFs/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3742:..\..\FatFs/ff.c **** 					res = FR_DENIED;
3743:..\..\FatFs/ff.c **** 				} else {
3744:..\..\FatFs/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3745:..\..\FatFs/ff.c **** 				}
3746:..\..\FatFs/ff.c **** 			}
3747:..\..\FatFs/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
3748:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3749:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3750:..\..\FatFs/ff.c **** 					/* Get current allocation info */
3751:..\..\FatFs/ff.c **** 					fp->obj.fs = fs;
3752:..\..\FatFs/ff.c **** 					init_alloc_info(fs, &fp->obj);
3753:..\..\FatFs/ff.c **** 					/* Set directory entry block initial state */
3754:..\..\FatFs/ff.c **** 					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
3755:..\..\FatFs/ff.c **** 					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3756:..\..\FatFs/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3757:..\..\FatFs/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3758:..\..\FatFs/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3759:..\..\FatFs/ff.c **** 					res = store_xdir(&dj);
3760:..\..\FatFs/ff.c **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3761:..\..\FatFs/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3762:..\..\FatFs/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3763:..\..\FatFs/ff.c **** 					}
3764:..\..\FatFs/ff.c **** 				} else
3765:..\..\FatFs/ff.c **** #endif
3766:..\..\FatFs/ff.c **** 				{
3767:..\..\FatFs/ff.c **** 					/* Set directory entry initial state */
3768:..\..\FatFs/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
3769:..\..\FatFs/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
3770:..\..\FatFs/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3771:..\..\FatFs/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3772:..\..\FatFs/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
3773:..\..\FatFs/ff.c **** 					fs->wflag = 1;
3774:..\..\FatFs/ff.c **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
3775:..\..\FatFs/ff.c **** 						sc = fs->winsect;
3776:..\..\FatFs/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
3777:..\..\FatFs/ff.c **** 						if (res == FR_OK) {
3778:..\..\FatFs/ff.c **** 							res = move_window(fs, sc);
3779:..\..\FatFs/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 86


3780:..\..\FatFs/ff.c **** 						}
3781:..\..\FatFs/ff.c **** 					}
3782:..\..\FatFs/ff.c **** 				}
3783:..\..\FatFs/ff.c **** 			}
3784:..\..\FatFs/ff.c **** 		}
3785:..\..\FatFs/ff.c **** 		else {	/* Open an existing file */
3786:..\..\FatFs/ff.c **** 			if (res == FR_OK) {					/* Is the object exsiting? */
3787:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
3788:..\..\FatFs/ff.c **** 					res = FR_NO_FILE;
3789:..\..\FatFs/ff.c **** 				} else {
3790:..\..\FatFs/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
3791:..\..\FatFs/ff.c **** 						res = FR_DENIED;
3792:..\..\FatFs/ff.c **** 					}
3793:..\..\FatFs/ff.c **** 				}
3794:..\..\FatFs/ff.c **** 			}
3795:..\..\FatFs/ff.c **** 		}
3796:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
3797:..\..\FatFs/ff.c **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
3798:..\..\FatFs/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3799:..\..\FatFs/ff.c **** 			fp->dir_ptr = dj.dir;
3800:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
3801:..\..\FatFs/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
3802:..\..\FatFs/ff.c **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
3803:..\..\FatFs/ff.c **** #endif
3804:..\..\FatFs/ff.c **** 		}
3805:..\..\FatFs/ff.c **** #else		/* R/O configuration */
3806:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
3807:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3808:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;
3809:..\..\FatFs/ff.c **** 			} else {
3810:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3811:..\..\FatFs/ff.c **** 					res = FR_NO_FILE;
3812:..\..\FatFs/ff.c **** 				}
3813:..\..\FatFs/ff.c **** 			}
3814:..\..\FatFs/ff.c **** 		}
3815:..\..\FatFs/ff.c **** #endif
3816:..\..\FatFs/ff.c **** 
3817:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
3818:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
3819:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3820:..\..\FatFs/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3821:..\..\FatFs/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3822:..\..\FatFs/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3823:..\..\FatFs/ff.c **** 				init_alloc_info(fs, &fp->obj);
3824:..\..\FatFs/ff.c **** 			} else
3825:..\..\FatFs/ff.c **** #endif
3826:..\..\FatFs/ff.c **** 			{
3827:..\..\FatFs/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
3828:..\..\FatFs/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3829:..\..\FatFs/ff.c **** 			}
3830:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
3831:..\..\FatFs/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3832:..\..\FatFs/ff.c **** #endif
3833:..\..\FatFs/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
3834:..\..\FatFs/ff.c **** 			fp->obj.id = fs->id;
3835:..\..\FatFs/ff.c **** 			fp->flag = mode;		/* Set file access mode */
3836:..\..\FatFs/ff.c **** 			fp->err = 0;			/* Clear error flag */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 87


3837:..\..\FatFs/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
3838:..\..\FatFs/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
3839:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3840:..\..\FatFs/ff.c **** #if !FF_FS_TINY
3841:..\..\FatFs/ff.c **** 			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
3842:..\..\FatFs/ff.c **** #endif
3843:..\..\FatFs/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3844:..\..\FatFs/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
3845:..\..\FatFs/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3846:..\..\FatFs/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3847:..\..\FatFs/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3848:..\..\FatFs/ff.c **** 					clst = get_fat(&fp->obj, clst);
3849:..\..\FatFs/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
3850:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3851:..\..\FatFs/ff.c **** 				}
3852:..\..\FatFs/ff.c **** 				fp->clust = clst;
3853:..\..\FatFs/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3854:..\..\FatFs/ff.c **** 					sc = clst2sect(fs, clst);
3855:..\..\FatFs/ff.c **** 					if (sc == 0) {
3856:..\..\FatFs/ff.c **** 						res = FR_INT_ERR;
3857:..\..\FatFs/ff.c **** 					} else {
3858:..\..\FatFs/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
3859:..\..\FatFs/ff.c **** #if !FF_FS_TINY
3860:..\..\FatFs/ff.c **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3861:..\..\FatFs/ff.c **** #endif
3862:..\..\FatFs/ff.c **** 					}
3863:..\..\FatFs/ff.c **** 				}
3864:..\..\FatFs/ff.c **** 			}
3865:..\..\FatFs/ff.c **** #endif
3866:..\..\FatFs/ff.c **** 		}
3867:..\..\FatFs/ff.c **** 
3868:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
3869:..\..\FatFs/ff.c **** 	}
3870:..\..\FatFs/ff.c **** 
3871:..\..\FatFs/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
3872:..\..\FatFs/ff.c **** 
3873:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
3874:..\..\FatFs/ff.c **** }
3875:..\..\FatFs/ff.c **** 
3876:..\..\FatFs/ff.c **** 
3877:..\..\FatFs/ff.c **** 
3878:..\..\FatFs/ff.c **** 
3879:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3880:..\..\FatFs/ff.c **** /* Read File                                                             */
3881:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3882:..\..\FatFs/ff.c **** 
3883:..\..\FatFs/ff.c **** FRESULT f_read (
3884:..\..\FatFs/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3885:..\..\FatFs/ff.c **** 	void* buff,	/* Pointer to data buffer */
3886:..\..\FatFs/ff.c **** 	UINT btr,	/* Number of bytes to read */
3887:..\..\FatFs/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3888:..\..\FatFs/ff.c **** )
3889:..\..\FatFs/ff.c **** {
3890:..\..\FatFs/ff.c **** 	FRESULT res;
3891:..\..\FatFs/ff.c **** 	FATFS *fs;
3892:..\..\FatFs/ff.c **** 	DWORD clst;
3893:..\..\FatFs/ff.c **** 	LBA_t sect;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 88


3894:..\..\FatFs/ff.c **** 	FSIZE_t remain;
3895:..\..\FatFs/ff.c **** 	UINT rcnt, cc, csect;
3896:..\..\FatFs/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
3897:..\..\FatFs/ff.c **** 
3898:..\..\FatFs/ff.c **** 
3899:..\..\FatFs/ff.c **** 	*br = 0;	/* Clear read byte counter */
3900:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
3901:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3902:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
3903:..\..\FatFs/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
3904:..\..\FatFs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
3905:..\..\FatFs/ff.c **** 
3906:..\..\FatFs/ff.c **** 	for ( ;  btr;								/* Repeat until btr bytes read */
3907:..\..\FatFs/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3908:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3909:..\..\FatFs/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3910:..\..\FatFs/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
3911:..\..\FatFs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3912:..\..\FatFs/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3913:..\..\FatFs/ff.c **** 				} else {						/* Middle or end of the file */
3914:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
3915:..\..\FatFs/ff.c **** 					if (fp->cltbl) {
3916:..\..\FatFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3917:..\..\FatFs/ff.c **** 					} else
3918:..\..\FatFs/ff.c **** #endif
3919:..\..\FatFs/ff.c **** 					{
3920:..\..\FatFs/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
3921:..\..\FatFs/ff.c **** 					}
3922:..\..\FatFs/ff.c **** 				}
3923:..\..\FatFs/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
3924:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3925:..\..\FatFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
3926:..\..\FatFs/ff.c **** 			}
3927:..\..\FatFs/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
3928:..\..\FatFs/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
3929:..\..\FatFs/ff.c **** 			sect += csect;
3930:..\..\FatFs/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3931:..\..\FatFs/ff.c **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
3932:..\..\FatFs/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3933:..\..\FatFs/ff.c **** 					cc = fs->csize - csect;
3934:..\..\FatFs/ff.c **** 				}
3935:..\..\FatFs/ff.c **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3936:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3937:..\..\FatFs/ff.c **** #if FF_FS_TINY
3938:..\..\FatFs/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3939:..\..\FatFs/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3940:..\..\FatFs/ff.c **** 				}
3941:..\..\FatFs/ff.c **** #else
3942:..\..\FatFs/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3943:..\..\FatFs/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3944:..\..\FatFs/ff.c **** 				}
3945:..\..\FatFs/ff.c **** #endif
3946:..\..\FatFs/ff.c **** #endif
3947:..\..\FatFs/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
3948:..\..\FatFs/ff.c **** 				continue;
3949:..\..\FatFs/ff.c **** 			}
3950:..\..\FatFs/ff.c **** #if !FF_FS_TINY
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 89


3951:..\..\FatFs/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
3952:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3953:..\..\FatFs/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3954:..\..\FatFs/ff.c **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3955:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3956:..\..\FatFs/ff.c **** 				}
3957:..\..\FatFs/ff.c **** #endif
3958:..\..\FatFs/ff.c **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
3959:..\..\FatFs/ff.c **** 			}
3960:..\..\FatFs/ff.c **** #endif
3961:..\..\FatFs/ff.c **** 			fp->sect = sect;
3962:..\..\FatFs/ff.c **** 		}
3963:..\..\FatFs/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
3964:..\..\FatFs/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
3965:..\..\FatFs/ff.c **** #if FF_FS_TINY
3966:..\..\FatFs/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3967:..\..\FatFs/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3968:..\..\FatFs/ff.c **** #else
3969:..\..\FatFs/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3970:..\..\FatFs/ff.c **** #endif
3971:..\..\FatFs/ff.c **** 	}
3972:..\..\FatFs/ff.c **** 
3973:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, FR_OK);
3974:..\..\FatFs/ff.c **** }
3975:..\..\FatFs/ff.c **** 
3976:..\..\FatFs/ff.c **** 
3977:..\..\FatFs/ff.c **** 
3978:..\..\FatFs/ff.c **** 
3979:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
3980:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3981:..\..\FatFs/ff.c **** /* Write File                                                            */
3982:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
3983:..\..\FatFs/ff.c **** 
3984:..\..\FatFs/ff.c **** FRESULT f_write (
3985:..\..\FatFs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3986:..\..\FatFs/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3987:..\..\FatFs/ff.c **** 	UINT btw,			/* Number of bytes to write */
3988:..\..\FatFs/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3989:..\..\FatFs/ff.c **** )
3990:..\..\FatFs/ff.c **** {
3991:..\..\FatFs/ff.c **** 	FRESULT res;
3992:..\..\FatFs/ff.c **** 	FATFS *fs;
3993:..\..\FatFs/ff.c **** 	DWORD clst;
3994:..\..\FatFs/ff.c **** 	LBA_t sect;
3995:..\..\FatFs/ff.c **** 	UINT wcnt, cc, csect;
3996:..\..\FatFs/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
3997:..\..\FatFs/ff.c **** 
3998:..\..\FatFs/ff.c **** 
3999:..\..\FatFs/ff.c **** 	*bw = 0;	/* Clear write byte counter */
4000:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
4001:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
4002:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4003:..\..\FatFs/ff.c **** 
4004:..\..\FatFs/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
4005:..\..\FatFs/ff.c **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
4006:..\..\FatFs/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
4007:..\..\FatFs/ff.c **** 	}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 90


4008:..\..\FatFs/ff.c **** 
4009:..\..\FatFs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
4010:..\..\FatFs/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
4011:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
4012:..\..\FatFs/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
4013:..\..\FatFs/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
4014:..\..\FatFs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
4015:..\..\FatFs/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
4016:..\..\FatFs/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
4017:..\..\FatFs/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
4018:..\..\FatFs/ff.c **** 					}
4019:..\..\FatFs/ff.c **** 				} else {					/* On the middle or end of the file */
4020:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
4021:..\..\FatFs/ff.c **** 					if (fp->cltbl) {
4022:..\..\FatFs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
4023:..\..\FatFs/ff.c **** 					} else
4024:..\..\FatFs/ff.c **** #endif
4025:..\..\FatFs/ff.c **** 					{
4026:..\..\FatFs/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
4027:..\..\FatFs/ff.c **** 					}
4028:..\..\FatFs/ff.c **** 				}
4029:..\..\FatFs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
4030:..\..\FatFs/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
4031:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4032:..\..\FatFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
4033:..\..\FatFs/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
4034:..\..\FatFs/ff.c **** 			}
4035:..\..\FatFs/ff.c **** #if FF_FS_TINY
4036:..\..\FatFs/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
4037:..\..\FatFs/ff.c **** #else
4038:..\..\FatFs/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
4039:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4040:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4041:..\..\FatFs/ff.c **** 			}
4042:..\..\FatFs/ff.c **** #endif
4043:..\..\FatFs/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
4044:..\..\FatFs/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
4045:..\..\FatFs/ff.c **** 			sect += csect;
4046:..\..\FatFs/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
4047:..\..\FatFs/ff.c **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
4048:..\..\FatFs/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
4049:..\..\FatFs/ff.c **** 					cc = fs->csize - csect;
4050:..\..\FatFs/ff.c **** 				}
4051:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
4052:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 2
4053:..\..\FatFs/ff.c **** #if FF_FS_TINY
4054:..\..\FatFs/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
4055:..\..\FatFs/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
4056:..\..\FatFs/ff.c **** 					fs->wflag = 0;
4057:..\..\FatFs/ff.c **** 				}
4058:..\..\FatFs/ff.c **** #else
4059:..\..\FatFs/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
4060:..\..\FatFs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
4061:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
4062:..\..\FatFs/ff.c **** 				}
4063:..\..\FatFs/ff.c **** #endif
4064:..\..\FatFs/ff.c **** #endif
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 91


4065:..\..\FatFs/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
4066:..\..\FatFs/ff.c **** 				continue;
4067:..\..\FatFs/ff.c **** 			}
4068:..\..\FatFs/ff.c **** #if FF_FS_TINY
4069:..\..\FatFs/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
4070:..\..\FatFs/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
4071:..\..\FatFs/ff.c **** 				fs->winsect = sect;
4072:..\..\FatFs/ff.c **** 			}
4073:..\..\FatFs/ff.c **** #else
4074:..\..\FatFs/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
4075:..\..\FatFs/ff.c **** 				fp->fptr < fp->obj.objsize &&
4076:..\..\FatFs/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
4077:..\..\FatFs/ff.c **** 					ABORT(fs, FR_DISK_ERR);
4078:..\..\FatFs/ff.c **** 			}
4079:..\..\FatFs/ff.c **** #endif
4080:..\..\FatFs/ff.c **** 			fp->sect = sect;
4081:..\..\FatFs/ff.c **** 		}
4082:..\..\FatFs/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
4083:..\..\FatFs/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
4084:..\..\FatFs/ff.c **** #if FF_FS_TINY
4085:..\..\FatFs/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
4086:..\..\FatFs/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
4087:..\..\FatFs/ff.c **** 		fs->wflag = 1;
4088:..\..\FatFs/ff.c **** #else
4089:..\..\FatFs/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
4090:..\..\FatFs/ff.c **** 		fp->flag |= FA_DIRTY;
4091:..\..\FatFs/ff.c **** #endif
4092:..\..\FatFs/ff.c **** 	}
4093:..\..\FatFs/ff.c **** 
4094:..\..\FatFs/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
4095:..\..\FatFs/ff.c **** 
4096:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, FR_OK);
4097:..\..\FatFs/ff.c **** }
4098:..\..\FatFs/ff.c **** 
4099:..\..\FatFs/ff.c **** 
4100:..\..\FatFs/ff.c **** 
4101:..\..\FatFs/ff.c **** 
4102:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4103:..\..\FatFs/ff.c **** /* Synchronize the File                                                  */
4104:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4105:..\..\FatFs/ff.c **** 
4106:..\..\FatFs/ff.c **** FRESULT f_sync (
4107:..\..\FatFs/ff.c **** 	FIL* fp		/* Pointer to the file object */
4108:..\..\FatFs/ff.c **** )
4109:..\..\FatFs/ff.c **** {
4110:..\..\FatFs/ff.c **** 	FRESULT res;
4111:..\..\FatFs/ff.c **** 	FATFS *fs;
4112:..\..\FatFs/ff.c **** 	DWORD tm;
4113:..\..\FatFs/ff.c **** 	BYTE *dir;
4114:..\..\FatFs/ff.c **** 
4115:..\..\FatFs/ff.c **** 
4116:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4117:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4118:..\..\FatFs/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
4119:..\..\FatFs/ff.c **** #if !FF_FS_TINY
4120:..\..\FatFs/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
4121:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 92


4122:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4123:..\..\FatFs/ff.c **** 			}
4124:..\..\FatFs/ff.c **** #endif
4125:..\..\FatFs/ff.c **** 			/* Update the directory entry */
4126:..\..\FatFs/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
4127:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4128:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4129:..\..\FatFs/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
4130:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
4131:..\..\FatFs/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
4132:..\..\FatFs/ff.c **** 				}
4133:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
4134:..\..\FatFs/ff.c **** 					DIR dj;
4135:..\..\FatFs/ff.c **** 					DEF_NAMBUF
4136:..\..\FatFs/ff.c **** 
4137:..\..\FatFs/ff.c **** 					INIT_NAMBUF(fs);
4138:..\..\FatFs/ff.c **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
4139:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
4140:..\..\FatFs/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
4141:..\..\FatFs/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
4142:..\..\FatFs/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
4143:..\..\FatFs/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
4144:..\..\FatFs/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid 
4145:..\..\FatFs/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
4146:..\..\FatFs/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
4147:..\..\FatFs/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
4148:..\..\FatFs/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
4149:..\..\FatFs/ff.c **** 						if (res == FR_OK) {
4150:..\..\FatFs/ff.c **** 							res = sync_fs(fs);
4151:..\..\FatFs/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
4152:..\..\FatFs/ff.c **** 						}
4153:..\..\FatFs/ff.c **** 					}
4154:..\..\FatFs/ff.c **** 					FREE_NAMBUF();
4155:..\..\FatFs/ff.c **** 				}
4156:..\..\FatFs/ff.c **** 			} else
4157:..\..\FatFs/ff.c **** #endif
4158:..\..\FatFs/ff.c **** 			{
4159:..\..\FatFs/ff.c **** 				res = move_window(fs, fp->dir_sect);
4160:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
4161:..\..\FatFs/ff.c **** 					dir = fp->dir_ptr;
4162:..\..\FatFs/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
4163:..\..\FatFs/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
4164:..\..\FatFs/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
4165:..\..\FatFs/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
4166:..\..\FatFs/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
4167:..\..\FatFs/ff.c **** 					fs->wflag = 1;
4168:..\..\FatFs/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
4169:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
4170:..\..\FatFs/ff.c **** 				}
4171:..\..\FatFs/ff.c **** 			}
4172:..\..\FatFs/ff.c **** 		}
4173:..\..\FatFs/ff.c **** 	}
4174:..\..\FatFs/ff.c **** 
4175:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4176:..\..\FatFs/ff.c **** }
4177:..\..\FatFs/ff.c **** 
4178:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 93


4179:..\..\FatFs/ff.c **** 
4180:..\..\FatFs/ff.c **** 
4181:..\..\FatFs/ff.c **** 
4182:..\..\FatFs/ff.c **** 
4183:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4184:..\..\FatFs/ff.c **** /* Close File                                                            */
4185:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4186:..\..\FatFs/ff.c **** 
4187:..\..\FatFs/ff.c **** FRESULT f_close (
4188:..\..\FatFs/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
4189:..\..\FatFs/ff.c **** )
4190:..\..\FatFs/ff.c **** {
4191:..\..\FatFs/ff.c **** 	FRESULT res;
4192:..\..\FatFs/ff.c **** 	FATFS *fs;
4193:..\..\FatFs/ff.c **** 
4194:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
4195:..\..\FatFs/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
4196:..\..\FatFs/ff.c **** 	if (res == FR_OK)
4197:..\..\FatFs/ff.c **** #endif
4198:..\..\FatFs/ff.c **** 	{
4199:..\..\FatFs/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
4200:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
4201:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
4202:..\..\FatFs/ff.c **** 			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
4203:..\..\FatFs/ff.c **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
4204:..\..\FatFs/ff.c **** #else
4205:..\..\FatFs/ff.c **** 			fp->obj.fs = 0;	/* Invalidate file object */
4206:..\..\FatFs/ff.c **** #endif
4207:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
4208:..\..\FatFs/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
4209:..\..\FatFs/ff.c **** #endif
4210:..\..\FatFs/ff.c **** 		}
4211:..\..\FatFs/ff.c **** 	}
4212:..\..\FatFs/ff.c **** 	return res;
4213:..\..\FatFs/ff.c **** }
4214:..\..\FatFs/ff.c **** 
4215:..\..\FatFs/ff.c **** 
4216:..\..\FatFs/ff.c **** 
4217:..\..\FatFs/ff.c **** 
4218:..\..\FatFs/ff.c **** #if FF_FS_RPATH >= 1
4219:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4220:..\..\FatFs/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
4221:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4222:..\..\FatFs/ff.c **** 
4223:..\..\FatFs/ff.c **** FRESULT f_chdrive (
4224:..\..\FatFs/ff.c **** 	const TCHAR* path		/* Drive number to set */
4225:..\..\FatFs/ff.c **** )
4226:..\..\FatFs/ff.c **** {
4227:..\..\FatFs/ff.c **** 	int vol;
4228:..\..\FatFs/ff.c **** 
4229:..\..\FatFs/ff.c **** 
4230:..\..\FatFs/ff.c **** 	/* Get logical drive number */
4231:..\..\FatFs/ff.c **** 	vol = get_ldnumber(&path);
4232:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
4233:..\..\FatFs/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
4234:..\..\FatFs/ff.c **** 
4235:..\..\FatFs/ff.c **** 	return FR_OK;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 94


4236:..\..\FatFs/ff.c **** }
4237:..\..\FatFs/ff.c **** 
4238:..\..\FatFs/ff.c **** 
4239:..\..\FatFs/ff.c **** 
4240:..\..\FatFs/ff.c **** FRESULT f_chdir (
4241:..\..\FatFs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4242:..\..\FatFs/ff.c **** )
4243:..\..\FatFs/ff.c **** {
4244:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 2
4245:..\..\FatFs/ff.c **** 	UINT i;
4246:..\..\FatFs/ff.c **** #endif
4247:..\..\FatFs/ff.c **** 	FRESULT res;
4248:..\..\FatFs/ff.c **** 	DIR dj;
4249:..\..\FatFs/ff.c **** 	FATFS *fs;
4250:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4251:..\..\FatFs/ff.c **** 
4252:..\..\FatFs/ff.c **** 
4253:..\..\FatFs/ff.c **** 	/* Get logical drive */
4254:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, 0);
4255:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4256:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
4257:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
4258:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
4259:..\..\FatFs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
4260:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
4261:..\..\FatFs/ff.c **** 				fs->cdir = dj.obj.sclust;
4262:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4263:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4264:..\..\FatFs/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
4265:..\..\FatFs/ff.c **** 					fs->cdc_size = dj.obj.c_size;
4266:..\..\FatFs/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
4267:..\..\FatFs/ff.c **** 				}
4268:..\..\FatFs/ff.c **** #endif
4269:..\..\FatFs/ff.c **** 			} else {
4270:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
4271:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4272:..\..\FatFs/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4273:..\..\FatFs/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4274:..\..\FatFs/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4275:..\..\FatFs/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4276:..\..\FatFs/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
4277:..\..\FatFs/ff.c **** 					} else
4278:..\..\FatFs/ff.c **** #endif
4279:..\..\FatFs/ff.c **** 					{
4280:..\..\FatFs/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
4281:..\..\FatFs/ff.c **** 					}
4282:..\..\FatFs/ff.c **** 				} else {
4283:..\..\FatFs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
4284:..\..\FatFs/ff.c **** 				}
4285:..\..\FatFs/ff.c **** 			}
4286:..\..\FatFs/ff.c **** 		}
4287:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
4288:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4289:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed at Unix style volume ID */
4290:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
4291:..\..\FatFs/ff.c **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4292:..\..\FatFs/ff.c **** 			CurrVol = (BYTE)i;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 95


4293:..\..\FatFs/ff.c **** 		}
4294:..\..\FatFs/ff.c **** #endif
4295:..\..\FatFs/ff.c **** 	}
4296:..\..\FatFs/ff.c **** 
4297:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4298:..\..\FatFs/ff.c **** }
4299:..\..\FatFs/ff.c **** 
4300:..\..\FatFs/ff.c **** 
4301:..\..\FatFs/ff.c **** #if FF_FS_RPATH >= 2
4302:..\..\FatFs/ff.c **** FRESULT f_getcwd (
4303:..\..\FatFs/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
4304:..\..\FatFs/ff.c **** 	UINT len		/* Size of buff in unit of TCHAR */
4305:..\..\FatFs/ff.c **** )
4306:..\..\FatFs/ff.c **** {
4307:..\..\FatFs/ff.c **** 	FRESULT res;
4308:..\..\FatFs/ff.c **** 	DIR dj;
4309:..\..\FatFs/ff.c **** 	FATFS *fs;
4310:..\..\FatFs/ff.c **** 	UINT i, n;
4311:..\..\FatFs/ff.c **** 	DWORD ccl;
4312:..\..\FatFs/ff.c **** 	TCHAR *tp = buff;
4313:..\..\FatFs/ff.c **** #if FF_VOLUMES >= 2
4314:..\..\FatFs/ff.c **** 	UINT vl;
4315:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID
4316:..\..\FatFs/ff.c **** 	const char *vp;
4317:..\..\FatFs/ff.c **** #endif
4318:..\..\FatFs/ff.c **** #endif
4319:..\..\FatFs/ff.c **** 	FILINFO fno;
4320:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4321:..\..\FatFs/ff.c **** 
4322:..\..\FatFs/ff.c **** 
4323:..\..\FatFs/ff.c **** 	/* Get logical drive */
4324:..\..\FatFs/ff.c **** 	buff[0] = 0;	/* Set null string to get current volume */
4325:..\..\FatFs/ff.c **** 	res = mount_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
4326:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4327:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
4328:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
4329:..\..\FatFs/ff.c **** 
4330:..\..\FatFs/ff.c **** 		/* Follow parent directories and create the path */
4331:..\..\FatFs/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
4332:..\..\FatFs/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4333:..\..\FatFs/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
4334:..\..\FatFs/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
4335:..\..\FatFs/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
4336:..\..\FatFs/ff.c **** 				if (res != FR_OK) break;
4337:..\..\FatFs/ff.c **** 				res = move_window(fs, dj.sect);
4338:..\..\FatFs/ff.c **** 				if (res != FR_OK) break;
4339:..\..\FatFs/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
4340:..\..\FatFs/ff.c **** 				res = dir_sdi(&dj, 0);
4341:..\..\FatFs/ff.c **** 				if (res != FR_OK) break;
4342:..\..\FatFs/ff.c **** 				do {							/* Find the entry links to the child directory */
4343:..\..\FatFs/ff.c **** 					res = DIR_READ_FILE(&dj);
4344:..\..\FatFs/ff.c **** 					if (res != FR_OK) break;
4345:..\..\FatFs/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
4346:..\..\FatFs/ff.c **** 					res = dir_next(&dj, 0);
4347:..\..\FatFs/ff.c **** 				} while (res == FR_OK);
4348:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
4349:..\..\FatFs/ff.c **** 				if (res != FR_OK) break;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 96


4350:..\..\FatFs/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
4351:..\..\FatFs/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
4352:..\..\FatFs/ff.c **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
4353:..\..\FatFs/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
4354:..\..\FatFs/ff.c **** 				}
4355:..\..\FatFs/ff.c **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
4356:..\..\FatFs/ff.c **** 				buff[--i] = '/';
4357:..\..\FatFs/ff.c **** 			}
4358:..\..\FatFs/ff.c **** 		}
4359:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
4360:..\..\FatFs/ff.c **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
4361:..\..\FatFs/ff.c **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4362:..\..\FatFs/ff.c **** 			vl = 0;
4363:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4364:..\..\FatFs/ff.c **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4365:..\..\FatFs/ff.c **** 			if (i >= n + 2) {
4366:..\..\FatFs/ff.c **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4367:..\..\FatFs/ff.c **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4368:..\..\FatFs/ff.c **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4369:..\..\FatFs/ff.c **** 				vl++;
4370:..\..\FatFs/ff.c **** 			}
4371:..\..\FatFs/ff.c **** #else						/* Numeric volume ID */
4372:..\..\FatFs/ff.c **** 			if (i >= 3) {
4373:..\..\FatFs/ff.c **** 				*tp++ = (TCHAR)'0' + CurrVol;
4374:..\..\FatFs/ff.c **** 				*tp++ = (TCHAR)':';
4375:..\..\FatFs/ff.c **** 				vl = 2;
4376:..\..\FatFs/ff.c **** 			}
4377:..\..\FatFs/ff.c **** #endif
4378:..\..\FatFs/ff.c **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4379:..\..\FatFs/ff.c **** #endif
4380:..\..\FatFs/ff.c **** 			/* Add current directory path */
4381:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
4382:..\..\FatFs/ff.c **** 				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
4383:..\..\FatFs/ff.c **** 			}
4384:..\..\FatFs/ff.c **** 		}
4385:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
4386:..\..\FatFs/ff.c **** 	}
4387:..\..\FatFs/ff.c **** 
4388:..\..\FatFs/ff.c **** 	*tp = 0;
4389:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4390:..\..\FatFs/ff.c **** }
4391:..\..\FatFs/ff.c **** 
4392:..\..\FatFs/ff.c **** #endif /* FF_FS_RPATH >= 2 */
4393:..\..\FatFs/ff.c **** #endif /* FF_FS_RPATH >= 1 */
4394:..\..\FatFs/ff.c **** 
4395:..\..\FatFs/ff.c **** 
4396:..\..\FatFs/ff.c **** 
4397:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 2
4398:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4399:..\..\FatFs/ff.c **** /* Seek File Read/Write Pointer                                          */
4400:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4401:..\..\FatFs/ff.c **** 
4402:..\..\FatFs/ff.c **** FRESULT f_lseek (
4403:..\..\FatFs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4404:..\..\FatFs/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4405:..\..\FatFs/ff.c **** )
4406:..\..\FatFs/ff.c **** {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 97


4407:..\..\FatFs/ff.c **** 	FRESULT res;
4408:..\..\FatFs/ff.c **** 	FATFS *fs;
4409:..\..\FatFs/ff.c **** 	DWORD clst, bcs;
4410:..\..\FatFs/ff.c **** 	LBA_t nsect;
4411:..\..\FatFs/ff.c **** 	FSIZE_t ifptr;
4412:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
4413:..\..\FatFs/ff.c **** 	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
4414:..\..\FatFs/ff.c **** 	LBA_t dsc;
4415:..\..\FatFs/ff.c **** #endif
4416:..\..\FatFs/ff.c **** 
4417:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
4418:..\..\FatFs/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
4419:..\..\FatFs/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
4420:..\..\FatFs/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4421:..\..\FatFs/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4422:..\..\FatFs/ff.c **** 	}
4423:..\..\FatFs/ff.c **** #endif
4424:..\..\FatFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
4425:..\..\FatFs/ff.c **** 
4426:..\..\FatFs/ff.c **** #if FF_USE_FASTSEEK
4427:..\..\FatFs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4428:..\..\FatFs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4429:..\..\FatFs/ff.c **** 			tbl = fp->cltbl;
4430:..\..\FatFs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4431:..\..\FatFs/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4432:..\..\FatFs/ff.c **** 			if (cl != 0) {
4433:..\..\FatFs/ff.c **** 				do {
4434:..\..\FatFs/ff.c **** 					/* Get a fragment */
4435:..\..\FatFs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4436:..\..\FatFs/ff.c **** 					do {
4437:..\..\FatFs/ff.c **** 						pcl = cl; ncl++;
4438:..\..\FatFs/ff.c **** 						cl = get_fat(&fp->obj, cl);
4439:..\..\FatFs/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4440:..\..\FatFs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4441:..\..\FatFs/ff.c **** 					} while (cl == pcl + 1);
4442:..\..\FatFs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4443:..\..\FatFs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4444:..\..\FatFs/ff.c **** 					}
4445:..\..\FatFs/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4446:..\..\FatFs/ff.c **** 			}
4447:..\..\FatFs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4448:..\..\FatFs/ff.c **** 			if (ulen <= tlen) {
4449:..\..\FatFs/ff.c **** 				*tbl = 0;		/* Terminate table */
4450:..\..\FatFs/ff.c **** 			} else {
4451:..\..\FatFs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4452:..\..\FatFs/ff.c **** 			}
4453:..\..\FatFs/ff.c **** 		} else {						/* Fast seek */
4454:..\..\FatFs/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4455:..\..\FatFs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4456:..\..\FatFs/ff.c **** 			if (ofs > 0) {
4457:..\..\FatFs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4458:..\..\FatFs/ff.c **** 				dsc = clst2sect(fs, fp->clust);
4459:..\..\FatFs/ff.c **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4460:..\..\FatFs/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4461:..\..\FatFs/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4462:..\..\FatFs/ff.c **** #if !FF_FS_TINY
4463:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 98


4464:..\..\FatFs/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4465:..\..\FatFs/ff.c **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4466:..\..\FatFs/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4467:..\..\FatFs/ff.c **** 					}
4468:..\..\FatFs/ff.c **** #endif
4469:..\..\FatFs/ff.c **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4470:..\..\FatFs/ff.c **** #endif
4471:..\..\FatFs/ff.c **** 					fp->sect = dsc;
4472:..\..\FatFs/ff.c **** 				}
4473:..\..\FatFs/ff.c **** 			}
4474:..\..\FatFs/ff.c **** 		}
4475:..\..\FatFs/ff.c **** 	} else
4476:..\..\FatFs/ff.c **** #endif
4477:..\..\FatFs/ff.c **** 
4478:..\..\FatFs/ff.c **** 	/* Normal Seek */
4479:..\..\FatFs/ff.c **** 	{
4480:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4481:..\..\FatFs/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4482:..\..\FatFs/ff.c **** #endif
4483:..\..\FatFs/ff.c **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
4484:..\..\FatFs/ff.c **** 			ofs = fp->obj.objsize;
4485:..\..\FatFs/ff.c **** 		}
4486:..\..\FatFs/ff.c **** 		ifptr = fp->fptr;
4487:..\..\FatFs/ff.c **** 		fp->fptr = nsect = 0;
4488:..\..\FatFs/ff.c **** 		if (ofs > 0) {
4489:..\..\FatFs/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
4490:..\..\FatFs/ff.c **** 			if (ifptr > 0 &&
4491:..\..\FatFs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
4492:..\..\FatFs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
4493:..\..\FatFs/ff.c **** 				ofs -= fp->fptr;
4494:..\..\FatFs/ff.c **** 				clst = fp->clust;
4495:..\..\FatFs/ff.c **** 			} else {									/* When seek to back cluster, */
4496:..\..\FatFs/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
4497:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
4498:..\..\FatFs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
4499:..\..\FatFs/ff.c **** 					clst = create_chain(&fp->obj, 0);
4500:..\..\FatFs/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4501:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4502:..\..\FatFs/ff.c **** 					fp->obj.sclust = clst;
4503:..\..\FatFs/ff.c **** 				}
4504:..\..\FatFs/ff.c **** #endif
4505:..\..\FatFs/ff.c **** 				fp->clust = clst;
4506:..\..\FatFs/ff.c **** 			}
4507:..\..\FatFs/ff.c **** 			if (clst != 0) {
4508:..\..\FatFs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
4509:..\..\FatFs/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
4510:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
4511:..\..\FatFs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4512:..\..\FatFs/ff.c **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4513:..\..\FatFs/ff.c **** 							fp->obj.objsize = fp->fptr;
4514:..\..\FatFs/ff.c **** 							fp->flag |= FA_MODIFIED;
4515:..\..\FatFs/ff.c **** 						}
4516:..\..\FatFs/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4517:..\..\FatFs/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4518:..\..\FatFs/ff.c **** 							ofs = 0; break;
4519:..\..\FatFs/ff.c **** 						}
4520:..\..\FatFs/ff.c **** 					} else
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 99


4521:..\..\FatFs/ff.c **** #endif
4522:..\..\FatFs/ff.c **** 					{
4523:..\..\FatFs/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4524:..\..\FatFs/ff.c **** 					}
4525:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4526:..\..\FatFs/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4527:..\..\FatFs/ff.c **** 					fp->clust = clst;
4528:..\..\FatFs/ff.c **** 				}
4529:..\..\FatFs/ff.c **** 				fp->fptr += ofs;
4530:..\..\FatFs/ff.c **** 				if (ofs % SS(fs)) {
4531:..\..\FatFs/ff.c **** 					nsect = clst2sect(fs, clst);	/* Current sector */
4532:..\..\FatFs/ff.c **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
4533:..\..\FatFs/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
4534:..\..\FatFs/ff.c **** 				}
4535:..\..\FatFs/ff.c **** 			}
4536:..\..\FatFs/ff.c **** 		}
4537:..\..\FatFs/ff.c **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
4538:..\..\FatFs/ff.c **** 			fp->obj.objsize = fp->fptr;
4539:..\..\FatFs/ff.c **** 			fp->flag |= FA_MODIFIED;
4540:..\..\FatFs/ff.c **** 		}
4541:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
4542:..\..\FatFs/ff.c **** #if !FF_FS_TINY
4543:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
4544:..\..\FatFs/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
4545:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4546:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4547:..\..\FatFs/ff.c **** 			}
4548:..\..\FatFs/ff.c **** #endif
4549:..\..\FatFs/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
4550:..\..\FatFs/ff.c **** #endif
4551:..\..\FatFs/ff.c **** 			fp->sect = nsect;
4552:..\..\FatFs/ff.c **** 		}
4553:..\..\FatFs/ff.c **** 	}
4554:..\..\FatFs/ff.c **** 
4555:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4556:..\..\FatFs/ff.c **** }
4557:..\..\FatFs/ff.c **** 
4558:..\..\FatFs/ff.c **** 
4559:..\..\FatFs/ff.c **** 
4560:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 1
4561:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4562:..\..\FatFs/ff.c **** /* Create a Directory Object                                             */
4563:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4564:..\..\FatFs/ff.c **** 
4565:..\..\FatFs/ff.c **** FRESULT f_opendir (
4566:..\..\FatFs/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4567:..\..\FatFs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4568:..\..\FatFs/ff.c **** )
4569:..\..\FatFs/ff.c **** {
4570:..\..\FatFs/ff.c **** 	FRESULT res;
4571:..\..\FatFs/ff.c **** 	FATFS *fs;
4572:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4573:..\..\FatFs/ff.c **** 
4574:..\..\FatFs/ff.c **** 
4575:..\..\FatFs/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
4576:..\..\FatFs/ff.c **** 
4577:..\..\FatFs/ff.c **** 	/* Get logical drive */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 100


4578:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, 0);
4579:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4580:..\..\FatFs/ff.c **** 		dp->obj.fs = fs;
4581:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
4582:..\..\FatFs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4583:..\..\FatFs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
4584:..\..\FatFs/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4585:..\..\FatFs/ff.c **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
4586:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4587:..\..\FatFs/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4588:..\..\FatFs/ff.c **** 						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
4589:..\..\FatFs/ff.c **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4590:..\..\FatFs/ff.c **** 						dp->obj.c_ofs = dp->blk_ofs;
4591:..\..\FatFs/ff.c **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4592:..\..\FatFs/ff.c **** 					} else
4593:..\..\FatFs/ff.c **** #endif
4594:..\..\FatFs/ff.c **** 					{
4595:..\..\FatFs/ff.c **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
4596:..\..\FatFs/ff.c **** 					}
4597:..\..\FatFs/ff.c **** 				} else {						/* This object is a file */
4598:..\..\FatFs/ff.c **** 					res = FR_NO_PATH;
4599:..\..\FatFs/ff.c **** 				}
4600:..\..\FatFs/ff.c **** 			}
4601:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
4602:..\..\FatFs/ff.c **** 				dp->obj.id = fs->id;
4603:..\..\FatFs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4604:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
4605:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
4606:..\..\FatFs/ff.c **** 					if (dp->obj.sclust != 0) {
4607:..\..\FatFs/ff.c **** 						dp->obj.lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4608:..\..\FatFs/ff.c **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
4609:..\..\FatFs/ff.c **** 					} else {
4610:..\..\FatFs/ff.c **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
4611:..\..\FatFs/ff.c **** 					}
4612:..\..\FatFs/ff.c **** 				}
4613:..\..\FatFs/ff.c **** #endif
4614:..\..\FatFs/ff.c **** 			}
4615:..\..\FatFs/ff.c **** 		}
4616:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
4617:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4618:..\..\FatFs/ff.c **** 	}
4619:..\..\FatFs/ff.c **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
4620:..\..\FatFs/ff.c **** 
4621:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4622:..\..\FatFs/ff.c **** }
4623:..\..\FatFs/ff.c **** 
4624:..\..\FatFs/ff.c **** 
4625:..\..\FatFs/ff.c **** 
4626:..\..\FatFs/ff.c **** 
4627:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4628:..\..\FatFs/ff.c **** /* Close Directory                                                       */
4629:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4630:..\..\FatFs/ff.c **** 
4631:..\..\FatFs/ff.c **** FRESULT f_closedir (
4632:..\..\FatFs/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4633:..\..\FatFs/ff.c **** )
4634:..\..\FatFs/ff.c **** {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 101


4635:..\..\FatFs/ff.c **** 	FRESULT res;
4636:..\..\FatFs/ff.c **** 	FATFS *fs;
4637:..\..\FatFs/ff.c **** 
4638:..\..\FatFs/ff.c **** 
4639:..\..\FatFs/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
4640:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4641:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
4642:..\..\FatFs/ff.c **** 		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
4643:..\..\FatFs/ff.c **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
4644:..\..\FatFs/ff.c **** #else
4645:..\..\FatFs/ff.c **** 		dp->obj.fs = 0;	/* Invalidate directory object */
4646:..\..\FatFs/ff.c **** #endif
4647:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
4648:..\..\FatFs/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4649:..\..\FatFs/ff.c **** #endif
4650:..\..\FatFs/ff.c **** 	}
4651:..\..\FatFs/ff.c **** 	return res;
4652:..\..\FatFs/ff.c **** }
4653:..\..\FatFs/ff.c **** 
4654:..\..\FatFs/ff.c **** 
4655:..\..\FatFs/ff.c **** 
4656:..\..\FatFs/ff.c **** 
4657:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4658:..\..\FatFs/ff.c **** /* Read Directory Entries in Sequence                                    */
4659:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4660:..\..\FatFs/ff.c **** 
4661:..\..\FatFs/ff.c **** FRESULT f_readdir (
4662:..\..\FatFs/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4663:..\..\FatFs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4664:..\..\FatFs/ff.c **** )
4665:..\..\FatFs/ff.c **** {
4666:..\..\FatFs/ff.c **** 	FRESULT res;
4667:..\..\FatFs/ff.c **** 	FATFS *fs;
4668:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4669:..\..\FatFs/ff.c **** 
4670:..\..\FatFs/ff.c **** 
4671:..\..\FatFs/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
4672:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4673:..\..\FatFs/ff.c **** 		if (!fno) {
4674:..\..\FatFs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4675:..\..\FatFs/ff.c **** 		} else {
4676:..\..\FatFs/ff.c **** 			INIT_NAMBUF(fs);
4677:..\..\FatFs/ff.c **** 			res = DIR_READ_FILE(dp);		/* Read an item */
4678:..\..\FatFs/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
4679:..\..\FatFs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
4680:..\..\FatFs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
4681:..\..\FatFs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
4682:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
4683:..\..\FatFs/ff.c **** 			}
4684:..\..\FatFs/ff.c **** 			FREE_NAMBUF();
4685:..\..\FatFs/ff.c **** 		}
4686:..\..\FatFs/ff.c **** 	}
4687:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4688:..\..\FatFs/ff.c **** }
4689:..\..\FatFs/ff.c **** 
4690:..\..\FatFs/ff.c **** 
4691:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 102


4692:..\..\FatFs/ff.c **** #if FF_USE_FIND
4693:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4694:..\..\FatFs/ff.c **** /* Find Next File                                                        */
4695:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4696:..\..\FatFs/ff.c **** 
4697:..\..\FatFs/ff.c **** FRESULT f_findnext (
4698:..\..\FatFs/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4699:..\..\FatFs/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4700:..\..\FatFs/ff.c **** )
4701:..\..\FatFs/ff.c **** {
4702:..\..\FatFs/ff.c **** 	FRESULT res;
4703:..\..\FatFs/ff.c **** 
4704:..\..\FatFs/ff.c **** 
4705:..\..\FatFs/ff.c **** 	for (;;) {
4706:..\..\FatFs/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4707:..\..\FatFs/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4708:..\..\FatFs/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4709:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_USE_FIND == 2
4710:..\..\FatFs/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4711:..\..\FatFs/ff.c **** #endif
4712:..\..\FatFs/ff.c **** 	}
4713:..\..\FatFs/ff.c **** 	return res;
4714:..\..\FatFs/ff.c **** }
4715:..\..\FatFs/ff.c **** 
4716:..\..\FatFs/ff.c **** 
4717:..\..\FatFs/ff.c **** 
4718:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4719:..\..\FatFs/ff.c **** /* Find First File                                                       */
4720:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4721:..\..\FatFs/ff.c **** 
4722:..\..\FatFs/ff.c **** FRESULT f_findfirst (
4723:..\..\FatFs/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4724:..\..\FatFs/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4725:..\..\FatFs/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4726:..\..\FatFs/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4727:..\..\FatFs/ff.c **** )
4728:..\..\FatFs/ff.c **** {
4729:..\..\FatFs/ff.c **** 	FRESULT res;
4730:..\..\FatFs/ff.c **** 
4731:..\..\FatFs/ff.c **** 
4732:..\..\FatFs/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4733:..\..\FatFs/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4734:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4735:..\..\FatFs/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4736:..\..\FatFs/ff.c **** 	}
4737:..\..\FatFs/ff.c **** 	return res;
4738:..\..\FatFs/ff.c **** }
4739:..\..\FatFs/ff.c **** 
4740:..\..\FatFs/ff.c **** #endif	/* FF_USE_FIND */
4741:..\..\FatFs/ff.c **** 
4742:..\..\FatFs/ff.c **** 
4743:..\..\FatFs/ff.c **** 
4744:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE == 0
4745:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4746:..\..\FatFs/ff.c **** /* Get File Status                                                       */
4747:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4748:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 103


4749:..\..\FatFs/ff.c **** FRESULT f_stat (
4750:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4751:..\..\FatFs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4752:..\..\FatFs/ff.c **** )
4753:..\..\FatFs/ff.c **** {
4754:..\..\FatFs/ff.c **** 	FRESULT res;
4755:..\..\FatFs/ff.c **** 	DIR dj;
4756:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4757:..\..\FatFs/ff.c **** 
4758:..\..\FatFs/ff.c **** 
4759:..\..\FatFs/ff.c **** 	/* Get logical drive */
4760:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &dj.obj.fs, 0);
4761:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4762:..\..\FatFs/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4763:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4764:..\..\FatFs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
4765:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4766:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;
4767:..\..\FatFs/ff.c **** 			} else {							/* Found an object */
4768:..\..\FatFs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
4769:..\..\FatFs/ff.c **** 			}
4770:..\..\FatFs/ff.c **** 		}
4771:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
4772:..\..\FatFs/ff.c **** 	}
4773:..\..\FatFs/ff.c **** 
4774:..\..\FatFs/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
4775:..\..\FatFs/ff.c **** }
4776:..\..\FatFs/ff.c **** 
4777:..\..\FatFs/ff.c **** 
4778:..\..\FatFs/ff.c **** 
4779:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
4780:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4781:..\..\FatFs/ff.c **** /* Get Number of Free Clusters                                           */
4782:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4783:..\..\FatFs/ff.c **** 
4784:..\..\FatFs/ff.c **** FRESULT f_getfree (
4785:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4786:..\..\FatFs/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4787:..\..\FatFs/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4788:..\..\FatFs/ff.c **** )
4789:..\..\FatFs/ff.c **** {
4790:..\..\FatFs/ff.c **** 	FRESULT res;
4791:..\..\FatFs/ff.c **** 	FATFS *fs;
4792:..\..\FatFs/ff.c **** 	DWORD nfree, clst, stat;
4793:..\..\FatFs/ff.c **** 	LBA_t sect;
4794:..\..\FatFs/ff.c **** 	UINT i;
4795:..\..\FatFs/ff.c **** 	FFOBJID obj;
4796:..\..\FatFs/ff.c **** 
4797:..\..\FatFs/ff.c **** 
4798:..\..\FatFs/ff.c **** 	/* Get logical drive */
4799:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, 0);
4800:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4801:..\..\FatFs/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
4802:..\..\FatFs/ff.c **** 		/* If free_clst is valid, return it without full FAT scan */
4803:..\..\FatFs/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
4804:..\..\FatFs/ff.c **** 			*nclst = fs->free_clst;
4805:..\..\FatFs/ff.c **** 		} else {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 104


4806:..\..\FatFs/ff.c **** 			/* Scan FAT to obtain number of free clusters */
4807:..\..\FatFs/ff.c **** 			nfree = 0;
4808:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
4809:..\..\FatFs/ff.c **** 				clst = 2; obj.fs = fs;
4810:..\..\FatFs/ff.c **** 				do {
4811:..\..\FatFs/ff.c **** 					stat = get_fat(&obj, clst);
4812:..\..\FatFs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4813:..\..\FatFs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4814:..\..\FatFs/ff.c **** 					if (stat == 0) nfree++;
4815:..\..\FatFs/ff.c **** 				} while (++clst < fs->n_fatent);
4816:..\..\FatFs/ff.c **** 			} else {
4817:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4818:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4819:..\..\FatFs/ff.c **** 					BYTE bm;
4820:..\..\FatFs/ff.c **** 					UINT b;
4821:..\..\FatFs/ff.c **** 
4822:..\..\FatFs/ff.c **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4823:..\..\FatFs/ff.c **** 					sect = fs->bitbase;			/* Bitmap sector */
4824:..\..\FatFs/ff.c **** 					i = 0;						/* Offset in the sector */
4825:..\..\FatFs/ff.c **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4826:..\..\FatFs/ff.c **** 						if (i == 0) {
4827:..\..\FatFs/ff.c **** 							res = move_window(fs, sect++);
4828:..\..\FatFs/ff.c **** 							if (res != FR_OK) break;
4829:..\..\FatFs/ff.c **** 						}
4830:..\..\FatFs/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4831:..\..\FatFs/ff.c **** 							if (!(bm & 1)) nfree++;
4832:..\..\FatFs/ff.c **** 							bm >>= 1;
4833:..\..\FatFs/ff.c **** 						}
4834:..\..\FatFs/ff.c **** 						i = (i + 1) % SS(fs);
4835:..\..\FatFs/ff.c **** 					} while (clst);
4836:..\..\FatFs/ff.c **** 				} else
4837:..\..\FatFs/ff.c **** #endif
4838:..\..\FatFs/ff.c **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4839:..\..\FatFs/ff.c **** 					clst = fs->n_fatent;	/* Number of entries */
4840:..\..\FatFs/ff.c **** 					sect = fs->fatbase;		/* Top of the FAT */
4841:..\..\FatFs/ff.c **** 					i = 0;					/* Offset in the sector */
4842:..\..\FatFs/ff.c **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4843:..\..\FatFs/ff.c **** 						if (i == 0) {
4844:..\..\FatFs/ff.c **** 							res = move_window(fs, sect++);
4845:..\..\FatFs/ff.c **** 							if (res != FR_OK) break;
4846:..\..\FatFs/ff.c **** 						}
4847:..\..\FatFs/ff.c **** 						if (fs->fs_type == FS_FAT16) {
4848:..\..\FatFs/ff.c **** 							if (ld_word(fs->win + i) == 0) nfree++;
4849:..\..\FatFs/ff.c **** 							i += 2;
4850:..\..\FatFs/ff.c **** 						} else {
4851:..\..\FatFs/ff.c **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
4852:..\..\FatFs/ff.c **** 							i += 4;
4853:..\..\FatFs/ff.c **** 						}
4854:..\..\FatFs/ff.c **** 						i %= SS(fs);
4855:..\..\FatFs/ff.c **** 					} while (--clst);
4856:..\..\FatFs/ff.c **** 				}
4857:..\..\FatFs/ff.c **** 			}
4858:..\..\FatFs/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
4859:..\..\FatFs/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
4860:..\..\FatFs/ff.c **** 			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
4861:..\..\FatFs/ff.c **** 		}
4862:..\..\FatFs/ff.c **** 	}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 105


4863:..\..\FatFs/ff.c **** 
4864:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4865:..\..\FatFs/ff.c **** }
4866:..\..\FatFs/ff.c **** 
4867:..\..\FatFs/ff.c **** 
4868:..\..\FatFs/ff.c **** 
4869:..\..\FatFs/ff.c **** 
4870:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4871:..\..\FatFs/ff.c **** /* Truncate File                                                         */
4872:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4873:..\..\FatFs/ff.c **** 
4874:..\..\FatFs/ff.c **** FRESULT f_truncate (
4875:..\..\FatFs/ff.c **** 	FIL* fp		/* Pointer to the file object */
4876:..\..\FatFs/ff.c **** )
4877:..\..\FatFs/ff.c **** {
4878:..\..\FatFs/ff.c **** 	FRESULT res;
4879:..\..\FatFs/ff.c **** 	FATFS *fs;
4880:..\..\FatFs/ff.c **** 	DWORD ncl;
4881:..\..\FatFs/ff.c **** 
4882:..\..\FatFs/ff.c **** 
4883:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4884:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
4885:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4886:..\..\FatFs/ff.c **** 
4887:..\..\FatFs/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
4888:..\..\FatFs/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
4889:..\..\FatFs/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4890:..\..\FatFs/ff.c **** 			fp->obj.sclust = 0;
4891:..\..\FatFs/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4892:..\..\FatFs/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
4893:..\..\FatFs/ff.c **** 			res = FR_OK;
4894:..\..\FatFs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4895:..\..\FatFs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
4896:..\..\FatFs/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4897:..\..\FatFs/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4898:..\..\FatFs/ff.c **** 			}
4899:..\..\FatFs/ff.c **** 		}
4900:..\..\FatFs/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
4901:..\..\FatFs/ff.c **** 		fp->flag |= FA_MODIFIED;
4902:..\..\FatFs/ff.c **** #if !FF_FS_TINY
4903:..\..\FatFs/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4904:..\..\FatFs/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
4905:..\..\FatFs/ff.c **** 				res = FR_DISK_ERR;
4906:..\..\FatFs/ff.c **** 			} else {
4907:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4908:..\..\FatFs/ff.c **** 			}
4909:..\..\FatFs/ff.c **** 		}
4910:..\..\FatFs/ff.c **** #endif
4911:..\..\FatFs/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
4912:..\..\FatFs/ff.c **** 	}
4913:..\..\FatFs/ff.c **** 
4914:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
4915:..\..\FatFs/ff.c **** }
4916:..\..\FatFs/ff.c **** 
4917:..\..\FatFs/ff.c **** 
4918:..\..\FatFs/ff.c **** 
4919:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 106


4920:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4921:..\..\FatFs/ff.c **** /* Delete a File/Directory                                               */
4922:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
4923:..\..\FatFs/ff.c **** 
4924:..\..\FatFs/ff.c **** FRESULT f_unlink (
4925:..\..\FatFs/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4926:..\..\FatFs/ff.c **** )
4927:..\..\FatFs/ff.c **** {
4928:..\..\FatFs/ff.c **** 	FRESULT res;
4929:..\..\FatFs/ff.c **** 	DIR dj, sdj;
4930:..\..\FatFs/ff.c **** 	DWORD dclst = 0;
4931:..\..\FatFs/ff.c **** 	FATFS *fs;
4932:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4933:..\..\FatFs/ff.c **** 	FFOBJID obj;
4934:..\..\FatFs/ff.c **** #endif
4935:..\..\FatFs/ff.c **** 	DEF_NAMBUF
4936:..\..\FatFs/ff.c **** 
4937:..\..\FatFs/ff.c **** 
4938:..\..\FatFs/ff.c **** 	/* Get logical drive */
4939:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);
4940:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
4941:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
4942:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
4943:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
4944:..\..\FatFs/ff.c **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4945:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4946:..\..\FatFs/ff.c **** 		}
4947:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
4948:..\..\FatFs/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4949:..\..\FatFs/ff.c **** #endif
4950:..\..\FatFs/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
4951:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4952:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4953:..\..\FatFs/ff.c **** 			} else {
4954:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_RDO) {
4955:..\..\FatFs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4956:..\..\FatFs/ff.c **** 				}
4957:..\..\FatFs/ff.c **** 			}
4958:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
4959:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4960:..\..\FatFs/ff.c **** 				obj.fs = fs;
4961:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4962:..\..\FatFs/ff.c **** 					init_alloc_info(fs, &obj);
4963:..\..\FatFs/ff.c **** 					dclst = obj.sclust;
4964:..\..\FatFs/ff.c **** 				} else
4965:..\..\FatFs/ff.c **** #endif
4966:..\..\FatFs/ff.c **** 				{
4967:..\..\FatFs/ff.c **** 					dclst = ld_clust(fs, dj.dir);
4968:..\..\FatFs/ff.c **** 				}
4969:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
4970:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
4971:..\..\FatFs/ff.c **** 					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
4972:..\..\FatFs/ff.c **** 						res = FR_DENIED;
4973:..\..\FatFs/ff.c **** 					} else
4974:..\..\FatFs/ff.c **** #endif
4975:..\..\FatFs/ff.c **** 					{
4976:..\..\FatFs/ff.c **** 						sdj.obj.fs = fs;				/* Open the sub-directory */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 107


4977:..\..\FatFs/ff.c **** 						sdj.obj.sclust = dclst;
4978:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4979:..\..\FatFs/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4980:..\..\FatFs/ff.c **** 							sdj.obj.objsize = obj.objsize;
4981:..\..\FatFs/ff.c **** 							sdj.obj.stat = obj.stat;
4982:..\..\FatFs/ff.c **** 						}
4983:..\..\FatFs/ff.c **** #endif
4984:..\..\FatFs/ff.c **** 						res = dir_sdi(&sdj, 0);
4985:..\..\FatFs/ff.c **** 						if (res == FR_OK) {
4986:..\..\FatFs/ff.c **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
4987:..\..\FatFs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4988:..\..\FatFs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4989:..\..\FatFs/ff.c **** 						}
4990:..\..\FatFs/ff.c **** 					}
4991:..\..\FatFs/ff.c **** 				}
4992:..\..\FatFs/ff.c **** 			}
4993:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
4994:..\..\FatFs/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4995:..\..\FatFs/ff.c **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
4996:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
4997:..\..\FatFs/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4998:..\..\FatFs/ff.c **** #else
4999:..\..\FatFs/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
5000:..\..\FatFs/ff.c **** #endif
5001:..\..\FatFs/ff.c **** 				}
5002:..\..\FatFs/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
5003:..\..\FatFs/ff.c **** 			}
5004:..\..\FatFs/ff.c **** 		}
5005:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
5006:..\..\FatFs/ff.c **** 	}
5007:..\..\FatFs/ff.c **** 
5008:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5009:..\..\FatFs/ff.c **** }
5010:..\..\FatFs/ff.c **** 
5011:..\..\FatFs/ff.c **** 
5012:..\..\FatFs/ff.c **** 
5013:..\..\FatFs/ff.c **** 
5014:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5015:..\..\FatFs/ff.c **** /* Create a Directory                                                    */
5016:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5017:..\..\FatFs/ff.c **** 
5018:..\..\FatFs/ff.c **** FRESULT f_mkdir (
5019:..\..\FatFs/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
5020:..\..\FatFs/ff.c **** )
5021:..\..\FatFs/ff.c **** {
5022:..\..\FatFs/ff.c **** 	FRESULT res;
5023:..\..\FatFs/ff.c **** 	DIR dj;
5024:..\..\FatFs/ff.c **** 	FFOBJID sobj;
5025:..\..\FatFs/ff.c **** 	FATFS *fs;
5026:..\..\FatFs/ff.c **** 	DWORD dcl, pcl, tm;
5027:..\..\FatFs/ff.c **** 	DEF_NAMBUF
5028:..\..\FatFs/ff.c **** 
5029:..\..\FatFs/ff.c **** 
5030:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5031:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5032:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
5033:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 108


5034:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
5035:..\..\FatFs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
5036:..\..\FatFs/ff.c **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
5037:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;
5038:..\..\FatFs/ff.c **** 		}
5039:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
5040:..\..\FatFs/ff.c **** 			sobj.fs = fs;						/* New object id to create a new chain */
5041:..\..\FatFs/ff.c **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
5042:..\..\FatFs/ff.c **** 			res = FR_OK;
5043:..\..\FatFs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
5044:..\..\FatFs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
5045:..\..\FatFs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
5046:..\..\FatFs/ff.c **** 			tm = GET_FATTIME();
5047:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
5048:..\..\FatFs/ff.c **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
5049:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
5050:..\..\FatFs/ff.c **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
5051:..\..\FatFs/ff.c **** 						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
5052:..\..\FatFs/ff.c **** 						fs->win[DIR_Name] = '.';
5053:..\..\FatFs/ff.c **** 						fs->win[DIR_Attr] = AM_DIR;
5054:..\..\FatFs/ff.c **** 						st_dword(fs->win + DIR_ModTime, tm);
5055:..\..\FatFs/ff.c **** 						st_clust(fs, fs->win, dcl);
5056:..\..\FatFs/ff.c **** 						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
5057:..\..\FatFs/ff.c **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
5058:..\..\FatFs/ff.c **** 						st_clust(fs, fs->win + SZDIRE, pcl);
5059:..\..\FatFs/ff.c **** 						fs->wflag = 1;
5060:..\..\FatFs/ff.c **** 					}
5061:..\..\FatFs/ff.c **** 					res = dir_register(&dj);	/* Register the object to the parent directoy */
5062:..\..\FatFs/ff.c **** 				}
5063:..\..\FatFs/ff.c **** 			}
5064:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
5065:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5066:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
5067:..\..\FatFs/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
5068:..\..\FatFs/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
5069:..\..\FatFs/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be
5070:..\..\FatFs/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
5071:..\..\FatFs/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
5072:..\..\FatFs/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
5073:..\..\FatFs/ff.c **** 					res = store_xdir(&dj);
5074:..\..\FatFs/ff.c **** 				} else
5075:..\..\FatFs/ff.c **** #endif
5076:..\..\FatFs/ff.c **** 				{
5077:..\..\FatFs/ff.c **** 					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
5078:..\..\FatFs/ff.c **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
5079:..\..\FatFs/ff.c **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
5080:..\..\FatFs/ff.c **** 					fs->wflag = 1;
5081:..\..\FatFs/ff.c **** 				}
5082:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
5083:..\..\FatFs/ff.c **** 					res = sync_fs(fs);
5084:..\..\FatFs/ff.c **** 				}
5085:..\..\FatFs/ff.c **** 			} else {
5086:..\..\FatFs/ff.c **** 				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
5087:..\..\FatFs/ff.c **** 			}
5088:..\..\FatFs/ff.c **** 		}
5089:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
5090:..\..\FatFs/ff.c **** 	}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 109


5091:..\..\FatFs/ff.c **** 
5092:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5093:..\..\FatFs/ff.c **** }
5094:..\..\FatFs/ff.c **** 
5095:..\..\FatFs/ff.c **** 
5096:..\..\FatFs/ff.c **** 
5097:..\..\FatFs/ff.c **** 
5098:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5099:..\..\FatFs/ff.c **** /* Rename a File/Directory                                               */
5100:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5101:..\..\FatFs/ff.c **** 
5102:..\..\FatFs/ff.c **** FRESULT f_rename (
5103:..\..\FatFs/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
5104:..\..\FatFs/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
5105:..\..\FatFs/ff.c **** )
5106:..\..\FatFs/ff.c **** {
5107:..\..\FatFs/ff.c **** 	FRESULT res;
5108:..\..\FatFs/ff.c **** 	DIR djo, djn;
5109:..\..\FatFs/ff.c **** 	FATFS *fs;
5110:..\..\FatFs/ff.c **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
5111:..\..\FatFs/ff.c **** 	LBA_t sect;
5112:..\..\FatFs/ff.c **** 	DEF_NAMBUF
5113:..\..\FatFs/ff.c **** 
5114:..\..\FatFs/ff.c **** 
5115:..\..\FatFs/ff.c **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
5116:..\..\FatFs/ff.c **** 	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
5117:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5118:..\..\FatFs/ff.c **** 		djo.obj.fs = fs;
5119:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
5120:..\..\FatFs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
5121:..\..\FatFs/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
5122:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
5123:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5124:..\..\FatFs/ff.c **** 			res = chk_lock(&djo, 2);
5125:..\..\FatFs/ff.c **** 		}
5126:..\..\FatFs/ff.c **** #endif
5127:..\..\FatFs/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
5128:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5129:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
5130:..\..\FatFs/ff.c **** 				BYTE nf, nn;
5131:..\..\FatFs/ff.c **** 				WORD nh;
5132:..\..\FatFs/ff.c **** 
5133:..\..\FatFs/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
5134:..\..\FatFs/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
5135:..\..\FatFs/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5136:..\..\FatFs/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5137:..\..\FatFs/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5138:..\..\FatFs/ff.c **** 				}
5139:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5140:..\..\FatFs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
5141:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
5142:..\..\FatFs/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
5143:..\..\FatFs/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
5144:..\..\FatFs/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
5145:..\..\FatFs/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
5146:..\..\FatFs/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
5147:..\..\FatFs/ff.c **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 110


5148:..\..\FatFs/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5149:..\..\FatFs/ff.c **** 						res = store_xdir(&djn);
5150:..\..\FatFs/ff.c **** 					}
5151:..\..\FatFs/ff.c **** 				}
5152:..\..\FatFs/ff.c **** 			} else
5153:..\..\FatFs/ff.c **** #endif
5154:..\..\FatFs/ff.c **** 			{	/* At FAT/FAT32 volume */
5155:..\..\FatFs/ff.c **** 				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
5156:..\..\FatFs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
5157:..\..\FatFs/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5158:..\..\FatFs/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5159:..\..\FatFs/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5160:..\..\FatFs/ff.c **** 				}
5161:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5162:..\..\FatFs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
5163:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
5164:..\..\FatFs/ff.c **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
5165:..\..\FatFs/ff.c **** 						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
5166:..\..\FatFs/ff.c **** 						dir[DIR_Attr] = buf[DIR_Attr];
5167:..\..\FatFs/ff.c **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
5168:..\..\FatFs/ff.c **** 						fs->wflag = 1;
5169:..\..\FatFs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
5170:..\..\FatFs/ff.c **** 							sect = clst2sect(fs, ld_clust(fs, dir));
5171:..\..\FatFs/ff.c **** 							if (sect == 0) {
5172:..\..\FatFs/ff.c **** 								res = FR_INT_ERR;
5173:..\..\FatFs/ff.c **** 							} else {
5174:..\..\FatFs/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5175:..\..\FatFs/ff.c **** 								res = move_window(fs, sect);
5176:..\..\FatFs/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
5177:..\..\FatFs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
5178:..\..\FatFs/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
5179:..\..\FatFs/ff.c **** 									fs->wflag = 1;
5180:..\..\FatFs/ff.c **** 								}
5181:..\..\FatFs/ff.c **** 							}
5182:..\..\FatFs/ff.c **** 						}
5183:..\..\FatFs/ff.c **** 					}
5184:..\..\FatFs/ff.c **** 				}
5185:..\..\FatFs/ff.c **** 			}
5186:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
5187:..\..\FatFs/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
5188:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
5189:..\..\FatFs/ff.c **** 					res = sync_fs(fs);
5190:..\..\FatFs/ff.c **** 				}
5191:..\..\FatFs/ff.c **** 			}
5192:..\..\FatFs/ff.c **** /* End of the critical section */
5193:..\..\FatFs/ff.c **** 		}
5194:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
5195:..\..\FatFs/ff.c **** 	}
5196:..\..\FatFs/ff.c **** 
5197:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5198:..\..\FatFs/ff.c **** }
5199:..\..\FatFs/ff.c **** 
5200:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
5201:..\..\FatFs/ff.c **** #endif /* FF_FS_MINIMIZE == 0 */
5202:..\..\FatFs/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 */
5203:..\..\FatFs/ff.c **** #endif /* FF_FS_MINIMIZE <= 2 */
5204:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 111


5205:..\..\FatFs/ff.c **** 
5206:..\..\FatFs/ff.c **** 
5207:..\..\FatFs/ff.c **** #if FF_USE_CHMOD && !FF_FS_READONLY
5208:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5209:..\..\FatFs/ff.c **** /* Change Attribute                                                      */
5210:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5211:..\..\FatFs/ff.c **** 
5212:..\..\FatFs/ff.c **** FRESULT f_chmod (
5213:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
5214:..\..\FatFs/ff.c **** 	BYTE attr,			/* Attribute bits */
5215:..\..\FatFs/ff.c **** 	BYTE mask			/* Attribute mask to change */
5216:..\..\FatFs/ff.c **** )
5217:..\..\FatFs/ff.c **** {
5218:..\..\FatFs/ff.c **** 	FRESULT res;
5219:..\..\FatFs/ff.c **** 	DIR dj;
5220:..\..\FatFs/ff.c **** 	FATFS *fs;
5221:..\..\FatFs/ff.c **** 	DEF_NAMBUF
5222:..\..\FatFs/ff.c **** 
5223:..\..\FatFs/ff.c **** 
5224:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5225:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5226:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
5227:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
5228:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5229:..\..\FatFs/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5230:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5231:..\..\FatFs/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
5232:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5233:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5234:..\..\FatFs/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
5235:..\..\FatFs/ff.c **** 				res = store_xdir(&dj);
5236:..\..\FatFs/ff.c **** 			} else
5237:..\..\FatFs/ff.c **** #endif
5238:..\..\FatFs/ff.c **** 			{
5239:..\..\FatFs/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
5240:..\..\FatFs/ff.c **** 				fs->wflag = 1;
5241:..\..\FatFs/ff.c **** 			}
5242:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
5243:..\..\FatFs/ff.c **** 				res = sync_fs(fs);
5244:..\..\FatFs/ff.c **** 			}
5245:..\..\FatFs/ff.c **** 		}
5246:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
5247:..\..\FatFs/ff.c **** 	}
5248:..\..\FatFs/ff.c **** 
5249:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5250:..\..\FatFs/ff.c **** }
5251:..\..\FatFs/ff.c **** 
5252:..\..\FatFs/ff.c **** 
5253:..\..\FatFs/ff.c **** 
5254:..\..\FatFs/ff.c **** 
5255:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5256:..\..\FatFs/ff.c **** /* Change Timestamp                                                      */
5257:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5258:..\..\FatFs/ff.c **** 
5259:..\..\FatFs/ff.c **** FRESULT f_utime (
5260:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
5261:..\..\FatFs/ff.c **** 	const FILINFO* fno	/* Pointer to the timestamp to be set */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 112


5262:..\..\FatFs/ff.c **** )
5263:..\..\FatFs/ff.c **** {
5264:..\..\FatFs/ff.c **** 	FRESULT res;
5265:..\..\FatFs/ff.c **** 	DIR dj;
5266:..\..\FatFs/ff.c **** 	FATFS *fs;
5267:..\..\FatFs/ff.c **** 	DEF_NAMBUF
5268:..\..\FatFs/ff.c **** 
5269:..\..\FatFs/ff.c **** 
5270:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5271:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5272:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
5273:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
5274:..\..\FatFs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5275:..\..\FatFs/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5276:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5277:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5278:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5279:..\..\FatFs/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5280:..\..\FatFs/ff.c **** 				res = store_xdir(&dj);
5281:..\..\FatFs/ff.c **** 			} else
5282:..\..\FatFs/ff.c **** #endif
5283:..\..\FatFs/ff.c **** 			{
5284:..\..\FatFs/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5285:..\..\FatFs/ff.c **** 				fs->wflag = 1;
5286:..\..\FatFs/ff.c **** 			}
5287:..\..\FatFs/ff.c **** 			if (res == FR_OK) {
5288:..\..\FatFs/ff.c **** 				res = sync_fs(fs);
5289:..\..\FatFs/ff.c **** 			}
5290:..\..\FatFs/ff.c **** 		}
5291:..\..\FatFs/ff.c **** 		FREE_NAMBUF();
5292:..\..\FatFs/ff.c **** 	}
5293:..\..\FatFs/ff.c **** 
5294:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5295:..\..\FatFs/ff.c **** }
5296:..\..\FatFs/ff.c **** 
5297:..\..\FatFs/ff.c **** #endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
5298:..\..\FatFs/ff.c **** 
5299:..\..\FatFs/ff.c **** 
5300:..\..\FatFs/ff.c **** 
5301:..\..\FatFs/ff.c **** #if FF_USE_LABEL
5302:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5303:..\..\FatFs/ff.c **** /* Get Volume Label                                                      */
5304:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5305:..\..\FatFs/ff.c **** 
5306:..\..\FatFs/ff.c **** FRESULT f_getlabel (
5307:..\..\FatFs/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5308:..\..\FatFs/ff.c **** 	TCHAR* label,		/* Buffer to store the volume label */
5309:..\..\FatFs/ff.c **** 	DWORD* vsn			/* Variable to store the volume serial number */
5310:..\..\FatFs/ff.c **** )
5311:..\..\FatFs/ff.c **** {
5312:..\..\FatFs/ff.c **** 	FRESULT res;
5313:..\..\FatFs/ff.c **** 	DIR dj;
5314:..\..\FatFs/ff.c **** 	FATFS *fs;
5315:..\..\FatFs/ff.c **** 	UINT si, di;
5316:..\..\FatFs/ff.c **** 	WCHAR wc;
5317:..\..\FatFs/ff.c **** 
5318:..\..\FatFs/ff.c **** 	/* Get logical drive */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 113


5319:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, 0);
5320:..\..\FatFs/ff.c **** 
5321:..\..\FatFs/ff.c **** 	/* Get volume label */
5322:..\..\FatFs/ff.c **** 	if (res == FR_OK && label) {
5323:..\..\FatFs/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5324:..\..\FatFs/ff.c **** 		res = dir_sdi(&dj, 0);
5325:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5326:..\..\FatFs/ff.c **** 		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
5327:..\..\FatFs/ff.c **** 		 	if (res == FR_OK) {
5328:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5329:..\..\FatFs/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
5330:..\..\FatFs/ff.c **** 					WCHAR hs;
5331:..\..\FatFs/ff.c **** 
5332:..\..\FatFs/ff.c **** 					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 ent
5333:..\..\FatFs/ff.c **** 						wc = ld_word(dj.dir + XDIR_Label + si * 2);
5334:..\..\FatFs/ff.c **** 						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
5335:..\..\FatFs/ff.c **** 							hs = wc; continue;
5336:..\..\FatFs/ff.c **** 						}
5337:..\..\FatFs/ff.c **** 						wc = put_utf((DWORD)hs << 16 | wc, &label[di], 4);
5338:..\..\FatFs/ff.c **** 						if (wc == 0) { di = 0; break; }
5339:..\..\FatFs/ff.c **** 						di += wc;
5340:..\..\FatFs/ff.c **** 						hs = 0;
5341:..\..\FatFs/ff.c **** 					}
5342:..\..\FatFs/ff.c **** 					if (hs != 0) di = 0;	/* Broken surrogate pair? */
5343:..\..\FatFs/ff.c **** 					label[di] = 0;
5344:..\..\FatFs/ff.c **** 				} else
5345:..\..\FatFs/ff.c **** #endif
5346:..\..\FatFs/ff.c **** 				{
5347:..\..\FatFs/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry */
5348:..\..\FatFs/ff.c **** 					while (si < 11) {
5349:..\..\FatFs/ff.c **** 						wc = dj.dir[si++];
5350:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
5351:..\..\FatFs/ff.c **** 						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
5352:..\..\FatFs/ff.c **** 						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
5353:..\..\FatFs/ff.c **** 						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
5354:..\..\FatFs/ff.c **** 						if (wc == 0) { di = 0; break; }
5355:..\..\FatFs/ff.c **** 						di += wc;
5356:..\..\FatFs/ff.c **** #else									/* ANSI/OEM output */
5357:..\..\FatFs/ff.c **** 						label[di++] = (TCHAR)wc;
5358:..\..\FatFs/ff.c **** #endif
5359:..\..\FatFs/ff.c **** 					}
5360:..\..\FatFs/ff.c **** 					do {				/* Truncate trailing spaces */
5361:..\..\FatFs/ff.c **** 						label[di] = 0;
5362:..\..\FatFs/ff.c **** 						if (di == 0) break;
5363:..\..\FatFs/ff.c **** 					} while (label[--di] == ' ');
5364:..\..\FatFs/ff.c **** 				}
5365:..\..\FatFs/ff.c **** 			}
5366:..\..\FatFs/ff.c **** 		}
5367:..\..\FatFs/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
5368:..\..\FatFs/ff.c **** 			label[0] = 0;
5369:..\..\FatFs/ff.c **** 			res = FR_OK;
5370:..\..\FatFs/ff.c **** 		}
5371:..\..\FatFs/ff.c **** 	}
5372:..\..\FatFs/ff.c **** 
5373:..\..\FatFs/ff.c **** 	/* Get volume serial number */
5374:..\..\FatFs/ff.c **** 	if (res == FR_OK && vsn) {
5375:..\..\FatFs/ff.c **** 		res = move_window(fs, fs->volbase);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 114


5376:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5377:..\..\FatFs/ff.c **** 			switch (fs->fs_type) {
5378:..\..\FatFs/ff.c **** 			case FS_EXFAT:
5379:..\..\FatFs/ff.c **** 				di = BPB_VolIDEx; break;
5380:..\..\FatFs/ff.c **** 
5381:..\..\FatFs/ff.c **** 			case FS_FAT32:
5382:..\..\FatFs/ff.c **** 				di = BS_VolID32; break;
5383:..\..\FatFs/ff.c **** 
5384:..\..\FatFs/ff.c **** 			default:
5385:..\..\FatFs/ff.c **** 				di = BS_VolID;
5386:..\..\FatFs/ff.c **** 			}
5387:..\..\FatFs/ff.c **** 			*vsn = ld_dword(fs->win + di);
5388:..\..\FatFs/ff.c **** 		}
5389:..\..\FatFs/ff.c **** 	}
5390:..\..\FatFs/ff.c **** 
5391:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5392:..\..\FatFs/ff.c **** }
5393:..\..\FatFs/ff.c **** 
5394:..\..\FatFs/ff.c **** 
5395:..\..\FatFs/ff.c **** 
5396:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
5397:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5398:..\..\FatFs/ff.c **** /* Set Volume Label                                                      */
5399:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5400:..\..\FatFs/ff.c **** 
5401:..\..\FatFs/ff.c **** FRESULT f_setlabel (
5402:..\..\FatFs/ff.c **** 	const TCHAR* label	/* Volume label to set with heading logical drive number */
5403:..\..\FatFs/ff.c **** )
5404:..\..\FatFs/ff.c **** {
5405:..\..\FatFs/ff.c **** 	FRESULT res;
5406:..\..\FatFs/ff.c **** 	DIR dj;
5407:..\..\FatFs/ff.c **** 	FATFS *fs;
5408:..\..\FatFs/ff.c **** 	BYTE dirvn[22];
5409:..\..\FatFs/ff.c **** 	UINT di;
5410:..\..\FatFs/ff.c **** 	WCHAR wc;
5411:..\..\FatFs/ff.c **** 	static const char badchr[] = "+.,;=[]/\\\"*:<>\?|\x7F";	/* [0..] for FAT, [7..] for exFAT */
5412:..\..\FatFs/ff.c **** #if FF_USE_LFN
5413:..\..\FatFs/ff.c **** 	DWORD dc;
5414:..\..\FatFs/ff.c **** #endif
5415:..\..\FatFs/ff.c **** 
5416:..\..\FatFs/ff.c **** 	/* Get logical drive */
5417:..\..\FatFs/ff.c **** 	res = mount_volume(&label, &fs, FA_WRITE);
5418:..\..\FatFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5419:..\..\FatFs/ff.c **** 
5420:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5421:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5422:..\..\FatFs/ff.c **** 		mem_set(dirvn, 0, 22);
5423:..\..\FatFs/ff.c **** 		di = 0;
5424:..\..\FatFs/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5425:..\..\FatFs/ff.c **** 			dc = tchar2uni(&label);	/* Get a Unicode character */
5426:..\..\FatFs/ff.c **** 			if (dc >= 0x10000) {
5427:..\..\FatFs/ff.c **** 				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
5428:..\..\FatFs/ff.c **** 					dc = 0;
5429:..\..\FatFs/ff.c **** 				} else {
5430:..\..\FatFs/ff.c **** 					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
5431:..\..\FatFs/ff.c **** 				}
5432:..\..\FatFs/ff.c **** 			}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 115


5433:..\..\FatFs/ff.c **** 			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label
5434:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5435:..\..\FatFs/ff.c **** 			}
5436:..\..\FatFs/ff.c **** 			st_word(dirvn + di * 2, (WCHAR)dc); di++;
5437:..\..\FatFs/ff.c **** 		}
5438:..\..\FatFs/ff.c **** 	} else
5439:..\..\FatFs/ff.c **** #endif
5440:..\..\FatFs/ff.c **** 	{	/* On the FAT/FAT32 volume */
5441:..\..\FatFs/ff.c **** 		mem_set(dirvn, ' ', 11);
5442:..\..\FatFs/ff.c **** 		di = 0;
5443:..\..\FatFs/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5444:..\..\FatFs/ff.c **** #if FF_USE_LFN
5445:..\..\FatFs/ff.c **** 			dc = tchar2uni(&label);
5446:..\..\FatFs/ff.c **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
5447:..\..\FatFs/ff.c **** #else									/* ANSI/OEM input */
5448:..\..\FatFs/ff.c **** 			wc = (BYTE)*label++;
5449:..\..\FatFs/ff.c **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
5450:..\..\FatFs/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
5451:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
5452:..\..\FatFs/ff.c **** 			if (ExCvt && wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5453:..\..\FatFs/ff.c **** #elif FF_CODE_PAGE < 900
5454:..\..\FatFs/ff.c **** 			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5455:..\..\FatFs/ff.c **** #endif
5456:..\..\FatFs/ff.c **** #endif
5457:..\..\FatFs/ff.c **** 			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Rejec
5458:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5459:..\..\FatFs/ff.c **** 			}
5460:..\..\FatFs/ff.c **** 			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
5461:..\..\FatFs/ff.c **** 			dirvn[di++] = (BYTE)wc;
5462:..\..\FatFs/ff.c **** 		}
5463:..\..\FatFs/ff.c **** 		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5464:..\..\FatFs/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
5465:..\..\FatFs/ff.c **** 	}
5466:..\..\FatFs/ff.c **** 
5467:..\..\FatFs/ff.c **** 	/* Set volume label */
5468:..\..\FatFs/ff.c **** 	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5469:..\..\FatFs/ff.c **** 	res = dir_sdi(&dj, 0);
5470:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5471:..\..\FatFs/ff.c **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
5472:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
5473:..\..\FatFs/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5474:..\..\FatFs/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
5475:..\..\FatFs/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5476:..\..\FatFs/ff.c **** 			} else {
5477:..\..\FatFs/ff.c **** 				if (di != 0) {
5478:..\..\FatFs/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5479:..\..\FatFs/ff.c **** 				} else {
5480:..\..\FatFs/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5481:..\..\FatFs/ff.c **** 				}
5482:..\..\FatFs/ff.c **** 			}
5483:..\..\FatFs/ff.c **** 			fs->wflag = 1;
5484:..\..\FatFs/ff.c **** 			res = sync_fs(fs);
5485:..\..\FatFs/ff.c **** 		} else {			/* No volume label entry or an error */
5486:..\..\FatFs/ff.c **** 			if (res == FR_NO_FILE) {
5487:..\..\FatFs/ff.c **** 				res = FR_OK;
5488:..\..\FatFs/ff.c **** 				if (di != 0) {	/* Create a volume label entry */
5489:..\..\FatFs/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 116


5490:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
5491:..\..\FatFs/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
5492:..\..\FatFs/ff.c **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5493:..\..\FatFs/ff.c **** 							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
5494:..\..\FatFs/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)di;
5495:..\..\FatFs/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5496:..\..\FatFs/ff.c **** 						} else {
5497:..\..\FatFs/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5498:..\..\FatFs/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5499:..\..\FatFs/ff.c **** 						}
5500:..\..\FatFs/ff.c **** 						fs->wflag = 1;
5501:..\..\FatFs/ff.c **** 						res = sync_fs(fs);
5502:..\..\FatFs/ff.c **** 					}
5503:..\..\FatFs/ff.c **** 				}
5504:..\..\FatFs/ff.c **** 			}
5505:..\..\FatFs/ff.c **** 		}
5506:..\..\FatFs/ff.c **** 	}
5507:..\..\FatFs/ff.c **** 
5508:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5509:..\..\FatFs/ff.c **** }
5510:..\..\FatFs/ff.c **** 
5511:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY */
5512:..\..\FatFs/ff.c **** #endif /* FF_USE_LABEL */
5513:..\..\FatFs/ff.c **** 
5514:..\..\FatFs/ff.c **** 
5515:..\..\FatFs/ff.c **** 
5516:..\..\FatFs/ff.c **** #if FF_USE_EXPAND && !FF_FS_READONLY
5517:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5518:..\..\FatFs/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5519:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5520:..\..\FatFs/ff.c **** 
5521:..\..\FatFs/ff.c **** FRESULT f_expand (
5522:..\..\FatFs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5523:..\..\FatFs/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5524:..\..\FatFs/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5525:..\..\FatFs/ff.c **** )
5526:..\..\FatFs/ff.c **** {
5527:..\..\FatFs/ff.c **** 	FRESULT res;
5528:..\..\FatFs/ff.c **** 	FATFS *fs;
5529:..\..\FatFs/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5530:..\..\FatFs/ff.c **** 
5531:..\..\FatFs/ff.c **** 
5532:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5533:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5534:..\..\FatFs/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5535:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5536:..\..\FatFs/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5537:..\..\FatFs/ff.c **** #endif
5538:..\..\FatFs/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5539:..\..\FatFs/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5540:..\..\FatFs/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5541:..\..\FatFs/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5542:..\..\FatFs/ff.c **** 
5543:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5544:..\..\FatFs/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5545:..\..\FatFs/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5546:..\..\FatFs/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 117


5547:..\..\FatFs/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5548:..\..\FatFs/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5549:..\..\FatFs/ff.c **** 			if (opt) {		/* Allocate it now */
5550:..\..\FatFs/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5551:..\..\FatFs/ff.c **** 				lclst = scl + tcl - 1;
5552:..\..\FatFs/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5553:..\..\FatFs/ff.c **** 				lclst = scl - 1;
5554:..\..\FatFs/ff.c **** 			}
5555:..\..\FatFs/ff.c **** 		}
5556:..\..\FatFs/ff.c **** 	} else
5557:..\..\FatFs/ff.c **** #endif
5558:..\..\FatFs/ff.c **** 	{
5559:..\..\FatFs/ff.c **** 		scl = clst = stcl; ncl = 0;
5560:..\..\FatFs/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5561:..\..\FatFs/ff.c **** 			n = get_fat(&fp->obj, clst);
5562:..\..\FatFs/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5563:..\..\FatFs/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5564:..\..\FatFs/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5565:..\..\FatFs/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5566:..\..\FatFs/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5567:..\..\FatFs/ff.c **** 			} else {
5568:..\..\FatFs/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5569:..\..\FatFs/ff.c **** 			}
5570:..\..\FatFs/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5571:..\..\FatFs/ff.c **** 		}
5572:..\..\FatFs/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5573:..\..\FatFs/ff.c **** 			if (opt) {		/* Allocate it now */
5574:..\..\FatFs/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5575:..\..\FatFs/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5576:..\..\FatFs/ff.c **** 					if (res != FR_OK) break;
5577:..\..\FatFs/ff.c **** 					lclst = clst;
5578:..\..\FatFs/ff.c **** 				}
5579:..\..\FatFs/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5580:..\..\FatFs/ff.c **** 				lclst = scl - 1;
5581:..\..\FatFs/ff.c **** 			}
5582:..\..\FatFs/ff.c **** 		}
5583:..\..\FatFs/ff.c **** 	}
5584:..\..\FatFs/ff.c **** 
5585:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
5586:..\..\FatFs/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5587:..\..\FatFs/ff.c **** 		if (opt) {	/* Is it allocated now? */
5588:..\..\FatFs/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5589:..\..\FatFs/ff.c **** 			fp->obj.objsize = fsz;
5590:..\..\FatFs/ff.c **** 			if (FF_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5591:..\..\FatFs/ff.c **** 			fp->flag |= FA_MODIFIED;
5592:..\..\FatFs/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5593:..\..\FatFs/ff.c **** 				fs->free_clst -= tcl;
5594:..\..\FatFs/ff.c **** 				fs->fsi_flag |= 1;
5595:..\..\FatFs/ff.c **** 			}
5596:..\..\FatFs/ff.c **** 		}
5597:..\..\FatFs/ff.c **** 	}
5598:..\..\FatFs/ff.c **** 
5599:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
5600:..\..\FatFs/ff.c **** }
5601:..\..\FatFs/ff.c **** 
5602:..\..\FatFs/ff.c **** #endif /* FF_USE_EXPAND && !FF_FS_READONLY */
5603:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 118


5604:..\..\FatFs/ff.c **** 
5605:..\..\FatFs/ff.c **** 
5606:..\..\FatFs/ff.c **** #if FF_USE_FORWARD
5607:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5608:..\..\FatFs/ff.c **** /* Forward Data to the Stream Directly                                   */
5609:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5610:..\..\FatFs/ff.c **** 
5611:..\..\FatFs/ff.c **** FRESULT f_forward (
5612:..\..\FatFs/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5613:..\..\FatFs/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5614:..\..\FatFs/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5615:..\..\FatFs/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5616:..\..\FatFs/ff.c **** )
5617:..\..\FatFs/ff.c **** {
5618:..\..\FatFs/ff.c **** 	FRESULT res;
5619:..\..\FatFs/ff.c **** 	FATFS *fs;
5620:..\..\FatFs/ff.c **** 	DWORD clst;
5621:..\..\FatFs/ff.c **** 	LBA_t sect;
5622:..\..\FatFs/ff.c **** 	FSIZE_t remain;
5623:..\..\FatFs/ff.c **** 	UINT rcnt, csect;
5624:..\..\FatFs/ff.c **** 	BYTE *dbuf;
5625:..\..\FatFs/ff.c **** 
5626:..\..\FatFs/ff.c **** 
5627:..\..\FatFs/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5628:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5629:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5630:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5631:..\..\FatFs/ff.c **** 
5632:..\..\FatFs/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5633:..\..\FatFs/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5634:..\..\FatFs/ff.c **** 
5635:..\..\FatFs/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5636:..\..\FatFs/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5637:..\..\FatFs/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5638:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5639:..\..\FatFs/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5640:..\..\FatFs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5641:..\..\FatFs/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5642:..\..\FatFs/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5643:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5644:..\..\FatFs/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5645:..\..\FatFs/ff.c **** 			}
5646:..\..\FatFs/ff.c **** 		}
5647:..\..\FatFs/ff.c **** 		sect = clst2sect(fs, fp->clust);			/* Get current data sector */
5648:..\..\FatFs/ff.c **** 		if (sect == 0) ABORT(fs, FR_INT_ERR);
5649:..\..\FatFs/ff.c **** 		sect += csect;
5650:..\..\FatFs/ff.c **** #if FF_FS_TINY
5651:..\..\FatFs/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5652:..\..\FatFs/ff.c **** 		dbuf = fs->win;
5653:..\..\FatFs/ff.c **** #else
5654:..\..\FatFs/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5655:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
5656:..\..\FatFs/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5657:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5658:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5659:..\..\FatFs/ff.c **** 			}
5660:..\..\FatFs/ff.c **** #endif
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 119


5661:..\..\FatFs/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5662:..\..\FatFs/ff.c **** 		}
5663:..\..\FatFs/ff.c **** 		dbuf = fp->buf;
5664:..\..\FatFs/ff.c **** #endif
5665:..\..\FatFs/ff.c **** 		fp->sect = sect;
5666:..\..\FatFs/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
5667:..\..\FatFs/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5668:..\..\FatFs/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5669:..\..\FatFs/ff.c **** 		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
5670:..\..\FatFs/ff.c **** 	}
5671:..\..\FatFs/ff.c **** 
5672:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, FR_OK);
5673:..\..\FatFs/ff.c **** }
5674:..\..\FatFs/ff.c **** #endif /* FF_USE_FORWARD */
5675:..\..\FatFs/ff.c **** 
5676:..\..\FatFs/ff.c **** 
5677:..\..\FatFs/ff.c **** 
5678:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
5679:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5680:..\..\FatFs/ff.c **** /* Create an FAT/exFAT volume                                            */
5681:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
5682:..\..\FatFs/ff.c **** 
5683:..\..\FatFs/ff.c **** #define N_SEC_TRACK 63			/* Sectors per track for determination of drive CHS */
5684:..\..\FatFs/ff.c **** #define	GPT_ALIGN	0x100000	/* Alignment of partitions in GPT [byte] (>=128KB) */
5685:..\..\FatFs/ff.c **** #define GPT_ITEMS	128			/* Number of GPT table size (>=128, sector aligned) */
5686:..\..\FatFs/ff.c **** 
5687:..\..\FatFs/ff.c **** 
5688:..\..\FatFs/ff.c **** /* Create partitions on the physical drive */
5689:..\..\FatFs/ff.c **** 
5690:..\..\FatFs/ff.c **** static FRESULT create_partition (
5691:..\..\FatFs/ff.c **** 	BYTE drv,			/* Physical drive number */
5692:..\..\FatFs/ff.c **** 	const LBA_t plst[],	/* Partition list */
5693:..\..\FatFs/ff.c **** 	UINT sys,			/* System ID (for only MBR, temp setting) and bit8:GPT */
5694:..\..\FatFs/ff.c **** 	BYTE* buf			/* Working buffer for a sector */
5695:..\..\FatFs/ff.c **** )
5696:..\..\FatFs/ff.c **** {
5697:..\..\FatFs/ff.c **** 	UINT i, cy;
5698:..\..\FatFs/ff.c **** 	LBA_t sz_drv;
5699:..\..\FatFs/ff.c **** 	DWORD sz_drv32, s_lba32, n_lba32;
5700:..\..\FatFs/ff.c **** 	BYTE *pte, hd, n_hd, sc, n_sc;
5701:..\..\FatFs/ff.c **** 
5702:..\..\FatFs/ff.c **** 	/* Get drive size */
5703:..\..\FatFs/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
5704:..\..\FatFs/ff.c **** 
5705:..\..\FatFs/ff.c **** #if FF_LBA64
5706:..\..\FatFs/ff.c **** 	if (sz_drv >= FF_MIN_GPT) {	/* Create partitions in GPT */
5707:..\..\FatFs/ff.c **** 		WORD ss;
5708:..\..\FatFs/ff.c **** 		UINT sz_pt, pi, si, ofs;
5709:..\..\FatFs/ff.c **** 		DWORD bcc, rnd, align;
5710:..\..\FatFs/ff.c **** 		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
5711:..\..\FatFs/ff.c **** 		static const BYTE gpt_mbr[16] = {0x00, 0x00, 0x02, 0x00, 0xEE, 0xFE, 0xFF, 0x00, 0x01, 0x00, 0x00
5712:..\..\FatFs/ff.c **** 
5713:..\..\FatFs/ff.c **** #if FF_MAX_SS != FF_MIN_SS
5714:..\..\FatFs/ff.c **** 		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;	/* Get sector size */
5715:..\..\FatFs/ff.c **** 		if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5716:..\..\FatFs/ff.c **** #else
5717:..\..\FatFs/ff.c **** 		ss = FF_MAX_SS;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 120


5718:..\..\FatFs/ff.c **** #endif
5719:..\..\FatFs/ff.c **** 		rnd = GET_FATTIME();			/* Random seed */
5720:..\..\FatFs/ff.c **** 		align = GPT_ALIGN / ss;			/* Partition alignment [sector] */
5721:..\..\FatFs/ff.c **** 		sz_pt = GPT_ITEMS * SZ_GPTE / ss;	/* Size of PT [sector] */
5722:..\..\FatFs/ff.c **** 		s_bpt = sz_drv - sz_pt - 1;		/* Backup PT start sector */
5723:..\..\FatFs/ff.c **** 		s_lba64 = 2 + sz_pt;			/* First allocatable sector */
5724:..\..\FatFs/ff.c **** 		sz_pool = s_bpt - s_lba64;		/* Size of allocatable area */
5725:..\..\FatFs/ff.c **** 		bcc = 0xFFFFFFFF; n_lba64 = 1;
5726:..\..\FatFs/ff.c **** 		pi = si = 0;	/* partition table index, size table index */
5727:..\..\FatFs/ff.c **** 		do {
5728:..\..\FatFs/ff.c **** 			if (pi * SZ_GPTE % ss == 0) mem_set(buf, 0, ss);	/* Clean the buffer if needed */
5729:..\..\FatFs/ff.c **** 			if (n_lba64 != 0) {	/* Is the size table not termintated? */
5730:..\..\FatFs/ff.c **** 				s_lba64 = (s_lba64 + align - 1) & ((QWORD)0 - align);	/* Align partition start */
5731:..\..\FatFs/ff.c **** 				n_lba64 = plst[si++];	/* Get a partition size */
5732:..\..\FatFs/ff.c **** 				if (n_lba64 <= 100) {	/* Is the size in percentage? */
5733:..\..\FatFs/ff.c **** 					n_lba64 = sz_pool * n_lba64 / 100;
5734:..\..\FatFs/ff.c **** 					n_lba64 = (n_lba64 + align - 1) & ((QWORD)0 - align);	/* Align partition end (only if in perce
5735:..\..\FatFs/ff.c **** 				}
5736:..\..\FatFs/ff.c **** 				if (s_lba64 + n_lba64 > s_bpt) {	/* Clip at end of the pool */
5737:..\..\FatFs/ff.c **** 					n_lba64 = (s_lba64 < s_bpt) ? s_bpt - s_lba64 : 0;
5738:..\..\FatFs/ff.c **** 				}
5739:..\..\FatFs/ff.c **** 			}
5740:..\..\FatFs/ff.c **** 			if (n_lba64 != 0) {		/* Add a partition? */
5741:..\..\FatFs/ff.c **** 				ofs = pi * SZ_GPTE % ss;
5742:..\..\FatFs/ff.c **** 				mem_cpy(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16);	/* Partition GUID (Microsoft Basic Data) *
5743:..\..\FatFs/ff.c **** 				rnd = make_rand(rnd, buf + ofs + GPTE_UpGuid, 16);		/* Unique partition GUID */
5744:..\..\FatFs/ff.c **** 				st_qword(buf + ofs + GPTE_FstLba, s_lba64);				/* Partition start LBA */
5745:..\..\FatFs/ff.c **** 				st_qword(buf + ofs + GPTE_LstLba, s_lba64 + n_lba64 - 1);	/* Partition end LBA */
5746:..\..\FatFs/ff.c **** 				s_lba64 += n_lba64;		/* Next partition LBA */
5747:..\..\FatFs/ff.c **** 			}
5748:..\..\FatFs/ff.c **** 			if ((pi + 1) * SZ_GPTE % ss == 0) {		/* Write the buffer if it is filled up */
5749:..\..\FatFs/ff.c **** 				for (i = 0; i < ss; bcc = crc32(bcc, buf[i++])) ;	/* Calculate table check sum */
5750:..\..\FatFs/ff.c **** 				if (disk_write(drv, buf, 2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;		/* Primary t
5751:..\..\FatFs/ff.c **** 				if (disk_write(drv, buf, s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;	/* Second
5752:..\..\FatFs/ff.c **** 			}
5753:..\..\FatFs/ff.c **** 		} while (++pi < GPT_ITEMS);
5754:..\..\FatFs/ff.c **** 
5755:..\..\FatFs/ff.c **** 		/* Create primary GPT header */
5756:..\..\FatFs/ff.c **** 		mem_set(buf, 0, ss);
5757:..\..\FatFs/ff.c **** 		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16);	/* Signature, version (1.0) and s
5758:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_PtBcc, ~bcc);				/* Table check sum */
5759:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_CurLba, 1);					/* LBA of this header */
5760:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_BakLba, sz_drv - 1);		/* LBA of another header */
5761:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_FstLba, 2 + sz_pt);			/* LBA of first allocatable sector */
5762:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_LstLba, s_bpt - 1);			/* LBA of last allocatable sector */
5763:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_PteSize, SZ_GPTE);			/* Size of a table entry */
5764:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_PtNum, GPT_ITEMS);			/* Number of table entries */
5765:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_PtOfs, 2);					/* LBA of this table */
5766:..\..\FatFs/ff.c **** 		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
5767:..\..\FatFs/ff.c **** 		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum 
5768:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_Bcc, ~bcc);					/* Header check sum */
5769:..\..\FatFs/ff.c **** 		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
5770:..\..\FatFs/ff.c **** 
5771:..\..\FatFs/ff.c **** 		/* Create secondary GPT header */
5772:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_CurLba, sz_drv - 1);		/* LBA of this header */
5773:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_BakLba, 1);					/* LBA of another header */
5774:..\..\FatFs/ff.c **** 		st_qword(buf + GPTH_PtOfs, s_bpt);				/* LBA of this table */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 121


5775:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_Bcc, 0);
5776:..\..\FatFs/ff.c **** 		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum 
5777:..\..\FatFs/ff.c **** 		st_dword(buf + GPTH_Bcc, ~bcc);					/* Header check sum */
5778:..\..\FatFs/ff.c **** 		if (disk_write(drv, buf, sz_drv - 1, 1) != RES_OK) return FR_DISK_ERR;
5779:..\..\FatFs/ff.c **** 
5780:..\..\FatFs/ff.c **** 		/* Create protective MBR */
5781:..\..\FatFs/ff.c **** 		mem_set(buf, 0, ss);
5782:..\..\FatFs/ff.c **** 		mem_cpy(buf + MBR_Table, gpt_mbr, 16);			/* Create a GPT partition */
5783:..\..\FatFs/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);
5784:..\..\FatFs/ff.c **** 		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;
5785:..\..\FatFs/ff.c **** 
5786:..\..\FatFs/ff.c **** 	} else
5787:..\..\FatFs/ff.c **** #endif
5788:..\..\FatFs/ff.c **** 	{					/* Create partitions in MBR */
5789:..\..\FatFs/ff.c **** 		sz_drv32 = (DWORD)sz_drv;
5790:..\..\FatFs/ff.c **** 		n_sc = N_SEC_TRACK;		/* Determine drive CHS without any consideration of the drive geometry */
5791:..\..\FatFs/ff.c **** 		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
5792:..\..\FatFs/ff.c **** 		if (n_hd == 0) n_hd = 255;	/* Number of heads needs to be <256 */
5793:..\..\FatFs/ff.c **** 
5794:..\..\FatFs/ff.c **** 		mem_set(buf, 0, FF_MAX_SS);	/* Clear MBR */
5795:..\..\FatFs/ff.c **** 		pte = buf + MBR_Table;	/* Partition table in the MBR */
5796:..\..\FatFs/ff.c **** 		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32)
5797:..\..\FatFs/ff.c **** 			n_lba32 = (DWORD)plst[i];	/* Get partition size */
5798:..\..\FatFs/ff.c **** 			if (n_lba32 <= 100) n_lba32 = (n_lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	/* Size in
5799:..\..\FatFs/ff.c **** 			if (s_lba32 + n_lba32 > sz_drv32 || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba32;	/
5800:..\..\FatFs/ff.c **** 			if (n_lba32 == 0) break;	/* End of table or no sector to allocate? */
5801:..\..\FatFs/ff.c **** 
5802:..\..\FatFs/ff.c **** 			st_dword(pte + PTE_StLba, s_lba32);		/* Start LBA */
5803:..\..\FatFs/ff.c **** 			st_dword(pte + PTE_SizLba, n_lba32);	/* Number of sectors */
5804:..\..\FatFs/ff.c **** 			pte[PTE_System] = (BYTE)sys;			/* System type */
5805:..\..\FatFs/ff.c **** 
5806:..\..\FatFs/ff.c **** 			cy = (UINT)(s_lba32 / n_sc / n_hd);		/* Start cylinder */
5807:..\..\FatFs/ff.c **** 			hd = (BYTE)(s_lba32 / n_sc % n_hd);		/* Start head */
5808:..\..\FatFs/ff.c **** 			sc = (BYTE)(s_lba32 % n_sc + 1);		/* Start sector */
5809:..\..\FatFs/ff.c **** 			pte[PTE_StHead] = hd;
5810:..\..\FatFs/ff.c **** 			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
5811:..\..\FatFs/ff.c **** 			pte[PTE_StCyl] = (BYTE)cy;
5812:..\..\FatFs/ff.c **** 
5813:..\..\FatFs/ff.c **** 			cy = (UINT)((s_lba32 + n_lba32 - 1) / n_sc / n_hd);	/* End cylinder */
5814:..\..\FatFs/ff.c **** 			hd = (BYTE)((s_lba32 + n_lba32 - 1) / n_sc % n_hd);	/* End head */
5815:..\..\FatFs/ff.c **** 			sc = (BYTE)((s_lba32 + n_lba32 - 1) % n_sc + 1);	/* End sector */
5816:..\..\FatFs/ff.c **** 			pte[PTE_EdHead] = hd;
5817:..\..\FatFs/ff.c **** 			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
5818:..\..\FatFs/ff.c **** 			pte[PTE_EdCyl] = (BYTE)cy;
5819:..\..\FatFs/ff.c **** 
5820:..\..\FatFs/ff.c **** 			pte += SZ_PTE;		/* Next entry */
5821:..\..\FatFs/ff.c **** 		}
5822:..\..\FatFs/ff.c **** 
5823:..\..\FatFs/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5824:..\..\FatFs/ff.c **** 		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5825:..\..\FatFs/ff.c **** 	}
5826:..\..\FatFs/ff.c **** 
5827:..\..\FatFs/ff.c **** 	return FR_OK;
5828:..\..\FatFs/ff.c **** }
5829:..\..\FatFs/ff.c **** 
5830:..\..\FatFs/ff.c **** 
5831:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 122


5832:..\..\FatFs/ff.c **** FRESULT f_mkfs (
5833:..\..\FatFs/ff.c **** 	const TCHAR* path,		/* Logical drive number */
5834:..\..\FatFs/ff.c **** 	const MKFS_PARM* opt,	/* Format options */
5835:..\..\FatFs/ff.c **** 	void* work,				/* Pointer to working buffer (null: use heap memory) */
5836:..\..\FatFs/ff.c **** 	UINT len				/* Size of working buffer [byte] */
5837:..\..\FatFs/ff.c **** )
5838:..\..\FatFs/ff.c **** {
5839:..\..\FatFs/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT volume (4K
5840:..\..\FatFs/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5841:..\..\FatFs/ff.c **** 	static const MKFS_PARM defopt = {FM_ANY, 0, 0, 0, 0};	/* Default parameter */
5842:..\..\FatFs/ff.c **** 	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
5843:..\..\FatFs/ff.c **** 	WORD ss;	/* Sector size */
5844:..\..\FatFs/ff.c **** 	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
5845:..\..\FatFs/ff.c **** 	LBA_t sz_vol, b_vol, b_fat, b_data;		/* Size of volume, Base LBA of volume, fat, data */
5846:..\..\FatFs/ff.c **** 	LBA_t sect, lba[2];
5847:..\..\FatFs/ff.c **** 	DWORD sz_rsv, sz_fat, sz_dir, sz_au;	/* Size of reserved, fat, dir, data, cluster */
5848:..\..\FatFs/ff.c **** 	UINT n_fat, n_root, i;					/* Index, Number of FATs and Number of roor dir entries */
5849:..\..\FatFs/ff.c **** 	int vol;
5850:..\..\FatFs/ff.c **** 	DSTATUS ds;
5851:..\..\FatFs/ff.c **** 	FRESULT fr;
5852:..\..\FatFs/ff.c **** 
5853:..\..\FatFs/ff.c **** 
5854:..\..\FatFs/ff.c **** 	/* Check mounted drive and clear work area */
5855:..\..\FatFs/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5856:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5857:..\..\FatFs/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
5858:..\..\FatFs/ff.c **** 	pdrv = LD2PD(vol);			/* Physical drive */
5859:..\..\FatFs/ff.c **** 	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
5860:..\..\FatFs/ff.c **** 	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
5861:..\..\FatFs/ff.c **** 
5862:..\..\FatFs/ff.c **** 	/* Get physical drive status (sz_drv, sz_blk, ss) */
5863:..\..\FatFs/ff.c **** 	ds = disk_initialize(pdrv);
5864:..\..\FatFs/ff.c **** 	if (ds & STA_NOINIT) return FR_NOT_READY;
5865:..\..\FatFs/ff.c **** 	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
5866:..\..\FatFs/ff.c **** 	sz_blk = opt->align;
5867:..\..\FatFs/ff.c **** 	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
5868:..\..\FatFs/ff.c ****  	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
5869:..\..\FatFs/ff.c **** #if FF_MAX_SS != FF_MIN_SS
5870:..\..\FatFs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5871:..\..\FatFs/ff.c **** 	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5872:..\..\FatFs/ff.c **** #else
5873:..\..\FatFs/ff.c **** 	ss = FF_MAX_SS;
5874:..\..\FatFs/ff.c **** #endif
5875:..\..\FatFs/ff.c **** 	/* Options for FAT sub-type and FAT parameters */
5876:..\..\FatFs/ff.c **** 	fsopt = opt->fmt & (FM_ANY | FM_SFD);
5877:..\..\FatFs/ff.c **** 	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
5878:..\..\FatFs/ff.c **** 	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n
5879:..\..\FatFs/ff.c **** 	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0
5880:..\..\FatFs/ff.c **** 	sz_au /= ss;	/* Byte --> Sector */
5881:..\..\FatFs/ff.c **** 
5882:..\..\FatFs/ff.c **** 	/* Get working buffer */
5883:..\..\FatFs/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer [sector] */
5884:..\..\FatFs/ff.c **** 	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
5885:..\..\FatFs/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
5886:..\..\FatFs/ff.c **** #if FF_USE_LFN == 3
5887:..\..\FatFs/ff.c **** 	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
5888:..\..\FatFs/ff.c **** #endif
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 123


5889:..\..\FatFs/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
5890:..\..\FatFs/ff.c **** 
5891:..\..\FatFs/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5892:..\..\FatFs/ff.c **** 	b_vol = sz_vol = 0;
5893:..\..\FatFs/ff.c **** 	if (FF_MULTI_PARTITION && ipart != 0) {	/* Is the volume associated with any specific partition? *
5894:..\..\FatFs/ff.c **** 		/* Get partition location from the existing partition table */
5895:..\..\FatFs/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load MBR */
5896:..\..\FatFs/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if MBR is valid */
5897:..\..\FatFs/ff.c **** #if FF_LBA64
5898:..\..\FatFs/ff.c **** 		if (buf[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
5899:..\..\FatFs/ff.c **** 			DWORD n_ent, ofs;
5900:..\..\FatFs/ff.c **** 			QWORD pt_lba;
5901:..\..\FatFs/ff.c **** 
5902:..\..\FatFs/ff.c **** 			/* Get the partition location from GPT */
5903:..\..\FatFs/ff.c **** 			if (disk_read(pdrv, buf, 1, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load GPT header sector (ne
5904:..\..\FatFs/ff.c **** 			if (!test_gpt_header(buf)) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if GPT header is valid */
5905:..\..\FatFs/ff.c **** 			n_ent = ld_dword(buf + GPTH_PtNum);		/* Number of entries */
5906:..\..\FatFs/ff.c **** 			pt_lba = ld_qword(buf + GPTH_PtOfs);	/* Table start sector */
5907:..\..\FatFs/ff.c **** 			ofs = i = 0;
5908:..\..\FatFs/ff.c **** 			while (n_ent) {		/* Find MS Basic partition with order of ipart */
5909:..\..\FatFs/ff.c **** 				if (ofs == 0 && disk_read(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Get PT
5910:..\..\FatFs/ff.c **** 				if (!mem_cmp(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart) {	/* MS basic data pa
5911:..\..\FatFs/ff.c **** 					b_vol = ld_qword(buf + ofs + GPTE_FstLba);
5912:..\..\FatFs/ff.c **** 					sz_vol = ld_qword(buf + ofs + GPTE_LstLba) - b_vol + 1;
5913:..\..\FatFs/ff.c **** 					break;
5914:..\..\FatFs/ff.c **** 				}
5915:..\..\FatFs/ff.c **** 				n_ent--; ofs = (ofs + SZ_GPTE) % ss;	/* Next entry */
5916:..\..\FatFs/ff.c **** 			}
5917:..\..\FatFs/ff.c **** 			if (n_ent == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Partition not found */
5918:..\..\FatFs/ff.c **** 			fsopt |= 0x80;	/* Partitioning is in GPT */
5919:..\..\FatFs/ff.c **** 		} else
5920:..\..\FatFs/ff.c **** #endif
5921:..\..\FatFs/ff.c **** 		{	/* Get the partition location from MBR partition table */
5922:..\..\FatFs/ff.c **** 			pte = buf + (MBR_Table + (ipart - 1) * SZ_PTE);
5923:..\..\FatFs/ff.c **** 			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
5924:..\..\FatFs/ff.c **** 			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5925:..\..\FatFs/ff.c **** 			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5926:..\..\FatFs/ff.c **** 		}
5927:..\..\FatFs/ff.c **** 	} else {	/* The volume is associated with a physical drive */
5928:..\..\FatFs/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5929:..\..\FatFs/ff.c **** 		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
5930:..\..\FatFs/ff.c **** 			/* Create a single-partition on the drive in this function */
5931:..\..\FatFs/ff.c **** #if FF_LBA64
5932:..\..\FatFs/ff.c **** 			if (sz_vol >= FF_MIN_GPT) {	/* Which partition type to create, MBR or GPT? */
5933:..\..\FatFs/ff.c **** 				fsopt |= 0x80;		/* Partitioning is in GPT */
5934:..\..\FatFs/ff.c **** 				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition 
5935:..\..\FatFs/ff.c **** 			} else
5936:..\..\FatFs/ff.c **** #endif
5937:..\..\FatFs/ff.c **** 			{	/* Partitioning is in MBR */
5938:..\..\FatFs/ff.c **** 				if (sz_vol > N_SEC_TRACK) {
5939:..\..\FatFs/ff.c **** 					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
5940:..\..\FatFs/ff.c **** 				}
5941:..\..\FatFs/ff.c **** 			}
5942:..\..\FatFs/ff.c **** 		}
5943:..\..\FatFs/ff.c **** 	}
5944:..\..\FatFs/ff.c **** 	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
5945:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 124


5946:..\..\FatFs/ff.c **** 	/* Now start to create a FAT volume at b_vol and sz_vol */
5947:..\..\FatFs/ff.c **** 
5948:..\..\FatFs/ff.c **** 	do {	/* Pre-determine the FAT type */
5949:..\..\FatFs/ff.c **** 		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
5950:..\..\FatFs/ff.c **** 			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 
5951:..\..\FatFs/ff.c **** 				fsty = FS_EXFAT; break;
5952:..\..\FatFs/ff.c **** 			}
5953:..\..\FatFs/ff.c **** 		}
5954:..\..\FatFs/ff.c **** #if FF_LBA64
5955:..\..\FatFs/ff.c **** 		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
5956:..\..\FatFs/ff.c **** #endif
5957:..\..\FatFs/ff.c **** 		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
5958:..\..\FatFs/ff.c **** 		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
5959:..\..\FatFs/ff.c **** 			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
5960:..\..\FatFs/ff.c **** 				fsty = FS_FAT32; break;
5961:..\..\FatFs/ff.c **** 			}
5962:..\..\FatFs/ff.c **** 		}
5963:..\..\FatFs/ff.c **** 		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
5964:..\..\FatFs/ff.c **** 		fsty = FS_FAT16;
5965:..\..\FatFs/ff.c **** 	} while (0);
5966:..\..\FatFs/ff.c **** 
5967:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
5968:..\..\FatFs/ff.c **** 	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
5969:..\..\FatFs/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl, tbl[3];
5970:..\..\FatFs/ff.c **** 		WCHAR ch, si;
5971:..\..\FatFs/ff.c **** 		UINT j, st;
5972:..\..\FatFs/ff.c **** 		BYTE b;
5973:..\..\FatFs/ff.c **** 
5974:..\..\FatFs/ff.c **** 		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
5975:..\..\FatFs/ff.c **** #if FF_USE_TRIM
5976:..\..\FatFs/ff.c **** 		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be
5977:..\..\FatFs/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, lba);
5978:..\..\FatFs/ff.c **** #endif
5979:..\..\FatFs/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5980:..\..\FatFs/ff.c **** 		if (sz_au == 0) {	/* AU auto-selection */
5981:..\..\FatFs/ff.c **** 			sz_au = 8;
5982:..\..\FatFs/ff.c **** 			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
5983:..\..\FatFs/ff.c **** 			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
5984:..\..\FatFs/ff.c **** 		}
5985:..\..\FatFs/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5986:..\..\FatFs/ff.c **** 		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
5987:..\..\FatFs/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase bl
5988:..\..\FatFs/ff.c **** 		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
5989:..\..\FatFs/ff.c **** 		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
5990:..\..\FatFs/ff.c **** 		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
5991:..\..\FatFs/ff.c **** 		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
5992:..\..\FatFs/ff.c **** 
5993:..\..\FatFs/ff.c **** 		szb_bit = (n_clst + 7) / 8;							/* Size of allocation bitmap */
5994:..\..\FatFs/ff.c **** 		tbl[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
5995:..\..\FatFs/ff.c **** 
5996:..\..\FatFs/ff.c **** 		/* Create a compressed up-case table */
5997:..\..\FatFs/ff.c **** 		sect = b_data + sz_au * tbl[0];	/* Table start sector */
5998:..\..\FatFs/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5999:..\..\FatFs/ff.c **** 		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
6000:..\..\FatFs/ff.c **** 		do {
6001:..\..\FatFs/ff.c **** 			switch (st) {
6002:..\..\FatFs/ff.c **** 			case 0:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 125


6003:..\..\FatFs/ff.c **** 				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
6004:..\..\FatFs/ff.c **** 				if (ch != si) {
6005:..\..\FatFs/ff.c **** 					si++; break;		/* Store the up-case char if exist */
6006:..\..\FatFs/ff.c **** 				}
6007:..\..\FatFs/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
6008:..\..\FatFs/ff.c **** 				if (j >= 128) {
6009:..\..\FatFs/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
6010:..\..\FatFs/ff.c **** 				}
6011:..\..\FatFs/ff.c **** 				st = 1;			/* Do not compress short run */
6012:..\..\FatFs/ff.c **** 				/* go to next case */
6013:..\..\FatFs/ff.c **** 			case 1:
6014:..\..\FatFs/ff.c **** 				ch = si++;		/* Fill the short run */
6015:..\..\FatFs/ff.c **** 				if (--j == 0) st = 0;
6016:..\..\FatFs/ff.c **** 				break;
6017:..\..\FatFs/ff.c **** 
6018:..\..\FatFs/ff.c **** 			default:
6019:..\..\FatFs/ff.c **** 				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
6020:..\..\FatFs/ff.c **** 				st = 0;
6021:..\..\FatFs/ff.c **** 			}
6022:..\..\FatFs/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
6023:..\..\FatFs/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
6024:..\..\FatFs/ff.c **** 			i += 2; szb_case += 2;
6025:..\..\FatFs/ff.c **** 			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
6026:..\..\FatFs/ff.c **** 				n = (i + ss - 1) / ss;
6027:..\..\FatFs/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6028:..\..\FatFs/ff.c **** 				sect += n; i = 0;
6029:..\..\FatFs/ff.c **** 			}
6030:..\..\FatFs/ff.c **** 		} while (si);
6031:..\..\FatFs/ff.c **** 		tbl[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
6032:..\..\FatFs/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
6033:..\..\FatFs/ff.c **** 
6034:..\..\FatFs/ff.c **** 		/* Initialize the allocation bitmap */
6035:..\..\FatFs/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
6036:..\..\FatFs/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
6037:..\..\FatFs/ff.c **** 		do {
6038:..\..\FatFs/ff.c **** 			mem_set(buf, 0, sz_buf * ss);
6039:..\..\FatFs/ff.c **** 			for (i = 0; nb >= 8 && i < sz_buf * ss; buf[i++] = 0xFF, nb -= 8) ;
6040:..\..\FatFs/ff.c **** 			for (b = 1; nb != 0 && i < sz_buf * ss; buf[i] |= b, b <<= 1, nb--) ;
6041:..\..\FatFs/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
6042:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6043:..\..\FatFs/ff.c **** 			sect += n; nsect -= n;
6044:..\..\FatFs/ff.c **** 		} while (nsect);
6045:..\..\FatFs/ff.c **** 
6046:..\..\FatFs/ff.c **** 		/* Initialize the FAT */
6047:..\..\FatFs/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
6048:..\..\FatFs/ff.c **** 		j = nb = cl = 0;
6049:..\..\FatFs/ff.c **** 		do {
6050:..\..\FatFs/ff.c **** 			mem_set(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write index */
6051:..\..\FatFs/ff.c **** 			if (cl == 0) {	/* Set FAT [0] and FAT[1] */
6052:..\..\FatFs/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
6053:..\..\FatFs/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
6054:..\..\FatFs/ff.c **** 			}
6055:..\..\FatFs/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
6056:..\..\FatFs/ff.c **** 				while (nb != 0 && i < sz_buf * ss) {	/* Create a chain */
6057:..\..\FatFs/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
6058:..\..\FatFs/ff.c **** 					i += 4; cl++; nb--;
6059:..\..\FatFs/ff.c **** 				}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 126


6060:..\..\FatFs/ff.c **** 				if (nb == 0 && j < 3) nb = tbl[j++];	/* Next chain */
6061:..\..\FatFs/ff.c **** 			} while (nb != 0 && i < sz_buf * ss);
6062:..\..\FatFs/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
6063:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6064:..\..\FatFs/ff.c **** 			sect += n; nsect -= n;
6065:..\..\FatFs/ff.c **** 		} while (nsect);
6066:..\..\FatFs/ff.c **** 
6067:..\..\FatFs/ff.c **** 		/* Initialize the root directory */
6068:..\..\FatFs/ff.c **** 		mem_set(buf, 0, sz_buf * ss);
6069:..\..\FatFs/ff.c **** 		buf[SZDIRE * 0 + 0] = ET_VLABEL;					/* Volume label entry (no label) */
6070:..\..\FatFs/ff.c **** 		buf[SZDIRE * 1 + 0] = ET_BITMAP;					/* Bitmap entry */
6071:..\..\FatFs/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);					/*  cluster */
6072:..\..\FatFs/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);			/*  size */
6073:..\..\FatFs/ff.c **** 		buf[SZDIRE * 2 + 0] = ET_UPCASE;					/* Up-case table entry */
6074:..\..\FatFs/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);				/*  sum */
6075:..\..\FatFs/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);		/*  cluster */
6076:..\..\FatFs/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);			/*  size */
6077:..\..\FatFs/ff.c **** 		sect = b_data + sz_au * (tbl[0] + tbl[1]); nsect = sz_au;	/* Start of the root directory and numb
6078:..\..\FatFs/ff.c **** 		do {	/* Fill root directory sectors */
6079:..\..\FatFs/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
6080:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6081:..\..\FatFs/ff.c **** 			mem_set(buf, 0, ss);
6082:..\..\FatFs/ff.c **** 			sect += n; nsect -= n;
6083:..\..\FatFs/ff.c **** 		} while (nsect);
6084:..\..\FatFs/ff.c **** 
6085:..\..\FatFs/ff.c **** 		/* Create two set of the exFAT VBR blocks */
6086:..\..\FatFs/ff.c **** 		sect = b_vol;
6087:..\..\FatFs/ff.c **** 		for (n = 0; n < 2; n++) {
6088:..\..\FatFs/ff.c **** 			/* Main record (+0) */
6089:..\..\FatFs/ff.c **** 			mem_set(buf, 0, ss);
6090:..\..\FatFs/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
6091:..\..\FatFs/ff.c **** 			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
6092:..\..\FatFs/ff.c **** 			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
6093:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_FatOfsEx, (DWORD)(b_fat - b_vol));	/* FAT offset [sector] */
6094:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
6095:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
6096:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
6097:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
6098:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
6099:..\..\FatFs/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
6100:..\..\FatFs/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
6101:..\..\FatFs/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluste
6102:..\..\FatFs/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
6103:..\..\FatFs/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
6104:..\..\FatFs/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
6105:..\..\FatFs/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
6106:..\..\FatFs/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
6107:..\..\FatFs/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
6108:..\..\FatFs/ff.c **** 			}
6109:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6110:..\..\FatFs/ff.c **** 			/* Extended bootstrap record (+1..+8) */
6111:..\..\FatFs/ff.c **** 			mem_set(buf, 0, ss);
6112:..\..\FatFs/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
6113:..\..\FatFs/ff.c **** 			for (j = 1; j < 9; j++) {
6114:..\..\FatFs/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
6115:..\..\FatFs/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6116:..\..\FatFs/ff.c **** 			}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 127


6117:..\..\FatFs/ff.c **** 			/* OEM/Reserved record (+9..+10) */
6118:..\..\FatFs/ff.c **** 			mem_set(buf, 0, ss);
6119:..\..\FatFs/ff.c **** 			for ( ; j < 11; j++) {
6120:..\..\FatFs/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
6121:..\..\FatFs/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6122:..\..\FatFs/ff.c **** 			}
6123:..\..\FatFs/ff.c **** 			/* Sum record (+11) */
6124:..\..\FatFs/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
6125:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6126:..\..\FatFs/ff.c **** 		}
6127:..\..\FatFs/ff.c **** 
6128:..\..\FatFs/ff.c **** 	} else
6129:..\..\FatFs/ff.c **** #endif	/* FF_FS_EXFAT */
6130:..\..\FatFs/ff.c **** 	{	/* Create an FAT/FAT32 volume */
6131:..\..\FatFs/ff.c **** 		do {
6132:..\..\FatFs/ff.c **** 			pau = sz_au;
6133:..\..\FatFs/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
6134:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT32) {	/* FAT32 volume */
6135:..\..\FatFs/ff.c **** 				if (pau == 0) {	/* AU auto-selection */
6136:..\..\FatFs/ff.c **** 					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
6137:..\..\FatFs/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
6138:..\..\FatFs/ff.c **** 				}
6139:..\..\FatFs/ff.c **** 				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
6140:..\..\FatFs/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
6141:..\..\FatFs/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
6142:..\..\FatFs/ff.c **** 				sz_dir = 0;		/* No static directory */
6143:..\..\FatFs/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
6144:..\..\FatFs/ff.c **** 			} else {				/* FAT volume */
6145:..\..\FatFs/ff.c **** 				if (pau == 0) {	/* au auto-selection */
6146:..\..\FatFs/ff.c **** 					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
6147:..\..\FatFs/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
6148:..\..\FatFs/ff.c **** 				}
6149:..\..\FatFs/ff.c **** 				n_clst = (DWORD)sz_vol / pau;
6150:..\..\FatFs/ff.c **** 				if (n_clst > MAX_FAT12) {
6151:..\..\FatFs/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
6152:..\..\FatFs/ff.c **** 				} else {
6153:..\..\FatFs/ff.c **** 					fsty = FS_FAT12;
6154:..\..\FatFs/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
6155:..\..\FatFs/ff.c **** 				}
6156:..\..\FatFs/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
6157:..\..\FatFs/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
6158:..\..\FatFs/ff.c **** 				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
6159:..\..\FatFs/ff.c **** 			}
6160:..\..\FatFs/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
6161:..\..\FatFs/ff.c **** 			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
6162:..\..\FatFs/ff.c **** 
6163:..\..\FatFs/ff.c **** 			/* Align data area to erase block boundary (for flash memory media) */
6164:..\..\FatFs/ff.c **** 			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from c
6165:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
6166:..\..\FatFs/ff.c **** 				sz_rsv += n; b_fat += n;
6167:..\..\FatFs/ff.c **** 			} else {					/* FAT: Expand FAT */
6168:..\..\FatFs/ff.c **** 				if (n % n_fat) {	/* Adjust fractional error if needed */
6169:..\..\FatFs/ff.c **** 					n--; sz_rsv++; b_fat++;
6170:..\..\FatFs/ff.c **** 				}
6171:..\..\FatFs/ff.c **** 				sz_fat += n / n_fat;
6172:..\..\FatFs/ff.c **** 			}
6173:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 128


6174:..\..\FatFs/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
6175:..\..\FatFs/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
6176:..\..\FatFs/ff.c **** 			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
6177:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT32) {
6178:..\..\FatFs/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
6179:..\..\FatFs/ff.c **** 					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
6180:..\..\FatFs/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6181:..\..\FatFs/ff.c **** 				}
6182:..\..\FatFs/ff.c **** 			}
6183:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT16) {
6184:..\..\FatFs/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
6185:..\..\FatFs/ff.c **** 					if (sz_au == 0 && (pau * 2) <= 64) {
6186:..\..\FatFs/ff.c **** 						sz_au = pau * 2; continue;		/* Adjust cluster size and retry */
6187:..\..\FatFs/ff.c **** 					}
6188:..\..\FatFs/ff.c **** 					if ((fsopt & FM_FAT32)) {
6189:..\..\FatFs/ff.c **** 						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
6190:..\..\FatFs/ff.c **** 					}
6191:..\..\FatFs/ff.c **** 					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
6192:..\..\FatFs/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6193:..\..\FatFs/ff.c **** 				}
6194:..\..\FatFs/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
6195:..\..\FatFs/ff.c **** 					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
6196:..\..\FatFs/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6197:..\..\FatFs/ff.c **** 				}
6198:..\..\FatFs/ff.c **** 			}
6199:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters fo
6200:..\..\FatFs/ff.c **** 
6201:..\..\FatFs/ff.c **** 			/* Ok, it is the valid cluster configuration */
6202:..\..\FatFs/ff.c **** 			break;
6203:..\..\FatFs/ff.c **** 		} while (1);
6204:..\..\FatFs/ff.c **** 
6205:..\..\FatFs/ff.c **** #if FF_USE_TRIM
6206:..\..\FatFs/ff.c **** 		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be
6207:..\..\FatFs/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, lba);
6208:..\..\FatFs/ff.c **** #endif
6209:..\..\FatFs/ff.c **** 		/* Create FAT VBR */
6210:..\..\FatFs/ff.c **** 		mem_set(buf, 0, ss);
6211:..\..\FatFs/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
6212:..\..\FatFs/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
6213:..\..\FatFs/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
6214:..\..\FatFs/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
6215:..\..\FatFs/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
6216:..\..\FatFs/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directo
6217:..\..\FatFs/ff.c **** 		if (sz_vol < 0x10000) {
6218:..\..\FatFs/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
6219:..\..\FatFs/ff.c **** 		} else {
6220:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
6221:..\..\FatFs/ff.c **** 		}
6222:..\..\FatFs/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
6223:..\..\FatFs/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
6224:..\..\FatFs/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
6225:..\..\FatFs/ff.c **** 		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
6226:..\..\FatFs/ff.c **** 		if (fsty == FS_FAT32) {
6227:..\..\FatFs/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
6228:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
6229:..\..\FatFs/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
6230:..\..\FatFs/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 129


6231:..\..\FatFs/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
6232:..\..\FatFs/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
6233:..\..\FatFs/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
6234:..\..\FatFs/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
6235:..\..\FatFs/ff.c **** 		} else {
6236:..\..\FatFs/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
6237:..\..\FatFs/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
6238:..\..\FatFs/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
6239:..\..\FatFs/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
6240:..\..\FatFs/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
6241:..\..\FatFs/ff.c **** 		}
6242:..\..\FatFs/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
6243:..\..\FatFs/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR se
6244:..\..\FatFs/ff.c **** 
6245:..\..\FatFs/ff.c **** 		/* Create FSINFO record if needed */
6246:..\..\FatFs/ff.c **** 		if (fsty == FS_FAT32) {
6247:..\..\FatFs/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
6248:..\..\FatFs/ff.c **** 			mem_set(buf, 0, ss);
6249:..\..\FatFs/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
6250:..\..\FatFs/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
6251:..\..\FatFs/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
6252:..\..\FatFs/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
6253:..\..\FatFs/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
6254:..\..\FatFs/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
6255:..\..\FatFs/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
6256:..\..\FatFs/ff.c **** 		}
6257:..\..\FatFs/ff.c **** 
6258:..\..\FatFs/ff.c **** 		/* Initialize FAT area */
6259:..\..\FatFs/ff.c **** 		mem_set(buf, 0, sz_buf * ss);
6260:..\..\FatFs/ff.c **** 		sect = b_fat;		/* FAT start sector */
6261:..\..\FatFs/ff.c **** 		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
6262:..\..\FatFs/ff.c **** 			if (fsty == FS_FAT32) {
6263:..\..\FatFs/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
6264:..\..\FatFs/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
6265:..\..\FatFs/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
6266:..\..\FatFs/ff.c **** 			} else {
6267:..\..\FatFs/ff.c **** 				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
6268:..\..\FatFs/ff.c **** 			}
6269:..\..\FatFs/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
6270:..\..\FatFs/ff.c **** 			do {	/* Fill FAT sectors */
6271:..\..\FatFs/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
6272:..\..\FatFs/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6273:..\..\FatFs/ff.c **** 				mem_set(buf, 0, ss);	/* Rest of FAT all are cleared */
6274:..\..\FatFs/ff.c **** 				sect += n; nsect -= n;
6275:..\..\FatFs/ff.c **** 			} while (nsect);
6276:..\..\FatFs/ff.c **** 		}
6277:..\..\FatFs/ff.c **** 
6278:..\..\FatFs/ff.c **** 		/* Initialize root directory (fill with zero) */
6279:..\..\FatFs/ff.c **** 		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
6280:..\..\FatFs/ff.c **** 		do {
6281:..\..\FatFs/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
6282:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6283:..\..\FatFs/ff.c **** 			sect += n; nsect -= n;
6284:..\..\FatFs/ff.c **** 		} while (nsect);
6285:..\..\FatFs/ff.c **** 	}
6286:..\..\FatFs/ff.c **** 
6287:..\..\FatFs/ff.c **** 	/* A FAT volume has been created here */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 130


6288:..\..\FatFs/ff.c **** 
6289:..\..\FatFs/ff.c **** 	/* Determine system ID in the MBR partition table */
6290:..\..\FatFs/ff.c **** 	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
6291:..\..\FatFs/ff.c **** 		sys = 0x07;			/* exFAT */
6292:..\..\FatFs/ff.c **** 	} else {
6293:..\..\FatFs/ff.c **** 		if (fsty == FS_FAT32) {
6294:..\..\FatFs/ff.c **** 			sys = 0x0C;		/* FAT32X */
6295:..\..\FatFs/ff.c **** 		} else {
6296:..\..\FatFs/ff.c **** 			if (sz_vol >= 0x10000) {
6297:..\..\FatFs/ff.c **** 				sys = 0x06;	/* FAT12/16 (large) */
6298:..\..\FatFs/ff.c **** 			} else {
6299:..\..\FatFs/ff.c **** 				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
6300:..\..\FatFs/ff.c **** 			}
6301:..\..\FatFs/ff.c **** 		}
6302:..\..\FatFs/ff.c **** 	}
6303:..\..\FatFs/ff.c **** 
6304:..\..\FatFs/ff.c **** 	/* Update partition information */
6305:..\..\FatFs/ff.c **** 	if (FF_MULTI_PARTITION && ipart != 0) {	/* Volume is in the existing partition */
6306:..\..\FatFs/ff.c **** 		if (!FF_LBA64 || !(fsopt & 0x80)) {
6307:..\..\FatFs/ff.c **** 			/* Update system ID in the partition table */
6308:..\..\FatFs/ff.c **** 			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
6309:..\..\FatFs/ff.c **** 			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
6310:..\..\FatFs/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR 
6311:..\..\FatFs/ff.c **** 		}
6312:..\..\FatFs/ff.c **** 	} else {								/* Volume as a new single partition */
6313:..\..\FatFs/ff.c **** 		if (!(fsopt & FM_SFD)) {	/* Create partition table if not in SFD */
6314:..\..\FatFs/ff.c **** 			lba[0] = sz_vol, lba[1] = 0;
6315:..\..\FatFs/ff.c **** 			fr = create_partition(pdrv, lba, sys, buf);
6316:..\..\FatFs/ff.c **** 			if (fr != FR_OK) LEAVE_MKFS(fr);
6317:..\..\FatFs/ff.c **** 		}
6318:..\..\FatFs/ff.c **** 	}
6319:..\..\FatFs/ff.c **** 
6320:..\..\FatFs/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6321:..\..\FatFs/ff.c **** 
6322:..\..\FatFs/ff.c **** 	LEAVE_MKFS(FR_OK);
6323:..\..\FatFs/ff.c **** }
6324:..\..\FatFs/ff.c **** 
6325:..\..\FatFs/ff.c **** 
6326:..\..\FatFs/ff.c **** 
6327:..\..\FatFs/ff.c **** 
6328:..\..\FatFs/ff.c **** #if FF_MULTI_PARTITION
6329:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6330:..\..\FatFs/ff.c **** /* Create Partition Table on the Physical Drive                          */
6331:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6332:..\..\FatFs/ff.c **** 
6333:..\..\FatFs/ff.c **** FRESULT f_fdisk (
6334:..\..\FatFs/ff.c **** 	BYTE pdrv,			/* Physical drive number */
6335:..\..\FatFs/ff.c **** 	const LBA_t ptbl[],	/* Pointer to the size table for each partitions */
6336:..\..\FatFs/ff.c **** 	void* work			/* Pointer to the working buffer (null: use heap memory) */
6337:..\..\FatFs/ff.c **** )
6338:..\..\FatFs/ff.c **** {
6339:..\..\FatFs/ff.c **** 	BYTE *buf = (BYTE*)work;
6340:..\..\FatFs/ff.c **** 	DSTATUS stat;
6341:..\..\FatFs/ff.c **** 
6342:..\..\FatFs/ff.c **** 
6343:..\..\FatFs/ff.c **** 	stat = disk_initialize(pdrv);
6344:..\..\FatFs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 131


6345:..\..\FatFs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
6346:..\..\FatFs/ff.c **** #if FF_USE_LFN == 3
6347:..\..\FatFs/ff.c **** 	if (!buf) buf = ff_memalloc(FF_MAX_SS);	/* Use heap memory for working buffer */
6348:..\..\FatFs/ff.c **** #endif
6349:..\..\FatFs/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
6350:..\..\FatFs/ff.c **** 
6351:..\..\FatFs/ff.c **** 	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, buf));
6352:..\..\FatFs/ff.c **** }
6353:..\..\FatFs/ff.c **** 
6354:..\..\FatFs/ff.c **** #endif /* FF_MULTI_PARTITION */
6355:..\..\FatFs/ff.c **** #endif /* !FF_FS_READONLY && FF_USE_MKFS */
6356:..\..\FatFs/ff.c **** 
6357:..\..\FatFs/ff.c **** 
6358:..\..\FatFs/ff.c **** 
6359:..\..\FatFs/ff.c **** 
6360:..\..\FatFs/ff.c **** #if FF_USE_STRFUNC
6361:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCODE < 0 || FF_STRF_ENCODE > 3)
6362:..\..\FatFs/ff.c **** #error Wrong FF_STRF_ENCODE setting
6363:..\..\FatFs/ff.c **** #endif
6364:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6365:..\..\FatFs/ff.c **** /* Get a String from the File                                            */
6366:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6367:..\..\FatFs/ff.c **** 
6368:..\..\FatFs/ff.c **** TCHAR* f_gets (
6369:..\..\FatFs/ff.c **** 	TCHAR* buff,	/* Pointer to the buffer to store read string */
6370:..\..\FatFs/ff.c **** 	int len,		/* Size of string buffer (items) */
6371:..\..\FatFs/ff.c **** 	FIL* fp			/* Pointer to the file object */
6372:..\..\FatFs/ff.c **** )
6373:..\..\FatFs/ff.c **** {
6374:..\..\FatFs/ff.c **** 	int nc = 0;
6375:..\..\FatFs/ff.c **** 	TCHAR *p = buff;
6376:..\..\FatFs/ff.c **** 	BYTE s[4];
6377:..\..\FatFs/ff.c **** 	UINT rc;
6378:..\..\FatFs/ff.c **** 	DWORD dc;
6379:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE <= 2
6380:..\..\FatFs/ff.c **** 	WCHAR wc;
6381:..\..\FatFs/ff.c **** #endif
6382:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE == 3
6383:..\..\FatFs/ff.c **** 	UINT ct;
6384:..\..\FatFs/ff.c **** #endif
6385:..\..\FatFs/ff.c **** 
6386:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE			/* With code conversion (Unicode API) */
6387:..\..\FatFs/ff.c **** 	/* Make a room for the character and terminator  */
6388:..\..\FatFs/ff.c **** 	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE == 0) ? 1 : 2;
6389:..\..\FatFs/ff.c **** 	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE == 0) ? 3 : 4;
6390:..\..\FatFs/ff.c **** 	if (FF_LFN_UNICODE == 3) len -= 1;
6391:..\..\FatFs/ff.c **** 	while (nc < len) {
6392:..\..\FatFs/ff.c **** #if FF_STRF_ENCODE == 0				/* Read a character in ANSI/OEM */
6393:..\..\FatFs/ff.c **** 		f_read(fp, s, 1, &rc);		/* Get a code unit */
6394:..\..\FatFs/ff.c **** 		if (rc != 1) break;			/* EOF? */
6395:..\..\FatFs/ff.c **** 		wc = s[0];
6396:..\..\FatFs/ff.c **** 		if (dbc_1st((BYTE)wc)) {	/* DBC 1st byte? */
6397:..\..\FatFs/ff.c **** 			f_read(fp, s, 1, &rc);	/* Get DBC 2nd byte */
6398:..\..\FatFs/ff.c **** 			if (rc != 1 || !dbc_2nd(s[0])) continue;	/* Wrong code? */
6399:..\..\FatFs/ff.c **** 			wc = wc << 8 | s[0];
6400:..\..\FatFs/ff.c **** 		}
6401:..\..\FatFs/ff.c **** 		dc = ff_oem2uni(wc, CODEPAGE);	/* OEM --> */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 132


6402:..\..\FatFs/ff.c **** 		if (dc == 0) continue;
6403:..\..\FatFs/ff.c **** #elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 	/* Read a character in UTF-16LE/BE */
6404:..\..\FatFs/ff.c **** 		f_read(fp, s, 2, &rc);		/* Get a code unit */
6405:..\..\FatFs/ff.c **** 		if (rc != 2) break;			/* EOF? */
6406:..\..\FatFs/ff.c **** 		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6407:..\..\FatFs/ff.c **** 		if (IsSurrogateL(dc)) continue;	/* Broken surrogate pair? */
6408:..\..\FatFs/ff.c **** 		if (IsSurrogateH(dc)) {		/* High surrogate? */
6409:..\..\FatFs/ff.c **** 			f_read(fp, s, 2, &rc);	/* Get low surrogate */
6410:..\..\FatFs/ff.c **** 			if (rc != 2) break;		/* EOF? */
6411:..\..\FatFs/ff.c **** 			wc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6412:..\..\FatFs/ff.c **** 			if (!IsSurrogateL(wc)) continue;	/* Broken surrogate pair? */
6413:..\..\FatFs/ff.c **** 			dc = ((dc & 0x3FF) + 0x40) << 10 | (wc & 0x3FF);	/* Merge surrogate pair */
6414:..\..\FatFs/ff.c **** 		}
6415:..\..\FatFs/ff.c **** #else	/* Read a character in UTF-8 */
6416:..\..\FatFs/ff.c **** 		f_read(fp, s, 1, &rc);		/* Get a code unit */
6417:..\..\FatFs/ff.c **** 		if (rc != 1) break;			/* EOF? */
6418:..\..\FatFs/ff.c **** 		dc = s[0];
6419:..\..\FatFs/ff.c **** 		if (dc >= 0x80) {			/* Multi-byte sequence? */
6420:..\..\FatFs/ff.c **** 			ct = 0;
6421:..\..\FatFs/ff.c **** 			if ((dc & 0xE0) == 0xC0) { dc &= 0x1F; ct = 1; }	/* 2-byte sequence? */
6422:..\..\FatFs/ff.c **** 			if ((dc & 0xF0) == 0xE0) { dc &= 0x0F; ct = 2; }	/* 3-byte sequence? */
6423:..\..\FatFs/ff.c **** 			if ((dc & 0xF8) == 0xF0) { dc &= 0x07; ct = 3; }	/* 4-byte sequence? */
6424:..\..\FatFs/ff.c **** 			if (ct == 0) continue;
6425:..\..\FatFs/ff.c **** 			f_read(fp, s, ct, &rc);		/* Get trailing bytes */
6426:..\..\FatFs/ff.c **** 			if (rc != ct) break;
6427:..\..\FatFs/ff.c **** 			rc = 0;
6428:..\..\FatFs/ff.c **** 			do {	/* Merge the byte sequence */
6429:..\..\FatFs/ff.c **** 				if ((s[rc] & 0xC0) != 0x80) break;
6430:..\..\FatFs/ff.c **** 				dc = dc << 6 | (s[rc] & 0x3F);
6431:..\..\FatFs/ff.c **** 			} while (++rc < ct);
6432:..\..\FatFs/ff.c **** 			if (rc != ct || dc < 0x80 || IsSurrogate(dc) || dc >= 0x110000) continue;	/* Wrong encoding? */
6433:..\..\FatFs/ff.c **** 		}
6434:..\..\FatFs/ff.c **** #endif
6435:..\..\FatFs/ff.c **** 		/* A code point is avaialble in dc to be output */
6436:..\..\FatFs/ff.c **** 
6437:..\..\FatFs/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;	/* Strip \r off if needed */
6438:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	/* Output it in UTF-16/32 encoding */
6439:..\..\FatFs/ff.c **** 		if (FF_LFN_UNICODE == 1 && dc >= 0x10000) {	/* Out of BMP at UTF-16? */
6440:..\..\FatFs/ff.c **** 			*p++ = (TCHAR)(0xD800 | ((dc >> 10) - 0x40)); nc++;	/* Make and output high surrogate */
6441:..\..\FatFs/ff.c **** 			dc = 0xDC00 | (dc & 0x3FF);		/* Make low surrogate */
6442:..\..\FatFs/ff.c **** 		}
6443:..\..\FatFs/ff.c **** 		*p++ = (TCHAR)dc; nc++;
6444:..\..\FatFs/ff.c **** 		if (dc == '\n') break;	/* End of line? */
6445:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 2		/* Output it in UTF-8 encoding */
6446:..\..\FatFs/ff.c **** 		if (dc < 0x80) {	/* Single byte? */
6447:..\..\FatFs/ff.c **** 			*p++ = (TCHAR)dc;
6448:..\..\FatFs/ff.c **** 			nc++;
6449:..\..\FatFs/ff.c **** 			if (dc == '\n') break;	/* End of line? */
6450:..\..\FatFs/ff.c **** 		} else {
6451:..\..\FatFs/ff.c **** 			if (dc < 0x800) {		/* 2-byte sequence? */
6452:..\..\FatFs/ff.c **** 				*p++ = (TCHAR)(0xC0 | (dc >> 6 & 0x1F));
6453:..\..\FatFs/ff.c **** 				*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6454:..\..\FatFs/ff.c **** 				nc += 2;
6455:..\..\FatFs/ff.c **** 			} else {
6456:..\..\FatFs/ff.c **** 				if (dc < 0x10000) {	/* 3-byte sequence? */
6457:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0xE0 | (dc >> 12 & 0x0F));
6458:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 133


6459:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6460:..\..\FatFs/ff.c **** 					nc += 3;
6461:..\..\FatFs/ff.c **** 				} else {			/* 4-byte sequence? */
6462:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0xF0 | (dc >> 18 & 0x07));
6463:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 12 & 0x3F));
6464:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6465:..\..\FatFs/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6466:..\..\FatFs/ff.c **** 					nc += 4;
6467:..\..\FatFs/ff.c **** 				}
6468:..\..\FatFs/ff.c **** 			}
6469:..\..\FatFs/ff.c **** 		}
6470:..\..\FatFs/ff.c **** #endif
6471:..\..\FatFs/ff.c **** 	}
6472:..\..\FatFs/ff.c **** 
6473:..\..\FatFs/ff.c **** #else			/* Byte-by-byte read without any conversion (ANSI/OEM API) */
6474:..\..\FatFs/ff.c **** 	len -= 1;	/* Make a room for the terminator */
6475:..\..\FatFs/ff.c **** 	while (nc < len) {
6476:..\..\FatFs/ff.c **** 		f_read(fp, s, 1, &rc);	/* Get a byte */
6477:..\..\FatFs/ff.c **** 		if (rc != 1) break;		/* EOF? */
6478:..\..\FatFs/ff.c **** 		dc = s[0];
6479:..\..\FatFs/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
6480:..\..\FatFs/ff.c **** 		*p++ = (TCHAR)dc; nc++;
6481:..\..\FatFs/ff.c **** 		if (dc == '\n') break;
6482:..\..\FatFs/ff.c **** 	}
6483:..\..\FatFs/ff.c **** #endif
6484:..\..\FatFs/ff.c **** 
6485:..\..\FatFs/ff.c **** 	*p = 0;		/* Terminate the string */
6486:..\..\FatFs/ff.c **** 	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
6487:..\..\FatFs/ff.c **** }
6488:..\..\FatFs/ff.c **** 
6489:..\..\FatFs/ff.c **** 
6490:..\..\FatFs/ff.c **** 
6491:..\..\FatFs/ff.c **** 
6492:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
6493:..\..\FatFs/ff.c **** #include <stdarg.h>
6494:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6495:..\..\FatFs/ff.c **** /* Put a Character to the File (sub-functions)                           */
6496:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6497:..\..\FatFs/ff.c **** 
6498:..\..\FatFs/ff.c **** /* Putchar output buffer and work area */
6499:..\..\FatFs/ff.c **** 
6500:..\..\FatFs/ff.c **** typedef struct {
6501:..\..\FatFs/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
6502:..\..\FatFs/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of encoding units written */
6503:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE == 1
6504:..\..\FatFs/ff.c **** 	WCHAR hs;
6505:..\..\FatFs/ff.c **** #elif FF_USE_LFN && FF_LFN_UNICODE == 2
6506:..\..\FatFs/ff.c **** 	BYTE bs[4];
6507:..\..\FatFs/ff.c **** 	UINT wi, ct;
6508:..\..\FatFs/ff.c **** #endif
6509:..\..\FatFs/ff.c **** 	BYTE buf[64];	/* Write buffer */
6510:..\..\FatFs/ff.c **** } putbuff;
6511:..\..\FatFs/ff.c **** 
6512:..\..\FatFs/ff.c **** 
6513:..\..\FatFs/ff.c **** /* Buffered write with code conversion */
6514:..\..\FatFs/ff.c **** 
6515:..\..\FatFs/ff.c **** static void putc_bfd (putbuff* pb, TCHAR c)
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 134


6516:..\..\FatFs/ff.c **** {
6517:..\..\FatFs/ff.c **** 	UINT n;
6518:..\..\FatFs/ff.c **** 	int i, nc;
6519:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6520:..\..\FatFs/ff.c **** 	WCHAR hs, wc;
6521:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE == 2
6522:..\..\FatFs/ff.c **** 	DWORD dc;
6523:..\..\FatFs/ff.c **** 	TCHAR *tp;
6524:..\..\FatFs/ff.c **** #endif
6525:..\..\FatFs/ff.c **** #endif
6526:..\..\FatFs/ff.c **** 
6527:..\..\FatFs/ff.c **** 	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
6528:..\..\FatFs/ff.c **** 		putc_bfd(pb, '\r');
6529:..\..\FatFs/ff.c **** 	}
6530:..\..\FatFs/ff.c **** 
6531:..\..\FatFs/ff.c **** 	i = pb->idx;			/* Write index of pb->buf[] */
6532:..\..\FatFs/ff.c **** 	if (i < 0) return;
6533:..\..\FatFs/ff.c **** 	nc = pb->nchr;			/* Write unit counter */
6534:..\..\FatFs/ff.c **** 
6535:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6536:..\..\FatFs/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
6537:..\..\FatFs/ff.c **** 	if (IsSurrogateH(c)) {	/* High surrogate? */
6538:..\..\FatFs/ff.c **** 		pb->hs = c; return;	/* Save it for next */
6539:..\..\FatFs/ff.c **** 	}
6540:..\..\FatFs/ff.c **** 	hs = pb->hs; pb->hs = 0;
6541:..\..\FatFs/ff.c **** 	if (hs != 0) {			/* There is a leading high surrogate */
6542:..\..\FatFs/ff.c **** 		if (!IsSurrogateL(c)) hs = 0;	/* Discard high surrogate if not a surrogate pair */
6543:..\..\FatFs/ff.c **** 	} else {
6544:..\..\FatFs/ff.c **** 		if (IsSurrogateL(c)) return;	/* Discard stray low surrogate */
6545:..\..\FatFs/ff.c **** 	}
6546:..\..\FatFs/ff.c **** 	wc = c;
6547:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
6548:..\..\FatFs/ff.c **** 	for (;;) {
6549:..\..\FatFs/ff.c **** 		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
6550:..\..\FatFs/ff.c **** 			pb->bs[pb->wi = 0] = (BYTE)c;	/* Save 1st byte */
6551:..\..\FatFs/ff.c **** 			if ((BYTE)c < 0x80) break;					/* Single byte? */
6552:..\..\FatFs/ff.c **** 			if (((BYTE)c & 0xE0) == 0xC0) pb->ct = 1;	/* 2-byte sequence? */
6553:..\..\FatFs/ff.c **** 			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte sequence? */
6554:..\..\FatFs/ff.c **** 			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte sequence? */
6555:..\..\FatFs/ff.c **** 			return;
6556:..\..\FatFs/ff.c **** 		} else {				/* In the multi-byte sequence */
6557:..\..\FatFs/ff.c **** 			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
6558:..\..\FatFs/ff.c **** 				pb->ct = 0; continue;
6559:..\..\FatFs/ff.c **** 			}
6560:..\..\FatFs/ff.c **** 			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
6561:..\..\FatFs/ff.c **** 			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
6562:..\..\FatFs/ff.c **** 			return;
6563:..\..\FatFs/ff.c **** 		}
6564:..\..\FatFs/ff.c **** 	}
6565:..\..\FatFs/ff.c **** 	tp = (TCHAR*)pb->bs;
6566:..\..\FatFs/ff.c **** 	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
6567:..\..\FatFs/ff.c **** 	if (dc == 0xFFFFFFFF) return;	/* Wrong code? */
6568:..\..\FatFs/ff.c **** 	wc = (WCHAR)dc;
6569:..\..\FatFs/ff.c **** 	hs = (WCHAR)(dc >> 16);
6570:..\..\FatFs/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
6571:..\..\FatFs/ff.c **** 	if (IsSurrogate(c) || c >= 0x110000) return;	/* Discard invalid code */
6572:..\..\FatFs/ff.c **** 	if (c >= 0x10000) {		/* Out of BMP? */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 135


6573:..\..\FatFs/ff.c **** 		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)); 	/* Make high surrogate */
6574:..\..\FatFs/ff.c **** 		wc = 0xDC00 | (c & 0x3FF);					/* Make low surrogate */
6575:..\..\FatFs/ff.c **** 	} else {
6576:..\..\FatFs/ff.c **** 		hs = 0;
6577:..\..\FatFs/ff.c **** 		wc = (WCHAR)c;
6578:..\..\FatFs/ff.c **** 	}
6579:..\..\FatFs/ff.c **** #endif
6580:..\..\FatFs/ff.c **** 	/* A code point in UTF-16 is available in hs and wc */
6581:..\..\FatFs/ff.c **** 
6582:..\..\FatFs/ff.c **** #if FF_STRF_ENCODE == 1		/* Write a code point in UTF-16LE */
6583:..\..\FatFs/ff.c **** 	if (hs != 0) {	/* Surrogate pair? */
6584:..\..\FatFs/ff.c **** 		st_word(&pb->buf[i], hs);
6585:..\..\FatFs/ff.c **** 		i += 2;
6586:..\..\FatFs/ff.c **** 		nc++;
6587:..\..\FatFs/ff.c **** 	}
6588:..\..\FatFs/ff.c **** 	st_word(&pb->buf[i], wc);
6589:..\..\FatFs/ff.c **** 	i += 2;
6590:..\..\FatFs/ff.c **** #elif FF_STRF_ENCODE == 2	/* Write a code point in UTF-16BE */
6591:..\..\FatFs/ff.c **** 	if (hs != 0) {	/* Surrogate pair? */
6592:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(hs >> 8);
6593:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)hs;
6594:..\..\FatFs/ff.c **** 		nc++;
6595:..\..\FatFs/ff.c **** 	}
6596:..\..\FatFs/ff.c **** 	pb->buf[i++] = (BYTE)(wc >> 8);
6597:..\..\FatFs/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6598:..\..\FatFs/ff.c **** #elif FF_STRF_ENCODE == 3	/* Write a code point in UTF-8 */
6599:..\..\FatFs/ff.c **** 	if (hs != 0) {	/* 4-byte sequence? */
6600:..\..\FatFs/ff.c **** 		nc += 3;
6601:..\..\FatFs/ff.c **** 		hs = (hs & 0x3FF) + 0x40;
6602:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
6603:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
6604:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
6605:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6606:..\..\FatFs/ff.c **** 	} else {
6607:..\..\FatFs/ff.c **** 		if (wc < 0x80) {	/* Single byte? */
6608:..\..\FatFs/ff.c **** 			pb->buf[i++] = (BYTE)wc;
6609:..\..\FatFs/ff.c **** 		} else {
6610:..\..\FatFs/ff.c **** 			if (wc < 0x800) {	/* 2-byte sequence? */
6611:..\..\FatFs/ff.c **** 				nc += 1;
6612:..\..\FatFs/ff.c **** 				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
6613:..\..\FatFs/ff.c **** 			} else {			/* 3-byte sequence */
6614:..\..\FatFs/ff.c **** 				nc += 2;
6615:..\..\FatFs/ff.c **** 				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
6616:..\..\FatFs/ff.c **** 				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
6617:..\..\FatFs/ff.c **** 			}
6618:..\..\FatFs/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6619:..\..\FatFs/ff.c **** 		}
6620:..\..\FatFs/ff.c **** 	}
6621:..\..\FatFs/ff.c **** #else						/* Write a code point in ANSI/OEM */
6622:..\..\FatFs/ff.c **** 	if (hs != 0) return;
6623:..\..\FatFs/ff.c **** 	wc = ff_uni2oem(wc, CODEPAGE);	/* UTF-16 ==> ANSI/OEM */
6624:..\..\FatFs/ff.c **** 	if (wc == 0) return;
6625:..\..\FatFs/ff.c **** 	if (wc >= 0x100) {
6626:..\..\FatFs/ff.c **** 		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
6627:..\..\FatFs/ff.c **** 	}
6628:..\..\FatFs/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6629:..\..\FatFs/ff.c **** #endif
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 136


6630:..\..\FatFs/ff.c **** 
6631:..\..\FatFs/ff.c **** #else									/* ANSI/OEM input (without re-encoding) */
6632:..\..\FatFs/ff.c **** 	pb->buf[i++] = (BYTE)c;
6633:..\..\FatFs/ff.c **** #endif
6634:..\..\FatFs/ff.c **** 
6635:..\..\FatFs/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
6636:..\..\FatFs/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &n);
6637:..\..\FatFs/ff.c **** 		i = (n == (UINT)i) ? 0 : -1;
6638:..\..\FatFs/ff.c **** 	}
6639:..\..\FatFs/ff.c **** 	pb->idx = i;
6640:..\..\FatFs/ff.c **** 	pb->nchr = nc + 1;
6641:..\..\FatFs/ff.c **** }
6642:..\..\FatFs/ff.c **** 
6643:..\..\FatFs/ff.c **** 
6644:..\..\FatFs/ff.c **** /* Flush remaining characters in the buffer */
6645:..\..\FatFs/ff.c **** 
6646:..\..\FatFs/ff.c **** static int putc_flush (putbuff* pb)
6647:..\..\FatFs/ff.c **** {
6648:..\..\FatFs/ff.c **** 	UINT nw;
6649:..\..\FatFs/ff.c **** 
6650:..\..\FatFs/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
6651:..\..\FatFs/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
6652:..\..\FatFs/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
6653:..\..\FatFs/ff.c **** 	return EOF;
6654:..\..\FatFs/ff.c **** }
6655:..\..\FatFs/ff.c **** 
6656:..\..\FatFs/ff.c **** 
6657:..\..\FatFs/ff.c **** /* Initialize write buffer */
6658:..\..\FatFs/ff.c **** 
6659:..\..\FatFs/ff.c **** static void putc_init (putbuff* pb, FIL* fp)
6660:..\..\FatFs/ff.c **** {
 1046              		.loc 1 6660 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              	.LVL162:
 1051 0000 38B5     		push	{r3, r4, r5, lr}
 1052              		.cfi_def_cfa_offset 16
 1053              		.cfi_offset 3, -16
 1054              		.cfi_offset 4, -12
 1055              		.cfi_offset 5, -8
 1056              		.cfi_offset 14, -4
 1057 0002 0446     		mov	r4, r0
 1058 0004 0D46     		mov	r5, r1
6661:..\..\FatFs/ff.c **** 	mem_set(pb, 0, sizeof (putbuff));
 1059              		.loc 1 6661 0
 1060 0006 4C22     		movs	r2, #76
 1061 0008 0021     		movs	r1, #0
 1062              	.LVL163:
 1063 000a FFF7FEFF 		bl	mem_set
 1064              	.LVL164:
6662:..\..\FatFs/ff.c **** 	pb->fp = fp;
 1065              		.loc 1 6662 0
 1066 000e 2560     		str	r5, [r4]
 1067 0010 38BD     		pop	{r3, r4, r5, pc}
 1068              		.cfi_endproc
 1069              	.LFE59:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 137


 1070              		.size	putc_init, .-putc_init
 1071 0012 00BF     		.section	.text.validate,"ax",%progbits
 1072              		.align	2
 1073              		.thumb
 1074              		.thumb_func
 1075              		.type	validate, %function
 1076              	validate:
 1077              	.LFB35:
3603:..\..\FatFs/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 1078              		.loc 1 3603 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              	.LVL165:
 1083 0000 38B5     		push	{r3, r4, r5, lr}
 1084              		.cfi_def_cfa_offset 16
 1085              		.cfi_offset 3, -16
 1086              		.cfi_offset 4, -12
 1087              		.cfi_offset 5, -8
 1088              		.cfi_offset 14, -4
 1089 0002 0D46     		mov	r5, r1
 1090              	.LVL166:
3607:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1091              		.loc 1 3607 0
 1092 0004 0446     		mov	r4, r0
 1093 0006 78B1     		cbz	r0, .L100
3607:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1094              		.loc 1 3607 0 is_stmt 0 discriminator 1
 1095 0008 0368     		ldr	r3, [r0]
 1096 000a 7BB1     		cbz	r3, .L101
3607:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1097              		.loc 1 3607 0 discriminator 2
 1098 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1099 000e 7AB1     		cbz	r2, .L102
3607:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1100              		.loc 1 3607 0 discriminator 3
 1101 0010 8188     		ldrh	r1, [r0, #4]
 1102              	.LVL167:
 1103 0012 DA88     		ldrh	r2, [r3, #6]
 1104 0014 9142     		cmp	r1, r2
 1105 0016 0DD1     		bne	.L103
3619:..\..\FatFs/ff.c **** 			res = FR_OK;
 1106              		.loc 1 3619 0 is_stmt 1
 1107 0018 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1108              	.LVL168:
 1109 001a FFF7FEFF 		bl	disk_status
 1110              	.LVL169:
 1111 001e 10F0010F 		tst	r0, #1
 1112 0022 09D0     		beq	.L104
3604:..\..\FatFs/ff.c **** 
 1113              		.loc 1 3604 0
 1114 0024 0920     		movs	r0, #9
 1115 0026 08E0     		b	.L98
 1116              	.LVL170:
 1117              	.L100:
 1118 0028 0920     		movs	r0, #9
 1119              	.LVL171:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 138


 1120 002a 06E0     		b	.L98
 1121              	.LVL172:
 1122              	.L101:
 1123 002c 0920     		movs	r0, #9
 1124              	.LVL173:
 1125 002e 04E0     		b	.L98
 1126              	.LVL174:
 1127              	.L102:
 1128 0030 0920     		movs	r0, #9
 1129              	.LVL175:
 1130 0032 02E0     		b	.L98
 1131              	.LVL176:
 1132              	.L103:
 1133 0034 0920     		movs	r0, #9
 1134              	.LVL177:
 1135 0036 00E0     		b	.L98
 1136              	.L104:
3620:..\..\FatFs/ff.c **** 		}
 1137              		.loc 1 3620 0
 1138 0038 0020     		movs	r0, #0
 1139              	.L98:
 1140              	.LVL178:
3624:..\..\FatFs/ff.c **** 	return res;
 1141              		.loc 1 3624 0
 1142 003a 08B9     		cbnz	r0, .L105
3624:..\..\FatFs/ff.c **** 	return res;
 1143              		.loc 1 3624 0 is_stmt 0 discriminator 1
 1144 003c 2368     		ldr	r3, [r4]
 1145 003e 00E0     		b	.L99
 1146              	.L105:
3624:..\..\FatFs/ff.c **** 	return res;
 1147              		.loc 1 3624 0
 1148 0040 0023     		movs	r3, #0
 1149              	.L99:
3624:..\..\FatFs/ff.c **** 	return res;
 1150              		.loc 1 3624 0 discriminator 4
 1151 0042 2B60     		str	r3, [r5]
3626:..\..\FatFs/ff.c **** 
 1152              		.loc 1 3626 0 is_stmt 1 discriminator 4
 1153 0044 38BD     		pop	{r3, r4, r5, pc}
 1154              		.cfi_endproc
 1155              	.LFE35:
 1156              		.size	validate, .-validate
 1157 0046 00BF     		.section	.text.sync_window,"ax",%progbits
 1158              		.align	2
 1159              		.thumb
 1160              		.thumb_func
 1161              		.type	sync_window, %function
 1162              	sync_window:
 1163              	.LFB10:
1075:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
 1164              		.loc 1 1075 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 0
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              	.LVL179:
 1169 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 139


 1170              		.cfi_def_cfa_offset 16
 1171              		.cfi_offset 3, -16
 1172              		.cfi_offset 4, -12
 1173              		.cfi_offset 5, -8
 1174              		.cfi_offset 14, -4
 1175              	.LVL180:
1079:..\..\FatFs/ff.c **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 1176              		.loc 1 1079 0
 1177 0002 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 1178 0004 E3B1     		cbz	r3, .L109
 1179 0006 0446     		mov	r4, r0
1080:..\..\FatFs/ff.c **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1180              		.loc 1 1080 0
 1181 0008 00F13405 		add	r5, r0, #52
 1182 000c 0123     		movs	r3, #1
 1183 000e 026B     		ldr	r2, [r0, #48]
 1184 0010 2946     		mov	r1, r5
 1185 0012 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1186              	.LVL181:
 1187 0014 FFF7FEFF 		bl	disk_write
 1188              	.LVL182:
 1189 0018 A0B9     		cbnz	r0, .L110
1081:..\..\FatFs/ff.c **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1190              		.loc 1 1081 0
 1191 001a 0023     		movs	r3, #0
 1192 001c E370     		strb	r3, [r4, #3]
1082:..\..\FatFs/ff.c **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1193              		.loc 1 1082 0
 1194 001e 216B     		ldr	r1, [r4, #48]
 1195 0020 636A     		ldr	r3, [r4, #36]
 1196 0022 CB1A     		subs	r3, r1, r3
 1197 0024 E269     		ldr	r2, [r4, #28]
 1198 0026 9342     		cmp	r3, r2
 1199 0028 0ED2     		bcs	.L111
1083:..\..\FatFs/ff.c **** 			}
 1200              		.loc 1 1083 0
 1201 002a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1202 002c 022B     		cmp	r3, #2
 1203 002e 0DD1     		bne	.L112
1083:..\..\FatFs/ff.c **** 			}
 1204              		.loc 1 1083 0 is_stmt 0 discriminator 1
 1205 0030 0123     		movs	r3, #1
 1206 0032 0A44     		add	r2, r2, r1
 1207 0034 2946     		mov	r1, r5
 1208 0036 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1209 0038 FFF7FEFF 		bl	disk_write
 1210              	.LVL183:
1076:..\..\FatFs/ff.c **** 
 1211              		.loc 1 1076 0 is_stmt 1 discriminator 1
 1212 003c 0020     		movs	r0, #0
 1213 003e 38BD     		pop	{r3, r4, r5, pc}
 1214              	.LVL184:
 1215              	.L109:
1076:..\..\FatFs/ff.c **** 
 1216              		.loc 1 1076 0 is_stmt 0
 1217 0040 0020     		movs	r0, #0
 1218              	.LVL185:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 140


 1219 0042 38BD     		pop	{r3, r4, r5, pc}
 1220              	.LVL186:
 1221              	.L110:
1086:..\..\FatFs/ff.c **** 		}
 1222              		.loc 1 1086 0 is_stmt 1
 1223 0044 0120     		movs	r0, #1
 1224 0046 38BD     		pop	{r3, r4, r5, pc}
 1225              	.LVL187:
 1226              	.L111:
1076:..\..\FatFs/ff.c **** 
 1227              		.loc 1 1076 0
 1228 0048 0020     		movs	r0, #0
 1229 004a 38BD     		pop	{r3, r4, r5, pc}
 1230              	.LVL188:
 1231              	.L112:
 1232 004c 0020     		movs	r0, #0
 1233              	.LVL189:
1090:..\..\FatFs/ff.c **** #endif
 1234              		.loc 1 1090 0
 1235 004e 38BD     		pop	{r3, r4, r5, pc}
 1236              		.cfi_endproc
 1237              	.LFE10:
 1238              		.size	sync_window, .-sync_window
 1239              		.section	.text.move_window,"ax",%progbits
 1240              		.align	2
 1241              		.thumb
 1242              		.thumb_func
 1243              		.type	move_window, %function
 1244              	move_window:
 1245              	.LFB11:
1098:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
 1246              		.loc 1 1098 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 1250              	.LVL190:
 1251 0000 70B5     		push	{r4, r5, r6, lr}
 1252              		.cfi_def_cfa_offset 16
 1253              		.cfi_offset 4, -16
 1254              		.cfi_offset 5, -12
 1255              		.cfi_offset 6, -8
 1256              		.cfi_offset 14, -4
 1257              	.LVL191:
1102:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 1258              		.loc 1 1102 0
 1259 0002 036B     		ldr	r3, [r0, #48]
 1260 0004 8B42     		cmp	r3, r1
 1261 0006 12D0     		beq	.L117
 1262 0008 0446     		mov	r4, r0
 1263 000a 0D46     		mov	r5, r1
1104:..\..\FatFs/ff.c **** #endif
 1264              		.loc 1 1104 0
 1265 000c FFF7FEFF 		bl	sync_window
 1266              	.LVL192:
1106:..\..\FatFs/ff.c **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 1267              		.loc 1 1106 0
 1268 0010 0646     		mov	r6, r0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 141


 1269 0012 68B9     		cbnz	r0, .L115
1107:..\..\FatFs/ff.c **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1270              		.loc 1 1107 0
 1271 0014 0123     		movs	r3, #1
 1272 0016 2A46     		mov	r2, r5
 1273 0018 04F13401 		add	r1, r4, #52
 1274 001c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1275              	.LVL193:
 1276 001e FFF7FEFF 		bl	disk_read
 1277              	.LVL194:
 1278 0022 10B1     		cbz	r0, .L116
1109:..\..\FatFs/ff.c **** 			}
 1279              		.loc 1 1109 0
 1280 0024 0126     		movs	r6, #1
1108:..\..\FatFs/ff.c **** 				res = FR_DISK_ERR;
 1281              		.loc 1 1108 0
 1282 0026 4FF0FF35 		mov	r5, #-1
 1283              	.LVL195:
 1284              	.L116:
1111:..\..\FatFs/ff.c **** 		}
 1285              		.loc 1 1111 0
 1286 002a 2563     		str	r5, [r4, #48]
 1287 002c 00E0     		b	.L115
 1288              	.LVL196:
 1289              	.L117:
1099:..\..\FatFs/ff.c **** 
 1290              		.loc 1 1099 0
 1291 002e 0026     		movs	r6, #0
 1292              	.LVL197:
 1293              	.L115:
1115:..\..\FatFs/ff.c **** 
 1294              		.loc 1 1115 0
 1295 0030 3046     		mov	r0, r6
 1296 0032 70BD     		pop	{r4, r5, r6, pc}
 1297              		.cfi_endproc
 1298              	.LFE11:
 1299              		.size	move_window, .-move_window
 1300              		.section	.text.check_fs,"ax",%progbits
 1301              		.align	2
 1302              		.thumb
 1303              		.thumb_func
 1304              		.type	check_fs, %function
 1305              	check_fs:
 1306              	.LFB32:
3297:..\..\FatFs/ff.c **** 	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 1307              		.loc 1 3297 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311              	.LVL198:
 1312 0000 10B5     		push	{r4, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 4, -8
 1315              		.cfi_offset 14, -4
 1316 0002 0446     		mov	r4, r0
3298:..\..\FatFs/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 1317              		.loc 1 3298 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 142


 1318 0004 0023     		movs	r3, #0
 1319 0006 C370     		strb	r3, [r0, #3]
 1320 0008 4FF0FF33 		mov	r3, #-1
 1321 000c 0363     		str	r3, [r0, #48]
3299:..\..\FatFs/ff.c **** 
 1322              		.loc 1 3299 0
 1323 000e FFF7FEFF 		bl	move_window
 1324              	.LVL199:
 1325 0012 F0B9     		cbnz	r0, .L123
3301:..\..\FatFs/ff.c **** 
 1326              		.loc 1 3301 0
 1327 0014 04F23220 		addw	r0, r4, #562
 1328 0018 FFF7FEFF 		bl	ld_word
 1329              	.LVL200:
 1330 001c 4AF65523 		movw	r3, #43605
 1331 0020 9842     		cmp	r0, r3
 1332 0022 18D1     		bne	.L124
3305:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 1333              		.loc 1 3305 0
 1334 0024 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1335 0028 E92B     		cmp	r3, #233
 1336 002a 03D0     		beq	.L122
3305:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 1337              		.loc 1 3305 0 is_stmt 0 discriminator 1
 1338 002c EB2B     		cmp	r3, #235
 1339 002e 01D0     		beq	.L122
3305:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 1340              		.loc 1 3305 0 discriminator 2
 1341 0030 E82B     		cmp	r3, #232
 1342 0032 12D1     		bne	.L125
 1343              	.L122:
3306:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 1344              		.loc 1 3306 0 is_stmt 1
 1345 0034 0322     		movs	r2, #3
 1346 0036 0C49     		ldr	r1, .L129
 1347 0038 04F16A00 		add	r0, r4, #106
 1348 003c FFF7FEFF 		bl	mem_cmp
 1349              	.LVL201:
 1350 0040 68B1     		cbz	r0, .L126
3307:..\..\FatFs/ff.c **** 	}
 1351              		.loc 1 3307 0
 1352 0042 0522     		movs	r2, #5
 1353 0044 0949     		ldr	r1, .L129+4
 1354 0046 04F18600 		add	r0, r4, #134
 1355 004a FFF7FEFF 		bl	mem_cmp
 1356              	.LVL202:
 1357 004e 40B9     		cbnz	r0, .L127
 1358 0050 10BD     		pop	{r4, pc}
 1359              	.LVL203:
 1360              	.L123:
3299:..\..\FatFs/ff.c **** 
 1361              		.loc 1 3299 0
 1362 0052 0420     		movs	r0, #4
 1363 0054 10BD     		pop	{r4, pc}
 1364              	.LVL204:
 1365              	.L124:
3301:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 143


 1366              		.loc 1 3301 0
 1367 0056 0320     		movs	r0, #3
 1368 0058 10BD     		pop	{r4, pc}
 1369              	.LVL205:
 1370              	.L125:
3309:..\..\FatFs/ff.c **** }
 1371              		.loc 1 3309 0
 1372 005a 0220     		movs	r0, #2
 1373 005c 10BD     		pop	{r4, pc}
 1374              	.LVL206:
 1375              	.L126:
3306:..\..\FatFs/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 1376              		.loc 1 3306 0
 1377 005e 0020     		movs	r0, #0
 1378 0060 10BD     		pop	{r4, pc}
 1379              	.LVL207:
 1380              	.L127:
3309:..\..\FatFs/ff.c **** }
 1381              		.loc 1 3309 0
 1382 0062 0220     		movs	r0, #2
3310:..\..\FatFs/ff.c **** 
 1383              		.loc 1 3310 0
 1384 0064 10BD     		pop	{r4, pc}
 1385              	.LVL208:
 1386              	.L130:
 1387 0066 00BF     		.align	2
 1388              	.L129:
 1389 0068 10000000 		.word	.LC1
 1390 006c 14000000 		.word	.LC2
 1391              		.cfi_endproc
 1392              	.LFE32:
 1393              		.size	check_fs, .-check_fs
 1394              		.section	.text.find_volume,"ax",%progbits
 1395              		.align	2
 1396              		.thumb
 1397              		.thumb_func
 1398              		.type	find_volume, %function
 1399              	find_volume:
 1400              	.LFB33:
3320:..\..\FatFs/ff.c **** 	UINT fmt, i;
 1401              		.loc 1 3320 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 16
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 1405              	.LVL209:
 1406 0000 70B5     		push	{r4, r5, r6, lr}
 1407              		.cfi_def_cfa_offset 16
 1408              		.cfi_offset 4, -16
 1409              		.cfi_offset 5, -12
 1410              		.cfi_offset 6, -8
 1411              		.cfi_offset 14, -4
 1412 0002 84B0     		sub	sp, sp, #16
 1413              		.cfi_def_cfa_offset 32
 1414 0004 0646     		mov	r6, r0
 1415 0006 0D46     		mov	r5, r1
3325:..\..\FatFs/ff.c **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, n
 1416              		.loc 1 3325 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 144


 1417 0008 0021     		movs	r1, #0
 1418              	.LVL210:
 1419 000a FFF7FEFF 		bl	check_fs
 1420              	.LVL211:
3326:..\..\FatFs/ff.c **** 
 1421              		.loc 1 3326 0
 1422 000e 0228     		cmp	r0, #2
 1423 0010 12D0     		beq	.L138
3326:..\..\FatFs/ff.c **** 
 1424              		.loc 1 3326 0 is_stmt 0 discriminator 1
 1425 0012 29D8     		bhi	.L133
3326:..\..\FatFs/ff.c **** 
 1426              		.loc 1 3326 0 discriminator 3
 1427 0014 45B3     		cbz	r5, .L133
 1428 0016 0024     		movs	r4, #0
 1429 0018 0FE0     		b	.L132
 1430              	.LVL212:
 1431              	.L134:
3354:..\..\FatFs/ff.c **** 	}
 1432              		.loc 1 3354 0 is_stmt 1 discriminator 3
 1433 001a 06F13400 		add	r0, r6, #52
 1434 001e 2301     		lsls	r3, r4, #4
 1435 0020 03F5E373 		add	r3, r3, #454
 1436 0024 1844     		add	r0, r0, r3
 1437 0026 FFF7FEFF 		bl	ld_dword
 1438              	.LVL213:
 1439 002a 04AB     		add	r3, sp, #16
 1440 002c 03EB8403 		add	r3, r3, r4, lsl #2
 1441 0030 43F8100C 		str	r0, [r3, #-16]
3353:..\..\FatFs/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1442              		.loc 1 3353 0 discriminator 3
 1443 0034 0134     		adds	r4, r4, #1
 1444              	.LVL214:
 1445 0036 00E0     		b	.L132
 1446              	.LVL215:
 1447              	.L138:
 1448 0038 0024     		movs	r4, #0
 1449              	.LVL216:
 1450              	.L132:
3353:..\..\FatFs/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1451              		.loc 1 3353 0 is_stmt 0 discriminator 1
 1452 003a 032C     		cmp	r4, #3
 1453 003c EDD9     		bls	.L134
3356:..\..\FatFs/ff.c **** 	do {							/* Find an FAT volume */
 1454              		.loc 1 3356 0 is_stmt 1
 1455 003e 0DB1     		cbz	r5, .L141
3356:..\..\FatFs/ff.c **** 	do {							/* Find an FAT volume */
 1456              		.loc 1 3356 0 is_stmt 0 discriminator 1
 1457 0040 6C1E     		subs	r4, r5, #1
 1458              	.LVL217:
 1459 0042 00E0     		b	.L137
 1460              	.LVL218:
 1461              	.L141:
3356:..\..\FatFs/ff.c **** 	do {							/* Find an FAT volume */
 1462              		.loc 1 3356 0
 1463 0044 0024     		movs	r4, #0
 1464              	.LVL219:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 145


 1465              	.L137:
3358:..\..\FatFs/ff.c **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1466              		.loc 1 3358 0 is_stmt 1
 1467 0046 04AB     		add	r3, sp, #16
 1468 0048 03EB8403 		add	r3, r3, r4, lsl #2
 1469 004c 53F8101C 		ldr	r1, [r3, #-16]
 1470 0050 19B1     		cbz	r1, .L142
3358:..\..\FatFs/ff.c **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1471              		.loc 1 3358 0 is_stmt 0 discriminator 1
 1472 0052 3046     		mov	r0, r6
 1473 0054 FFF7FEFF 		bl	check_fs
 1474              	.LVL220:
 1475 0058 00E0     		b	.L136
 1476              	.L142:
3358:..\..\FatFs/ff.c **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1477              		.loc 1 3358 0
 1478 005a 0320     		movs	r0, #3
 1479              	.L136:
 1480              	.LVL221:
3359:..\..\FatFs/ff.c **** 	return fmt;
 1481              		.loc 1 3359 0 is_stmt 1 discriminator 4
 1482 005c 25B9     		cbnz	r5, .L133
3359:..\..\FatFs/ff.c **** 	return fmt;
 1483              		.loc 1 3359 0 is_stmt 0 discriminator 1
 1484 005e 0128     		cmp	r0, #1
 1485 0060 02D9     		bls	.L133
3359:..\..\FatFs/ff.c **** 	return fmt;
 1486              		.loc 1 3359 0 discriminator 2
 1487 0062 0134     		adds	r4, r4, #1
 1488              	.LVL222:
 1489 0064 032C     		cmp	r4, #3
 1490 0066 EED9     		bls	.L137
 1491              	.LVL223:
 1492              	.L133:
3361:..\..\FatFs/ff.c **** 
 1493              		.loc 1 3361 0 is_stmt 1
 1494 0068 04B0     		add	sp, sp, #16
 1495              		.cfi_def_cfa_offset 16
 1496              		@ sp needed
 1497 006a 70BD     		pop	{r4, r5, r6, pc}
 1498              		.cfi_endproc
 1499              	.LFE33:
 1500              		.size	find_volume, .-find_volume
 1501              		.section	.text.mount_volume,"ax",%progbits
 1502              		.align	2
 1503              		.thumb
 1504              		.thumb_func
 1505              		.type	mount_volume, %function
 1506              	mount_volume:
 1507              	.LFB34:
3375:..\..\FatFs/ff.c **** 	int vol;
 1508              		.loc 1 3375 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              	.LVL224:
 1513 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 146


 1514              		.cfi_def_cfa_offset 32
 1515              		.cfi_offset 4, -32
 1516              		.cfi_offset 5, -28
 1517              		.cfi_offset 6, -24
 1518              		.cfi_offset 7, -20
 1519              		.cfi_offset 8, -16
 1520              		.cfi_offset 9, -12
 1521              		.cfi_offset 10, -8
 1522              		.cfi_offset 14, -4
 1523 0004 0E46     		mov	r6, r1
 1524 0006 1746     		mov	r7, r2
3386:..\..\FatFs/ff.c **** 	vol = get_ldnumber(path);
 1525              		.loc 1 3386 0
 1526 0008 0023     		movs	r3, #0
 1527 000a 0B60     		str	r3, [r1]
3387:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1528              		.loc 1 3387 0
 1529 000c FFF7FEFF 		bl	get_ldnumber
 1530              	.LVL225:
3388:..\..\FatFs/ff.c **** 
 1531              		.loc 1 3388 0
 1532 0010 051E     		subs	r5, r0, #0
 1533 0012 C0F20E81 		blt	.L159
3391:..\..\FatFs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 1534              		.loc 1 3391 0
 1535 0016 A64B     		ldr	r3, .L184
 1536 0018 03EB8503 		add	r3, r3, r5, lsl #2
 1537 001c 5C68     		ldr	r4, [r3, #4]
 1538              	.LVL226:
3392:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1539              		.loc 1 3392 0
 1540 001e 002C     		cmp	r4, #0
 1541 0020 00F00A81 		beq	.L160
3396:..\..\FatFs/ff.c **** 
 1542              		.loc 1 3396 0
 1543 0024 3460     		str	r4, [r6]
3398:..\..\FatFs/ff.c **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 1544              		.loc 1 3398 0
 1545 0026 07F0FE07 		and	r7, r7, #254
 1546              	.LVL227:
3399:..\..\FatFs/ff.c **** 		stat = disk_status(fs->pdrv);
 1547              		.loc 1 3399 0
 1548 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1549 002c 7BB1     		cbz	r3, .L148
3400:..\..\FatFs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1550              		.loc 1 3400 0
 1551 002e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1552              	.LVL228:
 1553 0030 FFF7FEFF 		bl	disk_status
 1554              	.LVL229:
3401:..\..\FatFs/ff.c **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1555              		.loc 1 3401 0
 1556 0034 10F0010F 		tst	r0, #1
 1557 0038 09D1     		bne	.L148
3402:..\..\FatFs/ff.c **** 				return FR_WRITE_PROTECTED;
 1558              		.loc 1 3402 0
 1559 003a 002F     		cmp	r7, #0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 147


 1560 003c 00F0FF80 		beq	.L161
3402:..\..\FatFs/ff.c **** 				return FR_WRITE_PROTECTED;
 1561              		.loc 1 3402 0 is_stmt 0 discriminator 1
 1562 0040 10F0040F 		tst	r0, #4
 1563 0044 40F0FE80 		bne	.L162
3405:..\..\FatFs/ff.c **** 		}
 1564              		.loc 1 3405 0 is_stmt 1
 1565 0048 0020     		movs	r0, #0
 1566              	.LVL230:
 1567 004a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1568              	.LVL231:
 1569              	.L148:
3412:..\..\FatFs/ff.c **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 1570              		.loc 1 3412 0
 1571 004e 0023     		movs	r3, #0
 1572 0050 2370     		strb	r3, [r4]
3413:..\..\FatFs/ff.c **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 1573              		.loc 1 3413 0
 1574 0052 E8B2     		uxtb	r0, r5
 1575 0054 6070     		strb	r0, [r4, #1]
3414:..\..\FatFs/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1576              		.loc 1 3414 0
 1577 0056 FFF7FEFF 		bl	disk_initialize
 1578              	.LVL232:
3415:..\..\FatFs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1579              		.loc 1 3415 0
 1580 005a 10F0010F 		tst	r0, #1
 1581 005e 40F0F480 		bne	.L163
3418:..\..\FatFs/ff.c **** 		return FR_WRITE_PROTECTED;
 1582              		.loc 1 3418 0
 1583 0062 1FB1     		cbz	r7, .L149
3418:..\..\FatFs/ff.c **** 		return FR_WRITE_PROTECTED;
 1584              		.loc 1 3418 0 is_stmt 0 discriminator 1
 1585 0064 10F0040F 		tst	r0, #4
 1586 0068 40F0F280 		bne	.L164
 1587              	.L149:
3427:..\..\FatFs/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 1588              		.loc 1 3427 0 is_stmt 1
 1589 006c 0021     		movs	r1, #0
 1590 006e 2046     		mov	r0, r4
 1591              	.LVL233:
 1592 0070 FFF7FEFF 		bl	find_volume
 1593              	.LVL234:
3428:..\..\FatFs/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1594              		.loc 1 3428 0
 1595 0074 0428     		cmp	r0, #4
 1596 0076 00F0EE80 		beq	.L165
3429:..\..\FatFs/ff.c **** 	bsect = fs->winsect;					/* Volume location */
 1597              		.loc 1 3429 0
 1598 007a 0128     		cmp	r0, #1
 1599 007c 00F2EE80 		bhi	.L166
3430:..\..\FatFs/ff.c **** 
 1600              		.loc 1 3430 0
 1601 0080 266B     		ldr	r6, [r4, #48]
 1602              	.LVL235:
3498:..\..\FatFs/ff.c **** 
 1603              		.loc 1 3498 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 148


 1604 0082 04F13F00 		add	r0, r4, #63
 1605              	.LVL236:
 1606 0086 FFF7FEFF 		bl	ld_word
 1607              	.LVL237:
 1608 008a B0F5007F 		cmp	r0, #512
 1609 008e 40F0E880 		bne	.L167
3500:..\..\FatFs/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1610              		.loc 1 3500 0
 1611 0092 04F14A00 		add	r0, r4, #74
 1612 0096 FFF7FEFF 		bl	ld_word
 1613              	.LVL238:
 1614 009a 8046     		mov	r8, r0
 1615              	.LVL239:
3501:..\..\FatFs/ff.c **** 		fs->fsize = fasize;
 1616              		.loc 1 3501 0
 1617 009c 20B9     		cbnz	r0, .L150
3501:..\..\FatFs/ff.c **** 		fs->fsize = fasize;
 1618              		.loc 1 3501 0 is_stmt 0 discriminator 1
 1619 009e 04F15800 		add	r0, r4, #88
 1620              	.LVL240:
 1621 00a2 FFF7FEFF 		bl	ld_dword
 1622              	.LVL241:
 1623 00a6 8046     		mov	r8, r0
 1624              	.LVL242:
 1625              	.L150:
3502:..\..\FatFs/ff.c **** 
 1626              		.loc 1 3502 0 is_stmt 1
 1627 00a8 C4F81C80 		str	r8, [r4, #28]
3504:..\..\FatFs/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1628              		.loc 1 3504 0
 1629 00ac 94F84490 		ldrb	r9, [r4, #68]	@ zero_extendqisi2
 1630 00b0 84F80290 		strb	r9, [r4, #2]
3505:..\..\FatFs/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1631              		.loc 1 3505 0
 1632 00b4 09F1FF33 		add	r3, r9, #-1
 1633 00b8 DBB2     		uxtb	r3, r3
 1634 00ba 012B     		cmp	r3, #1
 1635 00bc 00F2D480 		bhi	.L168
3506:..\..\FatFs/ff.c **** 
 1636              		.loc 1 3506 0
 1637 00c0 08FB09F9 		mul	r9, r8, r9
 1638              	.LVL243:
3508:..\..\FatFs/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1639              		.loc 1 3508 0
 1640 00c4 94F84150 		ldrb	r5, [r4, #65]	@ zero_extendqisi2
 1641              	.LVL244:
 1642 00c8 6581     		strh	r5, [r4, #10]	@ movhi
3509:..\..\FatFs/ff.c **** 
 1643              		.loc 1 3509 0
 1644 00ca 002D     		cmp	r5, #0
 1645 00cc 00F0CF80 		beq	.L169
3509:..\..\FatFs/ff.c **** 
 1646              		.loc 1 3509 0 is_stmt 0 discriminator 2
 1647 00d0 6B1E     		subs	r3, r5, #1
 1648 00d2 1D42     		tst	r5, r3
 1649 00d4 40F0CE80 		bne	.L170
3511:..\..\FatFs/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 149


 1650              		.loc 1 3511 0 is_stmt 1
 1651 00d8 04F14500 		add	r0, r4, #69
 1652 00dc FFF7FEFF 		bl	ld_word
 1653              	.LVL245:
 1654 00e0 8246     		mov	r10, r0
 1655 00e2 2081     		strh	r0, [r4, #8]	@ movhi
3512:..\..\FatFs/ff.c **** 
 1656              		.loc 1 3512 0
 1657 00e4 10F00F0F 		tst	r0, #15
 1658 00e8 40F0C780 		bne	.L171
3514:..\..\FatFs/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1659              		.loc 1 3514 0
 1660 00ec 04F14700 		add	r0, r4, #71
 1661 00f0 FFF7FEFF 		bl	ld_word
 1662              	.LVL246:
 1663 00f4 0746     		mov	r7, r0
 1664              	.LVL247:
3515:..\..\FatFs/ff.c **** 
 1665              		.loc 1 3515 0
 1666 00f6 20B9     		cbnz	r0, .L151
3515:..\..\FatFs/ff.c **** 
 1667              		.loc 1 3515 0 is_stmt 0 discriminator 1
 1668 00f8 04F15400 		add	r0, r4, #84
 1669              	.LVL248:
 1670 00fc FFF7FEFF 		bl	ld_dword
 1671              	.LVL249:
 1672 0100 0746     		mov	r7, r0
 1673              	.LVL250:
 1674              	.L151:
3517:..\..\FatFs/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1675              		.loc 1 3517 0 is_stmt 1
 1676 0102 04F14200 		add	r0, r4, #66
 1677              	.LVL251:
 1678 0106 FFF7FEFF 		bl	ld_word
 1679              	.LVL252:
3518:..\..\FatFs/ff.c **** 
 1680              		.loc 1 3518 0
 1681 010a 0346     		mov	r3, r0
 1682 010c 0028     		cmp	r0, #0
 1683 010e 00F0B780 		beq	.L172
3521:..\..\FatFs/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 1684              		.loc 1 3521 0
 1685 0112 09EB0002 		add	r2, r9, r0
 1686 0116 02EB1A12 		add	r2, r2, r10, lsr #4
 1687              	.LVL253:
3522:..\..\FatFs/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1688              		.loc 1 3522 0
 1689 011a 9742     		cmp	r7, r2
 1690 011c C0F0B380 		bcc	.L173
3523:..\..\FatFs/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1691              		.loc 1 3523 0
 1692 0120 BF1A     		subs	r7, r7, r2
 1693              	.LVL254:
 1694 0122 B7FBF5F5 		udiv	r5, r7, r5
 1695              	.LVL255:
3524:..\..\FatFs/ff.c **** 		fmt = 0;
 1696              		.loc 1 3524 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 150


 1697 0126 002D     		cmp	r5, #0
 1698 0128 00F0B080 		beq	.L174
 1699              	.LVL256:
3526:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1700              		.loc 1 3526 0
 1701 012c 6149     		ldr	r1, .L184+4
 1702 012e 8D42     		cmp	r5, r1
 1703 0130 01D9     		bls	.L175
3525:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 1704              		.loc 1 3525 0
 1705 0132 0027     		movs	r7, #0
 1706 0134 00E0     		b	.L152
 1707              	.L175:
3526:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1708              		.loc 1 3526 0
 1709 0136 0327     		movs	r7, #3
 1710              	.L152:
 1711              	.LVL257:
3527:..\..\FatFs/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1712              		.loc 1 3527 0
 1713 0138 4FF6F571 		movw	r1, #65525
 1714 013c 8D42     		cmp	r5, r1
 1715 013e 00D8     		bhi	.L153
 1716 0140 0227     		movs	r7, #2
 1717              	.LVL258:
 1718              	.L153:
3528:..\..\FatFs/ff.c **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 1719              		.loc 1 3528 0
 1720 0142 40F6F571 		movw	r1, #4085
 1721 0146 8D42     		cmp	r5, r1
 1722 0148 00D8     		bhi	.L154
 1723 014a 0127     		movs	r7, #1
 1724              	.LVL259:
 1725              	.L154:
3529:..\..\FatFs/ff.c **** 
 1726              		.loc 1 3529 0
 1727 014c 002F     		cmp	r7, #0
 1728 014e 00F0A080 		beq	.L178
3532:..\..\FatFs/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 1729              		.loc 1 3532 0
 1730 0152 0235     		adds	r5, r5, #2
 1731              	.LVL260:
 1732 0154 A561     		str	r5, [r4, #24]
3533:..\..\FatFs/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 1733              		.loc 1 3533 0
 1734 0156 2662     		str	r6, [r4, #32]
3534:..\..\FatFs/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 1735              		.loc 1 3534 0
 1736 0158 3344     		add	r3, r3, r6
 1737 015a 6362     		str	r3, [r4, #36]
3535:..\..\FatFs/ff.c **** 		if (fmt == FS_FAT32) {
 1738              		.loc 1 3535 0
 1739 015c 3244     		add	r2, r2, r6
 1740              	.LVL261:
 1741 015e E262     		str	r2, [r4, #44]
3536:..\..\FatFs/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 1742              		.loc 1 3536 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 151


 1743 0160 032F     		cmp	r7, #3
 1744 0162 11D1     		bne	.L155
3537:..\..\FatFs/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1745              		.loc 1 3537 0
 1746 0164 04F15E00 		add	r0, r4, #94
 1747              	.LVL262:
 1748 0168 FFF7FEFF 		bl	ld_word
 1749              	.LVL263:
 1750 016c 0028     		cmp	r0, #0
 1751 016e 40F09380 		bne	.L179
3538:..\..\FatFs/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1752              		.loc 1 3538 0
 1753 0172 BAF1000F 		cmp	r10, #0
 1754 0176 40F09280 		bne	.L180
3539:..\..\FatFs/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 1755              		.loc 1 3539 0
 1756 017a 04F16000 		add	r0, r4, #96
 1757 017e FFF7FEFF 		bl	ld_dword
 1758              	.LVL264:
 1759 0182 A062     		str	r0, [r4, #40]
3540:..\..\FatFs/ff.c **** 		} else {
 1760              		.loc 1 3540 0
 1761 0184 AD00     		lsls	r5, r5, #2
 1762              	.LVL265:
 1763 0186 0FE0     		b	.L156
 1764              	.LVL266:
 1765              	.L155:
3542:..\..\FatFs/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1766              		.loc 1 3542 0
 1767 0188 BAF1000F 		cmp	r10, #0
 1768 018c 00F08A80 		beq	.L181
3543:..\..\FatFs/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 1769              		.loc 1 3543 0
 1770 0190 4B44     		add	r3, r3, r9
 1771 0192 A362     		str	r3, [r4, #40]
3545:..\..\FatFs/ff.c **** 		}
 1772              		.loc 1 3545 0
 1773 0194 022F     		cmp	r7, #2
 1774 0196 01D1     		bne	.L157
3545:..\..\FatFs/ff.c **** 		}
 1775              		.loc 1 3545 0 is_stmt 0 discriminator 1
 1776 0198 6D00     		lsls	r5, r5, #1
 1777              	.LVL267:
 1778 019a 05E0     		b	.L156
 1779              	.LVL268:
 1780              	.L157:
3545:..\..\FatFs/ff.c **** 		}
 1781              		.loc 1 3545 0 discriminator 2
 1782 019c 05EB4503 		add	r3, r5, r5, lsl #1
 1783 01a0 05F00105 		and	r5, r5, #1
 1784              	.LVL269:
 1785 01a4 05EB5305 		add	r5, r5, r3, lsr #1
 1786              	.LVL270:
 1787              	.L156:
3547:..\..\FatFs/ff.c **** 
 1788              		.loc 1 3547 0 is_stmt 1
 1789 01a8 05F2FF15 		addw	r5, r5, #511
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 152


 1790              	.LVL271:
 1791 01ac B8EB552F 		cmp	r8, r5, lsr #9
 1792 01b0 7BD3     		bcc	.L182
3551:..\..\FatFs/ff.c **** 		fs->fsi_flag = 0x80;
 1793              		.loc 1 3551 0
 1794 01b2 4FF0FF33 		mov	r3, #-1
 1795 01b6 2361     		str	r3, [r4, #16]
 1796 01b8 E360     		str	r3, [r4, #12]
3552:..\..\FatFs/ff.c **** #if (FF_FS_NOFSINFO & 3) != 3
 1797              		.loc 1 3552 0
 1798 01ba 8023     		movs	r3, #128
 1799 01bc 2371     		strb	r3, [r4, #4]
3554:..\..\FatFs/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 1800              		.loc 1 3554 0
 1801 01be 032F     		cmp	r7, #3
 1802 01c0 2CD1     		bne	.L158
3555:..\..\FatFs/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 1803              		.loc 1 3555 0
 1804 01c2 04F16400 		add	r0, r4, #100
 1805 01c6 FFF7FEFF 		bl	ld_word
 1806              	.LVL272:
 1807 01ca 0128     		cmp	r0, #1
 1808 01cc 26D1     		bne	.L158
3556:..\..\FatFs/ff.c **** 		{
 1809              		.loc 1 3556 0
 1810 01ce 711C     		adds	r1, r6, #1
 1811 01d0 2046     		mov	r0, r4
 1812 01d2 FFF7FEFF 		bl	move_window
 1813              	.LVL273:
 1814 01d6 08BB     		cbnz	r0, .L158
3558:..\..\FatFs/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 1815              		.loc 1 3558 0
 1816 01d8 0023     		movs	r3, #0
 1817 01da 2371     		strb	r3, [r4, #4]
3559:..\..\FatFs/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 1818              		.loc 1 3559 0
 1819 01dc 04F23220 		addw	r0, r4, #562
 1820 01e0 FFF7FEFF 		bl	ld_word
 1821              	.LVL274:
 1822 01e4 4AF65523 		movw	r3, #43605
 1823 01e8 9842     		cmp	r0, r3
 1824 01ea 17D1     		bne	.L158
3560:..\..\FatFs/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 1825              		.loc 1 3560 0
 1826 01ec 04F13400 		add	r0, r4, #52
 1827 01f0 FFF7FEFF 		bl	ld_dword
 1828              	.LVL275:
 1829 01f4 304B     		ldr	r3, .L184+8
 1830 01f6 9842     		cmp	r0, r3
 1831 01f8 10D1     		bne	.L158
3561:..\..\FatFs/ff.c **** 			{
 1832              		.loc 1 3561 0
 1833 01fa 04F50670 		add	r0, r4, #536
 1834 01fe FFF7FEFF 		bl	ld_dword
 1835              	.LVL276:
 1836 0202 2E4B     		ldr	r3, .L184+12
 1837 0204 9842     		cmp	r0, r3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 153


 1838 0206 09D1     		bne	.L158
3564:..\..\FatFs/ff.c **** #endif
 1839              		.loc 1 3564 0
 1840 0208 04F50770 		add	r0, r4, #540
 1841 020c FFF7FEFF 		bl	ld_dword
 1842              	.LVL277:
 1843 0210 2061     		str	r0, [r4, #16]
3567:..\..\FatFs/ff.c **** #endif
 1844              		.loc 1 3567 0
 1845 0212 04F50870 		add	r0, r4, #544
 1846 0216 FFF7FEFF 		bl	ld_dword
 1847              	.LVL278:
 1848 021a E060     		str	r0, [r4, #12]
 1849              	.L158:
3575:..\..\FatFs/ff.c **** 	fs->id = ++Fsid;		/* Volume mount ID */
 1850              		.loc 1 3575 0
 1851 021c 2770     		strb	r7, [r4]
3576:..\..\FatFs/ff.c **** #if FF_USE_LFN == 1
 1852              		.loc 1 3576 0
 1853 021e 244A     		ldr	r2, .L184
 1854 0220 1389     		ldrh	r3, [r2, #8]
 1855 0222 0133     		adds	r3, r3, #1
 1856 0224 9BB2     		uxth	r3, r3
 1857 0226 1381     		strh	r3, [r2, #8]	@ movhi
 1858 0228 E380     		strh	r3, [r4, #6]	@ movhi
3584:..\..\FatFs/ff.c **** #endif
 1859              		.loc 1 3584 0
 1860 022a 0020     		movs	r0, #0
 1861 022c 6061     		str	r0, [r4, #20]
3589:..\..\FatFs/ff.c **** }
 1862              		.loc 1 3589 0
 1863 022e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1864              	.LVL279:
 1865              	.L159:
3388:..\..\FatFs/ff.c **** 
 1866              		.loc 1 3388 0
 1867 0232 0B20     		movs	r0, #11
 1868              	.LVL280:
 1869 0234 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1870              	.LVL281:
 1871              	.L160:
3392:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT
 1872              		.loc 1 3392 0
 1873 0238 0C20     		movs	r0, #12
 1874              	.LVL282:
 1875 023a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1876              	.LVL283:
 1877              	.L161:
3405:..\..\FatFs/ff.c **** 		}
 1878              		.loc 1 3405 0
 1879 023e 0020     		movs	r0, #0
 1880              	.LVL284:
 1881 0240 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1882              	.LVL285:
 1883              	.L162:
3403:..\..\FatFs/ff.c **** 			}
 1884              		.loc 1 3403 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 154


 1885 0244 0A20     		movs	r0, #10
 1886              	.LVL286:
 1887 0246 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1888              	.LVL287:
 1889              	.L163:
3416:..\..\FatFs/ff.c **** 	}
 1890              		.loc 1 3416 0
 1891 024a 0320     		movs	r0, #3
 1892              	.LVL288:
 1893 024c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1894              	.LVL289:
 1895              	.L164:
3419:..\..\FatFs/ff.c **** 	}
 1896              		.loc 1 3419 0
 1897 0250 0A20     		movs	r0, #10
 1898              	.LVL290:
 1899 0252 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1900              	.LVL291:
 1901              	.L165:
3428:..\..\FatFs/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1902              		.loc 1 3428 0
 1903 0256 0120     		movs	r0, #1
 1904              	.LVL292:
 1905 0258 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1906              	.LVL293:
 1907              	.L166:
3429:..\..\FatFs/ff.c **** 	bsect = fs->winsect;					/* Volume location */
 1908              		.loc 1 3429 0
 1909 025c 0D20     		movs	r0, #13
 1910              	.LVL294:
 1911 025e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1912              	.LVL295:
 1913              	.L167:
3498:..\..\FatFs/ff.c **** 
 1914              		.loc 1 3498 0
 1915 0262 0D20     		movs	r0, #13
 1916 0264 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1917              	.LVL296:
 1918              	.L168:
3505:..\..\FatFs/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1919              		.loc 1 3505 0
 1920 0268 0D20     		movs	r0, #13
 1921              	.LVL297:
 1922 026a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1923              	.LVL298:
 1924              	.L169:
3509:..\..\FatFs/ff.c **** 
 1925              		.loc 1 3509 0
 1926 026e 0D20     		movs	r0, #13
 1927 0270 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1928              	.LVL299:
 1929              	.L170:
 1930 0274 0D20     		movs	r0, #13
 1931 0276 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1932              	.LVL300:
 1933              	.L171:
3512:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 155


 1934              		.loc 1 3512 0
 1935 027a 0D20     		movs	r0, #13
 1936 027c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1937              	.LVL301:
 1938              	.L172:
3518:..\..\FatFs/ff.c **** 
 1939              		.loc 1 3518 0
 1940 0280 0D20     		movs	r0, #13
 1941              	.LVL302:
 1942 0282 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1943              	.LVL303:
 1944              	.L173:
3522:..\..\FatFs/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1945              		.loc 1 3522 0
 1946 0286 0D20     		movs	r0, #13
 1947              	.LVL304:
 1948 0288 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1949              	.LVL305:
 1950              	.L174:
3524:..\..\FatFs/ff.c **** 		fmt = 0;
 1951              		.loc 1 3524 0
 1952 028c 0D20     		movs	r0, #13
 1953              	.LVL306:
 1954 028e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1955              	.LVL307:
 1956              	.L178:
3529:..\..\FatFs/ff.c **** 
 1957              		.loc 1 3529 0
 1958 0292 0D20     		movs	r0, #13
 1959              	.LVL308:
 1960 0294 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1961              	.LVL309:
 1962              	.L179:
3537:..\..\FatFs/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1963              		.loc 1 3537 0
 1964 0298 0D20     		movs	r0, #13
 1965 029a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1966              	.LVL310:
 1967              	.L180:
3538:..\..\FatFs/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1968              		.loc 1 3538 0
 1969 029e 0D20     		movs	r0, #13
 1970 02a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1971              	.LVL311:
 1972              	.L181:
3542:..\..\FatFs/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1973              		.loc 1 3542 0
 1974 02a4 0D20     		movs	r0, #13
 1975              	.LVL312:
 1976 02a6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1977              	.LVL313:
 1978              	.L182:
3547:..\..\FatFs/ff.c **** 
 1979              		.loc 1 3547 0
 1980 02aa 0D20     		movs	r0, #13
3590:..\..\FatFs/ff.c **** 
 1981              		.loc 1 3590 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 156


 1982 02ac BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1983              	.LVL314:
 1984              	.L185:
 1985              		.align	2
 1986              	.L184:
 1987 02b0 00000000 		.word	.LANCHOR0
 1988 02b4 F5FFFF0F 		.word	268435445
 1989 02b8 52526141 		.word	1096897106
 1990 02bc 72724161 		.word	1631679090
 1991              		.cfi_endproc
 1992              	.LFE34:
 1993              		.size	mount_volume, .-mount_volume
 1994              		.section	.text.put_fat,"ax",%progbits
 1995              		.align	2
 1996              		.thumb
 1997              		.thumb_func
 1998              		.type	put_fat, %function
 1999              	put_fat:
 2000              	.LFB15:
1261:..\..\FatFs/ff.c **** 	UINT bc;
 2001              		.loc 1 1261 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 0, uses_anonymous_args = 0
 2005              	.LVL315:
 2006 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2007              		.cfi_def_cfa_offset 32
 2008              		.cfi_offset 4, -32
 2009              		.cfi_offset 5, -28
 2010              		.cfi_offset 6, -24
 2011              		.cfi_offset 7, -20
 2012              		.cfi_offset 8, -16
 2013              		.cfi_offset 9, -12
 2014              		.cfi_offset 10, -8
 2015              		.cfi_offset 14, -4
 2016              	.LVL316:
1267:..\..\FatFs/ff.c **** 		switch (fs->fs_type) {
 2017              		.loc 1 1267 0
 2018 0004 0129     		cmp	r1, #1
 2019 0006 75D9     		bls	.L195
1267:..\..\FatFs/ff.c **** 		switch (fs->fs_type) {
 2020              		.loc 1 1267 0 is_stmt 0 discriminator 1
 2021 0008 8369     		ldr	r3, [r0, #24]
 2022 000a 9942     		cmp	r1, r3
 2023 000c 74D2     		bcs	.L196
 2024 000e 1746     		mov	r7, r2
 2025 0010 0C46     		mov	r4, r1
 2026 0012 0646     		mov	r6, r0
1268:..\..\FatFs/ff.c **** 		case FS_FAT12 :
 2027              		.loc 1 1268 0 is_stmt 1
 2028 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2029 0016 022B     		cmp	r3, #2
 2030 0018 3ED0     		beq	.L188
 2031 001a 032B     		cmp	r3, #3
 2032 001c 4FD0     		beq	.L189
 2033 001e 012B     		cmp	r3, #1
 2034 0020 6CD1     		bne	.L198
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 157


 2035              	.LVL317:
1270:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2036              		.loc 1 1270 0
 2037 0022 01EB5108 		add	r8, r1, r1, lsr #1
 2038              	.LVL318:
1271:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 2039              		.loc 1 1271 0
 2040 0026 416A     		ldr	r1, [r0, #36]
 2041              	.LVL319:
 2042 0028 01EB5821 		add	r1, r1, r8, lsr #9
 2043 002c FFF7FEFF 		bl	move_window
 2044              	.LVL320:
1272:..\..\FatFs/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2045              		.loc 1 1272 0
 2046 0030 0546     		mov	r5, r0
 2047 0032 0028     		cmp	r0, #0
 2048 0034 63D1     		bne	.L187
1273:..\..\FatFs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 2049              		.loc 1 1273 0
 2050 0036 06F1340A 		add	r10, r6, #52
 2051 003a 08F10109 		add	r9, r8, #1
 2052              	.LVL321:
 2053 003e C8F30808 		ubfx	r8, r8, #0, #9
 2054              	.LVL322:
1274:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2055              		.loc 1 1274 0
 2056 0042 14F00104 		ands	r4, r4, #1
 2057              	.LVL323:
 2058 0046 07D0     		beq	.L191
1274:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2059              		.loc 1 1274 0 is_stmt 0 discriminator 1
 2060 0048 1AF80830 		ldrb	r3, [r10, r8]	@ zero_extendqisi2
 2061 004c 03F00F03 		and	r3, r3, #15
 2062 0050 43EA0713 		orr	r3, r3, r7, lsl #4
 2063 0054 DBB2     		uxtb	r3, r3
 2064 0056 00E0     		b	.L192
 2065              	.L191:
1274:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2066              		.loc 1 1274 0 discriminator 2
 2067 0058 FBB2     		uxtb	r3, r7
 2068              	.L192:
1274:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2069              		.loc 1 1274 0 discriminator 4
 2070 005a 0AF80830 		strb	r3, [r10, r8]
1275:..\..\FatFs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2071              		.loc 1 1275 0 is_stmt 1 discriminator 4
 2072 005e 0123     		movs	r3, #1
 2073 0060 F370     		strb	r3, [r6, #3]
1276:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 2074              		.loc 1 1276 0 discriminator 4
 2075 0062 716A     		ldr	r1, [r6, #36]
 2076 0064 01EB5921 		add	r1, r1, r9, lsr #9
 2077 0068 3046     		mov	r0, r6
 2078              	.LVL324:
 2079 006a FFF7FEFF 		bl	move_window
 2080              	.LVL325:
1277:..\..\FatFs/ff.c **** 			p = fs->win + bc % SS(fs);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 158


 2081              		.loc 1 1277 0 discriminator 4
 2082 006e 0546     		mov	r5, r0
 2083 0070 0028     		cmp	r0, #0
 2084 0072 44D1     		bne	.L187
1278:..\..\FatFs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
 2085              		.loc 1 1278 0
 2086 0074 C9F30809 		ubfx	r9, r9, #0, #9
 2087              	.LVL326:
1279:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2088              		.loc 1 1279 0
 2089 0078 14B1     		cbz	r4, .L193
1279:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2090              		.loc 1 1279 0 is_stmt 0 discriminator 1
 2091 007a C7F30712 		ubfx	r2, r7, #4, #8
 2092 007e 06E0     		b	.L194
 2093              	.L193:
1279:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2094              		.loc 1 1279 0 discriminator 2
 2095 0080 1AF80930 		ldrb	r3, [r10, r9]	@ zero_extendqisi2
 2096 0084 23F00F03 		bic	r3, r3, #15
 2097 0088 C7F30322 		ubfx	r2, r7, #8, #4
 2098 008c 1A43     		orrs	r2, r2, r3
 2099              	.L194:
1279:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2100              		.loc 1 1279 0 discriminator 4
 2101 008e 0AF80920 		strb	r2, [r10, r9]
1280:..\..\FatFs/ff.c **** 			break;
 2102              		.loc 1 1280 0 is_stmt 1 discriminator 4
 2103 0092 0123     		movs	r3, #1
 2104 0094 F370     		strb	r3, [r6, #3]
1281:..\..\FatFs/ff.c **** 
 2105              		.loc 1 1281 0 discriminator 4
 2106 0096 32E0     		b	.L187
 2107              	.LVL327:
 2108              	.L188:
1284:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 2109              		.loc 1 1284 0
 2110 0098 416A     		ldr	r1, [r0, #36]
 2111              	.LVL328:
 2112 009a 01EB1421 		add	r1, r1, r4, lsr #8
 2113 009e FFF7FEFF 		bl	move_window
 2114              	.LVL329:
1285:..\..\FatFs/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2115              		.loc 1 1285 0
 2116 00a2 0546     		mov	r5, r0
 2117 00a4 58BB     		cbnz	r0, .L187
1286:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2118              		.loc 1 1286 0
 2119 00a6 06F13400 		add	r0, r6, #52
 2120              	.LVL330:
 2121 00aa 6300     		lsls	r3, r4, #1
 2122 00ac 03F4FF73 		and	r3, r3, #510
 2123 00b0 B9B2     		uxth	r1, r7
 2124 00b2 1844     		add	r0, r0, r3
 2125 00b4 FFF7FEFF 		bl	st_word
 2126              	.LVL331:
1287:..\..\FatFs/ff.c **** 			break;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 159


 2127              		.loc 1 1287 0
 2128 00b8 0123     		movs	r3, #1
 2129 00ba F370     		strb	r3, [r6, #3]
1288:..\..\FatFs/ff.c **** 
 2130              		.loc 1 1288 0
 2131 00bc 1FE0     		b	.L187
 2132              	.LVL332:
 2133              	.L189:
1294:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 2134              		.loc 1 1294 0
 2135 00be 416A     		ldr	r1, [r0, #36]
 2136              	.LVL333:
 2137 00c0 01EBD411 		add	r1, r1, r4, lsr #7
 2138 00c4 FFF7FEFF 		bl	move_window
 2139              	.LVL334:
1295:..\..\FatFs/ff.c **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2140              		.loc 1 1295 0
 2141 00c8 0546     		mov	r5, r0
 2142 00ca C0B9     		cbnz	r0, .L187
1297:..\..\FatFs/ff.c **** 			}
 2143              		.loc 1 1297 0
 2144 00cc 27F07047 		bic	r7, r7, #-268435456
 2145              	.LVL335:
 2146 00d0 06F13403 		add	r3, r6, #52
 2147 00d4 A100     		lsls	r1, r4, #2
 2148 00d6 01F4FE71 		and	r1, r1, #508
 2149 00da 5C18     		adds	r4, r3, r1
 2150              	.LVL336:
 2151 00dc 2046     		mov	r0, r4
 2152              	.LVL337:
 2153 00de FFF7FEFF 		bl	ld_dword
 2154              	.LVL338:
 2155 00e2 00F07041 		and	r1, r0, #-268435456
 2156              	.LVL339:
1299:..\..\FatFs/ff.c **** 			fs->wflag = 1;
 2157              		.loc 1 1299 0
 2158 00e6 3943     		orrs	r1, r1, r7
 2159              	.LVL340:
 2160 00e8 2046     		mov	r0, r4
 2161 00ea FFF7FEFF 		bl	st_dword
 2162              	.LVL341:
1300:..\..\FatFs/ff.c **** 			break;
 2163              		.loc 1 1300 0
 2164 00ee 0123     		movs	r3, #1
 2165 00f0 F370     		strb	r3, [r6, #3]
1301:..\..\FatFs/ff.c **** 		}
 2166              		.loc 1 1301 0
 2167 00f2 04E0     		b	.L187
 2168              	.LVL342:
 2169              	.L195:
1264:..\..\FatFs/ff.c **** 
 2170              		.loc 1 1264 0
 2171 00f4 0225     		movs	r5, #2
 2172 00f6 02E0     		b	.L187
 2173              	.L196:
 2174 00f8 0225     		movs	r5, #2
 2175 00fa 00E0     		b	.L187
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 160


 2176              	.L198:
 2177 00fc 0225     		movs	r5, #2
 2178              	.LVL343:
 2179              	.L187:
1305:..\..\FatFs/ff.c **** 
 2180              		.loc 1 1305 0
 2181 00fe 2846     		mov	r0, r5
 2182 0100 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2183              		.cfi_endproc
 2184              	.LFE15:
 2185              		.size	put_fat, .-put_fat
 2186              		.section	.text.get_fat,"ax",%progbits
 2187              		.align	2
 2188              		.thumb
 2189              		.thumb_func
 2190              		.type	get_fat, %function
 2191              	get_fat:
 2192              	.LFB14:
1183:..\..\FatFs/ff.c **** 	UINT wc, bc;
 2193              		.loc 1 1183 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              	.LVL344:
 2198 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2199              		.cfi_def_cfa_offset 24
 2200              		.cfi_offset 3, -24
 2201              		.cfi_offset 4, -20
 2202              		.cfi_offset 5, -16
 2203              		.cfi_offset 6, -12
 2204              		.cfi_offset 7, -8
 2205              		.cfi_offset 14, -4
1186:..\..\FatFs/ff.c **** 
 2206              		.loc 1 1186 0
 2207 0002 0668     		ldr	r6, [r0]
 2208              	.LVL345:
1189:..\..\FatFs/ff.c **** 		val = 1;	/* Internal error */
 2209              		.loc 1 1189 0
 2210 0004 0129     		cmp	r1, #1
 2211 0006 53D9     		bls	.L206
1189:..\..\FatFs/ff.c **** 		val = 1;	/* Internal error */
 2212              		.loc 1 1189 0 is_stmt 0 discriminator 1
 2213 0008 B369     		ldr	r3, [r6, #24]
 2214 000a 9942     		cmp	r1, r3
 2215 000c 52D2     		bcs	.L207
 2216 000e 0C46     		mov	r4, r1
 2217              	.LVL346:
1195:..\..\FatFs/ff.c **** 		case FS_FAT12 :
 2218              		.loc 1 1195 0 is_stmt 1
 2219 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2220 0012 022B     		cmp	r3, #2
 2221 0014 2AD0     		beq	.L202
 2222 0016 032B     		cmp	r3, #3
 2223 0018 38D0     		beq	.L203
 2224 001a 012B     		cmp	r3, #1
 2225 001c 4CD1     		bne	.L213
 2226              	.LVL347:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 161


1197:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2227              		.loc 1 1197 0
 2228 001e 01EB5105 		add	r5, r1, r1, lsr #1
 2229              	.LVL348:
1198:..\..\FatFs/ff.c **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2230              		.loc 1 1198 0
 2231 0022 716A     		ldr	r1, [r6, #36]
 2232              	.LVL349:
 2233 0024 01EB5521 		add	r1, r1, r5, lsr #9
 2234 0028 3046     		mov	r0, r6
 2235              	.LVL350:
 2236 002a FFF7FEFF 		bl	move_window
 2237              	.LVL351:
 2238 002e 0028     		cmp	r0, #0
 2239 0030 44D1     		bne	.L209
1199:..\..\FatFs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2240              		.loc 1 1199 0
 2241 0032 6F1C     		adds	r7, r5, #1
 2242              	.LVL352:
 2243 0034 C5F30805 		ubfx	r5, r5, #0, #9
 2244 0038 3544     		add	r5, r5, r6
 2245 003a 95F83450 		ldrb	r5, [r5, #52]	@ zero_extendqisi2
 2246              	.LVL353:
1200:..\..\FatFs/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2247              		.loc 1 1200 0
 2248 003e 716A     		ldr	r1, [r6, #36]
 2249 0040 01EB5721 		add	r1, r1, r7, lsr #9
 2250 0044 3046     		mov	r0, r6
 2251 0046 FFF7FEFF 		bl	move_window
 2252              	.LVL354:
 2253 004a 0028     		cmp	r0, #0
 2254 004c 39D1     		bne	.L210
1201:..\..\FatFs/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2255              		.loc 1 1201 0
 2256 004e C7F30803 		ubfx	r3, r7, #0, #9
 2257 0052 3344     		add	r3, r3, r6
 2258 0054 93F83400 		ldrb	r0, [r3, #52]	@ zero_extendqisi2
 2259 0058 45EA0020 		orr	r0, r5, r0, lsl #8
 2260              	.LVL355:
1202:..\..\FatFs/ff.c **** 			break;
 2261              		.loc 1 1202 0
 2262 005c 14F0010F 		tst	r4, #1
 2263 0060 01D0     		beq	.L205
1202:..\..\FatFs/ff.c **** 			break;
 2264              		.loc 1 1202 0 is_stmt 0 discriminator 1
 2265 0062 0009     		lsrs	r0, r0, #4
 2266              	.LVL356:
 2267 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2268              	.LVL357:
 2269              	.L205:
1202:..\..\FatFs/ff.c **** 			break;
 2270              		.loc 1 1202 0 discriminator 2
 2271 0066 C0F30B00 		ubfx	r0, r0, #0, #12
 2272              	.LVL358:
 2273 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2274              	.LVL359:
 2275              	.L202:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 162


1206:..\..\FatFs/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2276              		.loc 1 1206 0 is_stmt 1
 2277 006c 716A     		ldr	r1, [r6, #36]
 2278              	.LVL360:
 2279 006e 01EB1421 		add	r1, r1, r4, lsr #8
 2280 0072 3046     		mov	r0, r6
 2281              	.LVL361:
 2282 0074 FFF7FEFF 		bl	move_window
 2283              	.LVL362:
 2284 0078 30BB     		cbnz	r0, .L211
1207:..\..\FatFs/ff.c **** 			break;
 2285              		.loc 1 1207 0
 2286 007a 06F13400 		add	r0, r6, #52
 2287 007e 6100     		lsls	r1, r4, #1
 2288 0080 01F4FF71 		and	r1, r1, #510
 2289 0084 0844     		add	r0, r0, r1
 2290 0086 FFF7FEFF 		bl	ld_word
 2291              	.LVL363:
1208:..\..\FatFs/ff.c **** 
 2292              		.loc 1 1208 0
 2293 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2294              	.LVL364:
 2295              	.L203:
1211:..\..\FatFs/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2296              		.loc 1 1211 0
 2297 008c 716A     		ldr	r1, [r6, #36]
 2298              	.LVL365:
 2299 008e 01EBD411 		add	r1, r1, r4, lsr #7
 2300 0092 3046     		mov	r0, r6
 2301              	.LVL366:
 2302 0094 FFF7FEFF 		bl	move_window
 2303              	.LVL367:
 2304 0098 C8B9     		cbnz	r0, .L212
1212:..\..\FatFs/ff.c **** 			break;
 2305              		.loc 1 1212 0
 2306 009a 06F13403 		add	r3, r6, #52
 2307 009e A100     		lsls	r1, r4, #2
 2308 00a0 01F4FE70 		and	r0, r1, #508
 2309 00a4 1844     		add	r0, r0, r3
 2310 00a6 FFF7FEFF 		bl	ld_dword
 2311              	.LVL368:
 2312 00aa 20F07040 		bic	r0, r0, #-268435456
 2313              	.LVL369:
1213:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 2314              		.loc 1 1213 0
 2315 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2316              	.LVL370:
 2317              	.L206:
1190:..\..\FatFs/ff.c **** 
 2318              		.loc 1 1190 0
 2319 00b0 0120     		movs	r0, #1
 2320              	.LVL371:
 2321 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2322              	.LVL372:
 2323              	.L207:
 2324 00b4 0120     		movs	r0, #1
 2325              	.LVL373:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 163


 2326 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2327              	.LVL374:
 2328              	.L213:
1241:..\..\FatFs/ff.c **** 		}
 2329              		.loc 1 1241 0
 2330 00b8 0120     		movs	r0, #1
 2331              	.LVL375:
 2332 00ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2333              	.LVL376:
 2334              	.L209:
1193:..\..\FatFs/ff.c **** 
 2335              		.loc 1 1193 0
 2336 00bc 4FF0FF30 		mov	r0, #-1
 2337 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2338              	.LVL377:
 2339              	.L210:
 2340 00c2 4FF0FF30 		mov	r0, #-1
 2341 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2342              	.LVL378:
 2343              	.L211:
 2344 00c8 4FF0FF30 		mov	r0, #-1
 2345 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2346              	.LVL379:
 2347              	.L212:
 2348 00ce 4FF0FF30 		mov	r0, #-1
 2349              	.LVL380:
1246:..\..\FatFs/ff.c **** 
 2350              		.loc 1 1246 0
 2351 00d2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2352              		.cfi_endproc
 2353              	.LFE14:
 2354              		.size	get_fat, .-get_fat
 2355              		.section	.text.dir_sdi,"ax",%progbits
 2356              		.align	2
 2357              		.thumb
 2358              		.thumb_func
 2359              		.type	dir_sdi, %function
 2360              	dir_sdi:
 2361              	.LFB19:
1717:..\..\FatFs/ff.c **** 	DWORD csz, clst;
 2362              		.loc 1 1717 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 2366              	.LVL381:
 2367 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2368              		.cfi_def_cfa_offset 24
 2369              		.cfi_offset 4, -24
 2370              		.cfi_offset 5, -20
 2371              		.cfi_offset 6, -16
 2372              		.cfi_offset 7, -12
 2373              		.cfi_offset 8, -8
 2374              		.cfi_offset 14, -4
1719:..\..\FatFs/ff.c **** 
 2375              		.loc 1 1719 0
 2376 0004 0768     		ldr	r7, [r0]
 2377              	.LVL382:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 164


1722:..\..\FatFs/ff.c **** 		return FR_INT_ERR;
 2378              		.loc 1 1722 0
 2379 0006 B1F5001F 		cmp	r1, #2097152
 2380 000a 3DD2     		bcs	.L222
 2381 000c 0646     		mov	r6, r0
 2382 000e 0C46     		mov	r4, r1
1722:..\..\FatFs/ff.c **** 		return FR_INT_ERR;
 2383              		.loc 1 1722 0 is_stmt 0 discriminator 1
 2384 0010 11F01F0F 		tst	r1, #31
 2385 0014 3BD1     		bne	.L223
1725:..\..\FatFs/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2386              		.loc 1 1725 0 is_stmt 1
 2387 0016 3161     		str	r1, [r6, #16]
1726:..\..\FatFs/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2388              		.loc 1 1726 0
 2389 0018 8568     		ldr	r5, [r0, #8]
 2390              	.LVL383:
1727:..\..\FatFs/ff.c **** 		clst = (DWORD)fs->dirbase;
 2391              		.loc 1 1727 0
 2392 001a 1DB9     		cbnz	r5, .L217
1727:..\..\FatFs/ff.c **** 		clst = (DWORD)fs->dirbase;
 2393              		.loc 1 1727 0 is_stmt 0 discriminator 1
 2394 001c 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2395 001e 022B     		cmp	r3, #2
 2396 0020 00D9     		bls	.L217
1728:..\..\FatFs/ff.c **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2397              		.loc 1 1728 0 is_stmt 1
 2398 0022 BD6A     		ldr	r5, [r7, #40]
 2399              	.LVL384:
 2400              	.L217:
1732:..\..\FatFs/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 2401              		.loc 1 1732 0
 2402 0024 35B9     		cbnz	r5, .L218
1733:..\..\FatFs/ff.c **** 		dp->sect = fs->dirbase;
 2403              		.loc 1 1733 0
 2404 0026 3B89     		ldrh	r3, [r7, #8]
 2405 0028 B3EB541F 		cmp	r3, r4, lsr #5
 2406 002c 32D9     		bls	.L224
1734:..\..\FatFs/ff.c **** 
 2407              		.loc 1 1734 0
 2408 002e BB6A     		ldr	r3, [r7, #40]
 2409 0030 B361     		str	r3, [r6, #24]
 2410 0032 1AE0     		b	.L219
 2411              	.L218:
1737:..\..\FatFs/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2412              		.loc 1 1737 0
 2413 0034 B7F80A80 		ldrh	r8, [r7, #10]
 2414 0038 4FEA4828 		lsl	r8, r8, #9
 2415              	.LVL385:
1738:..\..\FatFs/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2416              		.loc 1 1738 0
 2417 003c 0EE0     		b	.L220
 2418              	.LVL386:
 2419              	.L221:
1739:..\..\FatFs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2420              		.loc 1 1739 0
 2421 003e 2946     		mov	r1, r5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 165


 2422 0040 3046     		mov	r0, r6
 2423 0042 FFF7FEFF 		bl	get_fat
 2424              	.LVL387:
 2425 0046 0546     		mov	r5, r0
 2426              	.LVL388:
1740:..\..\FatFs/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2427              		.loc 1 1740 0
 2428 0048 B0F1FF3F 		cmp	r0, #-1
 2429 004c 25D0     		beq	.L225
1741:..\..\FatFs/ff.c **** 			ofs -= csz;
 2430              		.loc 1 1741 0
 2431 004e 0128     		cmp	r0, #1
 2432 0050 26D9     		bls	.L226
1741:..\..\FatFs/ff.c **** 			ofs -= csz;
 2433              		.loc 1 1741 0 is_stmt 0 discriminator 2
 2434 0052 BB69     		ldr	r3, [r7, #24]
 2435 0054 9842     		cmp	r0, r3
 2436 0056 26D2     		bcs	.L227
1742:..\..\FatFs/ff.c **** 		}
 2437              		.loc 1 1742 0 is_stmt 1
 2438 0058 C8EB0404 		rsb	r4, r8, r4
 2439              	.LVL389:
 2440              	.L220:
1738:..\..\FatFs/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2441              		.loc 1 1738 0
 2442 005c 4445     		cmp	r4, r8
 2443 005e EED2     		bcs	.L221
1744:..\..\FatFs/ff.c **** 	}
 2444              		.loc 1 1744 0
 2445 0060 2946     		mov	r1, r5
 2446 0062 3846     		mov	r0, r7
 2447 0064 FFF7FEFF 		bl	clst2sect
 2448              	.LVL390:
 2449 0068 B061     		str	r0, [r6, #24]
 2450              	.LVL391:
 2451              	.L219:
1746:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return FR_INT_ERR;
 2452              		.loc 1 1746 0
 2453 006a 7561     		str	r5, [r6, #20]
1747:..\..\FatFs/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2454              		.loc 1 1747 0
 2455 006c B369     		ldr	r3, [r6, #24]
 2456 006e EBB1     		cbz	r3, .L228
1748:..\..\FatFs/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2457              		.loc 1 1748 0
 2458 0070 03EB5423 		add	r3, r3, r4, lsr #9
 2459 0074 B361     		str	r3, [r6, #24]
1749:..\..\FatFs/ff.c **** 
 2460              		.loc 1 1749 0
 2461 0076 07F13403 		add	r3, r7, #52
 2462 007a C4F30804 		ubfx	r4, r4, #0, #9
 2463              	.LVL392:
 2464 007e 2344     		add	r3, r3, r4
 2465 0080 F361     		str	r3, [r6, #28]
1751:..\..\FatFs/ff.c **** }
 2466              		.loc 1 1751 0
 2467 0082 0020     		movs	r0, #0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 166


 2468 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2469              	.LVL393:
 2470              	.L222:
1723:..\..\FatFs/ff.c **** 	}
 2471              		.loc 1 1723 0
 2472 0088 0220     		movs	r0, #2
 2473              	.LVL394:
 2474 008a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2475              	.LVL395:
 2476              	.L223:
 2477 008e 0220     		movs	r0, #2
 2478              	.LVL396:
 2479 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2480              	.LVL397:
 2481              	.L224:
1733:..\..\FatFs/ff.c **** 		dp->sect = fs->dirbase;
 2482              		.loc 1 1733 0
 2483 0094 0220     		movs	r0, #2
 2484              	.LVL398:
 2485 0096 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2486              	.LVL399:
 2487              	.L225:
1740:..\..\FatFs/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2488              		.loc 1 1740 0
 2489 009a 0120     		movs	r0, #1
 2490              	.LVL400:
 2491 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2492              	.LVL401:
 2493              	.L226:
1741:..\..\FatFs/ff.c **** 			ofs -= csz;
 2494              		.loc 1 1741 0
 2495 00a0 0220     		movs	r0, #2
 2496              	.LVL402:
 2497 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2498              	.LVL403:
 2499              	.L227:
 2500 00a6 0220     		movs	r0, #2
 2501              	.LVL404:
 2502 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2503              	.LVL405:
 2504              	.L228:
1747:..\..\FatFs/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2505              		.loc 1 1747 0
 2506 00ac 0220     		movs	r0, #2
1752:..\..\FatFs/ff.c **** 
 2507              		.loc 1 1752 0
 2508 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2509              		.cfi_endproc
 2510              	.LFE19:
 2511              		.size	dir_sdi, .-dir_sdi
 2512 00b2 00BF     		.section	.text.create_chain,"ax",%progbits
 2513              		.align	2
 2514              		.thumb
 2515              		.thumb_func
 2516              		.type	create_chain, %function
 2517              	create_chain:
 2518              	.LFB17:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 167


1545:..\..\FatFs/ff.c **** 	DWORD cs, ncl, scl;
 2519              		.loc 1 1545 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              	.LVL406:
 2524 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2525              		.cfi_def_cfa_offset 24
 2526              		.cfi_offset 4, -24
 2527              		.cfi_offset 5, -20
 2528              		.cfi_offset 6, -16
 2529              		.cfi_offset 7, -12
 2530              		.cfi_offset 8, -8
 2531              		.cfi_offset 14, -4
 2532 0004 0746     		mov	r7, r0
1548:..\..\FatFs/ff.c **** 
 2533              		.loc 1 1548 0
 2534 0006 0668     		ldr	r6, [r0]
 2535              	.LVL407:
1551:..\..\FatFs/ff.c **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2536              		.loc 1 1551 0
 2537 0008 8846     		mov	r8, r1
 2538 000a 29B9     		cbnz	r1, .L231
1552:..\..\FatFs/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2539              		.loc 1 1552 0
 2540 000c F568     		ldr	r5, [r6, #12]
 2541              	.LVL408:
1553:..\..\FatFs/ff.c **** 	}
 2542              		.loc 1 1553 0
 2543 000e 7DB1     		cbz	r5, .L242
1553:..\..\FatFs/ff.c **** 	}
 2544              		.loc 1 1553 0 is_stmt 0 discriminator 2
 2545 0010 B369     		ldr	r3, [r6, #24]
 2546 0012 9D42     		cmp	r5, r3
 2547 0014 0ED2     		bcs	.L243
 2548 0016 0EE0     		b	.L232
 2549              	.LVL409:
 2550              	.L231:
1556:..\..\FatFs/ff.c **** 		if (cs < 2) return 1;				/* Test for insanity */
 2551              		.loc 1 1556 0 is_stmt 1
 2552 0018 FFF7FEFF 		bl	get_fat
 2553              	.LVL410:
1557:..\..\FatFs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2554              		.loc 1 1557 0
 2555 001c 0128     		cmp	r0, #1
 2556 001e 69D9     		bls	.L244
1558:..\..\FatFs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2557              		.loc 1 1558 0
 2558 0020 B0F1FF3F 		cmp	r0, #-1
 2559 0024 74D0     		beq	.L233
1559:..\..\FatFs/ff.c **** 		scl = clst;							/* Cluster to start to find */
 2560              		.loc 1 1559 0
 2561 0026 B369     		ldr	r3, [r6, #24]
 2562 0028 9842     		cmp	r0, r3
 2563 002a 71D3     		bcc	.L233
1560:..\..\FatFs/ff.c **** 	}
 2564              		.loc 1 1560 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 168


 2565 002c 4546     		mov	r5, r8
 2566 002e 02E0     		b	.L232
 2567              	.LVL411:
 2568              	.L242:
1553:..\..\FatFs/ff.c **** 	}
 2569              		.loc 1 1553 0
 2570 0030 0125     		movs	r5, #1
 2571              	.LVL412:
 2572 0032 00E0     		b	.L232
 2573              	.LVL413:
 2574              	.L243:
 2575 0034 0125     		movs	r5, #1
 2576              	.LVL414:
 2577              	.L232:
1562:..\..\FatFs/ff.c **** 
 2578              		.loc 1 1562 0
 2579 0036 3069     		ldr	r0, [r6, #16]
 2580 0038 0028     		cmp	r0, #0
 2581 003a 69D0     		beq	.L233
 2582              	.LVL415:
1592:..\..\FatFs/ff.c **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2583              		.loc 1 1592 0
 2584 003c 4545     		cmp	r5, r8
 2585 003e 16D1     		bne	.L247
1593:..\..\FatFs/ff.c **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2586              		.loc 1 1593 0
 2587 0040 6C1C     		adds	r4, r5, #1
 2588              	.LVL416:
1594:..\..\FatFs/ff.c **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2589              		.loc 1 1594 0
 2590 0042 B369     		ldr	r3, [r6, #24]
 2591 0044 9C42     		cmp	r4, r3
 2592 0046 00D3     		bcc	.L235
 2593 0048 0224     		movs	r4, #2
 2594              	.LVL417:
 2595              	.L235:
1595:..\..\FatFs/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2596              		.loc 1 1595 0
 2597 004a 2146     		mov	r1, r4
 2598 004c 3846     		mov	r0, r7
 2599 004e FFF7FEFF 		bl	get_fat
 2600              	.LVL418:
1596:..\..\FatFs/ff.c **** 			if (cs != 0) {						/* Not free? */
 2601              		.loc 1 1596 0
 2602 0052 0128     		cmp	r0, #1
 2603 0054 5CD0     		beq	.L233
1596:..\..\FatFs/ff.c **** 			if (cs != 0) {						/* Not free? */
 2604              		.loc 1 1596 0 is_stmt 0 discriminator 2
 2605 0056 B0F1FF3F 		cmp	r0, #-1
 2606 005a 59D0     		beq	.L233
1597:..\..\FatFs/ff.c **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2607              		.loc 1 1597 0 is_stmt 1
 2608 005c 68B1     		cbz	r0, .L234
1598:..\..\FatFs/ff.c **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2609              		.loc 1 1598 0
 2610 005e F368     		ldr	r3, [r6, #12]
 2611              	.LVL419:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 169


1599:..\..\FatFs/ff.c **** 				ncl = 0;
 2612              		.loc 1 1599 0
 2613 0060 012B     		cmp	r3, #1
 2614 0062 06D9     		bls	.L251
1599:..\..\FatFs/ff.c **** 				ncl = 0;
 2615              		.loc 1 1599 0 is_stmt 0 discriminator 1
 2616 0064 B269     		ldr	r2, [r6, #24]
 2617 0066 9342     		cmp	r3, r2
 2618 0068 05D3     		bcc	.L252
1600:..\..\FatFs/ff.c **** 			}
 2619              		.loc 1 1600 0 is_stmt 1
 2620 006a 0024     		movs	r4, #0
 2621              	.LVL420:
 2622 006c 05E0     		b	.L234
 2623              	.LVL421:
 2624              	.L247:
1591:..\..\FatFs/ff.c **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2625              		.loc 1 1591 0
 2626 006e 0024     		movs	r4, #0
 2627 0070 03E0     		b	.L234
 2628              	.LVL422:
 2629              	.L251:
1600:..\..\FatFs/ff.c **** 			}
 2630              		.loc 1 1600 0
 2631 0072 0024     		movs	r4, #0
 2632              	.LVL423:
 2633 0074 01E0     		b	.L234
 2634              	.LVL424:
 2635              	.L252:
1599:..\..\FatFs/ff.c **** 				ncl = 0;
 2636              		.loc 1 1599 0
 2637 0076 1D46     		mov	r5, r3
 2638              	.LVL425:
1600:..\..\FatFs/ff.c **** 			}
 2639              		.loc 1 1600 0
 2640 0078 0024     		movs	r4, #0
 2641              	.LVL426:
 2642              	.L234:
1603:..\..\FatFs/ff.c **** 			ncl = scl;	/* Start cluster */
 2643              		.loc 1 1603 0
 2644 007a A4B9     		cbnz	r4, .L236
 2645 007c 2C46     		mov	r4, r5
 2646              	.LVL427:
 2647              	.L238:
1606:..\..\FatFs/ff.c **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2648              		.loc 1 1606 0
 2649 007e 0134     		adds	r4, r4, #1
 2650              	.LVL428:
1607:..\..\FatFs/ff.c **** 					ncl = 2;
 2651              		.loc 1 1607 0
 2652 0080 B369     		ldr	r3, [r6, #24]
 2653 0082 9C42     		cmp	r4, r3
 2654 0084 02D3     		bcc	.L237
 2655              	.LVL429:
1609:..\..\FatFs/ff.c **** 				}
 2656              		.loc 1 1609 0
 2657 0086 012D     		cmp	r5, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 170


 2658 0088 37D9     		bls	.L253
1608:..\..\FatFs/ff.c **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 2659              		.loc 1 1608 0
 2660 008a 0224     		movs	r4, #2
 2661              	.LVL430:
 2662              	.L237:
1611:..\..\FatFs/ff.c **** 				if (cs == 0) break;				/* Found a free cluster? */
 2663              		.loc 1 1611 0
 2664 008c 2146     		mov	r1, r4
 2665 008e 3846     		mov	r0, r7
 2666 0090 FFF7FEFF 		bl	get_fat
 2667              	.LVL431:
1612:..\..\FatFs/ff.c **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2668              		.loc 1 1612 0
 2669 0094 38B1     		cbz	r0, .L236
1613:..\..\FatFs/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2670              		.loc 1 1613 0
 2671 0096 0128     		cmp	r0, #1
 2672 0098 32D0     		beq	.L254
1613:..\..\FatFs/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2673              		.loc 1 1613 0 is_stmt 0 discriminator 2
 2674 009a B0F1FF3F 		cmp	r0, #-1
 2675 009e 31D0     		beq	.L255
1614:..\..\FatFs/ff.c **** 			}
 2676              		.loc 1 1614 0 is_stmt 1
 2677 00a0 AC42     		cmp	r4, r5
 2678 00a2 ECD1     		bne	.L238
 2679 00a4 30E0     		b	.L256
 2680              	.LVL432:
 2681              	.L236:
1617:..\..\FatFs/ff.c **** 		if (res == FR_OK && clst != 0) {
 2682              		.loc 1 1617 0
 2683 00a6 4FF0FF32 		mov	r2, #-1
 2684 00aa 2146     		mov	r1, r4
 2685 00ac 3046     		mov	r0, r6
 2686 00ae FFF7FEFF 		bl	put_fat
 2687              	.LVL433:
1618:..\..\FatFs/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2688              		.loc 1 1618 0
 2689 00b2 0346     		mov	r3, r0
 2690 00b4 40B9     		cbnz	r0, .L239
1618:..\..\FatFs/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2691              		.loc 1 1618 0 is_stmt 0 discriminator 1
 2692 00b6 B8F1000F 		cmp	r8, #0
 2693 00ba 05D0     		beq	.L239
1619:..\..\FatFs/ff.c **** 		}
 2694              		.loc 1 1619 0 is_stmt 1
 2695 00bc 2246     		mov	r2, r4
 2696 00be 4146     		mov	r1, r8
 2697 00c0 3046     		mov	r0, r6
 2698              	.LVL434:
 2699 00c2 FFF7FEFF 		bl	put_fat
 2700              	.LVL435:
 2701 00c6 0346     		mov	r3, r0
 2702              	.LVL436:
 2703              	.L239:
1623:..\..\FatFs/ff.c **** 		fs->last_clst = ncl;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 171


 2704              		.loc 1 1623 0
 2705 00c8 73B9     		cbnz	r3, .L240
1624:..\..\FatFs/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2706              		.loc 1 1624 0
 2707 00ca F460     		str	r4, [r6, #12]
1625:..\..\FatFs/ff.c **** 		fs->fsi_flag |= 1;
 2708              		.loc 1 1625 0
 2709 00cc 3269     		ldr	r2, [r6, #16]
 2710 00ce B369     		ldr	r3, [r6, #24]
 2711              	.LVL437:
 2712 00d0 023B     		subs	r3, r3, #2
 2713 00d2 9A42     		cmp	r2, r3
 2714 00d4 01D8     		bhi	.L241
1625:..\..\FatFs/ff.c **** 		fs->fsi_flag |= 1;
 2715              		.loc 1 1625 0 is_stmt 0 discriminator 1
 2716 00d6 013A     		subs	r2, r2, #1
 2717 00d8 3261     		str	r2, [r6, #16]
 2718              	.L241:
1626:..\..\FatFs/ff.c **** 	} else {
 2719              		.loc 1 1626 0 is_stmt 1
 2720 00da 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 2721 00dc 43F00103 		orr	r3, r3, #1
 2722 00e0 3371     		strb	r3, [r6, #4]
 2723 00e2 2046     		mov	r0, r4
 2724 00e4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2725              	.LVL438:
 2726              	.L240:
1628:..\..\FatFs/ff.c **** 	}
 2727              		.loc 1 1628 0
 2728 00e8 012B     		cmp	r3, #1
 2729 00ea 10D1     		bne	.L257
 2730 00ec 4FF0FF30 		mov	r0, #-1
 2731 00f0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2732              	.LVL439:
 2733              	.L244:
1557:..\..\FatFs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2734              		.loc 1 1557 0
 2735 00f4 0120     		movs	r0, #1
 2736              	.LVL440:
 2737 00f6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2738              	.LVL441:
 2739              	.L253:
1609:..\..\FatFs/ff.c **** 				}
 2740              		.loc 1 1609 0
 2741 00fa 0020     		movs	r0, #0
 2742 00fc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2743              	.LVL442:
 2744              	.L254:
 2745 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2746              	.LVL443:
 2747              	.L255:
 2748 0104 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2749              	.LVL444:
 2750              	.L256:
1614:..\..\FatFs/ff.c **** 			}
 2751              		.loc 1 1614 0
 2752 0108 0020     		movs	r0, #0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 172


 2753              	.LVL445:
 2754 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2755              	.LVL446:
 2756              	.L257:
1628:..\..\FatFs/ff.c **** 	}
 2757              		.loc 1 1628 0
 2758 010e 0120     		movs	r0, #1
 2759              	.LVL447:
 2760              	.L233:
1632:..\..\FatFs/ff.c **** 
 2761              		.loc 1 1632 0
 2762 0110 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2763              		.cfi_endproc
 2764              	.LFE17:
 2765              		.size	create_chain, .-create_chain
 2766              		.section	.text.remove_chain,"ax",%progbits
 2767              		.align	2
 2768              		.thumb
 2769              		.thumb_func
 2770              		.type	remove_chain, %function
 2771              	remove_chain:
 2772              	.LFB16:
1451:..\..\FatFs/ff.c **** 	FRESULT res = FR_OK;
 2773              		.loc 1 1451 0
 2774              		.cfi_startproc
 2775              		@ args = 0, pretend = 0, frame = 0
 2776              		@ frame_needed = 0, uses_anonymous_args = 0
 2777              	.LVL448:
 2778 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2779              		.cfi_def_cfa_offset 24
 2780              		.cfi_offset 3, -24
 2781              		.cfi_offset 4, -20
 2782              		.cfi_offset 5, -16
 2783              		.cfi_offset 6, -12
 2784              		.cfi_offset 7, -8
 2785              		.cfi_offset 14, -4
 2786 0002 0E46     		mov	r6, r1
 2787              	.LVL449:
1454:..\..\FatFs/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
 2788              		.loc 1 1454 0
 2789 0004 0468     		ldr	r4, [r0]
 2790              	.LVL450:
1462:..\..\FatFs/ff.c **** 
 2791              		.loc 1 1462 0
 2792 0006 0129     		cmp	r1, #1
 2793 0008 2CD9     		bls	.L264
 2794 000a 0746     		mov	r7, r0
 2795 000c 1146     		mov	r1, r2
 2796              	.LVL451:
1462:..\..\FatFs/ff.c **** 
 2797              		.loc 1 1462 0 is_stmt 0 discriminator 2
 2798 000e A369     		ldr	r3, [r4, #24]
 2799 0010 9E42     		cmp	r6, r3
 2800 0012 29D2     		bcs	.L265
1465:..\..\FatFs/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2801              		.loc 1 1465 0 is_stmt 1
 2802 0014 2AB1     		cbz	r2, .L263
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 173


1466:..\..\FatFs/ff.c **** 		if (res != FR_OK) return res;
 2803              		.loc 1 1466 0
 2804 0016 4FF0FF32 		mov	r2, #-1
 2805              	.LVL452:
 2806 001a 2046     		mov	r0, r4
 2807              	.LVL453:
 2808 001c FFF7FEFF 		bl	put_fat
 2809              	.LVL454:
1467:..\..\FatFs/ff.c **** 	}
 2810              		.loc 1 1467 0
 2811 0020 20BB     		cbnz	r0, .L266
 2812              	.LVL455:
 2813              	.L263:
1472:..\..\FatFs/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 2814              		.loc 1 1472 0
 2815 0022 3146     		mov	r1, r6
 2816 0024 3846     		mov	r0, r7
 2817 0026 FFF7FEFF 		bl	get_fat
 2818              	.LVL456:
1473:..\..\FatFs/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2819              		.loc 1 1473 0
 2820 002a 0546     		mov	r5, r0
 2821 002c F8B1     		cbz	r0, .L267
1474:..\..\FatFs/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2822              		.loc 1 1474 0
 2823 002e 0128     		cmp	r0, #1
 2824 0030 1FD0     		beq	.L268
1475:..\..\FatFs/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2825              		.loc 1 1475 0
 2826 0032 B0F1FF3F 		cmp	r0, #-1
 2827 0036 1ED0     		beq	.L269
1477:..\..\FatFs/ff.c **** 			if (res != FR_OK) return res;
 2828              		.loc 1 1477 0
 2829 0038 0022     		movs	r2, #0
 2830 003a 3146     		mov	r1, r6
 2831 003c 2046     		mov	r0, r4
 2832              	.LVL457:
 2833 003e FFF7FEFF 		bl	put_fat
 2834              	.LVL458:
1478:..\..\FatFs/ff.c **** 		}
 2835              		.loc 1 1478 0
 2836 0042 D0B9     		cbnz	r0, .L270
1480:..\..\FatFs/ff.c **** 			fs->free_clst++;
 2837              		.loc 1 1480 0
 2838 0044 2369     		ldr	r3, [r4, #16]
 2839 0046 A269     		ldr	r2, [r4, #24]
 2840 0048 911E     		subs	r1, r2, #2
 2841 004a 8B42     		cmp	r3, r1
 2842 004c 05D2     		bcs	.L262
1481:..\..\FatFs/ff.c **** 			fs->fsi_flag |= 1;
 2843              		.loc 1 1481 0
 2844 004e 0133     		adds	r3, r3, #1
 2845 0050 2361     		str	r3, [r4, #16]
1482:..\..\FatFs/ff.c **** 		}
 2846              		.loc 1 1482 0
 2847 0052 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2848 0054 43F00103 		orr	r3, r3, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 174


 2849 0058 2371     		strb	r3, [r4, #4]
 2850              	.L262:
 2851              	.LVL459:
1502:..\..\FatFs/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2852              		.loc 1 1502 0
 2853 005a 2E46     		mov	r6, r5
1503:..\..\FatFs/ff.c **** 
 2854              		.loc 1 1503 0
 2855 005c 9542     		cmp	r5, r2
 2856 005e E0D3     		bcc	.L263
1531:..\..\FatFs/ff.c **** }
 2857              		.loc 1 1531 0
 2858 0060 0020     		movs	r0, #0
 2859              	.LVL460:
 2860 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2861              	.LVL461:
 2862              	.L264:
1462:..\..\FatFs/ff.c **** 
 2863              		.loc 1 1462 0
 2864 0064 0220     		movs	r0, #2
 2865              	.LVL462:
 2866 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2867              	.LVL463:
 2868              	.L265:
 2869 0068 0220     		movs	r0, #2
 2870              	.LVL464:
 2871 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2872              	.LVL465:
 2873              	.L266:
 2874 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2875              	.LVL466:
 2876              	.L267:
1531:..\..\FatFs/ff.c **** }
 2877              		.loc 1 1531 0
 2878 006e 0020     		movs	r0, #0
 2879              	.LVL467:
 2880 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2881              	.LVL468:
 2882              	.L268:
1474:..\..\FatFs/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2883              		.loc 1 1474 0
 2884 0072 0220     		movs	r0, #2
 2885              	.LVL469:
 2886 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2887              	.LVL470:
 2888              	.L269:
1475:..\..\FatFs/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2889              		.loc 1 1475 0
 2890 0076 0120     		movs	r0, #1
 2891              	.LVL471:
 2892 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2893              	.LVL472:
 2894              	.L270:
1532:..\..\FatFs/ff.c **** 
 2895              		.loc 1 1532 0
 2896 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2897              		.cfi_endproc
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 175


 2898              	.LFE16:
 2899              		.size	remove_chain, .-remove_chain
 2900              		.section	.text.dir_remove,"ax",%progbits
 2901              		.align	2
 2902              		.thumb
 2903              		.thumb_func
 2904              		.type	dir_remove, %function
 2905              	dir_remove:
 2906              	.LFB27:
2632:..\..\FatFs/ff.c **** 	FRESULT res;
 2907              		.loc 1 2632 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 0
 2910              		@ frame_needed = 0, uses_anonymous_args = 0
 2911              	.LVL473:
 2912 0000 38B5     		push	{r3, r4, r5, lr}
 2913              		.cfi_def_cfa_offset 16
 2914              		.cfi_offset 3, -16
 2915              		.cfi_offset 4, -12
 2916              		.cfi_offset 5, -8
 2917              		.cfi_offset 14, -4
 2918 0002 0446     		mov	r4, r0
2634:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
 2919              		.loc 1 2634 0
 2920 0004 0568     		ldr	r5, [r0]
 2921              	.LVL474:
2656:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 2922              		.loc 1 2656 0
 2923 0006 8169     		ldr	r1, [r0, #24]
 2924 0008 2846     		mov	r0, r5
 2925              	.LVL475:
 2926 000a FFF7FEFF 		bl	move_window
 2927              	.LVL476:
2657:..\..\FatFs/ff.c **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 2928              		.loc 1 2657 0
 2929 000e 0346     		mov	r3, r0
 2930 0010 20B9     		cbnz	r0, .L273
2658:..\..\FatFs/ff.c **** 		fs->wflag = 1;
 2931              		.loc 1 2658 0
 2932 0012 E269     		ldr	r2, [r4, #28]
 2933 0014 E521     		movs	r1, #229
 2934 0016 1170     		strb	r1, [r2]
2659:..\..\FatFs/ff.c **** 	}
 2935              		.loc 1 2659 0
 2936 0018 0122     		movs	r2, #1
 2937 001a EA70     		strb	r2, [r5, #3]
 2938              	.L273:
2664:..\..\FatFs/ff.c **** 
 2939              		.loc 1 2664 0
 2940 001c 1846     		mov	r0, r3
 2941              	.LVL477:
 2942 001e 38BD     		pop	{r3, r4, r5, pc}
 2943              		.cfi_endproc
 2944              	.LFE27:
 2945              		.size	dir_remove, .-dir_remove
 2946              		.section	.text.dir_clear,"ax",%progbits
 2947              		.align	2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 176


 2948              		.thumb
 2949              		.thumb_func
 2950              		.type	dir_clear, %function
 2951              	dir_clear:
 2952              	.LFB18:
1678:..\..\FatFs/ff.c **** 	LBA_t sect;
 2953              		.loc 1 1678 0
 2954              		.cfi_startproc
 2955              		@ args = 0, pretend = 0, frame = 0
 2956              		@ frame_needed = 0, uses_anonymous_args = 0
 2957              	.LVL478:
 2958 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2959              		.cfi_def_cfa_offset 24
 2960              		.cfi_offset 3, -24
 2961              		.cfi_offset 4, -20
 2962              		.cfi_offset 5, -16
 2963              		.cfi_offset 6, -12
 2964              		.cfi_offset 7, -8
 2965              		.cfi_offset 14, -4
 2966 0002 0546     		mov	r5, r0
 2967 0004 0C46     		mov	r4, r1
1684:..\..\FatFs/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 2968              		.loc 1 1684 0
 2969 0006 FFF7FEFF 		bl	sync_window
 2970              	.LVL479:
 2971 000a 00BB     		cbnz	r0, .L280
1685:..\..\FatFs/ff.c **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 2972              		.loc 1 1685 0
 2973 000c 2146     		mov	r1, r4
 2974 000e 2846     		mov	r0, r5
 2975 0010 FFF7FEFF 		bl	clst2sect
 2976              	.LVL480:
 2977 0014 0746     		mov	r7, r0
 2978              	.LVL481:
1686:..\..\FatFs/ff.c **** 	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 2979              		.loc 1 1686 0
 2980 0016 2863     		str	r0, [r5, #48]
1687:..\..\FatFs/ff.c **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 2981              		.loc 1 1687 0
 2982 0018 05F13406 		add	r6, r5, #52
 2983 001c 4FF40072 		mov	r2, #512
 2984 0020 0021     		movs	r1, #0
 2985 0022 3046     		mov	r0, r6
 2986              	.LVL482:
 2987 0024 FFF7FEFF 		bl	mem_set
 2988              	.LVL483:
1700:..\..\FatFs/ff.c **** 	}
 2989              		.loc 1 1700 0
 2990 0028 0024     		movs	r4, #0
 2991              	.LVL484:
 2992 002a 00E0     		b	.L277
 2993              	.LVL485:
 2994              	.L279:
1700:..\..\FatFs/ff.c **** 	}
 2995              		.loc 1 1700 0 is_stmt 0 discriminator 4
 2996 002c 0134     		adds	r4, r4, #1
 2997              	.LVL486:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 177


 2998              	.L277:
1700:..\..\FatFs/ff.c **** 	}
 2999              		.loc 1 1700 0 discriminator 1
 3000 002e 6B89     		ldrh	r3, [r5, #10]
 3001 0030 9C42     		cmp	r4, r3
 3002 0032 07D2     		bcs	.L278
1700:..\..\FatFs/ff.c **** 	}
 3003              		.loc 1 1700 0 discriminator 3
 3004 0034 0123     		movs	r3, #1
 3005 0036 E219     		adds	r2, r4, r7
 3006 0038 3146     		mov	r1, r6
 3007 003a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 3008 003c FFF7FEFF 		bl	disk_write
 3009              	.LVL487:
 3010 0040 0028     		cmp	r0, #0
 3011 0042 F3D0     		beq	.L279
 3012              	.L278:
1702:..\..\FatFs/ff.c **** }
 3013              		.loc 1 1702 0 is_stmt 1
 3014 0044 6889     		ldrh	r0, [r5, #10]
 3015 0046 001B     		subs	r0, r0, r4
 3016 0048 18BF     		it	ne
 3017 004a 0120     		movne	r0, #1
 3018 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3019              	.LVL488:
 3020              	.L280:
1684:..\..\FatFs/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3021              		.loc 1 1684 0
 3022 004e 0120     		movs	r0, #1
1703:..\..\FatFs/ff.c **** #endif	/* !FF_FS_READONLY */
 3023              		.loc 1 1703 0
 3024 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3025              		.cfi_endproc
 3026              	.LFE18:
 3027              		.size	dir_clear, .-dir_clear
 3028 0052 00BF     		.section	.text.dir_next,"ax",%progbits
 3029              		.align	2
 3030              		.thumb
 3031              		.thumb_func
 3032              		.type	dir_next, %function
 3033              	dir_next:
 3034              	.LFB20:
1765:..\..\FatFs/ff.c **** 	DWORD ofs, clst;
 3035              		.loc 1 1765 0
 3036              		.cfi_startproc
 3037              		@ args = 0, pretend = 0, frame = 0
 3038              		@ frame_needed = 0, uses_anonymous_args = 0
 3039              	.LVL489:
 3040 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3041              		.cfi_def_cfa_offset 32
 3042              		.cfi_offset 3, -32
 3043              		.cfi_offset 4, -28
 3044              		.cfi_offset 5, -24
 3045              		.cfi_offset 6, -20
 3046              		.cfi_offset 7, -16
 3047              		.cfi_offset 8, -12
 3048              		.cfi_offset 9, -8
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 178


 3049              		.cfi_offset 14, -4
1767:..\..\FatFs/ff.c **** 
 3050              		.loc 1 1767 0
 3051 0004 0668     		ldr	r6, [r0]
 3052              	.LVL490:
1770:..\..\FatFs/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3053              		.loc 1 1770 0
 3054 0006 0569     		ldr	r5, [r0, #16]
 3055 0008 2035     		adds	r5, r5, #32
 3056              	.LVL491:
1771:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3057              		.loc 1 1771 0
 3058 000a B5F5001F 		cmp	r5, #2097152
 3059 000e 01D3     		bcc	.L283
1771:..\..\FatFs/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3060              		.loc 1 1771 0 is_stmt 0 discriminator 1
 3061 0010 0023     		movs	r3, #0
 3062 0012 8361     		str	r3, [r0, #24]
 3063              	.L283:
1772:..\..\FatFs/ff.c **** 
 3064              		.loc 1 1772 0 is_stmt 1
 3065 0014 8369     		ldr	r3, [r0, #24]
 3066 0016 002B     		cmp	r3, #0
 3067 0018 48D0     		beq	.L289
 3068 001a 8846     		mov	r8, r1
 3069 001c 0446     		mov	r4, r0
1774:..\..\FatFs/ff.c **** 		dp->sect++;				/* Next sector */
 3070              		.loc 1 1774 0
 3071 001e C5F30807 		ubfx	r7, r5, #0, #9
 3072 0022 002F     		cmp	r7, #0
 3073 0024 3BD1     		bne	.L285
1775:..\..\FatFs/ff.c **** 
 3074              		.loc 1 1775 0
 3075 0026 0133     		adds	r3, r3, #1
 3076 0028 8361     		str	r3, [r0, #24]
1777:..\..\FatFs/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3077              		.loc 1 1777 0
 3078 002a 4169     		ldr	r1, [r0, #20]
 3079              	.LVL492:
 3080 002c 41B9     		cbnz	r1, .L286
1778:..\..\FatFs/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3081              		.loc 1 1778 0
 3082 002e 3389     		ldrh	r3, [r6, #8]
 3083 0030 B3EB551F 		cmp	r3, r5, lsr #5
 3084 0034 33D8     		bhi	.L285
1779:..\..\FatFs/ff.c **** 			}
 3085              		.loc 1 1779 0
 3086 0036 0023     		movs	r3, #0
 3087 0038 8361     		str	r3, [r0, #24]
 3088 003a 0420     		movs	r0, #4
 3089              	.LVL493:
 3090 003c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3091              	.LVL494:
 3092              	.L286:
1783:..\..\FatFs/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3093              		.loc 1 1783 0
 3094 0040 7389     		ldrh	r3, [r6, #10]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 179


 3095 0042 013B     		subs	r3, r3, #1
 3096 0044 13EA5523 		ands	r3, r3, r5, lsr #9
 3097 0048 29D1     		bne	.L285
1784:..\..\FatFs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3098              		.loc 1 1784 0
 3099 004a FFF7FEFF 		bl	get_fat
 3100              	.LVL495:
 3101 004e 8146     		mov	r9, r0
 3102              	.LVL496:
1785:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3103              		.loc 1 1785 0
 3104 0050 0128     		cmp	r0, #1
 3105 0052 2ED9     		bls	.L290
1786:..\..\FatFs/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3106              		.loc 1 1786 0
 3107 0054 B0F1FF3F 		cmp	r0, #-1
 3108 0058 2ED0     		beq	.L291
1787:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 3109              		.loc 1 1787 0
 3110 005a B369     		ldr	r3, [r6, #24]
 3111 005c 9842     		cmp	r0, r3
 3112 005e 17D3     		bcc	.L287
1789:..\..\FatFs/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3113              		.loc 1 1789 0
 3114 0060 B8F1000F 		cmp	r8, #0
 3115 0064 04D1     		bne	.L288
1790:..\..\FatFs/ff.c **** 					}
 3116              		.loc 1 1790 0
 3117 0066 0023     		movs	r3, #0
 3118 0068 A361     		str	r3, [r4, #24]
 3119 006a 0420     		movs	r0, #4
 3120              	.LVL497:
 3121 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3122              	.LVL498:
 3123              	.L288:
1792:..\..\FatFs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3124              		.loc 1 1792 0
 3125 0070 6169     		ldr	r1, [r4, #20]
 3126 0072 2046     		mov	r0, r4
 3127              	.LVL499:
 3128 0074 FFF7FEFF 		bl	create_chain
 3129              	.LVL500:
1793:..\..\FatFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3130              		.loc 1 1793 0
 3131 0078 8146     		mov	r9, r0
 3132 007a 00B3     		cbz	r0, .L292
1794:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3133              		.loc 1 1794 0
 3134 007c 0128     		cmp	r0, #1
 3135 007e 21D0     		beq	.L293
1795:..\..\FatFs/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3136              		.loc 1 1795 0
 3137 0080 B0F1FF3F 		cmp	r0, #-1
 3138 0084 21D0     		beq	.L294
1796:..\..\FatFs/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3139              		.loc 1 1796 0
 3140 0086 0146     		mov	r1, r0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 180


 3141 0088 3046     		mov	r0, r6
 3142              	.LVL501:
 3143 008a FFF7FEFF 		bl	dir_clear
 3144              	.LVL502:
 3145 008e F8B9     		cbnz	r0, .L295
 3146              	.L287:
1803:..\..\FatFs/ff.c **** 				dp->sect = clst2sect(fs, clst);
 3147              		.loc 1 1803 0
 3148 0090 C4F81490 		str	r9, [r4, #20]
1804:..\..\FatFs/ff.c **** 			}
 3149              		.loc 1 1804 0
 3150 0094 4946     		mov	r1, r9
 3151 0096 3046     		mov	r0, r6
 3152 0098 FFF7FEFF 		bl	clst2sect
 3153              	.LVL503:
 3154 009c A061     		str	r0, [r4, #24]
 3155              	.LVL504:
 3156              	.L285:
1808:..\..\FatFs/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3157              		.loc 1 1808 0
 3158 009e 2561     		str	r5, [r4, #16]
1809:..\..\FatFs/ff.c **** 
 3159              		.loc 1 1809 0
 3160 00a0 3436     		adds	r6, r6, #52
 3161              	.LVL505:
 3162 00a2 3E44     		add	r6, r6, r7
 3163              	.LVL506:
 3164 00a4 E661     		str	r6, [r4, #28]
1811:..\..\FatFs/ff.c **** }
 3165              		.loc 1 1811 0
 3166 00a6 0020     		movs	r0, #0
 3167 00a8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3168              	.LVL507:
 3169              	.L289:
1772:..\..\FatFs/ff.c **** 
 3170              		.loc 1 1772 0
 3171 00ac 0420     		movs	r0, #4
 3172              	.LVL508:
 3173 00ae BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3174              	.LVL509:
 3175              	.L290:
1785:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3176              		.loc 1 1785 0
 3177 00b2 0220     		movs	r0, #2
 3178              	.LVL510:
 3179 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3180              	.LVL511:
 3181              	.L291:
1786:..\..\FatFs/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3182              		.loc 1 1786 0
 3183 00b8 0120     		movs	r0, #1
 3184              	.LVL512:
 3185 00ba BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3186              	.LVL513:
 3187              	.L292:
1793:..\..\FatFs/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3188              		.loc 1 1793 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 181


 3189 00be 0720     		movs	r0, #7
 3190              	.LVL514:
 3191 00c0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3192              	.LVL515:
 3193              	.L293:
1794:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3194              		.loc 1 1794 0
 3195 00c4 0220     		movs	r0, #2
 3196              	.LVL516:
 3197 00c6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3198              	.LVL517:
 3199              	.L294:
1795:..\..\FatFs/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3200              		.loc 1 1795 0
 3201 00ca 0120     		movs	r0, #1
 3202              	.LVL518:
 3203 00cc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3204              	.LVL519:
 3205              	.L295:
1796:..\..\FatFs/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3206              		.loc 1 1796 0
 3207 00d0 0120     		movs	r0, #1
1812:..\..\FatFs/ff.c **** 
 3208              		.loc 1 1812 0
 3209 00d2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3210              		.cfi_endproc
 3211              	.LFE20:
 3212              		.size	dir_next, .-dir_next
 3213 00d6 00BF     		.section	.text.dir_find,"ax",%progbits
 3214              		.align	2
 3215              		.thumb
 3216              		.thumb_func
 3217              		.type	dir_find, %function
 3218              	dir_find:
 3219              	.LFB25:
2445:..\..\FatFs/ff.c **** 	FRESULT res;
 3220              		.loc 1 2445 0
 3221              		.cfi_startproc
 3222              		@ args = 0, pretend = 0, frame = 0
 3223              		@ frame_needed = 0, uses_anonymous_args = 0
 3224              	.LVL520:
 3225 0000 70B5     		push	{r4, r5, r6, lr}
 3226              		.cfi_def_cfa_offset 16
 3227              		.cfi_offset 4, -16
 3228              		.cfi_offset 5, -12
 3229              		.cfi_offset 6, -8
 3230              		.cfi_offset 14, -4
 3231 0002 0446     		mov	r4, r0
2447:..\..\FatFs/ff.c **** 	BYTE c;
 3232              		.loc 1 2447 0
 3233 0004 0668     		ldr	r6, [r0]
 3234              	.LVL521:
2453:..\..\FatFs/ff.c **** 	if (res != FR_OK) return res;
 3235              		.loc 1 2453 0
 3236 0006 0021     		movs	r1, #0
 3237 0008 FFF7FEFF 		bl	dir_sdi
 3238              	.LVL522:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 182


2454:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 3239              		.loc 1 2454 0
 3240 000c E8B9     		cbnz	r0, .L301
 3241              	.L300:
2480:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
 3242              		.loc 1 2480 0
 3243 000e A169     		ldr	r1, [r4, #24]
 3244 0010 3046     		mov	r0, r6
 3245              	.LVL523:
 3246 0012 FFF7FEFF 		bl	move_window
 3247              	.LVL524:
2481:..\..\FatFs/ff.c **** 		c = dp->dir[DIR_Name];
 3248              		.loc 1 2481 0
 3249 0016 0546     		mov	r5, r0
 3250 0018 C0B9     		cbnz	r0, .L302
2482:..\..\FatFs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3251              		.loc 1 2482 0
 3252 001a E069     		ldr	r0, [r4, #28]
 3253              	.LVL525:
 3254 001c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 3255              	.LVL526:
2483:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
 3256              		.loc 1 2483 0
 3257 001e B3B1     		cbz	r3, .L303
2506:..\..\FatFs/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3258              		.loc 1 2506 0
 3259 0020 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3260              	.LVL527:
 3261 0022 03F03F03 		and	r3, r3, #63
 3262 0026 A371     		strb	r3, [r4, #6]
 3263              	.LVL528:
2507:..\..\FatFs/ff.c **** #endif
 3264              		.loc 1 2507 0
 3265 0028 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3266 002a 13F0080F 		tst	r3, #8
 3267 002e 05D1     		bne	.L299
2507:..\..\FatFs/ff.c **** #endif
 3268              		.loc 1 2507 0 is_stmt 0 discriminator 1
 3269 0030 0B22     		movs	r2, #11
 3270 0032 04F12001 		add	r1, r4, #32
 3271 0036 FFF7FEFF 		bl	mem_cmp
 3272              	.LVL529:
 3273 003a 50B1     		cbz	r0, .L304
 3274              	.L299:
2509:..\..\FatFs/ff.c **** 	} while (res == FR_OK);
 3275              		.loc 1 2509 0 is_stmt 1
 3276 003c 0021     		movs	r1, #0
 3277 003e 2046     		mov	r0, r4
 3278 0040 FFF7FEFF 		bl	dir_next
 3279              	.LVL530:
2510:..\..\FatFs/ff.c **** 
 3280              		.loc 1 2510 0
 3281 0044 0028     		cmp	r0, #0
 3282 0046 E2D0     		beq	.L300
 3283 0048 70BD     		pop	{r4, r5, r6, pc}
 3284              	.LVL531:
 3285              	.L301:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 183


 3286 004a 70BD     		pop	{r4, r5, r6, pc}
 3287              	.LVL532:
 3288              	.L302:
 3289 004c 70BD     		pop	{r4, r5, r6, pc}
 3290              	.LVL533:
 3291              	.L303:
2483:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
 3292              		.loc 1 2483 0
 3293 004e 0420     		movs	r0, #4
 3294 0050 70BD     		pop	{r4, r5, r6, pc}
 3295              	.LVL534:
 3296              	.L304:
2480:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
 3297              		.loc 1 2480 0
 3298 0052 2846     		mov	r0, r5
2513:..\..\FatFs/ff.c **** 
 3299              		.loc 1 2513 0
 3300 0054 70BD     		pop	{r4, r5, r6, pc}
 3301              		.cfi_endproc
 3302              	.LFE25:
 3303              		.size	dir_find, .-dir_find
 3304 0056 00BF     		.section	.text.follow_path,"ax",%progbits
 3305              		.align	2
 3306              		.thumb
 3307              		.thumb_func
 3308              		.type	follow_path, %function
 3309              	follow_path:
 3310              	.LFB30:
3064:..\..\FatFs/ff.c **** 	FRESULT res;
 3311              		.loc 1 3064 0
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 8
 3314              		@ frame_needed = 0, uses_anonymous_args = 0
 3315              	.LVL535:
 3316 0000 70B5     		push	{r4, r5, r6, lr}
 3317              		.cfi_def_cfa_offset 16
 3318              		.cfi_offset 4, -16
 3319              		.cfi_offset 5, -12
 3320              		.cfi_offset 6, -8
 3321              		.cfi_offset 14, -4
 3322 0002 82B0     		sub	sp, sp, #8
 3323              		.cfi_def_cfa_offset 24
 3324 0004 0446     		mov	r4, r0
 3325 0006 0191     		str	r1, [sp, #4]
3067:..\..\FatFs/ff.c **** 
 3326              		.loc 1 3067 0
 3327 0008 0568     		ldr	r5, [r0]
 3328              	.LVL536:
3071:..\..\FatFs/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 3329              		.loc 1 3071 0
 3330 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 3331 000c 2F2B     		cmp	r3, #47
 3332 000e 06D0     		beq	.L307
3071:..\..\FatFs/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 3333              		.loc 1 3071 0 is_stmt 0 discriminator 1
 3334 0010 5C2B     		cmp	r3, #92
 3335 0012 04D0     		beq	.L307
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 184


3072:..\..\FatFs/ff.c **** 	} else
 3336              		.loc 1 3072 0 is_stmt 1
 3337 0014 6B69     		ldr	r3, [r5, #20]
 3338 0016 8360     		str	r3, [r0, #8]
 3339 0018 09E0     		b	.L308
 3340              	.L309:
3076:..\..\FatFs/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 3341              		.loc 1 3076 0 discriminator 4
 3342 001a 0133     		adds	r3, r3, #1
 3343 001c 0193     		str	r3, [sp, #4]
 3344              	.L307:
3076:..\..\FatFs/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 3345              		.loc 1 3076 0 is_stmt 0 discriminator 1
 3346 001e 019B     		ldr	r3, [sp, #4]
 3347 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3348 0022 2F2A     		cmp	r2, #47
 3349 0024 F9D0     		beq	.L309
3076:..\..\FatFs/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 3350              		.loc 1 3076 0 discriminator 3
 3351 0026 5C2A     		cmp	r2, #92
 3352 0028 F7D0     		beq	.L309
3077:..\..\FatFs/ff.c **** 	}
 3353              		.loc 1 3077 0 is_stmt 1
 3354 002a 0023     		movs	r3, #0
 3355 002c A360     		str	r3, [r4, #8]
 3356              	.L308:
3096:..\..\FatFs/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 3357              		.loc 1 3096 0
 3358 002e 019B     		ldr	r3, [sp, #4]
 3359 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3360 0032 1F2B     		cmp	r3, #31
 3361 0034 08D8     		bhi	.L310
3097:..\..\FatFs/ff.c **** 		res = dir_sdi(dp, 0);
 3362              		.loc 1 3097 0
 3363 0036 8023     		movs	r3, #128
 3364 0038 84F82B30 		strb	r3, [r4, #43]
3098:..\..\FatFs/ff.c **** 
 3365              		.loc 1 3098 0
 3366 003c 0021     		movs	r1, #0
 3367              	.LVL537:
 3368 003e 2046     		mov	r0, r4
 3369              	.LVL538:
 3370 0040 FFF7FEFF 		bl	dir_sdi
 3371              	.LVL539:
 3372 0044 0646     		mov	r6, r0
 3373              	.LVL540:
 3374 0046 35E0     		b	.L311
 3375              	.LVL541:
 3376              	.L310:
3102:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 3377              		.loc 1 3102 0
 3378 0048 01A9     		add	r1, sp, #4
 3379 004a 2046     		mov	r0, r4
 3380 004c FFF7FEFF 		bl	create_name
 3381              	.LVL542:
3103:..\..\FatFs/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3382              		.loc 1 3103 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 185


 3383 0050 0646     		mov	r6, r0
 3384 0052 78BB     		cbnz	r0, .L311
3104:..\..\FatFs/ff.c **** 			ns = dp->fn[NSFLAG];
 3385              		.loc 1 3104 0
 3386 0054 2046     		mov	r0, r4
 3387              	.LVL543:
 3388 0056 FFF7FEFF 		bl	dir_find
 3389              	.LVL544:
3105:..\..\FatFs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3390              		.loc 1 3105 0
 3391 005a 94F82B30 		ldrb	r3, [r4, #43]	@ zero_extendqisi2
 3392              	.LVL545:
3106:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3393              		.loc 1 3106 0
 3394 005e 80B1     		cbz	r0, .L312
3107:..\..\FatFs/ff.c **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 3395              		.loc 1 3107 0
 3396 0060 0428     		cmp	r0, #4
 3397 0062 20D1     		bne	.L315
3108:..\..\FatFs/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 3398              		.loc 1 3108 0
 3399 0064 13F0200F 		tst	r3, #32
 3400 0068 06D0     		beq	.L313
3109:..\..\FatFs/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
 3401              		.loc 1 3109 0
 3402 006a 13F0040F 		tst	r3, #4
 3403 006e EBD0     		beq	.L310
3110:..\..\FatFs/ff.c **** 						res = FR_OK;
 3404              		.loc 1 3110 0
 3405 0070 8023     		movs	r3, #128
 3406              	.LVL546:
 3407 0072 84F82B30 		strb	r3, [r4, #43]
 3408              	.LVL547:
 3409 0076 1DE0     		b	.L311
 3410              	.LVL548:
 3411              	.L313:
3113:..\..\FatFs/ff.c **** 					}
 3412              		.loc 1 3113 0
 3413 0078 13F0040F 		tst	r3, #4
 3414 007c 15D0     		beq	.L316
3104:..\..\FatFs/ff.c **** 			ns = dp->fn[NSFLAG];
 3415              		.loc 1 3104 0
 3416 007e 0646     		mov	r6, r0
 3417 0080 18E0     		b	.L311
 3418              	.L312:
3118:..\..\FatFs/ff.c **** 			/* Get into the sub-directory */
 3419              		.loc 1 3118 0
 3420 0082 13F0040F 		tst	r3, #4
 3421 0086 12D1     		bne	.L317
3120:..\..\FatFs/ff.c **** 				res = FR_NO_PATH; break;
 3422              		.loc 1 3120 0
 3423 0088 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3424              	.LVL549:
 3425 008a 13F0100F 		tst	r3, #16
 3426 008e 10D0     		beq	.L318
3132:..\..\FatFs/ff.c **** 			}
 3427              		.loc 1 3132 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 186


 3428 0090 05F13401 		add	r1, r5, #52
 3429 0094 2369     		ldr	r3, [r4, #16]
 3430 0096 C3F30803 		ubfx	r3, r3, #0, #9
 3431 009a 1944     		add	r1, r1, r3
 3432 009c 2846     		mov	r0, r5
 3433              	.LVL550:
 3434 009e FFF7FEFF 		bl	ld_clust
 3435              	.LVL551:
 3436 00a2 A060     		str	r0, [r4, #8]
 3437 00a4 D0E7     		b	.L310
 3438              	.LVL552:
 3439              	.L315:
3104:..\..\FatFs/ff.c **** 			ns = dp->fn[NSFLAG];
 3440              		.loc 1 3104 0
 3441 00a6 0646     		mov	r6, r0
 3442 00a8 04E0     		b	.L311
 3443              	.L316:
3113:..\..\FatFs/ff.c **** 					}
 3444              		.loc 1 3113 0
 3445 00aa 0526     		movs	r6, #5
 3446 00ac 02E0     		b	.L311
 3447              	.L317:
3104:..\..\FatFs/ff.c **** 			ns = dp->fn[NSFLAG];
 3448              		.loc 1 3104 0
 3449 00ae 0646     		mov	r6, r0
 3450 00b0 00E0     		b	.L311
 3451              	.LVL553:
 3452              	.L318:
3121:..\..\FatFs/ff.c **** 			}
 3453              		.loc 1 3121 0
 3454 00b2 0526     		movs	r6, #5
 3455              	.LVL554:
 3456              	.L311:
3138:..\..\FatFs/ff.c **** 
 3457              		.loc 1 3138 0
 3458 00b4 3046     		mov	r0, r6
 3459 00b6 02B0     		add	sp, sp, #8
 3460              		.cfi_def_cfa_offset 16
 3461              		@ sp needed
 3462 00b8 70BD     		pop	{r4, r5, r6, pc}
 3463              		.cfi_endproc
 3464              	.LFE30:
 3465              		.size	follow_path, .-follow_path
 3466 00ba 00BF     		.section	.text.dir_alloc,"ax",%progbits
 3467              		.align	2
 3468              		.thumb
 3469              		.thumb_func
 3470              		.type	dir_alloc, %function
 3471              	dir_alloc:
 3472              	.LFB21:
1826:..\..\FatFs/ff.c **** 	FRESULT res;
 3473              		.loc 1 1826 0
 3474              		.cfi_startproc
 3475              		@ args = 0, pretend = 0, frame = 0
 3476              		@ frame_needed = 0, uses_anonymous_args = 0
 3477              	.LVL555:
 3478 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 187


 3479              		.cfi_def_cfa_offset 24
 3480              		.cfi_offset 3, -24
 3481              		.cfi_offset 4, -20
 3482              		.cfi_offset 5, -16
 3483              		.cfi_offset 6, -12
 3484              		.cfi_offset 7, -8
 3485              		.cfi_offset 14, -4
 3486 0002 0446     		mov	r4, r0
 3487 0004 0F46     		mov	r7, r1
1829:..\..\FatFs/ff.c **** 
 3488              		.loc 1 1829 0
 3489 0006 0668     		ldr	r6, [r0]
 3490              	.LVL556:
1832:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 3491              		.loc 1 1832 0
 3492 0008 0021     		movs	r1, #0
 3493              	.LVL557:
 3494 000a FFF7FEFF 		bl	dir_sdi
 3495              	.LVL558:
1833:..\..\FatFs/ff.c **** 		n = 0;
 3496              		.loc 1 1833 0
 3497 000e 0246     		mov	r2, r0
 3498 0010 B8B9     		cbnz	r0, .L321
 3499 0012 0025     		movs	r5, #0
 3500              	.L324:
 3501              	.LVL559:
1836:..\..\FatFs/ff.c **** 			if (res != FR_OK) break;
 3502              		.loc 1 1836 0
 3503 0014 A169     		ldr	r1, [r4, #24]
 3504 0016 3046     		mov	r0, r6
 3505              	.LVL560:
 3506 0018 FFF7FEFF 		bl	move_window
 3507              	.LVL561:
1837:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 3508              		.loc 1 1837 0
 3509 001c 0246     		mov	r2, r0
 3510 001e 80B9     		cbnz	r0, .L321
1841:..\..\FatFs/ff.c **** #endif
 3511              		.loc 1 1841 0
 3512 0020 E369     		ldr	r3, [r4, #28]
 3513 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3514 0024 E52B     		cmp	r3, #229
 3515 0026 00D0     		beq	.L322
1841:..\..\FatFs/ff.c **** #endif
 3516              		.loc 1 1841 0 is_stmt 0 discriminator 1
 3517 0028 1BB9     		cbnz	r3, .L326
 3518              	.L322:
1843:..\..\FatFs/ff.c **** 			} else {
 3519              		.loc 1 1843 0 is_stmt 1
 3520 002a 0135     		adds	r5, r5, #1
 3521              	.LVL562:
 3522 002c BD42     		cmp	r5, r7
 3523 002e 01D1     		bne	.L323
 3524 0030 07E0     		b	.L321
 3525              	.L326:
1845:..\..\FatFs/ff.c **** 			}
 3526              		.loc 1 1845 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 188


 3527 0032 0025     		movs	r5, #0
 3528              	.LVL563:
 3529              	.L323:
1847:..\..\FatFs/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3530              		.loc 1 1847 0
 3531 0034 0121     		movs	r1, #1
 3532 0036 2046     		mov	r0, r4
 3533              	.LVL564:
 3534 0038 FFF7FEFF 		bl	dir_next
 3535              	.LVL565:
1848:..\..\FatFs/ff.c **** 	}
 3536              		.loc 1 1848 0
 3537 003c 0246     		mov	r2, r0
 3538 003e 0028     		cmp	r0, #0
 3539 0040 E8D0     		beq	.L324
 3540              	.LVL566:
 3541              	.L321:
1851:..\..\FatFs/ff.c **** 	return res;
 3542              		.loc 1 1851 0
 3543 0042 042A     		cmp	r2, #4
 3544 0044 00D1     		bne	.L325
 3545 0046 0722     		movs	r2, #7
 3546              	.LVL567:
 3547              	.L325:
1853:..\..\FatFs/ff.c **** 
 3548              		.loc 1 1853 0
 3549 0048 1046     		mov	r0, r2
 3550 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3551              		.cfi_endproc
 3552              	.LFE21:
 3553              		.size	dir_alloc, .-dir_alloc
 3554              		.section	.text.dir_register,"ax",%progbits
 3555              		.align	2
 3556              		.thumb
 3557              		.thumb_func
 3558              		.type	dir_register, %function
 3559              	dir_register:
 3560              	.LFB26:
2526:..\..\FatFs/ff.c **** 	FRESULT res;
 3561              		.loc 1 2526 0
 3562              		.cfi_startproc
 3563              		@ args = 0, pretend = 0, frame = 0
 3564              		@ frame_needed = 0, uses_anonymous_args = 0
 3565              	.LVL568:
 3566 0000 70B5     		push	{r4, r5, r6, lr}
 3567              		.cfi_def_cfa_offset 16
 3568              		.cfi_offset 4, -16
 3569              		.cfi_offset 5, -12
 3570              		.cfi_offset 6, -8
 3571              		.cfi_offset 14, -4
 3572 0002 0446     		mov	r4, r0
2528:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
 3573              		.loc 1 2528 0
 3574 0004 0668     		ldr	r6, [r0]
 3575              	.LVL569:
2600:..\..\FatFs/ff.c **** 
 3576              		.loc 1 2600 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 189


 3577 0006 0121     		movs	r1, #1
 3578 0008 FFF7FEFF 		bl	dir_alloc
 3579              	.LVL570:
2605:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
 3580              		.loc 1 2605 0
 3581 000c 0546     		mov	r5, r0
 3582 000e 90B9     		cbnz	r0, .L330
2606:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
 3583              		.loc 1 2606 0
 3584 0010 A169     		ldr	r1, [r4, #24]
 3585 0012 3046     		mov	r0, r6
 3586              	.LVL571:
 3587 0014 FFF7FEFF 		bl	move_window
 3588              	.LVL572:
2607:..\..\FatFs/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3589              		.loc 1 2607 0
 3590 0018 0546     		mov	r5, r0
 3591 001a 60B9     		cbnz	r0, .L330
2608:..\..\FatFs/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3592              		.loc 1 2608 0
 3593 001c 2022     		movs	r2, #32
 3594 001e 0021     		movs	r1, #0
 3595 0020 E069     		ldr	r0, [r4, #28]
 3596              	.LVL573:
 3597 0022 FFF7FEFF 		bl	mem_set
 3598              	.LVL574:
2609:..\..\FatFs/ff.c **** #if FF_USE_LFN
 3599              		.loc 1 2609 0
 3600 0026 0B22     		movs	r2, #11
 3601 0028 04F12001 		add	r1, r4, #32
 3602 002c E069     		ldr	r0, [r4, #28]
 3603 002e FFF7FEFF 		bl	mem_cpy
 3604              	.LVL575:
2613:..\..\FatFs/ff.c **** 		}
 3605              		.loc 1 2613 0
 3606 0032 0123     		movs	r3, #1
 3607 0034 F370     		strb	r3, [r6, #3]
 3608              	.L330:
 3609              	.LVL576:
2618:..\..\FatFs/ff.c **** 
 3610              		.loc 1 2618 0
 3611 0036 2846     		mov	r0, r5
 3612 0038 70BD     		pop	{r4, r5, r6, pc}
 3613              		.cfi_endproc
 3614              	.LFE26:
 3615              		.size	dir_register, .-dir_register
 3616 003a 00BF     		.section	.text.dir_read,"ax",%progbits
 3617              		.align	2
 3618              		.thumb
 3619              		.thumb_func
 3620              		.type	dir_read, %function
 3621              	dir_read:
 3622              	.LFB24:
2368:..\..\FatFs/ff.c **** 	FRESULT res = FR_NO_FILE;
 3623              		.loc 1 2368 0
 3624              		.cfi_startproc
 3625              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 190


 3626              		@ frame_needed = 0, uses_anonymous_args = 0
 3627              	.LVL577:
 3628 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3629              		.cfi_def_cfa_offset 24
 3630              		.cfi_offset 3, -24
 3631              		.cfi_offset 4, -20
 3632              		.cfi_offset 5, -16
 3633              		.cfi_offset 6, -12
 3634              		.cfi_offset 7, -8
 3635              		.cfi_offset 14, -4
 3636 0002 0446     		mov	r4, r0
 3637 0004 0E46     		mov	r6, r1
 3638              	.LVL578:
2370:..\..\FatFs/ff.c **** 	BYTE attr, b;
 3639              		.loc 1 2370 0
 3640 0006 0568     		ldr	r5, [r0]
 3641              	.LVL579:
2369:..\..\FatFs/ff.c **** 	FATFS *fs = dp->obj.fs;
 3642              		.loc 1 2369 0
 3643 0008 0427     		movs	r7, #4
2376:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
 3644              		.loc 1 2376 0
 3645 000a 1FE0     		b	.L333
 3646              	.LVL580:
 3647              	.L336:
2377:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
 3648              		.loc 1 2377 0
 3649 000c 2846     		mov	r0, r5
 3650 000e FFF7FEFF 		bl	move_window
 3651              	.LVL581:
2378:..\..\FatFs/ff.c **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3652              		.loc 1 2378 0
 3653 0012 0746     		mov	r7, r0
 3654 0014 F8B9     		cbnz	r0, .L334
2379:..\..\FatFs/ff.c **** 		if (b == 0) {
 3655              		.loc 1 2379 0
 3656 0016 E369     		ldr	r3, [r4, #28]
 3657 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3658              	.LVL582:
2380:..\..\FatFs/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3659              		.loc 1 2380 0
 3660 001a DAB1     		cbz	r2, .L338
2400:..\..\FatFs/ff.c **** #if FF_USE_LFN		/* LFN configuration */
 3661              		.loc 1 2400 0
 3662 001c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3663 001e 03F03F03 		and	r3, r3, #63
 3664              	.LVL583:
 3665 0022 A371     		strb	r3, [r4, #6]
2421:..\..\FatFs/ff.c **** 				break;
 3666              		.loc 1 2421 0
 3667 0024 E52A     		cmp	r2, #229
 3668 0026 0BD0     		beq	.L335
2421:..\..\FatFs/ff.c **** 				break;
 3669              		.loc 1 2421 0 is_stmt 0 discriminator 1
 3670 0028 2E2A     		cmp	r2, #46
 3671 002a 09D0     		beq	.L335
2421:..\..\FatFs/ff.c **** 				break;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 191


 3672              		.loc 1 2421 0 discriminator 2
 3673 002c 0F2B     		cmp	r3, #15
 3674 002e 07D0     		beq	.L335
2421:..\..\FatFs/ff.c **** 				break;
 3675              		.loc 1 2421 0 discriminator 3
 3676 0030 23F02003 		bic	r3, r3, #32
 3677              	.LVL584:
 3678 0034 082B     		cmp	r3, #8
 3679 0036 14BF     		ite	ne
 3680 0038 0023     		movne	r3, #0
 3681 003a 0123     		moveq	r3, #1
 3682 003c B342     		cmp	r3, r6
 3683 003e 0AD0     		beq	.L334
 3684              	.L335:
2426:..\..\FatFs/ff.c **** 		if (res != FR_OK) break;
 3685              		.loc 1 2426 0 is_stmt 1
 3686 0040 0021     		movs	r1, #0
 3687 0042 2046     		mov	r0, r4
 3688              	.LVL585:
 3689 0044 FFF7FEFF 		bl	dir_next
 3690              	.LVL586:
2427:..\..\FatFs/ff.c **** 	}
 3691              		.loc 1 2427 0
 3692 0048 0746     		mov	r7, r0
 3693 004a 20B9     		cbnz	r0, .L334
 3694              	.LVL587:
 3695              	.L333:
2376:..\..\FatFs/ff.c **** 		res = move_window(fs, dp->sect);
 3696              		.loc 1 2376 0
 3697 004c A169     		ldr	r1, [r4, #24]
 3698 004e 0029     		cmp	r1, #0
 3699 0050 DCD1     		bne	.L336
 3700 0052 00E0     		b	.L334
 3701              	.LVL588:
 3702              	.L338:
2381:..\..\FatFs/ff.c **** 		}
 3703              		.loc 1 2381 0
 3704 0054 0427     		movs	r7, #4
 3705              	.LVL589:
 3706              	.L334:
2430:..\..\FatFs/ff.c **** 	return res;
 3707              		.loc 1 2430 0
 3708 0056 0FB1     		cbz	r7, .L337
2430:..\..\FatFs/ff.c **** 	return res;
 3709              		.loc 1 2430 0 is_stmt 0 discriminator 1
 3710 0058 0023     		movs	r3, #0
 3711 005a A361     		str	r3, [r4, #24]
 3712              	.L337:
2432:..\..\FatFs/ff.c **** 
 3713              		.loc 1 2432 0 is_stmt 1
 3714 005c 3846     		mov	r0, r7
 3715 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3716              		.cfi_endproc
 3717              	.LFE24:
 3718              		.size	dir_read, .-dir_read
 3719              		.section	.text.sync_fs,"ax",%progbits
 3720              		.align	2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 192


 3721              		.thumb
 3722              		.thumb_func
 3723              		.type	sync_fs, %function
 3724              	sync_fs:
 3725              	.LFB12:
1128:..\..\FatFs/ff.c **** 	FRESULT res;
 3726              		.loc 1 1128 0
 3727              		.cfi_startproc
 3728              		@ args = 0, pretend = 0, frame = 0
 3729              		@ frame_needed = 0, uses_anonymous_args = 0
 3730              	.LVL590:
 3731 0000 70B5     		push	{r4, r5, r6, lr}
 3732              		.cfi_def_cfa_offset 16
 3733              		.cfi_offset 4, -16
 3734              		.cfi_offset 5, -12
 3735              		.cfi_offset 6, -8
 3736              		.cfi_offset 14, -4
 3737 0002 0446     		mov	r4, r0
1132:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 3738              		.loc 1 1132 0
 3739 0004 FFF7FEFF 		bl	sync_window
 3740              	.LVL591:
1133:..\..\FatFs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 3741              		.loc 1 1133 0
 3742 0008 0546     		mov	r5, r0
 3743 000a 0028     		cmp	r0, #0
 3744 000c 37D1     		bne	.L341
1134:..\..\FatFs/ff.c **** 			/* Create FSInfo structure */
 3745              		.loc 1 1134 0
 3746 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3747 0010 032B     		cmp	r3, #3
 3748 0012 2DD1     		bne	.L342
1134:..\..\FatFs/ff.c **** 			/* Create FSInfo structure */
 3749              		.loc 1 1134 0 is_stmt 0 discriminator 1
 3750 0014 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3751 0016 012B     		cmp	r3, #1
 3752 0018 2AD1     		bne	.L342
1136:..\..\FatFs/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 3753              		.loc 1 1136 0 is_stmt 1
 3754 001a 04F13406 		add	r6, r4, #52
 3755 001e 4FF40072 		mov	r2, #512
 3756 0022 0021     		movs	r1, #0
 3757 0024 3046     		mov	r0, r6
 3758              	.LVL592:
 3759 0026 FFF7FEFF 		bl	mem_set
 3760              	.LVL593:
1137:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 3761              		.loc 1 1137 0
 3762 002a 4AF65521 		movw	r1, #43605
 3763 002e 04F23220 		addw	r0, r4, #562
 3764 0032 FFF7FEFF 		bl	st_word
 3765              	.LVL594:
1138:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 3766              		.loc 1 1138 0
 3767 0036 1349     		ldr	r1, .L345
 3768 0038 3046     		mov	r0, r6
 3769 003a FFF7FEFF 		bl	st_dword
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 193


 3770              	.LVL595:
1139:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 3771              		.loc 1 1139 0
 3772 003e 1249     		ldr	r1, .L345+4
 3773 0040 04F50670 		add	r0, r4, #536
 3774 0044 FFF7FEFF 		bl	st_dword
 3775              	.LVL596:
1140:..\..\FatFs/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 3776              		.loc 1 1140 0
 3777 0048 2169     		ldr	r1, [r4, #16]
 3778 004a 04F50770 		add	r0, r4, #540
 3779 004e FFF7FEFF 		bl	st_dword
 3780              	.LVL597:
1141:..\..\FatFs/ff.c **** 			/* Write it into the FSInfo sector */
 3781              		.loc 1 1141 0
 3782 0052 E168     		ldr	r1, [r4, #12]
 3783 0054 04F50870 		add	r0, r4, #544
 3784 0058 FFF7FEFF 		bl	st_dword
 3785              	.LVL598:
1143:..\..\FatFs/ff.c **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 3786              		.loc 1 1143 0
 3787 005c 226A     		ldr	r2, [r4, #32]
 3788 005e 0132     		adds	r2, r2, #1
 3789 0060 2263     		str	r2, [r4, #48]
1144:..\..\FatFs/ff.c **** 			fs->fsi_flag = 0;
 3790              		.loc 1 1144 0
 3791 0062 0123     		movs	r3, #1
 3792 0064 3146     		mov	r1, r6
 3793 0066 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3794 0068 FFF7FEFF 		bl	disk_write
 3795              	.LVL599:
1145:..\..\FatFs/ff.c **** 		}
 3796              		.loc 1 1145 0
 3797 006c 0023     		movs	r3, #0
 3798 006e 2371     		strb	r3, [r4, #4]
 3799              	.L342:
1148:..\..\FatFs/ff.c **** 	}
 3800              		.loc 1 1148 0
 3801 0070 0022     		movs	r2, #0
 3802 0072 1146     		mov	r1, r2
 3803 0074 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3804 0076 FFF7FEFF 		bl	disk_ioctl
 3805              	.LVL600:
 3806 007a 00B1     		cbz	r0, .L341
 3807 007c 0125     		movs	r5, #1
 3808              	.L341:
 3809              	.LVL601:
1152:..\..\FatFs/ff.c **** 
 3810              		.loc 1 1152 0
 3811 007e 2846     		mov	r0, r5
 3812 0080 70BD     		pop	{r4, r5, r6, pc}
 3813              	.LVL602:
 3814              	.L346:
 3815 0082 00BF     		.align	2
 3816              	.L345:
 3817 0084 52526141 		.word	1096897106
 3818 0088 72724161 		.word	1631679090
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 194


 3819              		.cfi_endproc
 3820              	.LFE12:
 3821              		.size	sync_fs, .-sync_fs
 3822              		.section	.text.f_mount,"ax",%progbits
 3823              		.align	2
 3824              		.global	f_mount
 3825              		.thumb
 3826              		.thumb_func
 3827              		.type	f_mount, %function
 3828              	f_mount:
 3829              	.LFB36:
3648:..\..\FatFs/ff.c **** 	FATFS *cfs;
 3830              		.loc 1 3648 0
 3831              		.cfi_startproc
 3832              		@ args = 0, pretend = 0, frame = 16
 3833              		@ frame_needed = 0, uses_anonymous_args = 0
 3834              	.LVL603:
 3835 0000 10B5     		push	{r4, lr}
 3836              		.cfi_def_cfa_offset 8
 3837              		.cfi_offset 4, -8
 3838              		.cfi_offset 14, -4
 3839 0002 84B0     		sub	sp, sp, #16
 3840              		.cfi_def_cfa_offset 24
 3841 0004 0190     		str	r0, [sp, #4]
 3842 0006 0091     		str	r1, [sp]
 3843 0008 1446     		mov	r4, r2
3652:..\..\FatFs/ff.c **** 
 3844              		.loc 1 3652 0
 3845 000a 04A8     		add	r0, sp, #16
 3846              	.LVL604:
 3847 000c 40F8041D 		str	r1, [r0, #-4]!
3656:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 3848              		.loc 1 3656 0
 3849 0010 FFF7FEFF 		bl	get_ldnumber
 3850              	.LVL605:
3657:..\..\FatFs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 3851              		.loc 1 3657 0
 3852 0014 0028     		cmp	r0, #0
 3853 0016 16DB     		blt	.L351
3658:..\..\FatFs/ff.c **** 
 3854              		.loc 1 3658 0
 3855 0018 0D4B     		ldr	r3, .L354
 3856 001a 03EB8003 		add	r3, r3, r0, lsl #2
 3857 001e 5B68     		ldr	r3, [r3, #4]
 3858              	.LVL606:
3660:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 3859              		.loc 1 3660 0
 3860 0020 0BB1     		cbz	r3, .L349
3667:..\..\FatFs/ff.c **** 	}
 3861              		.loc 1 3667 0
 3862 0022 0022     		movs	r2, #0
 3863 0024 1A70     		strb	r2, [r3]
 3864              	.L349:
3670:..\..\FatFs/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 3865              		.loc 1 3670 0
 3866 0026 019B     		ldr	r3, [sp, #4]
 3867              	.LVL607:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 195


 3868 0028 0BB1     		cbz	r3, .L350
3671:..\..\FatFs/ff.c **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
 3869              		.loc 1 3671 0
 3870 002a 0022     		movs	r2, #0
 3871 002c 1A70     		strb	r2, [r3]
 3872              	.L350:
3676:..\..\FatFs/ff.c **** 
 3873              		.loc 1 3676 0
 3874 002e 084B     		ldr	r3, .L354
 3875 0030 03EB8000 		add	r0, r3, r0, lsl #2
 3876              	.LVL608:
 3877 0034 019B     		ldr	r3, [sp, #4]
 3878 0036 4360     		str	r3, [r0, #4]
3678:..\..\FatFs/ff.c **** 
 3879              		.loc 1 3678 0
 3880 0038 3CB1     		cbz	r4, .L352
3680:..\..\FatFs/ff.c **** 	LEAVE_FF(fs, res);
 3881              		.loc 1 3680 0
 3882 003a 0022     		movs	r2, #0
 3883 003c 01A9     		add	r1, sp, #4
 3884              	.LVL609:
 3885 003e 6846     		mov	r0, sp
 3886 0040 FFF7FEFF 		bl	mount_volume
 3887              	.LVL610:
3681:..\..\FatFs/ff.c **** }
 3888              		.loc 1 3681 0
 3889 0044 02E0     		b	.L348
 3890              	.LVL611:
 3891              	.L351:
3657:..\..\FatFs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 3892              		.loc 1 3657 0
 3893 0046 0B20     		movs	r0, #11
 3894              	.LVL612:
 3895 0048 00E0     		b	.L348
 3896              	.L352:
3678:..\..\FatFs/ff.c **** 
 3897              		.loc 1 3678 0
 3898 004a 0020     		movs	r0, #0
 3899              	.L348:
3682:..\..\FatFs/ff.c **** 
 3900              		.loc 1 3682 0
 3901 004c 04B0     		add	sp, sp, #16
 3902              		.cfi_def_cfa_offset 8
 3903              	.LVL613:
 3904              		@ sp needed
 3905 004e 10BD     		pop	{r4, pc}
 3906              	.LVL614:
 3907              	.L355:
 3908              		.align	2
 3909              	.L354:
 3910 0050 00000000 		.word	.LANCHOR0
 3911              		.cfi_endproc
 3912              	.LFE36:
 3913              		.size	f_mount, .-f_mount
 3914              		.section	.text.f_open,"ax",%progbits
 3915              		.align	2
 3916              		.global	f_open
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 196


 3917              		.thumb
 3918              		.thumb_func
 3919              		.type	f_open, %function
 3920              	f_open:
 3921              	.LFB37:
3696:..\..\FatFs/ff.c **** 	FRESULT res;
 3922              		.loc 1 3696 0
 3923              		.cfi_startproc
 3924              		@ args = 0, pretend = 0, frame = 56
 3925              		@ frame_needed = 0, uses_anonymous_args = 0
 3926              	.LVL615:
 3927 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3928              		.cfi_def_cfa_offset 24
 3929              		.cfi_offset 4, -24
 3930              		.cfi_offset 5, -20
 3931              		.cfi_offset 6, -16
 3932              		.cfi_offset 7, -12
 3933              		.cfi_offset 8, -8
 3934              		.cfi_offset 14, -4
 3935 0004 8EB0     		sub	sp, sp, #56
 3936              		.cfi_def_cfa_offset 80
 3937 0006 0191     		str	r1, [sp, #4]
3708:..\..\FatFs/ff.c **** 
 3938              		.loc 1 3708 0
 3939 0008 0028     		cmp	r0, #0
 3940 000a 00F0D880 		beq	.L372
 3941 000e 0546     		mov	r5, r0
 3942 0010 1646     		mov	r6, r2
3711:..\..\FatFs/ff.c **** 	res = mount_volume(&path, &fs, mode);
 3943              		.loc 1 3711 0
 3944 0012 02F03F07 		and	r7, r2, #63
 3945              	.LVL616:
3712:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 3946              		.loc 1 3712 0
 3947 0016 3A46     		mov	r2, r7
 3948 0018 02A9     		add	r1, sp, #8
 3949              	.LVL617:
 3950 001a 01A8     		add	r0, sp, #4
 3951              	.LVL618:
 3952 001c FFF7FEFF 		bl	mount_volume
 3953              	.LVL619:
3713:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
 3954              		.loc 1 3713 0
 3955 0020 0446     		mov	r4, r0
 3956 0022 0028     		cmp	r0, #0
 3957 0024 40F0C680 		bne	.L358
3714:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 3958              		.loc 1 3714 0
 3959 0028 029B     		ldr	r3, [sp, #8]
 3960 002a 0393     		str	r3, [sp, #12]
3716:..\..\FatFs/ff.c **** #if !FF_FS_READONLY	/* Read/Write configuration */
 3961              		.loc 1 3716 0
 3962 002c 0199     		ldr	r1, [sp, #4]
 3963 002e 03A8     		add	r0, sp, #12
 3964              	.LVL620:
 3965 0030 FFF7FEFF 		bl	follow_path
 3966              	.LVL621:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 197


3718:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 3967              		.loc 1 3718 0
 3968 0034 0446     		mov	r4, r0
 3969 0036 20B9     		cbnz	r0, .L359
3719:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;
 3970              		.loc 1 3719 0
 3971 0038 9DF93730 		ldrsb	r3, [sp, #55]
 3972 003c 002B     		cmp	r3, #0
 3973 003e 00DA     		bge	.L359
3720:..\..\FatFs/ff.c **** 			}
 3974              		.loc 1 3720 0
 3975 0040 0624     		movs	r4, #6
 3976              	.L359:
 3977              	.LVL622:
3729:..\..\FatFs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 3978              		.loc 1 3729 0
 3979 0042 16F01C0F 		tst	r6, #28
 3980 0046 4BD0     		beq	.L360
3730:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 3981              		.loc 1 3730 0
 3982 0048 44B1     		cbz	r4, .L361
3731:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 3983              		.loc 1 3731 0
 3984 004a 042C     		cmp	r4, #4
 3985 004c 03D1     		bne	.L362
3735:..\..\FatFs/ff.c **** #endif
 3986              		.loc 1 3735 0
 3987 004e 03A8     		add	r0, sp, #12
 3988 0050 FFF7FEFF 		bl	dir_register
 3989              	.LVL623:
 3990 0054 0446     		mov	r4, r0
 3991              	.LVL624:
 3992              	.L362:
3738:..\..\FatFs/ff.c **** 			}
 3993              		.loc 1 3738 0
 3994 0056 47F00807 		orr	r7, r7, #8
 3995              	.LVL625:
 3996 005a 0BE0     		b	.L363
 3997              	.L361:
3741:..\..\FatFs/ff.c **** 					res = FR_DENIED;
 3998              		.loc 1 3741 0
 3999 005c 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 4000 0060 13F0110F 		tst	r3, #17
 4001 0064 03D1     		bne	.L374
3744:..\..\FatFs/ff.c **** 				}
 4002              		.loc 1 3744 0
 4003 0066 16F0040F 		tst	r6, #4
 4004 006a 02D1     		bne	.L375
 4005 006c 02E0     		b	.L363
 4006              	.L374:
3742:..\..\FatFs/ff.c **** 				} else {
 4007              		.loc 1 3742 0
 4008 006e 0724     		movs	r4, #7
 4009              	.LVL626:
 4010 0070 00E0     		b	.L363
 4011              	.LVL627:
 4012              	.L375:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 198


3744:..\..\FatFs/ff.c **** 				}
 4013              		.loc 1 3744 0
 4014 0072 0824     		movs	r4, #8
 4015              	.LVL628:
 4016              	.L363:
3747:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 4017              		.loc 1 3747 0
 4018 0074 002C     		cmp	r4, #0
 4019 0076 43D1     		bne	.L364
3747:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 4020              		.loc 1 3747 0 is_stmt 0 discriminator 1
 4021 0078 17F0080F 		tst	r7, #8
 4022 007c 40D0     		beq	.L364
3768:..\..\FatFs/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 4023              		.loc 1 3768 0 is_stmt 1
 4024 007e 0A9E     		ldr	r6, [sp, #40]
 4025 0080 3146     		mov	r1, r6
 4026 0082 0298     		ldr	r0, [sp, #8]
 4027 0084 FFF7FEFF 		bl	ld_clust
 4028              	.LVL629:
 4029 0088 8046     		mov	r8, r0
 4030              	.LVL630:
3769:..\..\FatFs/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 4031              		.loc 1 3769 0
 4032 008a 5049     		ldr	r1, .L384
 4033 008c 06F10E00 		add	r0, r6, #14
 4034              	.LVL631:
 4035 0090 FFF7FEFF 		bl	st_dword
 4036              	.LVL632:
3770:..\..\FatFs/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 4037              		.loc 1 3770 0
 4038 0094 2022     		movs	r2, #32
 4039 0096 0A9B     		ldr	r3, [sp, #40]
 4040 0098 DA72     		strb	r2, [r3, #11]
3771:..\..\FatFs/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 4041              		.loc 1 3771 0
 4042 009a 0022     		movs	r2, #0
 4043 009c 0A99     		ldr	r1, [sp, #40]
 4044 009e 0298     		ldr	r0, [sp, #8]
 4045 00a0 FFF7FEFF 		bl	st_clust
 4046              	.LVL633:
3772:..\..\FatFs/ff.c **** 					fs->wflag = 1;
 4047              		.loc 1 3772 0
 4048 00a4 0021     		movs	r1, #0
 4049 00a6 0A98     		ldr	r0, [sp, #40]
 4050 00a8 1C30     		adds	r0, r0, #28
 4051 00aa FFF7FEFF 		bl	st_dword
 4052              	.LVL634:
3773:..\..\FatFs/ff.c **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 4053              		.loc 1 3773 0
 4054 00ae 0122     		movs	r2, #1
 4055 00b0 029B     		ldr	r3, [sp, #8]
 4056 00b2 DA70     		strb	r2, [r3, #3]
3774:..\..\FatFs/ff.c **** 						sc = fs->winsect;
 4057              		.loc 1 3774 0
 4058 00b4 B8F1000F 		cmp	r8, #0
 4059 00b8 22D0     		beq	.L364
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 199


3775:..\..\FatFs/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 4060              		.loc 1 3775 0
 4061 00ba 029B     		ldr	r3, [sp, #8]
 4062 00bc 1E6B     		ldr	r6, [r3, #48]
 4063              	.LVL635:
3776:..\..\FatFs/ff.c **** 						if (res == FR_OK) {
 4064              		.loc 1 3776 0
 4065 00be 0022     		movs	r2, #0
 4066 00c0 4146     		mov	r1, r8
 4067 00c2 03A8     		add	r0, sp, #12
 4068 00c4 FFF7FEFF 		bl	remove_chain
 4069              	.LVL636:
3777:..\..\FatFs/ff.c **** 							res = move_window(fs, sc);
 4070              		.loc 1 3777 0
 4071 00c8 0446     		mov	r4, r0
 4072 00ca C8B9     		cbnz	r0, .L364
3778:..\..\FatFs/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 4073              		.loc 1 3778 0
 4074 00cc 3146     		mov	r1, r6
 4075 00ce 0298     		ldr	r0, [sp, #8]
 4076              	.LVL637:
 4077 00d0 FFF7FEFF 		bl	move_window
 4078              	.LVL638:
 4079 00d4 0446     		mov	r4, r0
 4080              	.LVL639:
3779:..\..\FatFs/ff.c **** 						}
 4081              		.loc 1 3779 0
 4082 00d6 08F1FF33 		add	r3, r8, #-1
 4083 00da 029A     		ldr	r2, [sp, #8]
 4084 00dc D360     		str	r3, [r2, #12]
 4085 00de 0FE0     		b	.L364
 4086              	.LVL640:
 4087              	.L360:
3786:..\..\FatFs/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 4088              		.loc 1 3786 0
 4089 00e0 74B9     		cbnz	r4, .L364
3787:..\..\FatFs/ff.c **** 					res = FR_NO_FILE;
 4090              		.loc 1 3787 0
 4091 00e2 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 4092 00e6 13F0100F 		tst	r3, #16
 4093 00ea 06D1     		bne	.L376
3790:..\..\FatFs/ff.c **** 						res = FR_DENIED;
 4094              		.loc 1 3790 0
 4095 00ec 16F0020F 		tst	r6, #2
 4096 00f0 06D0     		beq	.L364
3790:..\..\FatFs/ff.c **** 						res = FR_DENIED;
 4097              		.loc 1 3790 0 is_stmt 0 discriminator 1
 4098 00f2 13F0010F 		tst	r3, #1
 4099 00f6 02D1     		bne	.L377
 4100 00f8 02E0     		b	.L364
 4101              	.L376:
3788:..\..\FatFs/ff.c **** 				} else {
 4102              		.loc 1 3788 0 is_stmt 1
 4103 00fa 0424     		movs	r4, #4
 4104              	.LVL641:
 4105 00fc 00E0     		b	.L364
 4106              	.LVL642:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 200


 4107              	.L377:
3791:..\..\FatFs/ff.c **** 					}
 4108              		.loc 1 3791 0
 4109 00fe 0724     		movs	r4, #7
 4110              	.LVL643:
 4111              	.L364:
3796:..\..\FatFs/ff.c **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 4112              		.loc 1 3796 0
 4113 0100 4CB9     		cbnz	r4, .L365
3797:..\..\FatFs/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 4114              		.loc 1 3797 0
 4115 0102 17F0080F 		tst	r7, #8
 4116 0106 01D0     		beq	.L366
3797:..\..\FatFs/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 4117              		.loc 1 3797 0 is_stmt 0 discriminator 1
 4118 0108 47F04007 		orr	r7, r7, #64
 4119              	.LVL644:
 4120              	.L366:
3798:..\..\FatFs/ff.c **** 			fp->dir_ptr = dj.dir;
 4121              		.loc 1 3798 0 is_stmt 1
 4122 010c 029B     		ldr	r3, [sp, #8]
 4123 010e 1B6B     		ldr	r3, [r3, #48]
 4124 0110 2B62     		str	r3, [r5, #32]
3799:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 4125              		.loc 1 3799 0
 4126 0112 0A9B     		ldr	r3, [sp, #40]
 4127 0114 6B62     		str	r3, [r5, #36]
 4128              	.L365:
3817:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 4129              		.loc 1 3817 0
 4130 0116 002C     		cmp	r4, #0
 4131 0118 4CD1     		bne	.L358
3827:..\..\FatFs/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 4132              		.loc 1 3827 0
 4133 011a 029E     		ldr	r6, [sp, #8]
 4134 011c DDF82880 		ldr	r8, [sp, #40]
 4135 0120 4146     		mov	r1, r8
 4136 0122 3046     		mov	r0, r6
 4137 0124 FFF7FEFF 		bl	ld_clust
 4138              	.LVL645:
 4139 0128 A860     		str	r0, [r5, #8]
3828:..\..\FatFs/ff.c **** 			}
 4140              		.loc 1 3828 0
 4141 012a 08F11C00 		add	r0, r8, #28
 4142 012e FFF7FEFF 		bl	ld_dword
 4143              	.LVL646:
 4144 0132 E860     		str	r0, [r5, #12]
3833:..\..\FatFs/ff.c **** 			fp->obj.id = fs->id;
 4145              		.loc 1 3833 0
 4146 0134 2E60     		str	r6, [r5]
3834:..\..\FatFs/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 4147              		.loc 1 3834 0
 4148 0136 F388     		ldrh	r3, [r6, #6]
 4149 0138 AB80     		strh	r3, [r5, #4]	@ movhi
3835:..\..\FatFs/ff.c **** 			fp->err = 0;			/* Clear error flag */
 4150              		.loc 1 3835 0
 4151 013a 2F74     		strb	r7, [r5, #16]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 201


3836:..\..\FatFs/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 4152              		.loc 1 3836 0
 4153 013c 0021     		movs	r1, #0
 4154 013e 6974     		strb	r1, [r5, #17]
3837:..\..\FatFs/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 4155              		.loc 1 3837 0
 4156 0140 E961     		str	r1, [r5, #28]
3838:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 4157              		.loc 1 3838 0
 4158 0142 6961     		str	r1, [r5, #20]
3841:..\..\FatFs/ff.c **** #endif
 4159              		.loc 1 3841 0
 4160 0144 05F12808 		add	r8, r5, #40
 4161 0148 4FF40072 		mov	r2, #512
 4162 014c 4046     		mov	r0, r8
 4163 014e FFF7FEFF 		bl	mem_set
 4164              	.LVL647:
3843:..\..\FatFs/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4165              		.loc 1 3843 0
 4166 0152 17F0200F 		tst	r7, #32
 4167 0156 2DD0     		beq	.L358
3843:..\..\FatFs/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4168              		.loc 1 3843 0 is_stmt 0 discriminator 1
 4169 0158 EE68     		ldr	r6, [r5, #12]
 4170 015a 5EB3     		cbz	r6, .L358
3844:..\..\FatFs/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 4171              		.loc 1 3844 0 is_stmt 1
 4172 015c 6E61     		str	r6, [r5, #20]
3845:..\..\FatFs/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 4173              		.loc 1 3845 0
 4174 015e 029B     		ldr	r3, [sp, #8]
 4175 0160 5F89     		ldrh	r7, [r3, #10]
 4176              	.LVL648:
 4177 0162 7F02     		lsls	r7, r7, #9
 4178              	.LVL649:
3846:..\..\FatFs/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 4179              		.loc 1 3846 0
 4180 0164 A968     		ldr	r1, [r5, #8]
 4181              	.LVL650:
3847:..\..\FatFs/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4182              		.loc 1 3847 0
 4183 0166 0BE0     		b	.L367
 4184              	.L371:
3848:..\..\FatFs/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 4185              		.loc 1 3848 0
 4186 0168 2846     		mov	r0, r5
 4187 016a FFF7FEFF 		bl	get_fat
 4188              	.LVL651:
 4189 016e 0146     		mov	r1, r0
 4190              	.LVL652:
3849:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 4191              		.loc 1 3849 0
 4192 0170 0128     		cmp	r0, #1
 4193 0172 00D8     		bhi	.L368
 4194 0174 0224     		movs	r4, #2
 4195              	.LVL653:
 4196              	.L368:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 202


3850:..\..\FatFs/ff.c **** 				}
 4197              		.loc 1 3850 0
 4198 0176 B1F1FF3F 		cmp	r1, #-1
 4199 017a 00D1     		bne	.L369
 4200 017c 0124     		movs	r4, #1
 4201              	.LVL654:
 4202              	.L369:
3847:..\..\FatFs/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4203              		.loc 1 3847 0 discriminator 2
 4204 017e F61B     		subs	r6, r6, r7
 4205              	.LVL655:
 4206              	.L367:
3847:..\..\FatFs/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4207              		.loc 1 3847 0 is_stmt 0 discriminator 1
 4208 0180 0CB9     		cbnz	r4, .L370
3847:..\..\FatFs/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4209              		.loc 1 3847 0 discriminator 3
 4210 0182 BE42     		cmp	r6, r7
 4211 0184 F0D8     		bhi	.L371
 4212              	.L370:
3852:..\..\FatFs/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 4213              		.loc 1 3852 0 is_stmt 1
 4214 0186 A961     		str	r1, [r5, #24]
3853:..\..\FatFs/ff.c **** 					sc = clst2sect(fs, clst);
 4215              		.loc 1 3853 0
 4216 0188 A4B9     		cbnz	r4, .L358
3853:..\..\FatFs/ff.c **** 					sc = clst2sect(fs, clst);
 4217              		.loc 1 3853 0 is_stmt 0 discriminator 1
 4218 018a C6F30803 		ubfx	r3, r6, #0, #9
 4219 018e 8BB1     		cbz	r3, .L358
3854:..\..\FatFs/ff.c **** 					if (sc == 0) {
 4220              		.loc 1 3854 0 is_stmt 1
 4221 0190 029F     		ldr	r7, [sp, #8]
 4222              	.LVL656:
 4223 0192 3846     		mov	r0, r7
 4224 0194 FFF7FEFF 		bl	clst2sect
 4225              	.LVL657:
3855:..\..\FatFs/ff.c **** 						res = FR_INT_ERR;
 4226              		.loc 1 3855 0
 4227 0198 48B1     		cbz	r0, .L380
3858:..\..\FatFs/ff.c **** #if !FF_FS_TINY
 4228              		.loc 1 3858 0
 4229 019a 00EB5622 		add	r2, r0, r6, lsr #9
 4230 019e EA61     		str	r2, [r5, #28]
3860:..\..\FatFs/ff.c **** #endif
 4231              		.loc 1 3860 0
 4232 01a0 0123     		movs	r3, #1
 4233 01a2 4146     		mov	r1, r8
 4234 01a4 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 4235              	.LVL658:
 4236 01a6 FFF7FEFF 		bl	disk_read
 4237              	.LVL659:
 4238 01aa 10B9     		cbnz	r0, .L381
 4239 01ac 02E0     		b	.L358
 4240              	.LVL660:
 4241              	.L380:
3856:..\..\FatFs/ff.c **** 					} else {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 203


 4242              		.loc 1 3856 0
 4243 01ae 0224     		movs	r4, #2
 4244              	.LVL661:
 4245 01b0 00E0     		b	.L358
 4246              	.LVL662:
 4247              	.L381:
3860:..\..\FatFs/ff.c **** #endif
 4248              		.loc 1 3860 0
 4249 01b2 0124     		movs	r4, #1
 4250              	.LVL663:
 4251              	.L358:
3871:..\..\FatFs/ff.c **** 
 4252              		.loc 1 3871 0
 4253 01b4 2CB1     		cbz	r4, .L382
3871:..\..\FatFs/ff.c **** 
 4254              		.loc 1 3871 0 is_stmt 0 discriminator 1
 4255 01b6 0023     		movs	r3, #0
 4256 01b8 2B60     		str	r3, [r5]
3873:..\..\FatFs/ff.c **** }
 4257              		.loc 1 3873 0 is_stmt 1 discriminator 1
 4258 01ba 2046     		mov	r0, r4
 4259 01bc 02E0     		b	.L357
 4260              	.LVL664:
 4261              	.L372:
3708:..\..\FatFs/ff.c **** 
 4262              		.loc 1 3708 0
 4263 01be 0920     		movs	r0, #9
 4264              	.LVL665:
 4265 01c0 00E0     		b	.L357
 4266              	.LVL666:
 4267              	.L382:
3873:..\..\FatFs/ff.c **** }
 4268              		.loc 1 3873 0
 4269 01c2 2046     		mov	r0, r4
 4270              	.LVL667:
 4271              	.L357:
3874:..\..\FatFs/ff.c **** 
 4272              		.loc 1 3874 0
 4273 01c4 0EB0     		add	sp, sp, #56
 4274              		.cfi_def_cfa_offset 24
 4275              		@ sp needed
 4276 01c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4277              	.LVL668:
 4278              	.L385:
 4279 01ca 00BF     		.align	2
 4280              	.L384:
 4281 01cc 0000214E 		.word	1310785536
 4282              		.cfi_endproc
 4283              	.LFE37:
 4284              		.size	f_open, .-f_open
 4285              		.section	.text.f_read,"ax",%progbits
 4286              		.align	2
 4287              		.global	f_read
 4288              		.thumb
 4289              		.thumb_func
 4290              		.type	f_read, %function
 4291              	f_read:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 204


 4292              	.LFB38:
3889:..\..\FatFs/ff.c **** 	FRESULT res;
 4293              		.loc 1 3889 0
 4294              		.cfi_startproc
 4295              		@ args = 0, pretend = 0, frame = 16
 4296              		@ frame_needed = 0, uses_anonymous_args = 0
 4297              	.LVL669:
 4298 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4299              		.cfi_def_cfa_offset 36
 4300              		.cfi_offset 4, -36
 4301              		.cfi_offset 5, -32
 4302              		.cfi_offset 6, -28
 4303              		.cfi_offset 7, -24
 4304              		.cfi_offset 8, -20
 4305              		.cfi_offset 9, -16
 4306              		.cfi_offset 10, -12
 4307              		.cfi_offset 11, -8
 4308              		.cfi_offset 14, -4
 4309 0004 85B0     		sub	sp, sp, #20
 4310              		.cfi_def_cfa_offset 56
 4311 0006 0446     		mov	r4, r0
 4312 0008 8846     		mov	r8, r1
 4313 000a 1546     		mov	r5, r2
 4314 000c 1F46     		mov	r7, r3
 4315              	.LVL670:
3899:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 4316              		.loc 1 3899 0
 4317 000e 0023     		movs	r3, #0
 4318              	.LVL671:
 4319 0010 3B60     		str	r3, [r7]
3900:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4320              		.loc 1 3900 0
 4321 0012 0190     		str	r0, [sp, #4]
 4322 0014 03A9     		add	r1, sp, #12
 4323              	.LVL672:
 4324 0016 FFF7FEFF 		bl	validate
 4325              	.LVL673:
3901:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4326              		.loc 1 3901 0
 4327 001a 0028     		cmp	r0, #0
 4328 001c 40F0A580 		bne	.L407
3901:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4329              		.loc 1 3901 0 is_stmt 0 discriminator 2
 4330 0020 607C     		ldrb	r0, [r4, #17]	@ zero_extendqisi2
 4331              	.LVL674:
 4332 0022 0028     		cmp	r0, #0
 4333 0024 40F0A380 		bne	.L387
3902:..\..\FatFs/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 4334              		.loc 1 3902 0 is_stmt 1
 4335 0028 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4336 002a 13F0010F 		tst	r3, #1
 4337 002e 00F09D80 		beq	.L409
3903:..\..\FatFs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4338              		.loc 1 3903 0
 4339 0032 E668     		ldr	r6, [r4, #12]
 4340 0034 6369     		ldr	r3, [r4, #20]
 4341 0036 F61A     		subs	r6, r6, r3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 205


 4342              	.LVL675:
3904:..\..\FatFs/ff.c **** 
 4343              		.loc 1 3904 0
 4344 0038 AE42     		cmp	r6, r5
 4345 003a C0F09180 		bcc	.L389
 4346 003e 2E46     		mov	r6, r5
 4347              	.LVL676:
 4348 0040 8EE0     		b	.L389
 4349              	.LVL677:
 4350              	.L406:
3908:..\..\FatFs/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 4351              		.loc 1 3908 0
 4352 0042 6369     		ldr	r3, [r4, #20]
 4353 0044 C3F30802 		ubfx	r2, r3, #0, #9
 4354 0048 002A     		cmp	r2, #0
 4355 004a 72D1     		bne	.L390
3909:..\..\FatFs/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 4356              		.loc 1 3909 0
 4357 004c 039A     		ldr	r2, [sp, #12]
 4358 004e B2F80A90 		ldrh	r9, [r2, #10]
 4359 0052 09F1FF39 		add	r9, r9, #-1
 4360              	.LVL678:
3910:..\..\FatFs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 4361              		.loc 1 3910 0
 4362 0056 19EA5329 		ands	r9, r9, r3, lsr #9
 4363              	.LVL679:
 4364 005a 12D1     		bne	.L391
3911:..\..\FatFs/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 4365              		.loc 1 3911 0
 4366 005c 0BB9     		cbnz	r3, .L392
3912:..\..\FatFs/ff.c **** 				} else {						/* Middle or end of the file */
 4367              		.loc 1 3912 0
 4368 005e A068     		ldr	r0, [r4, #8]
 4369              	.LVL680:
 4370 0060 03E0     		b	.L393
 4371              	.LVL681:
 4372              	.L392:
3920:..\..\FatFs/ff.c **** 					}
 4373              		.loc 1 3920 0
 4374 0062 A169     		ldr	r1, [r4, #24]
 4375 0064 0198     		ldr	r0, [sp, #4]
 4376 0066 FFF7FEFF 		bl	get_fat
 4377              	.LVL682:
 4378              	.L393:
3923:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4379              		.loc 1 3923 0
 4380 006a 0128     		cmp	r0, #1
 4381 006c 02D8     		bhi	.L394
3923:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4382              		.loc 1 3923 0 is_stmt 0 discriminator 1
 4383 006e 0220     		movs	r0, #2
 4384              	.LVL683:
 4385 0070 6074     		strb	r0, [r4, #17]
 4386 0072 7CE0     		b	.L387
 4387              	.LVL684:
 4388              	.L394:
3924:..\..\FatFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 206


 4389              		.loc 1 3924 0 is_stmt 1
 4390 0074 B0F1FF3F 		cmp	r0, #-1
 4391 0078 02D1     		bne	.L395
3924:..\..\FatFs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 4392              		.loc 1 3924 0 is_stmt 0 discriminator 1
 4393 007a 0120     		movs	r0, #1
 4394              	.LVL685:
 4395 007c 6074     		strb	r0, [r4, #17]
 4396 007e 76E0     		b	.L387
 4397              	.LVL686:
 4398              	.L395:
3925:..\..\FatFs/ff.c **** 			}
 4399              		.loc 1 3925 0 is_stmt 1
 4400 0080 A061     		str	r0, [r4, #24]
 4401              	.LVL687:
 4402              	.L391:
3927:..\..\FatFs/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 4403              		.loc 1 3927 0
 4404 0082 DDF80CB0 		ldr	fp, [sp, #12]
 4405 0086 A169     		ldr	r1, [r4, #24]
 4406 0088 5846     		mov	r0, fp
 4407 008a FFF7FEFF 		bl	clst2sect
 4408              	.LVL688:
3928:..\..\FatFs/ff.c **** 			sect += csect;
 4409              		.loc 1 3928 0
 4410 008e 8246     		mov	r10, r0
 4411 0090 10B9     		cbnz	r0, .L396
3928:..\..\FatFs/ff.c **** 			sect += csect;
 4412              		.loc 1 3928 0 is_stmt 0 discriminator 1
 4413 0092 0220     		movs	r0, #2
 4414              	.LVL689:
 4415 0094 6074     		strb	r0, [r4, #17]
 4416 0096 6AE0     		b	.L387
 4417              	.LVL690:
 4418              	.L396:
3929:..\..\FatFs/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 4419              		.loc 1 3929 0 is_stmt 1
 4420 0098 CA44     		add	r10, r10, r9
 4421              	.LVL691:
3931:..\..\FatFs/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4422              		.loc 1 3931 0
 4423 009a 750A     		lsrs	r5, r6, #9
 4424              	.LVL692:
 4425 009c 25D0     		beq	.L397
3932:..\..\FatFs/ff.c **** 					cc = fs->csize - csect;
 4426              		.loc 1 3932 0
 4427 009e 09EB0503 		add	r3, r9, r5
 4428 00a2 BBF80A20 		ldrh	r2, [fp, #10]
 4429 00a6 9342     		cmp	r3, r2
 4430 00a8 01D9     		bls	.L398
3933:..\..\FatFs/ff.c **** 				}
 4431              		.loc 1 3933 0
 4432 00aa C9EB0205 		rsb	r5, r9, r2
 4433              	.LVL693:
 4434              	.L398:
3935:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 4435              		.loc 1 3935 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 207


 4436 00ae 2B46     		mov	r3, r5
 4437 00b0 5246     		mov	r2, r10
 4438 00b2 4146     		mov	r1, r8
 4439 00b4 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4440 00b8 FFF7FEFF 		bl	disk_read
 4441              	.LVL694:
 4442 00bc 10B1     		cbz	r0, .L399
3935:..\..\FatFs/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 4443              		.loc 1 3935 0 is_stmt 0 discriminator 1
 4444 00be 0120     		movs	r0, #1
 4445 00c0 6074     		strb	r0, [r4, #17]
 4446 00c2 54E0     		b	.L387
 4447              	.L399:
3942:..\..\FatFs/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4448              		.loc 1 3942 0 is_stmt 1
 4449 00c4 94F91030 		ldrsb	r3, [r4, #16]
 4450 00c8 002B     		cmp	r3, #0
 4451 00ca 0CDA     		bge	.L400
3942:..\..\FatFs/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4452              		.loc 1 3942 0 is_stmt 0 discriminator 1
 4453 00cc E069     		ldr	r0, [r4, #28]
 4454 00ce CAEB0000 		rsb	r0, r10, r0
 4455 00d2 8542     		cmp	r5, r0
 4456 00d4 07D9     		bls	.L400
3943:..\..\FatFs/ff.c **** 				}
 4457              		.loc 1 3943 0 is_stmt 1
 4458 00d6 4FF40072 		mov	r2, #512
 4459 00da 04F12801 		add	r1, r4, #40
 4460 00de 08EB4020 		add	r0, r8, r0, lsl #9
 4461 00e2 FFF7FEFF 		bl	mem_cpy
 4462              	.LVL695:
 4463              	.L400:
3947:..\..\FatFs/ff.c **** 				continue;
 4464              		.loc 1 3947 0
 4465 00e6 6D02     		lsls	r5, r5, #9
 4466              	.LVL696:
3948:..\..\FatFs/ff.c **** 			}
 4467              		.loc 1 3948 0
 4468 00e8 32E0     		b	.L401
 4469              	.LVL697:
 4470              	.L397:
3951:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 4471              		.loc 1 3951 0
 4472 00ea E269     		ldr	r2, [r4, #28]
 4473 00ec 9245     		cmp	r10, r2
 4474 00ee 1ED0     		beq	.L402
3953:..\..\FatFs/ff.c **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4475              		.loc 1 3953 0
 4476 00f0 94F91030 		ldrsb	r3, [r4, #16]
 4477 00f4 002B     		cmp	r3, #0
 4478 00f6 0EDA     		bge	.L403
3954:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4479              		.loc 1 3954 0
 4480 00f8 0123     		movs	r3, #1
 4481 00fa 04F12801 		add	r1, r4, #40
 4482 00fe 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4483 0102 FFF7FEFF 		bl	disk_write
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 208


 4484              	.LVL698:
 4485 0106 10B1     		cbz	r0, .L404
3954:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4486              		.loc 1 3954 0 is_stmt 0 discriminator 1
 4487 0108 0120     		movs	r0, #1
 4488 010a 6074     		strb	r0, [r4, #17]
 4489 010c 2FE0     		b	.L387
 4490              	.L404:
3955:..\..\FatFs/ff.c **** 				}
 4491              		.loc 1 3955 0 is_stmt 1
 4492 010e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4493 0110 03F07F03 		and	r3, r3, #127
 4494 0114 2374     		strb	r3, [r4, #16]
 4495              	.L403:
3958:..\..\FatFs/ff.c **** 			}
 4496              		.loc 1 3958 0
 4497 0116 0123     		movs	r3, #1
 4498 0118 5246     		mov	r2, r10
 4499 011a 04F12801 		add	r1, r4, #40
 4500 011e 0398     		ldr	r0, [sp, #12]
 4501 0120 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 4502 0122 FFF7FEFF 		bl	disk_read
 4503              	.LVL699:
 4504 0126 10B1     		cbz	r0, .L402
3958:..\..\FatFs/ff.c **** 			}
 4505              		.loc 1 3958 0 is_stmt 0 discriminator 1
 4506 0128 0120     		movs	r0, #1
 4507 012a 6074     		strb	r0, [r4, #17]
 4508 012c 1FE0     		b	.L387
 4509              	.L402:
3961:..\..\FatFs/ff.c **** 		}
 4510              		.loc 1 3961 0 is_stmt 1
 4511 012e C4F81CA0 		str	r10, [r4, #28]
 4512              	.LVL700:
 4513              	.L390:
3963:..\..\FatFs/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 4514              		.loc 1 3963 0
 4515 0132 6369     		ldr	r3, [r4, #20]
 4516 0134 C3F30803 		ubfx	r3, r3, #0, #9
 4517 0138 C3F50075 		rsb	r5, r3, #512
 4518              	.LVL701:
3964:..\..\FatFs/ff.c **** #if FF_FS_TINY
 4519              		.loc 1 3964 0
 4520 013c AE42     		cmp	r6, r5
 4521 013e 00D2     		bcs	.L405
 4522 0140 3546     		mov	r5, r6
 4523              	.LVL702:
 4524              	.L405:
3969:..\..\FatFs/ff.c **** #endif
 4525              		.loc 1 3969 0
 4526 0142 04F12801 		add	r1, r4, #40
 4527 0146 2A46     		mov	r2, r5
 4528 0148 1944     		add	r1, r1, r3
 4529 014a 4046     		mov	r0, r8
 4530 014c FFF7FEFF 		bl	mem_cpy
 4531              	.LVL703:
 4532              	.L401:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 209


3907:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4533              		.loc 1 3907 0
 4534 0150 761B     		subs	r6, r6, r5
 4535              	.LVL704:
 4536 0152 3B68     		ldr	r3, [r7]
 4537 0154 2B44     		add	r3, r3, r5
 4538 0156 3B60     		str	r3, [r7]
 4539 0158 A844     		add	r8, r8, r5
 4540              	.LVL705:
 4541 015a 6369     		ldr	r3, [r4, #20]
 4542 015c 1D44     		add	r5, r5, r3
 4543              	.LVL706:
 4544 015e 6561     		str	r5, [r4, #20]
 4545              	.LVL707:
 4546              	.L389:
3906:..\..\FatFs/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 4547              		.loc 1 3906 0
 4548 0160 002E     		cmp	r6, #0
 4549 0162 7FF46EAF 		bne	.L406
3973:..\..\FatFs/ff.c **** }
 4550              		.loc 1 3973 0
 4551 0166 0020     		movs	r0, #0
 4552 0168 01E0     		b	.L387
 4553              	.LVL708:
 4554              	.L407:
 4555 016a 00E0     		b	.L387
 4556              	.L409:
3902:..\..\FatFs/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 4557              		.loc 1 3902 0
 4558 016c 0720     		movs	r0, #7
 4559              	.LVL709:
 4560              	.L387:
3974:..\..\FatFs/ff.c **** 
 4561              		.loc 1 3974 0
 4562 016e 05B0     		add	sp, sp, #20
 4563              		.cfi_def_cfa_offset 36
 4564              		@ sp needed
 4565 0170 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4566              		.cfi_endproc
 4567              	.LFE38:
 4568              		.size	f_read, .-f_read
 4569              		.section	.text.f_write,"ax",%progbits
 4570              		.align	2
 4571              		.global	f_write
 4572              		.thumb
 4573              		.thumb_func
 4574              		.type	f_write, %function
 4575              	f_write:
 4576              	.LFB39:
3990:..\..\FatFs/ff.c **** 	FRESULT res;
 4577              		.loc 1 3990 0
 4578              		.cfi_startproc
 4579              		@ args = 0, pretend = 0, frame = 16
 4580              		@ frame_needed = 0, uses_anonymous_args = 0
 4581              	.LVL710:
 4582 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4583              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 210


 4584              		.cfi_offset 4, -36
 4585              		.cfi_offset 5, -32
 4586              		.cfi_offset 6, -28
 4587              		.cfi_offset 7, -24
 4588              		.cfi_offset 8, -20
 4589              		.cfi_offset 9, -16
 4590              		.cfi_offset 10, -12
 4591              		.cfi_offset 11, -8
 4592              		.cfi_offset 14, -4
 4593 0004 85B0     		sub	sp, sp, #20
 4594              		.cfi_def_cfa_offset 56
 4595 0006 0446     		mov	r4, r0
 4596 0008 8846     		mov	r8, r1
 4597 000a 1646     		mov	r6, r2
 4598 000c 1F46     		mov	r7, r3
 4599              	.LVL711:
3999:..\..\FatFs/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 4600              		.loc 1 3999 0
 4601 000e 0023     		movs	r3, #0
 4602              	.LVL712:
 4603 0010 3B60     		str	r3, [r7]
4000:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4604              		.loc 1 4000 0
 4605 0012 0190     		str	r0, [sp, #4]
 4606 0014 03A9     		add	r1, sp, #12
 4607              	.LVL713:
 4608 0016 FFF7FEFF 		bl	validate
 4609              	.LVL714:
4001:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4610              		.loc 1 4001 0
 4611 001a 0028     		cmp	r0, #0
 4612 001c 40F0C180 		bne	.L434
4001:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4613              		.loc 1 4001 0 is_stmt 0 discriminator 2
 4614 0020 607C     		ldrb	r0, [r4, #17]	@ zero_extendqisi2
 4615              	.LVL715:
 4616 0022 0028     		cmp	r0, #0
 4617 0024 40F0BF80 		bne	.L413
4002:..\..\FatFs/ff.c **** 
 4618              		.loc 1 4002 0 is_stmt 1
 4619 0028 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4620 002a 13F0020F 		tst	r3, #2
 4621 002e 00F0B980 		beq	.L436
4005:..\..\FatFs/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 4622              		.loc 1 4005 0
 4623 0032 6369     		ldr	r3, [r4, #20]
 4624 0034 F342     		cmn	r3, r6
 4625 0036 C0F0AB80 		bcc	.L415
4006:..\..\FatFs/ff.c **** 	}
 4626              		.loc 1 4006 0
 4627 003a DE43     		mvns	r6, r3
 4628              	.LVL716:
 4629 003c A8E0     		b	.L415
 4630              	.LVL717:
 4631              	.L433:
4011:..\..\FatFs/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 4632              		.loc 1 4011 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 211


 4633 003e 6369     		ldr	r3, [r4, #20]
 4634 0040 C3F30802 		ubfx	r2, r3, #0, #9
 4635 0044 002A     		cmp	r2, #0
 4636 0046 40F08380 		bne	.L416
4012:..\..\FatFs/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 4637              		.loc 1 4012 0
 4638 004a 039A     		ldr	r2, [sp, #12]
 4639 004c B2F80A90 		ldrh	r9, [r2, #10]
 4640 0050 09F1FF39 		add	r9, r9, #-1
 4641              	.LVL718:
4013:..\..\FatFs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 4642              		.loc 1 4013 0
 4643 0054 19EA5329 		ands	r9, r9, r3, lsr #9
 4644              	.LVL719:
 4645 0058 1DD1     		bne	.L417
4014:..\..\FatFs/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 4646              		.loc 1 4014 0
 4647 005a 33B9     		cbnz	r3, .L418
4015:..\..\FatFs/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 4648              		.loc 1 4015 0
 4649 005c A068     		ldr	r0, [r4, #8]
 4650              	.LVL720:
4016:..\..\FatFs/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 4651              		.loc 1 4016 0
 4652 005e 40B9     		cbnz	r0, .L419
4017:..\..\FatFs/ff.c **** 					}
 4653              		.loc 1 4017 0
 4654 0060 0021     		movs	r1, #0
 4655 0062 0198     		ldr	r0, [sp, #4]
 4656              	.LVL721:
 4657 0064 FFF7FEFF 		bl	create_chain
 4658              	.LVL722:
 4659 0068 03E0     		b	.L419
 4660              	.LVL723:
 4661              	.L418:
4026:..\..\FatFs/ff.c **** 					}
 4662              		.loc 1 4026 0
 4663 006a A169     		ldr	r1, [r4, #24]
 4664 006c 0198     		ldr	r0, [sp, #4]
 4665 006e FFF7FEFF 		bl	create_chain
 4666              	.LVL724:
 4667              	.L419:
4029:..\..\FatFs/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 4668              		.loc 1 4029 0
 4669 0072 0028     		cmp	r0, #0
 4670 0074 00F08F80 		beq	.L420
4030:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4671              		.loc 1 4030 0
 4672 0078 0128     		cmp	r0, #1
 4673 007a 02D1     		bne	.L421
4030:..\..\FatFs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4674              		.loc 1 4030 0 is_stmt 0 discriminator 1
 4675 007c 0220     		movs	r0, #2
 4676              	.LVL725:
 4677 007e 6074     		strb	r0, [r4, #17]
 4678 0080 91E0     		b	.L413
 4679              	.LVL726:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 212


 4680              	.L421:
4031:..\..\FatFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 4681              		.loc 1 4031 0 is_stmt 1
 4682 0082 B0F1FF3F 		cmp	r0, #-1
 4683 0086 02D1     		bne	.L422
4031:..\..\FatFs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 4684              		.loc 1 4031 0 is_stmt 0 discriminator 1
 4685 0088 0120     		movs	r0, #1
 4686              	.LVL727:
 4687 008a 6074     		strb	r0, [r4, #17]
 4688 008c 8BE0     		b	.L413
 4689              	.LVL728:
 4690              	.L422:
4032:..\..\FatFs/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 4691              		.loc 1 4032 0 is_stmt 1
 4692 008e A061     		str	r0, [r4, #24]
4033:..\..\FatFs/ff.c **** 			}
 4693              		.loc 1 4033 0
 4694 0090 A368     		ldr	r3, [r4, #8]
 4695 0092 03B9     		cbnz	r3, .L417
4033:..\..\FatFs/ff.c **** 			}
 4696              		.loc 1 4033 0 is_stmt 0 discriminator 1
 4697 0094 A060     		str	r0, [r4, #8]
 4698              	.LVL729:
 4699              	.L417:
4038:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4700              		.loc 1 4038 0 is_stmt 1
 4701 0096 94F91030 		ldrsb	r3, [r4, #16]
 4702 009a 002B     		cmp	r3, #0
 4703 009c 0FDA     		bge	.L423
4039:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4704              		.loc 1 4039 0
 4705 009e 0123     		movs	r3, #1
 4706 00a0 E269     		ldr	r2, [r4, #28]
 4707 00a2 04F12801 		add	r1, r4, #40
 4708 00a6 0398     		ldr	r0, [sp, #12]
 4709 00a8 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 4710 00aa FFF7FEFF 		bl	disk_write
 4711              	.LVL730:
 4712 00ae 10B1     		cbz	r0, .L424
4039:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4713              		.loc 1 4039 0 is_stmt 0 discriminator 1
 4714 00b0 0120     		movs	r0, #1
 4715 00b2 6074     		strb	r0, [r4, #17]
 4716 00b4 77E0     		b	.L413
 4717              	.L424:
4040:..\..\FatFs/ff.c **** 			}
 4718              		.loc 1 4040 0 is_stmt 1
 4719 00b6 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4720 00b8 03F07F03 		and	r3, r3, #127
 4721 00bc 2374     		strb	r3, [r4, #16]
 4722              	.L423:
4043:..\..\FatFs/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 4723              		.loc 1 4043 0
 4724 00be DDF80CB0 		ldr	fp, [sp, #12]
 4725 00c2 A169     		ldr	r1, [r4, #24]
 4726 00c4 5846     		mov	r0, fp
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 213


 4727 00c6 FFF7FEFF 		bl	clst2sect
 4728              	.LVL731:
4044:..\..\FatFs/ff.c **** 			sect += csect;
 4729              		.loc 1 4044 0
 4730 00ca 8246     		mov	r10, r0
 4731 00cc 10B9     		cbnz	r0, .L425
4044:..\..\FatFs/ff.c **** 			sect += csect;
 4732              		.loc 1 4044 0 is_stmt 0 discriminator 1
 4733 00ce 0220     		movs	r0, #2
 4734              	.LVL732:
 4735 00d0 6074     		strb	r0, [r4, #17]
 4736 00d2 68E0     		b	.L413
 4737              	.LVL733:
 4738              	.L425:
4045:..\..\FatFs/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 4739              		.loc 1 4045 0 is_stmt 1
 4740 00d4 CA44     		add	r10, r10, r9
 4741              	.LVL734:
4047:..\..\FatFs/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4742              		.loc 1 4047 0
 4743 00d6 750A     		lsrs	r5, r6, #9
 4744              	.LVL735:
 4745 00d8 25D0     		beq	.L426
4048:..\..\FatFs/ff.c **** 					cc = fs->csize - csect;
 4746              		.loc 1 4048 0
 4747 00da 09EB0503 		add	r3, r9, r5
 4748 00de BBF80A20 		ldrh	r2, [fp, #10]
 4749 00e2 9342     		cmp	r3, r2
 4750 00e4 01D9     		bls	.L427
4049:..\..\FatFs/ff.c **** 				}
 4751              		.loc 1 4049 0
 4752 00e6 C9EB0205 		rsb	r5, r9, r2
 4753              	.LVL736:
 4754              	.L427:
4051:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 2
 4755              		.loc 1 4051 0
 4756 00ea 2B46     		mov	r3, r5
 4757 00ec 5246     		mov	r2, r10
 4758 00ee 4146     		mov	r1, r8
 4759 00f0 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4760 00f4 FFF7FEFF 		bl	disk_write
 4761              	.LVL737:
 4762 00f8 10B1     		cbz	r0, .L428
4051:..\..\FatFs/ff.c **** #if FF_FS_MINIMIZE <= 2
 4763              		.loc 1 4051 0 is_stmt 0 discriminator 1
 4764 00fa 0120     		movs	r0, #1
 4765 00fc 6074     		strb	r0, [r4, #17]
 4766 00fe 52E0     		b	.L413
 4767              	.L428:
4059:..\..\FatFs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 4768              		.loc 1 4059 0 is_stmt 1
 4769 0100 E169     		ldr	r1, [r4, #28]
 4770 0102 CAEB0101 		rsb	r1, r10, r1
 4771 0106 8D42     		cmp	r5, r1
 4772 0108 0BD9     		bls	.L429
4060:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4773              		.loc 1 4060 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 214


 4774 010a 4FF40072 		mov	r2, #512
 4775 010e 08EB4121 		add	r1, r8, r1, lsl #9
 4776 0112 04F12800 		add	r0, r4, #40
 4777 0116 FFF7FEFF 		bl	mem_cpy
 4778              	.LVL738:
4061:..\..\FatFs/ff.c **** 				}
 4779              		.loc 1 4061 0
 4780 011a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4781 011c 03F07F03 		and	r3, r3, #127
 4782 0120 2374     		strb	r3, [r4, #16]
 4783              	.L429:
4065:..\..\FatFs/ff.c **** 				continue;
 4784              		.loc 1 4065 0
 4785 0122 6D02     		lsls	r5, r5, #9
 4786              	.LVL739:
4066:..\..\FatFs/ff.c **** 			}
 4787              		.loc 1 4066 0
 4788 0124 27E0     		b	.L430
 4789              	.LVL740:
 4790              	.L426:
4074:..\..\FatFs/ff.c **** 				fp->fptr < fp->obj.objsize &&
 4791              		.loc 1 4074 0
 4792 0126 E369     		ldr	r3, [r4, #28]
 4793 0128 9A45     		cmp	r10, r3
 4794 012a 0FD0     		beq	.L431
4075:..\..\FatFs/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 4795              		.loc 1 4075 0 discriminator 1
 4796 012c 6269     		ldr	r2, [r4, #20]
 4797 012e E368     		ldr	r3, [r4, #12]
4074:..\..\FatFs/ff.c **** 				fp->fptr < fp->obj.objsize &&
 4798              		.loc 1 4074 0 discriminator 1
 4799 0130 9A42     		cmp	r2, r3
 4800 0132 0BD2     		bcs	.L431
4076:..\..\FatFs/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 4801              		.loc 1 4076 0
 4802 0134 0123     		movs	r3, #1
 4803 0136 5246     		mov	r2, r10
 4804 0138 04F12801 		add	r1, r4, #40
 4805 013c 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4806 0140 FFF7FEFF 		bl	disk_read
 4807              	.LVL741:
4075:..\..\FatFs/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 4808              		.loc 1 4075 0
 4809 0144 10B1     		cbz	r0, .L431
4077:..\..\FatFs/ff.c **** 			}
 4810              		.loc 1 4077 0
 4811 0146 0120     		movs	r0, #1
 4812 0148 6074     		strb	r0, [r4, #17]
 4813 014a 2CE0     		b	.L413
 4814              	.L431:
4080:..\..\FatFs/ff.c **** 		}
 4815              		.loc 1 4080 0
 4816 014c C4F81CA0 		str	r10, [r4, #28]
 4817              	.LVL742:
 4818              	.L416:
4082:..\..\FatFs/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 4819              		.loc 1 4082 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 215


 4820 0150 6369     		ldr	r3, [r4, #20]
 4821 0152 C3F30803 		ubfx	r3, r3, #0, #9
 4822 0156 C3F50075 		rsb	r5, r3, #512
 4823              	.LVL743:
4083:..\..\FatFs/ff.c **** #if FF_FS_TINY
 4824              		.loc 1 4083 0
 4825 015a AE42     		cmp	r6, r5
 4826 015c 00D2     		bcs	.L432
 4827 015e 3546     		mov	r5, r6
 4828              	.LVL744:
 4829              	.L432:
4089:..\..\FatFs/ff.c **** 		fp->flag |= FA_DIRTY;
 4830              		.loc 1 4089 0
 4831 0160 04F12800 		add	r0, r4, #40
 4832 0164 2A46     		mov	r2, r5
 4833 0166 4146     		mov	r1, r8
 4834 0168 1844     		add	r0, r0, r3
 4835 016a FFF7FEFF 		bl	mem_cpy
 4836              	.LVL745:
4090:..\..\FatFs/ff.c **** #endif
 4837              		.loc 1 4090 0
 4838 016e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4839 0170 63F07F03 		orn	r3, r3, #127
 4840 0174 2374     		strb	r3, [r4, #16]
 4841              	.L430:
4010:..\..\FatFs/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 4842              		.loc 1 4010 0
 4843 0176 761B     		subs	r6, r6, r5
 4844              	.LVL746:
 4845 0178 3B68     		ldr	r3, [r7]
 4846 017a 2B44     		add	r3, r3, r5
 4847 017c 3B60     		str	r3, [r7]
 4848 017e A844     		add	r8, r8, r5
 4849              	.LVL747:
 4850 0180 6369     		ldr	r3, [r4, #20]
 4851 0182 1D44     		add	r5, r5, r3
 4852              	.LVL748:
 4853 0184 6561     		str	r5, [r4, #20]
 4854 0186 E368     		ldr	r3, [r4, #12]
 4855 0188 9D42     		cmp	r5, r3
 4856 018a 38BF     		it	cc
 4857 018c 1D46     		movcc	r5, r3
 4858 018e E560     		str	r5, [r4, #12]
 4859              	.L415:
4009:..\..\FatFs/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
 4860              		.loc 1 4009 0
 4861 0190 002E     		cmp	r6, #0
 4862 0192 7FF454AF 		bne	.L433
 4863              	.L420:
4094:..\..\FatFs/ff.c **** 
 4864              		.loc 1 4094 0
 4865 0196 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4866 0198 43F04003 		orr	r3, r3, #64
 4867 019c 2374     		strb	r3, [r4, #16]
4096:..\..\FatFs/ff.c **** }
 4868              		.loc 1 4096 0
 4869 019e 0020     		movs	r0, #0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 216


 4870 01a0 01E0     		b	.L413
 4871              	.LVL749:
 4872              	.L434:
 4873 01a2 00E0     		b	.L413
 4874              	.L436:
4002:..\..\FatFs/ff.c **** 
 4875              		.loc 1 4002 0
 4876 01a4 0720     		movs	r0, #7
 4877              	.LVL750:
 4878              	.L413:
4097:..\..\FatFs/ff.c **** 
 4879              		.loc 1 4097 0
 4880 01a6 05B0     		add	sp, sp, #20
 4881              		.cfi_def_cfa_offset 36
 4882              		@ sp needed
 4883 01a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4884              		.cfi_endproc
 4885              	.LFE39:
 4886              		.size	f_write, .-f_write
 4887              		.section	.text.putc_bfd,"ax",%progbits
 4888              		.align	2
 4889              		.thumb
 4890              		.thumb_func
 4891              		.type	putc_bfd, %function
 4892              	putc_bfd:
 4893              	.LFB57:
6516:..\..\FatFs/ff.c **** 	UINT n;
 4894              		.loc 1 6516 0
 4895              		.cfi_startproc
 4896              		@ args = 0, pretend = 0, frame = 8
 4897              		@ frame_needed = 0, uses_anonymous_args = 0
 4898              	.LVL751:
6531:..\..\FatFs/ff.c **** 	if (i < 0) return;
 4899              		.loc 1 6531 0
 4900 0000 4368     		ldr	r3, [r0, #4]
 4901              	.LVL752:
6532:..\..\FatFs/ff.c **** 	nc = pb->nchr;			/* Write unit counter */
 4902              		.loc 1 6532 0
 4903 0002 002B     		cmp	r3, #0
 4904 0004 1BDB     		blt	.L445
6516:..\..\FatFs/ff.c **** 	UINT n;
 4905              		.loc 1 6516 0
 4906 0006 70B5     		push	{r4, r5, r6, lr}
 4907              		.cfi_def_cfa_offset 16
 4908              		.cfi_offset 4, -16
 4909              		.cfi_offset 5, -12
 4910              		.cfi_offset 6, -8
 4911              		.cfi_offset 14, -4
 4912 0008 82B0     		sub	sp, sp, #8
 4913              		.cfi_def_cfa_offset 24
 4914 000a 0446     		mov	r4, r0
6533:..\..\FatFs/ff.c **** 
 4915              		.loc 1 6533 0
 4916 000c 8668     		ldr	r6, [r0, #8]
 4917              	.LVL753:
6632:..\..\FatFs/ff.c **** #endif
 4918              		.loc 1 6632 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 217


 4919 000e 5D1C     		adds	r5, r3, #1
 4920              	.LVL754:
 4921 0010 0344     		add	r3, r3, r0
 4922 0012 1973     		strb	r1, [r3, #12]
6635:..\..\FatFs/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &n);
 4923              		.loc 1 6635 0
 4924 0014 3B2D     		cmp	r5, #59
 4925 0016 0DDD     		ble	.L441
6636:..\..\FatFs/ff.c **** 		i = (n == (UINT)i) ? 0 : -1;
 4926              		.loc 1 6636 0
 4927 0018 01AB     		add	r3, sp, #4
 4928 001a 2A46     		mov	r2, r5
 4929 001c 00F10C01 		add	r1, r0, #12
 4930              	.LVL755:
 4931 0020 0068     		ldr	r0, [r0]
 4932              	.LVL756:
 4933 0022 FFF7FEFF 		bl	f_write
 4934              	.LVL757:
6637:..\..\FatFs/ff.c **** 	}
 4935              		.loc 1 6637 0
 4936 0026 019B     		ldr	r3, [sp, #4]
 4937 0028 9D42     		cmp	r5, r3
 4938 002a 01D1     		bne	.L443
 4939 002c 0025     		movs	r5, #0
 4940              	.LVL758:
 4941 002e 01E0     		b	.L441
 4942              	.LVL759:
 4943              	.L443:
 4944 0030 4FF0FF35 		mov	r5, #-1
 4945              	.LVL760:
 4946              	.L441:
6639:..\..\FatFs/ff.c **** 	pb->nchr = nc + 1;
 4947              		.loc 1 6639 0
 4948 0034 6560     		str	r5, [r4, #4]
6640:..\..\FatFs/ff.c **** }
 4949              		.loc 1 6640 0
 4950 0036 0136     		adds	r6, r6, #1
 4951              	.LVL761:
 4952 0038 A660     		str	r6, [r4, #8]
6641:..\..\FatFs/ff.c **** 
 4953              		.loc 1 6641 0
 4954 003a 02B0     		add	sp, sp, #8
 4955              		.cfi_def_cfa_offset 16
 4956              		@ sp needed
 4957 003c 70BD     		pop	{r4, r5, r6, pc}
 4958              	.LVL762:
 4959              	.L445:
 4960              		.cfi_def_cfa_offset 0
 4961              		.cfi_restore 4
 4962              		.cfi_restore 5
 4963              		.cfi_restore 6
 4964              		.cfi_restore 14
 4965 003e 7047     		bx	lr
 4966              		.cfi_endproc
 4967              	.LFE57:
 4968              		.size	putc_bfd, .-putc_bfd
 4969              		.section	.text.putc_flush,"ax",%progbits
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 218


 4970              		.align	2
 4971              		.thumb
 4972              		.thumb_func
 4973              		.type	putc_flush, %function
 4974              	putc_flush:
 4975              	.LFB58:
6647:..\..\FatFs/ff.c **** 	UINT nw;
 4976              		.loc 1 6647 0
 4977              		.cfi_startproc
 4978              		@ args = 0, pretend = 0, frame = 8
 4979              		@ frame_needed = 0, uses_anonymous_args = 0
 4980              	.LVL763:
6650:..\..\FatFs/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 4981              		.loc 1 6650 0
 4982 0000 4268     		ldr	r2, [r0, #4]
 4983 0002 002A     		cmp	r2, #0
 4984 0004 0FDB     		blt	.L448
6647:..\..\FatFs/ff.c **** 	UINT nw;
 4985              		.loc 1 6647 0
 4986 0006 10B5     		push	{r4, lr}
 4987              		.cfi_def_cfa_offset 8
 4988              		.cfi_offset 4, -8
 4989              		.cfi_offset 14, -4
 4990 0008 82B0     		sub	sp, sp, #8
 4991              		.cfi_def_cfa_offset 16
 4992 000a 0446     		mov	r4, r0
6651:..\..\FatFs/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 4993              		.loc 1 6651 0
 4994 000c 01AB     		add	r3, sp, #4
 4995 000e 00F10C01 		add	r1, r0, #12
 4996 0012 0068     		ldr	r0, [r0]
 4997              	.LVL764:
 4998 0014 FFF7FEFF 		bl	f_write
 4999              	.LVL765:
 5000 0018 40B9     		cbnz	r0, .L449
6652:..\..\FatFs/ff.c **** 	return EOF;
 5001              		.loc 1 6652 0
 5002 001a 6268     		ldr	r2, [r4, #4]
 5003 001c 019B     		ldr	r3, [sp, #4]
 5004 001e 9A42     		cmp	r2, r3
 5005 0020 07D1     		bne	.L450
6652:..\..\FatFs/ff.c **** 	return EOF;
 5006              		.loc 1 6652 0 is_stmt 0 discriminator 1
 5007 0022 A068     		ldr	r0, [r4, #8]
 5008 0024 07E0     		b	.L447
 5009              	.LVL766:
 5010              	.L448:
 5011              		.cfi_def_cfa_offset 0
 5012              		.cfi_restore 4
 5013              		.cfi_restore 14
6653:..\..\FatFs/ff.c **** }
 5014              		.loc 1 6653 0 is_stmt 1
 5015 0026 4FF0FF30 		mov	r0, #-1
 5016              	.LVL767:
6654:..\..\FatFs/ff.c **** 
 5017              		.loc 1 6654 0
 5018 002a 7047     		bx	lr
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 219


 5019              	.LVL768:
 5020              	.L449:
 5021              		.cfi_def_cfa_offset 16
 5022              		.cfi_offset 4, -8
 5023              		.cfi_offset 14, -4
6653:..\..\FatFs/ff.c **** }
 5024              		.loc 1 6653 0
 5025 002c 4FF0FF30 		mov	r0, #-1
 5026 0030 01E0     		b	.L447
 5027              	.L450:
 5028 0032 4FF0FF30 		mov	r0, #-1
 5029              	.L447:
6654:..\..\FatFs/ff.c **** 
 5030              		.loc 1 6654 0
 5031 0036 02B0     		add	sp, sp, #8
 5032              		.cfi_def_cfa_offset 8
 5033              		@ sp needed
 5034 0038 10BD     		pop	{r4, pc}
 5035              		.cfi_endproc
 5036              	.LFE58:
 5037              		.size	putc_flush, .-putc_flush
 5038 003a 00BF     		.section	.text.f_sync,"ax",%progbits
 5039              		.align	2
 5040              		.global	f_sync
 5041              		.thumb
 5042              		.thumb_func
 5043              		.type	f_sync, %function
 5044              	f_sync:
 5045              	.LFB40:
4109:..\..\FatFs/ff.c **** 	FRESULT res;
 5046              		.loc 1 4109 0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 8
 5049              		@ frame_needed = 0, uses_anonymous_args = 0
 5050              	.LVL769:
 5051 0000 30B5     		push	{r4, r5, lr}
 5052              		.cfi_def_cfa_offset 12
 5053              		.cfi_offset 4, -12
 5054              		.cfi_offset 5, -8
 5055              		.cfi_offset 14, -4
 5056 0002 83B0     		sub	sp, sp, #12
 5057              		.cfi_def_cfa_offset 24
 5058 0004 0446     		mov	r4, r0
4116:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5059              		.loc 1 4116 0
 5060 0006 01A9     		add	r1, sp, #4
 5061 0008 FFF7FEFF 		bl	validate
 5062              	.LVL770:
4117:..\..\FatFs/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 5063              		.loc 1 4117 0
 5064 000c 0028     		cmp	r0, #0
 5065 000e 3CD1     		bne	.L455
4118:..\..\FatFs/ff.c **** #if !FF_FS_TINY
 5066              		.loc 1 4118 0
 5067 0010 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 5068 0012 12F0400F 		tst	r2, #64
 5069 0016 39D0     		beq	.L456
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 220


4120:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 5070              		.loc 1 4120 0
 5071 0018 12F0800F 		tst	r2, #128
 5072 001c 0CD0     		beq	.L454
4121:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5073              		.loc 1 4121 0
 5074 001e 0123     		movs	r3, #1
 5075 0020 E269     		ldr	r2, [r4, #28]
 5076 0022 04F12801 		add	r1, r4, #40
 5077 0026 0198     		ldr	r0, [sp, #4]
 5078              	.LVL771:
 5079 0028 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5080 002a FFF7FEFF 		bl	disk_write
 5081              	.LVL772:
 5082 002e 70BB     		cbnz	r0, .L457
4122:..\..\FatFs/ff.c **** 			}
 5083              		.loc 1 4122 0
 5084 0030 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5085 0032 03F07F03 		and	r3, r3, #127
 5086 0036 2374     		strb	r3, [r4, #16]
 5087              	.L454:
 5088              	.LVL773:
4159:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
 5089              		.loc 1 4159 0
 5090 0038 216A     		ldr	r1, [r4, #32]
 5091 003a 0198     		ldr	r0, [sp, #4]
 5092 003c FFF7FEFF 		bl	move_window
 5093              	.LVL774:
4160:..\..\FatFs/ff.c **** 					dir = fp->dir_ptr;
 5094              		.loc 1 4160 0
 5095 0040 38BB     		cbnz	r0, .L458
4161:..\..\FatFs/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
 5096              		.loc 1 4161 0
 5097 0042 656A     		ldr	r5, [r4, #36]
 5098              	.LVL775:
4162:..\..\FatFs/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 5099              		.loc 1 4162 0
 5100 0044 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5101 0046 43F02003 		orr	r3, r3, #32
 5102 004a EB72     		strb	r3, [r5, #11]
4163:..\..\FatFs/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 5103              		.loc 1 4163 0
 5104 004c A268     		ldr	r2, [r4, #8]
 5105 004e 2946     		mov	r1, r5
 5106 0050 2068     		ldr	r0, [r4]
 5107              	.LVL776:
 5108 0052 FFF7FEFF 		bl	st_clust
 5109              	.LVL777:
4164:..\..\FatFs/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 5110              		.loc 1 4164 0
 5111 0056 E168     		ldr	r1, [r4, #12]
 5112 0058 05F11C00 		add	r0, r5, #28
 5113 005c FFF7FEFF 		bl	st_dword
 5114              	.LVL778:
4165:..\..\FatFs/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 5115              		.loc 1 4165 0
 5116 0060 0D49     		ldr	r1, .L460
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 221


 5117 0062 05F11600 		add	r0, r5, #22
 5118 0066 FFF7FEFF 		bl	st_dword
 5119              	.LVL779:
4166:..\..\FatFs/ff.c **** 					fs->wflag = 1;
 5120              		.loc 1 4166 0
 5121 006a 0021     		movs	r1, #0
 5122 006c 05F11200 		add	r0, r5, #18
 5123 0070 FFF7FEFF 		bl	st_word
 5124              	.LVL780:
4167:..\..\FatFs/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 5125              		.loc 1 4167 0
 5126 0074 0122     		movs	r2, #1
 5127 0076 019B     		ldr	r3, [sp, #4]
 5128 0078 DA70     		strb	r2, [r3, #3]
4168:..\..\FatFs/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 5129              		.loc 1 4168 0
 5130 007a 0198     		ldr	r0, [sp, #4]
 5131 007c FFF7FEFF 		bl	sync_fs
 5132              	.LVL781:
4169:..\..\FatFs/ff.c **** 				}
 5133              		.loc 1 4169 0
 5134 0080 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5135 0082 23F04003 		bic	r3, r3, #64
 5136 0086 2374     		strb	r3, [r4, #16]
 5137 0088 03E0     		b	.L453
 5138              	.LVL782:
 5139              	.L455:
 5140 008a 02E0     		b	.L453
 5141              	.L456:
 5142 008c 01E0     		b	.L453
 5143              	.LVL783:
 5144              	.L457:
4121:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5145              		.loc 1 4121 0
 5146 008e 0120     		movs	r0, #1
 5147 0090 FFE7     		b	.L453
 5148              	.LVL784:
 5149              	.L458:
 5150              	.L453:
4176:..\..\FatFs/ff.c **** 
 5151              		.loc 1 4176 0
 5152 0092 03B0     		add	sp, sp, #12
 5153              		.cfi_def_cfa_offset 12
 5154              		@ sp needed
 5155 0094 30BD     		pop	{r4, r5, pc}
 5156              	.LVL785:
 5157              	.L461:
 5158 0096 00BF     		.align	2
 5159              	.L460:
 5160 0098 0000214E 		.word	1310785536
 5161              		.cfi_endproc
 5162              	.LFE40:
 5163              		.size	f_sync, .-f_sync
 5164              		.section	.text.f_close,"ax",%progbits
 5165              		.align	2
 5166              		.global	f_close
 5167              		.thumb
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 222


 5168              		.thumb_func
 5169              		.type	f_close, %function
 5170              	f_close:
 5171              	.LFB41:
4190:..\..\FatFs/ff.c **** 	FRESULT res;
 5172              		.loc 1 4190 0
 5173              		.cfi_startproc
 5174              		@ args = 0, pretend = 0, frame = 8
 5175              		@ frame_needed = 0, uses_anonymous_args = 0
 5176              	.LVL786:
 5177 0000 10B5     		push	{r4, lr}
 5178              		.cfi_def_cfa_offset 8
 5179              		.cfi_offset 4, -8
 5180              		.cfi_offset 14, -4
 5181 0002 82B0     		sub	sp, sp, #8
 5182              		.cfi_def_cfa_offset 16
 5183 0004 0446     		mov	r4, r0
4195:..\..\FatFs/ff.c **** 	if (res == FR_OK)
 5184              		.loc 1 4195 0
 5185 0006 FFF7FEFF 		bl	f_sync
 5186              	.LVL787:
4196:..\..\FatFs/ff.c **** #endif
 5187              		.loc 1 4196 0
 5188 000a 0346     		mov	r3, r0
 5189 000c 38B9     		cbnz	r0, .L463
4199:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
 5190              		.loc 1 4199 0
 5191 000e 01A9     		add	r1, sp, #4
 5192 0010 2046     		mov	r0, r4
 5193              	.LVL788:
 5194 0012 FFF7FEFF 		bl	validate
 5195              	.LVL789:
4200:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 5196              		.loc 1 4200 0
 5197 0016 0346     		mov	r3, r0
 5198 0018 08B9     		cbnz	r0, .L463
4205:..\..\FatFs/ff.c **** #endif
 5199              		.loc 1 4205 0
 5200 001a 0022     		movs	r2, #0
 5201 001c 2260     		str	r2, [r4]
 5202              	.L463:
 5203              	.LVL790:
4213:..\..\FatFs/ff.c **** 
 5204              		.loc 1 4213 0
 5205 001e 1846     		mov	r0, r3
 5206 0020 02B0     		add	sp, sp, #8
 5207              		.cfi_def_cfa_offset 8
 5208              		@ sp needed
 5209 0022 10BD     		pop	{r4, pc}
 5210              		.cfi_endproc
 5211              	.LFE41:
 5212              		.size	f_close, .-f_close
 5213              		.section	.text.f_chdrive,"ax",%progbits
 5214              		.align	2
 5215              		.global	f_chdrive
 5216              		.thumb
 5217              		.thumb_func
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 223


 5218              		.type	f_chdrive, %function
 5219              	f_chdrive:
 5220              	.LFB42:
4226:..\..\FatFs/ff.c **** 	int vol;
 5221              		.loc 1 4226 0
 5222              		.cfi_startproc
 5223              		@ args = 0, pretend = 0, frame = 8
 5224              		@ frame_needed = 0, uses_anonymous_args = 0
 5225              	.LVL791:
 5226 0000 00B5     		push	{lr}
 5227              		.cfi_def_cfa_offset 4
 5228              		.cfi_offset 14, -4
 5229 0002 83B0     		sub	sp, sp, #12
 5230              		.cfi_def_cfa_offset 16
 5231 0004 02AB     		add	r3, sp, #8
 5232 0006 43F8040D 		str	r0, [r3, #-4]!
4231:..\..\FatFs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5233              		.loc 1 4231 0
 5234 000a 1846     		mov	r0, r3
 5235              	.LVL792:
 5236 000c FFF7FEFF 		bl	get_ldnumber
 5237              	.LVL793:
4232:..\..\FatFs/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
 5238              		.loc 1 4232 0
 5239 0010 0028     		cmp	r0, #0
 5240 0012 03DB     		blt	.L467
4233:..\..\FatFs/ff.c **** 
 5241              		.loc 1 4233 0
 5242 0014 034B     		ldr	r3, .L469
 5243 0016 1870     		strb	r0, [r3]
4235:..\..\FatFs/ff.c **** }
 5244              		.loc 1 4235 0
 5245 0018 0020     		movs	r0, #0
 5246              	.LVL794:
 5247 001a 00E0     		b	.L466
 5248              	.LVL795:
 5249              	.L467:
4232:..\..\FatFs/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
 5250              		.loc 1 4232 0
 5251 001c 0B20     		movs	r0, #11
 5252              	.LVL796:
 5253              	.L466:
4236:..\..\FatFs/ff.c **** 
 5254              		.loc 1 4236 0
 5255 001e 03B0     		add	sp, sp, #12
 5256              		.cfi_def_cfa_offset 4
 5257              		@ sp needed
 5258 0020 5DF804FB 		ldr	pc, [sp], #4
 5259              	.LVL797:
 5260              	.L470:
 5261              		.align	2
 5262              	.L469:
 5263 0024 00000000 		.word	.LANCHOR0
 5264              		.cfi_endproc
 5265              	.LFE42:
 5266              		.size	f_chdrive, .-f_chdrive
 5267              		.section	.text.f_chdir,"ax",%progbits
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 224


 5268              		.align	2
 5269              		.global	f_chdir
 5270              		.thumb
 5271              		.thumb_func
 5272              		.type	f_chdir, %function
 5273              	f_chdir:
 5274              	.LFB43:
4243:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 2
 5275              		.loc 1 4243 0
 5276              		.cfi_startproc
 5277              		@ args = 0, pretend = 0, frame = 56
 5278              		@ frame_needed = 0, uses_anonymous_args = 0
 5279              	.LVL798:
 5280 0000 30B5     		push	{r4, r5, lr}
 5281              		.cfi_def_cfa_offset 12
 5282              		.cfi_offset 4, -12
 5283              		.cfi_offset 5, -8
 5284              		.cfi_offset 14, -4
 5285 0002 8FB0     		sub	sp, sp, #60
 5286              		.cfi_def_cfa_offset 72
 5287 0004 0190     		str	r0, [sp, #4]
4254:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5288              		.loc 1 4254 0
 5289 0006 0022     		movs	r2, #0
 5290 0008 02A9     		add	r1, sp, #8
 5291 000a 01A8     		add	r0, sp, #4
 5292              	.LVL799:
 5293 000c FFF7FEFF 		bl	mount_volume
 5294              	.LVL800:
4255:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
 5295              		.loc 1 4255 0
 5296 0010 0446     		mov	r4, r0
 5297 0012 F8B9     		cbnz	r0, .L472
4256:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 5298              		.loc 1 4256 0
 5299 0014 029B     		ldr	r3, [sp, #8]
 5300 0016 0393     		str	r3, [sp, #12]
4258:..\..\FatFs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 5301              		.loc 1 4258 0
 5302 0018 0199     		ldr	r1, [sp, #4]
 5303 001a 03A8     		add	r0, sp, #12
 5304              	.LVL801:
 5305 001c FFF7FEFF 		bl	follow_path
 5306              	.LVL802:
4259:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 5307              		.loc 1 4259 0
 5308 0020 0446     		mov	r4, r0
 5309 0022 A0B9     		cbnz	r0, .L473
4260:..\..\FatFs/ff.c **** 				fs->cdir = dj.obj.sclust;
 5310              		.loc 1 4260 0
 5311 0024 9DF93730 		ldrsb	r3, [sp, #55]
 5312 0028 002B     		cmp	r3, #0
 5313 002a 03DA     		bge	.L474
4261:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 5314              		.loc 1 4261 0
 5315 002c 059A     		ldr	r2, [sp, #20]
 5316 002e 029B     		ldr	r3, [sp, #8]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 225


 5317 0030 5A61     		str	r2, [r3, #20]
 5318 0032 0CE0     		b	.L473
 5319              	.L474:
4270:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 5320              		.loc 1 4270 0
 5321 0034 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 5322 0038 13F0100F 		tst	r3, #16
 5323 003c 06D0     		beq	.L475
4280:..\..\FatFs/ff.c **** 					}
 5324              		.loc 1 4280 0
 5325 003e 029D     		ldr	r5, [sp, #8]
 5326 0040 0A99     		ldr	r1, [sp, #40]
 5327 0042 2846     		mov	r0, r5
 5328              	.LVL803:
 5329 0044 FFF7FEFF 		bl	ld_clust
 5330              	.LVL804:
 5331 0048 6861     		str	r0, [r5, #20]
 5332 004a 00E0     		b	.L473
 5333              	.LVL805:
 5334              	.L475:
4283:..\..\FatFs/ff.c **** 				}
 5335              		.loc 1 4283 0
 5336 004c 0524     		movs	r4, #5
 5337              	.LVL806:
 5338              	.L473:
4288:..\..\FatFs/ff.c **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed at Unix style volume ID */
 5339              		.loc 1 4288 0
 5340 004e 042C     		cmp	r4, #4
 5341 0050 00D1     		bne	.L472
 5342 0052 0524     		movs	r4, #5
 5343              	.LVL807:
 5344              	.L472:
4298:..\..\FatFs/ff.c **** 
 5345              		.loc 1 4298 0
 5346 0054 2046     		mov	r0, r4
 5347 0056 0FB0     		add	sp, sp, #60
 5348              		.cfi_def_cfa_offset 12
 5349              		@ sp needed
 5350 0058 30BD     		pop	{r4, r5, pc}
 5351              		.cfi_endproc
 5352              	.LFE43:
 5353              		.size	f_chdir, .-f_chdir
 5354 005a 00BF     		.section	.text.f_lseek,"ax",%progbits
 5355              		.align	2
 5356              		.global	f_lseek
 5357              		.thumb
 5358              		.thumb_func
 5359              		.type	f_lseek, %function
 5360              	f_lseek:
 5361              	.LFB44:
4406:..\..\FatFs/ff.c **** 	FRESULT res;
 5362              		.loc 1 4406 0
 5363              		.cfi_startproc
 5364              		@ args = 0, pretend = 0, frame = 8
 5365              		@ frame_needed = 0, uses_anonymous_args = 0
 5366              	.LVL808:
 5367 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 226


 5368              		.cfi_def_cfa_offset 24
 5369              		.cfi_offset 4, -24
 5370              		.cfi_offset 5, -20
 5371              		.cfi_offset 6, -16
 5372              		.cfi_offset 7, -12
 5373              		.cfi_offset 8, -8
 5374              		.cfi_offset 14, -4
 5375 0004 82B0     		sub	sp, sp, #8
 5376              		.cfi_def_cfa_offset 32
 5377 0006 0446     		mov	r4, r0
 5378 0008 0D46     		mov	r5, r1
4417:..\..\FatFs/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 5379              		.loc 1 4417 0
 5380 000a 8046     		mov	r8, r0
 5381 000c 01A9     		add	r1, sp, #4
 5382              	.LVL809:
 5383 000e FFF7FEFF 		bl	validate
 5384              	.LVL810:
4418:..\..\FatFs/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
 5385              		.loc 1 4418 0
 5386 0012 0646     		mov	r6, r0
 5387 0014 00B9     		cbnz	r0, .L479
4418:..\..\FatFs/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
 5388              		.loc 1 4418 0 is_stmt 0 discriminator 1
 5389 0016 667C     		ldrb	r6, [r4, #17]	@ zero_extendqisi2
 5390              	.LVL811:
 5391              	.L479:
4424:..\..\FatFs/ff.c **** 
 5392              		.loc 1 4424 0 is_stmt 1
 5393 0018 002E     		cmp	r6, #0
 5394 001a 40F0A680 		bne	.L501
4483:..\..\FatFs/ff.c **** 			ofs = fp->obj.objsize;
 5395              		.loc 1 4483 0
 5396 001e E368     		ldr	r3, [r4, #12]
 5397 0020 AB42     		cmp	r3, r5
 5398 0022 04D2     		bcs	.L481
4483:..\..\FatFs/ff.c **** 			ofs = fp->obj.objsize;
 5399              		.loc 1 4483 0 is_stmt 0 discriminator 1
 5400 0024 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 5401 0026 12F0020F 		tst	r2, #2
 5402 002a 00D1     		bne	.L481
4484:..\..\FatFs/ff.c **** 		}
 5403              		.loc 1 4484 0 is_stmt 1
 5404 002c 1D46     		mov	r5, r3
 5405              	.LVL812:
 5406              	.L481:
4486:..\..\FatFs/ff.c **** 		fp->fptr = nsect = 0;
 5407              		.loc 1 4486 0
 5408 002e 6369     		ldr	r3, [r4, #20]
 5409              	.LVL813:
4487:..\..\FatFs/ff.c **** 		if (ofs > 0) {
 5410              		.loc 1 4487 0
 5411 0030 0022     		movs	r2, #0
 5412 0032 6261     		str	r2, [r4, #20]
4488:..\..\FatFs/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 5413              		.loc 1 4488 0
 5414 0034 002D     		cmp	r5, #0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 227


 5415 0036 62D0     		beq	.L503
4489:..\..\FatFs/ff.c **** 			if (ifptr > 0 &&
 5416              		.loc 1 4489 0
 5417 0038 019A     		ldr	r2, [sp, #4]
 5418 003a 5789     		ldrh	r7, [r2, #10]
 5419 003c 7F02     		lsls	r7, r7, #9
 5420              	.LVL814:
4490:..\..\FatFs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5421              		.loc 1 4490 0
 5422 003e 6BB1     		cbz	r3, .L483
4491:..\..\FatFs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 5423              		.loc 1 4491 0 discriminator 1
 5424 0040 6A1E     		subs	r2, r5, #1
 5425 0042 B2FBF7F2 		udiv	r2, r2, r7
 5426 0046 013B     		subs	r3, r3, #1
 5427              	.LVL815:
 5428 0048 B3FBF7F1 		udiv	r1, r3, r7
4490:..\..\FatFs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5429              		.loc 1 4490 0 discriminator 1
 5430 004c 8A42     		cmp	r2, r1
 5431 004e 05D3     		bcc	.L483
4492:..\..\FatFs/ff.c **** 				ofs -= fp->fptr;
 5432              		.loc 1 4492 0
 5433 0050 7A42     		negs	r2, r7
 5434 0052 1340     		ands	r3, r3, r2
 5435              	.LVL816:
 5436 0054 6361     		str	r3, [r4, #20]
4493:..\..\FatFs/ff.c **** 				clst = fp->clust;
 5437              		.loc 1 4493 0
 5438 0056 ED1A     		subs	r5, r5, r3
 5439              	.LVL817:
4494:..\..\FatFs/ff.c **** 			} else {									/* When seek to back cluster, */
 5440              		.loc 1 4494 0
 5441 0058 A169     		ldr	r1, [r4, #24]
 5442              	.LVL818:
 5443 005a 14E0     		b	.L484
 5444              	.LVL819:
 5445              	.L483:
4496:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 5446              		.loc 1 4496 0
 5447 005c A168     		ldr	r1, [r4, #8]
 5448              	.LVL820:
4498:..\..\FatFs/ff.c **** 					clst = create_chain(&fp->obj, 0);
 5449              		.loc 1 4498 0
 5450 005e 89B9     		cbnz	r1, .L485
4499:..\..\FatFs/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 5451              		.loc 1 4499 0
 5452 0060 2046     		mov	r0, r4
 5453 0062 FFF7FEFF 		bl	create_chain
 5454              	.LVL821:
 5455 0066 0146     		mov	r1, r0
 5456              	.LVL822:
4500:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5457              		.loc 1 4500 0
 5458 0068 0128     		cmp	r0, #1
 5459 006a 03D1     		bne	.L486
4500:..\..\FatFs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 228


 5460              		.loc 1 4500 0 is_stmt 0 discriminator 1
 5461 006c 0226     		movs	r6, #2
 5462              	.LVL823:
 5463 006e 6674     		strb	r6, [r4, #17]
 5464 0070 3046     		mov	r0, r6
 5465              	.LVL824:
 5466 0072 7FE0     		b	.L480
 5467              	.LVL825:
 5468              	.L486:
4501:..\..\FatFs/ff.c **** 					fp->obj.sclust = clst;
 5469              		.loc 1 4501 0 is_stmt 1
 5470 0074 B0F1FF3F 		cmp	r0, #-1
 5471 0078 03D1     		bne	.L487
4501:..\..\FatFs/ff.c **** 					fp->obj.sclust = clst;
 5472              		.loc 1 4501 0 is_stmt 0 discriminator 1
 5473 007a 0126     		movs	r6, #1
 5474              	.LVL826:
 5475 007c 6674     		strb	r6, [r4, #17]
 5476 007e 3046     		mov	r0, r6
 5477              	.LVL827:
 5478 0080 78E0     		b	.L480
 5479              	.LVL828:
 5480              	.L487:
4502:..\..\FatFs/ff.c **** 				}
 5481              		.loc 1 4502 0 is_stmt 1
 5482 0082 A060     		str	r0, [r4, #8]
 5483              	.LVL829:
 5484              	.L485:
4505:..\..\FatFs/ff.c **** 			}
 5485              		.loc 1 4505 0
 5486 0084 A161     		str	r1, [r4, #24]
 5487              	.L484:
4507:..\..\FatFs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 5488              		.loc 1 4507 0
 5489 0086 29BB     		cbnz	r1, .L488
4487:..\..\FatFs/ff.c **** 		if (ofs > 0) {
 5490              		.loc 1 4487 0
 5491 0088 0025     		movs	r5, #0
 5492              	.LVL830:
 5493 008a 3BE0     		b	.L482
 5494              	.LVL831:
 5495              	.L495:
4509:..\..\FatFs/ff.c **** #if !FF_FS_READONLY
 5496              		.loc 1 4509 0
 5497 008c ED1B     		subs	r5, r5, r7
 5498              	.LVL832:
 5499 008e 6369     		ldr	r3, [r4, #20]
 5500 0090 3B44     		add	r3, r3, r7
 5501 0092 6361     		str	r3, [r4, #20]
4511:..\..\FatFs/ff.c **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
 5502              		.loc 1 4511 0
 5503 0094 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5504 0096 13F0020F 		tst	r3, #2
 5505 009a 05D0     		beq	.L489
4516:..\..\FatFs/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 5506              		.loc 1 4516 0
 5507 009c 4046     		mov	r0, r8
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 229


 5508 009e FFF7FEFF 		bl	create_chain
 5509              	.LVL833:
4517:..\..\FatFs/ff.c **** 							ofs = 0; break;
 5510              		.loc 1 4517 0
 5511 00a2 0146     		mov	r1, r0
 5512 00a4 20B9     		cbnz	r0, .L491
 5513 00a6 18E0     		b	.L504
 5514              	.LVL834:
 5515              	.L489:
4523:..\..\FatFs/ff.c **** 					}
 5516              		.loc 1 4523 0
 5517 00a8 4046     		mov	r0, r8
 5518 00aa FFF7FEFF 		bl	get_fat
 5519              	.LVL835:
 5520 00ae 0146     		mov	r1, r0
 5521              	.LVL836:
 5522              	.L491:
4525:..\..\FatFs/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 5523              		.loc 1 4525 0
 5524 00b0 B1F1FF3F 		cmp	r1, #-1
 5525 00b4 03D1     		bne	.L492
4525:..\..\FatFs/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 5526              		.loc 1 4525 0 is_stmt 0 discriminator 1
 5527 00b6 0126     		movs	r6, #1
 5528              	.LVL837:
 5529 00b8 6674     		strb	r6, [r4, #17]
 5530 00ba 3046     		mov	r0, r6
 5531              	.LVL838:
 5532 00bc 5AE0     		b	.L480
 5533              	.LVL839:
 5534              	.L492:
4526:..\..\FatFs/ff.c **** 					fp->clust = clst;
 5535              		.loc 1 4526 0 is_stmt 1
 5536 00be 0129     		cmp	r1, #1
 5537 00c0 03D9     		bls	.L493
4526:..\..\FatFs/ff.c **** 					fp->clust = clst;
 5538              		.loc 1 4526 0 is_stmt 0 discriminator 2
 5539 00c2 019B     		ldr	r3, [sp, #4]
 5540 00c4 9B69     		ldr	r3, [r3, #24]
 5541 00c6 9942     		cmp	r1, r3
 5542 00c8 03D3     		bcc	.L494
 5543              	.L493:
4526:..\..\FatFs/ff.c **** 					fp->clust = clst;
 5544              		.loc 1 4526 0 discriminator 3
 5545 00ca 0226     		movs	r6, #2
 5546              	.LVL840:
 5547 00cc 6674     		strb	r6, [r4, #17]
 5548 00ce 3046     		mov	r0, r6
 5549              	.LVL841:
 5550 00d0 50E0     		b	.L480
 5551              	.LVL842:
 5552              	.L494:
4527:..\..\FatFs/ff.c **** 				}
 5553              		.loc 1 4527 0 is_stmt 1
 5554 00d2 A161     		str	r1, [r4, #24]
 5555              	.LVL843:
 5556              	.L488:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 230


4508:..\..\FatFs/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 5557              		.loc 1 4508 0
 5558 00d4 BD42     		cmp	r5, r7
 5559 00d6 D9D8     		bhi	.L495
 5560 00d8 00E0     		b	.L490
 5561              	.LVL844:
 5562              	.L504:
4518:..\..\FatFs/ff.c **** 						}
 5563              		.loc 1 4518 0
 5564 00da 0025     		movs	r5, #0
 5565              	.LVL845:
 5566              	.L490:
4529:..\..\FatFs/ff.c **** 				if (ofs % SS(fs)) {
 5567              		.loc 1 4529 0
 5568 00dc 6369     		ldr	r3, [r4, #20]
 5569 00de 2B44     		add	r3, r3, r5
 5570 00e0 6361     		str	r3, [r4, #20]
4530:..\..\FatFs/ff.c **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 5571              		.loc 1 4530 0
 5572 00e2 C5F30803 		ubfx	r3, r5, #0, #9
 5573 00e6 63B1     		cbz	r3, .L505
4531:..\..\FatFs/ff.c **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 5574              		.loc 1 4531 0
 5575 00e8 0198     		ldr	r0, [sp, #4]
 5576 00ea FFF7FEFF 		bl	clst2sect
 5577              	.LVL846:
4532:..\..\FatFs/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 5578              		.loc 1 4532 0
 5579 00ee 18B9     		cbnz	r0, .L496
4532:..\..\FatFs/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 5580              		.loc 1 4532 0 is_stmt 0 discriminator 1
 5581 00f0 0226     		movs	r6, #2
 5582              	.LVL847:
 5583 00f2 6674     		strb	r6, [r4, #17]
 5584 00f4 3046     		mov	r0, r6
 5585              	.LVL848:
 5586 00f6 3DE0     		b	.L480
 5587              	.LVL849:
 5588              	.L496:
4533:..\..\FatFs/ff.c **** 				}
 5589              		.loc 1 4533 0 is_stmt 1
 5590 00f8 00EB5525 		add	r5, r0, r5, lsr #9
 5591              	.LVL850:
 5592 00fc 02E0     		b	.L482
 5593              	.LVL851:
 5594              	.L503:
4487:..\..\FatFs/ff.c **** 		if (ofs > 0) {
 5595              		.loc 1 4487 0
 5596 00fe 0025     		movs	r5, #0
 5597              	.LVL852:
 5598 0100 00E0     		b	.L482
 5599              	.LVL853:
 5600              	.L505:
 5601 0102 0025     		movs	r5, #0
 5602              	.LVL854:
 5603              	.L482:
4537:..\..\FatFs/ff.c **** 			fp->obj.objsize = fp->fptr;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 231


 5604              		.loc 1 4537 0
 5605 0104 6369     		ldr	r3, [r4, #20]
 5606 0106 E268     		ldr	r2, [r4, #12]
 5607 0108 9342     		cmp	r3, r2
 5608 010a 04D9     		bls	.L497
4538:..\..\FatFs/ff.c **** 			fp->flag |= FA_MODIFIED;
 5609              		.loc 1 4538 0
 5610 010c E360     		str	r3, [r4, #12]
4539:..\..\FatFs/ff.c **** 		}
 5611              		.loc 1 4539 0
 5612 010e 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 5613 0110 42F04002 		orr	r2, r2, #64
 5614 0114 2274     		strb	r2, [r4, #16]
 5615              	.L497:
4541:..\..\FatFs/ff.c **** #if !FF_FS_TINY
 5616              		.loc 1 4541 0
 5617 0116 C3F30803 		ubfx	r3, r3, #0, #9
 5618 011a 43B3     		cbz	r3, .L506
4541:..\..\FatFs/ff.c **** #if !FF_FS_TINY
 5619              		.loc 1 4541 0 is_stmt 0 discriminator 1
 5620 011c E269     		ldr	r2, [r4, #28]
 5621 011e 9542     		cmp	r5, r2
 5622 0120 27D0     		beq	.L507
4544:..\..\FatFs/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5623              		.loc 1 4544 0 is_stmt 1
 5624 0122 94F91030 		ldrsb	r3, [r4, #16]
 5625 0126 002B     		cmp	r3, #0
 5626 0128 0FDA     		bge	.L498
4545:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5627              		.loc 1 4545 0
 5628 012a 0123     		movs	r3, #1
 5629 012c 04F12801 		add	r1, r4, #40
 5630 0130 0198     		ldr	r0, [sp, #4]
 5631 0132 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5632 0134 FFF7FEFF 		bl	disk_write
 5633              	.LVL855:
 5634 0138 18B1     		cbz	r0, .L499
4545:..\..\FatFs/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5635              		.loc 1 4545 0 is_stmt 0 discriminator 1
 5636 013a 0126     		movs	r6, #1
 5637              	.LVL856:
 5638 013c 6674     		strb	r6, [r4, #17]
 5639 013e 3046     		mov	r0, r6
 5640 0140 18E0     		b	.L480
 5641              	.LVL857:
 5642              	.L499:
4546:..\..\FatFs/ff.c **** 			}
 5643              		.loc 1 4546 0 is_stmt 1
 5644 0142 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5645 0144 03F07F03 		and	r3, r3, #127
 5646 0148 2374     		strb	r3, [r4, #16]
 5647              	.L498:
4549:..\..\FatFs/ff.c **** #endif
 5648              		.loc 1 4549 0
 5649 014a 0123     		movs	r3, #1
 5650 014c 2A46     		mov	r2, r5
 5651 014e 04F12801 		add	r1, r4, #40
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 232


 5652 0152 0198     		ldr	r0, [sp, #4]
 5653 0154 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5654 0156 FFF7FEFF 		bl	disk_read
 5655              	.LVL858:
 5656 015a 18B1     		cbz	r0, .L500
4549:..\..\FatFs/ff.c **** #endif
 5657              		.loc 1 4549 0 is_stmt 0 discriminator 1
 5658 015c 0126     		movs	r6, #1
 5659              	.LVL859:
 5660 015e 6674     		strb	r6, [r4, #17]
 5661 0160 3046     		mov	r0, r6
 5662 0162 07E0     		b	.L480
 5663              	.LVL860:
 5664              	.L500:
4551:..\..\FatFs/ff.c **** 		}
 5665              		.loc 1 4551 0 is_stmt 1
 5666 0164 E561     		str	r5, [r4, #28]
4555:..\..\FatFs/ff.c **** }
 5667              		.loc 1 4555 0
 5668 0166 3046     		mov	r0, r6
 5669 0168 04E0     		b	.L480
 5670              	.LVL861:
 5671              	.L501:
4424:..\..\FatFs/ff.c **** 
 5672              		.loc 1 4424 0
 5673 016a 3046     		mov	r0, r6
 5674 016c 02E0     		b	.L480
 5675              	.LVL862:
 5676              	.L506:
4555:..\..\FatFs/ff.c **** }
 5677              		.loc 1 4555 0
 5678 016e 3046     		mov	r0, r6
 5679 0170 00E0     		b	.L480
 5680              	.L507:
 5681 0172 3046     		mov	r0, r6
 5682              	.LVL863:
 5683              	.L480:
4556:..\..\FatFs/ff.c **** 
 5684              		.loc 1 4556 0
 5685 0174 02B0     		add	sp, sp, #8
 5686              		.cfi_def_cfa_offset 24
 5687              		@ sp needed
 5688 0176 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5689              		.cfi_endproc
 5690              	.LFE44:
 5691              		.size	f_lseek, .-f_lseek
 5692 017a 00BF     		.section	.text.f_opendir,"ax",%progbits
 5693              		.align	2
 5694              		.global	f_opendir
 5695              		.thumb
 5696              		.thumb_func
 5697              		.type	f_opendir, %function
 5698              	f_opendir:
 5699              	.LFB45:
4569:..\..\FatFs/ff.c **** 	FRESULT res;
 5700              		.loc 1 4569 0
 5701              		.cfi_startproc
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 233


 5702              		@ args = 0, pretend = 0, frame = 16
 5703              		@ frame_needed = 0, uses_anonymous_args = 0
 5704              	.LVL864:
 5705 0000 30B5     		push	{r4, r5, lr}
 5706              		.cfi_def_cfa_offset 12
 5707              		.cfi_offset 4, -12
 5708              		.cfi_offset 5, -8
 5709              		.cfi_offset 14, -4
 5710 0002 85B0     		sub	sp, sp, #20
 5711              		.cfi_def_cfa_offset 32
 5712 0004 0191     		str	r1, [sp, #4]
4575:..\..\FatFs/ff.c **** 
 5713              		.loc 1 4575 0
 5714 0006 78B3     		cbz	r0, .L514
 5715 0008 0546     		mov	r5, r0
4578:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5716              		.loc 1 4578 0
 5717 000a 0022     		movs	r2, #0
 5718 000c 03A9     		add	r1, sp, #12
 5719              	.LVL865:
 5720 000e 01A8     		add	r0, sp, #4
 5721              	.LVL866:
 5722 0010 FFF7FEFF 		bl	mount_volume
 5723              	.LVL867:
4579:..\..\FatFs/ff.c **** 		dp->obj.fs = fs;
 5724              		.loc 1 4579 0
 5725 0014 0446     		mov	r4, r0
 5726 0016 10BB     		cbnz	r0, .L511
4580:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 5727              		.loc 1 4580 0
 5728 0018 039B     		ldr	r3, [sp, #12]
 5729 001a 2B60     		str	r3, [r5]
4582:..\..\FatFs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 5730              		.loc 1 4582 0
 5731 001c 0199     		ldr	r1, [sp, #4]
 5732 001e 2846     		mov	r0, r5
 5733              	.LVL868:
 5734 0020 FFF7FEFF 		bl	follow_path
 5735              	.LVL869:
4583:..\..\FatFs/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 5736              		.loc 1 4583 0
 5737 0024 0446     		mov	r4, r0
 5738 0026 B8B9     		cbnz	r0, .L512
4584:..\..\FatFs/ff.c **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 5739              		.loc 1 4584 0
 5740 0028 95F92B30 		ldrsb	r3, [r5, #43]
 5741 002c 002B     		cmp	r3, #0
 5742 002e 0ADB     		blt	.L513
4585:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 5743              		.loc 1 4585 0
 5744 0030 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 5745 0032 13F0100F 		tst	r3, #16
 5746 0036 05D0     		beq	.L515
4595:..\..\FatFs/ff.c **** 					}
 5747              		.loc 1 4595 0
 5748 0038 E969     		ldr	r1, [r5, #28]
 5749 003a 0398     		ldr	r0, [sp, #12]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 234


 5750              	.LVL870:
 5751 003c FFF7FEFF 		bl	ld_clust
 5752              	.LVL871:
 5753 0040 A860     		str	r0, [r5, #8]
 5754 0042 00E0     		b	.L513
 5755              	.LVL872:
 5756              	.L515:
4598:..\..\FatFs/ff.c **** 				}
 5757              		.loc 1 4598 0
 5758 0044 0524     		movs	r4, #5
 5759              	.LVL873:
 5760              	.L513:
4601:..\..\FatFs/ff.c **** 				dp->obj.id = fs->id;
 5761              		.loc 1 4601 0
 5762 0046 3CB9     		cbnz	r4, .L512
4602:..\..\FatFs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 5763              		.loc 1 4602 0
 5764 0048 039B     		ldr	r3, [sp, #12]
 5765 004a DB88     		ldrh	r3, [r3, #6]
 5766 004c AB80     		strh	r3, [r5, #4]	@ movhi
4603:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 5767              		.loc 1 4603 0
 5768 004e 0021     		movs	r1, #0
 5769 0050 2846     		mov	r0, r5
 5770 0052 FFF7FEFF 		bl	dir_sdi
 5771              	.LVL874:
 5772 0056 0446     		mov	r4, r0
 5773              	.LVL875:
 5774              	.L512:
4617:..\..\FatFs/ff.c **** 	}
 5775              		.loc 1 4617 0
 5776 0058 042C     		cmp	r4, #4
 5777 005a 00D1     		bne	.L511
 5778 005c 0524     		movs	r4, #5
 5779              	.LVL876:
 5780              	.L511:
4619:..\..\FatFs/ff.c **** 
 5781              		.loc 1 4619 0
 5782 005e 2CB1     		cbz	r4, .L517
4619:..\..\FatFs/ff.c **** 
 5783              		.loc 1 4619 0 is_stmt 0 discriminator 1
 5784 0060 0023     		movs	r3, #0
 5785 0062 2B60     		str	r3, [r5]
4621:..\..\FatFs/ff.c **** }
 5786              		.loc 1 4621 0 is_stmt 1 discriminator 1
 5787 0064 2046     		mov	r0, r4
 5788 0066 02E0     		b	.L510
 5789              	.LVL877:
 5790              	.L514:
4575:..\..\FatFs/ff.c **** 
 5791              		.loc 1 4575 0
 5792 0068 0920     		movs	r0, #9
 5793              	.LVL878:
 5794 006a 00E0     		b	.L510
 5795              	.LVL879:
 5796              	.L517:
4621:..\..\FatFs/ff.c **** }
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 235


 5797              		.loc 1 4621 0
 5798 006c 2046     		mov	r0, r4
 5799              	.LVL880:
 5800              	.L510:
4622:..\..\FatFs/ff.c **** 
 5801              		.loc 1 4622 0
 5802 006e 05B0     		add	sp, sp, #20
 5803              		.cfi_def_cfa_offset 12
 5804              		@ sp needed
 5805 0070 30BD     		pop	{r4, r5, pc}
 5806              		.cfi_endproc
 5807              	.LFE45:
 5808              		.size	f_opendir, .-f_opendir
 5809 0072 00BF     		.section	.text.f_closedir,"ax",%progbits
 5810              		.align	2
 5811              		.global	f_closedir
 5812              		.thumb
 5813              		.thumb_func
 5814              		.type	f_closedir, %function
 5815              	f_closedir:
 5816              	.LFB46:
4634:..\..\FatFs/ff.c **** 	FRESULT res;
 5817              		.loc 1 4634 0
 5818              		.cfi_startproc
 5819              		@ args = 0, pretend = 0, frame = 8
 5820              		@ frame_needed = 0, uses_anonymous_args = 0
 5821              	.LVL881:
 5822 0000 10B5     		push	{r4, lr}
 5823              		.cfi_def_cfa_offset 8
 5824              		.cfi_offset 4, -8
 5825              		.cfi_offset 14, -4
 5826 0002 82B0     		sub	sp, sp, #8
 5827              		.cfi_def_cfa_offset 16
 5828 0004 0446     		mov	r4, r0
4639:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5829              		.loc 1 4639 0
 5830 0006 01A9     		add	r1, sp, #4
 5831 0008 FFF7FEFF 		bl	validate
 5832              	.LVL882:
4640:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 5833              		.loc 1 4640 0
 5834 000c 0346     		mov	r3, r0
 5835 000e 08B9     		cbnz	r0, .L520
4645:..\..\FatFs/ff.c **** #endif
 5836              		.loc 1 4645 0
 5837 0010 0022     		movs	r2, #0
 5838 0012 2260     		str	r2, [r4]
 5839              	.L520:
4652:..\..\FatFs/ff.c **** 
 5840              		.loc 1 4652 0
 5841 0014 1846     		mov	r0, r3
 5842              	.LVL883:
 5843 0016 02B0     		add	sp, sp, #8
 5844              		.cfi_def_cfa_offset 8
 5845              		@ sp needed
 5846 0018 10BD     		pop	{r4, pc}
 5847              		.cfi_endproc
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 236


 5848              	.LFE46:
 5849              		.size	f_closedir, .-f_closedir
 5850 001a 00BF     		.section	.text.f_readdir,"ax",%progbits
 5851              		.align	2
 5852              		.global	f_readdir
 5853              		.thumb
 5854              		.thumb_func
 5855              		.type	f_readdir, %function
 5856              	f_readdir:
 5857              	.LFB47:
4665:..\..\FatFs/ff.c **** 	FRESULT res;
 5858              		.loc 1 4665 0
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 8
 5861              		@ frame_needed = 0, uses_anonymous_args = 0
 5862              	.LVL884:
 5863 0000 70B5     		push	{r4, r5, r6, lr}
 5864              		.cfi_def_cfa_offset 16
 5865              		.cfi_offset 4, -16
 5866              		.cfi_offset 5, -12
 5867              		.cfi_offset 6, -8
 5868              		.cfi_offset 14, -4
 5869 0002 82B0     		sub	sp, sp, #8
 5870              		.cfi_def_cfa_offset 24
 5871 0004 0546     		mov	r5, r0
 5872 0006 0E46     		mov	r6, r1
4671:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5873              		.loc 1 4671 0
 5874 0008 01A9     		add	r1, sp, #4
 5875              	.LVL885:
 5876 000a FFF7FEFF 		bl	validate
 5877              	.LVL886:
4672:..\..\FatFs/ff.c **** 		if (!fno) {
 5878              		.loc 1 4672 0
 5879 000e 0446     		mov	r4, r0
 5880 0010 C8B9     		cbnz	r0, .L523
4673:..\..\FatFs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 5881              		.loc 1 4673 0
 5882 0012 2EB9     		cbnz	r6, .L524
4674:..\..\FatFs/ff.c **** 		} else {
 5883              		.loc 1 4674 0
 5884 0014 0021     		movs	r1, #0
 5885 0016 2846     		mov	r0, r5
 5886              	.LVL887:
 5887 0018 FFF7FEFF 		bl	dir_sdi
 5888              	.LVL888:
 5889 001c 0446     		mov	r4, r0
 5890              	.LVL889:
 5891 001e 12E0     		b	.L523
 5892              	.LVL890:
 5893              	.L524:
4677:..\..\FatFs/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5894              		.loc 1 4677 0
 5895 0020 0021     		movs	r1, #0
 5896 0022 2846     		mov	r0, r5
 5897              	.LVL891:
 5898 0024 FFF7FEFF 		bl	dir_read
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 237


 5899              	.LVL892:
4678:..\..\FatFs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 5900              		.loc 1 4678 0
 5901 0028 0428     		cmp	r0, #4
 5902 002a 00D0     		beq	.L525
4677:..\..\FatFs/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5903              		.loc 1 4677 0
 5904 002c 0446     		mov	r4, r0
 5905              	.L525:
 5906              	.LVL893:
4679:..\..\FatFs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 5907              		.loc 1 4679 0
 5908 002e 54B9     		cbnz	r4, .L523
4680:..\..\FatFs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 5909              		.loc 1 4680 0
 5910 0030 3146     		mov	r1, r6
 5911 0032 2846     		mov	r0, r5
 5912 0034 FFF7FEFF 		bl	get_fileinfo
 5913              	.LVL894:
4681:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 5914              		.loc 1 4681 0
 5915 0038 0021     		movs	r1, #0
 5916 003a 2846     		mov	r0, r5
 5917 003c FFF7FEFF 		bl	dir_next
 5918              	.LVL895:
4682:..\..\FatFs/ff.c **** 			}
 5919              		.loc 1 4682 0
 5920 0040 0428     		cmp	r0, #4
 5921 0042 00D0     		beq	.L523
4681:..\..\FatFs/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 5922              		.loc 1 4681 0
 5923 0044 0446     		mov	r4, r0
 5924              	.LVL896:
 5925              	.L523:
4688:..\..\FatFs/ff.c **** 
 5926              		.loc 1 4688 0
 5927 0046 2046     		mov	r0, r4
 5928 0048 02B0     		add	sp, sp, #8
 5929              		.cfi_def_cfa_offset 16
 5930              		@ sp needed
 5931 004a 70BD     		pop	{r4, r5, r6, pc}
 5932              		.cfi_endproc
 5933              	.LFE47:
 5934              		.size	f_readdir, .-f_readdir
 5935              		.section	.text.f_stat,"ax",%progbits
 5936              		.align	2
 5937              		.global	f_stat
 5938              		.thumb
 5939              		.thumb_func
 5940              		.type	f_stat, %function
 5941              	f_stat:
 5942              	.LFB48:
4753:..\..\FatFs/ff.c **** 	FRESULT res;
 5943              		.loc 1 4753 0
 5944              		.cfi_startproc
 5945              		@ args = 0, pretend = 0, frame = 56
 5946              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 238


 5947              	.LVL897:
 5948 0000 30B5     		push	{r4, r5, lr}
 5949              		.cfi_def_cfa_offset 12
 5950              		.cfi_offset 4, -12
 5951              		.cfi_offset 5, -8
 5952              		.cfi_offset 14, -4
 5953 0002 8FB0     		sub	sp, sp, #60
 5954              		.cfi_def_cfa_offset 72
 5955 0004 0190     		str	r0, [sp, #4]
 5956 0006 0D46     		mov	r5, r1
4760:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 5957              		.loc 1 4760 0
 5958 0008 0022     		movs	r2, #0
 5959 000a 03A9     		add	r1, sp, #12
 5960              	.LVL898:
 5961 000c 01A8     		add	r0, sp, #4
 5962              	.LVL899:
 5963 000e FFF7FEFF 		bl	mount_volume
 5964              	.LVL900:
4761:..\..\FatFs/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
 5965              		.loc 1 4761 0
 5966 0012 0446     		mov	r4, r0
 5967 0014 80B9     		cbnz	r0, .L528
4763:..\..\FatFs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 5968              		.loc 1 4763 0
 5969 0016 0199     		ldr	r1, [sp, #4]
 5970 0018 03A8     		add	r0, sp, #12
 5971              	.LVL901:
 5972 001a FFF7FEFF 		bl	follow_path
 5973              	.LVL902:
4764:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 5974              		.loc 1 4764 0
 5975 001e 0446     		mov	r4, r0
 5976 0020 50B9     		cbnz	r0, .L528
4765:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;
 5977              		.loc 1 4765 0
 5978 0022 9DF93730 		ldrsb	r3, [sp, #55]
 5979 0026 002B     		cmp	r3, #0
 5980 0028 05DB     		blt	.L529
4768:..\..\FatFs/ff.c **** 			}
 5981              		.loc 1 4768 0
 5982 002a 2DB1     		cbz	r5, .L528
4768:..\..\FatFs/ff.c **** 			}
 5983              		.loc 1 4768 0 is_stmt 0 discriminator 1
 5984 002c 2946     		mov	r1, r5
 5985 002e 03A8     		add	r0, sp, #12
 5986              	.LVL903:
 5987 0030 FFF7FEFF 		bl	get_fileinfo
 5988              	.LVL904:
 5989 0034 00E0     		b	.L528
 5990              	.LVL905:
 5991              	.L529:
4766:..\..\FatFs/ff.c **** 			} else {							/* Found an object */
 5992              		.loc 1 4766 0 is_stmt 1
 5993 0036 0624     		movs	r4, #6
 5994              	.LVL906:
 5995              	.L528:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 239


4775:..\..\FatFs/ff.c **** 
 5996              		.loc 1 4775 0
 5997 0038 2046     		mov	r0, r4
 5998 003a 0FB0     		add	sp, sp, #60
 5999              		.cfi_def_cfa_offset 12
 6000              		@ sp needed
 6001 003c 30BD     		pop	{r4, r5, pc}
 6002              		.cfi_endproc
 6003              	.LFE48:
 6004              		.size	f_stat, .-f_stat
 6005              		.section	.text.f_getfree,"ax",%progbits
 6006              		.align	2
 6007              		.global	f_getfree
 6008              		.thumb
 6009              		.thumb_func
 6010              		.type	f_getfree, %function
 6011              	f_getfree:
 6012              	.LFB49:
4789:..\..\FatFs/ff.c **** 	FRESULT res;
 6013              		.loc 1 4789 0
 6014              		.cfi_startproc
 6015              		@ args = 0, pretend = 0, frame = 32
 6016              		@ frame_needed = 0, uses_anonymous_args = 0
 6017              	.LVL907:
 6018 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6019              		.cfi_def_cfa_offset 32
 6020              		.cfi_offset 4, -32
 6021              		.cfi_offset 5, -28
 6022              		.cfi_offset 6, -24
 6023              		.cfi_offset 7, -20
 6024              		.cfi_offset 8, -16
 6025              		.cfi_offset 9, -12
 6026              		.cfi_offset 10, -8
 6027              		.cfi_offset 14, -4
 6028 0004 88B0     		sub	sp, sp, #32
 6029              		.cfi_def_cfa_offset 64
 6030 0006 0190     		str	r0, [sp, #4]
 6031 0008 8946     		mov	r9, r1
 6032 000a 1446     		mov	r4, r2
4799:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 6033              		.loc 1 4799 0
 6034 000c 0022     		movs	r2, #0
 6035              	.LVL908:
 6036 000e 07A9     		add	r1, sp, #28
 6037              	.LVL909:
 6038 0010 01A8     		add	r0, sp, #4
 6039              	.LVL910:
 6040 0012 FFF7FEFF 		bl	mount_volume
 6041              	.LVL911:
4800:..\..\FatFs/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 6042              		.loc 1 4800 0
 6043 0016 8046     		mov	r8, r0
 6044 0018 0028     		cmp	r0, #0
 6045 001a 54D1     		bne	.L532
4801:..\..\FatFs/ff.c **** 		/* If free_clst is valid, return it without full FAT scan */
 6046              		.loc 1 4801 0
 6047 001c 079B     		ldr	r3, [sp, #28]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 240


 6048 001e 2360     		str	r3, [r4]
4803:..\..\FatFs/ff.c **** 			*nclst = fs->free_clst;
 6049              		.loc 1 4803 0
 6050 0020 1A69     		ldr	r2, [r3, #16]
 6051 0022 9D69     		ldr	r5, [r3, #24]
 6052 0024 A91E     		subs	r1, r5, #2
 6053 0026 8A42     		cmp	r2, r1
 6054 0028 02D8     		bhi	.L533
4804:..\..\FatFs/ff.c **** 		} else {
 6055              		.loc 1 4804 0
 6056 002a C9F80020 		str	r2, [r9]
 6057 002e 4AE0     		b	.L532
 6058              	.L533:
 6059              	.LVL912:
4808:..\..\FatFs/ff.c **** 				clst = 2; obj.fs = fs;
 6060              		.loc 1 4808 0
 6061 0030 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6062 0032 012A     		cmp	r2, #1
 6063 0034 13D1     		bne	.L534
 6064              	.LVL913:
4809:..\..\FatFs/ff.c **** 				do {
 6065              		.loc 1 4809 0
 6066 0036 0393     		str	r3, [sp, #12]
 6067 0038 0224     		movs	r4, #2
 6068              	.LVL914:
4807:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 6069              		.loc 1 4807 0
 6070 003a 0026     		movs	r6, #0
 6071              	.LVL915:
 6072              	.L537:
4811:..\..\FatFs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6073              		.loc 1 4811 0
 6074 003c 2146     		mov	r1, r4
 6075 003e 03A8     		add	r0, sp, #12
 6076 0040 FFF7FEFF 		bl	get_fat
 6077              	.LVL916:
4812:..\..\FatFs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6078              		.loc 1 4812 0
 6079 0044 B0F1FF3F 		cmp	r0, #-1
 6080 0048 30D0     		beq	.L544
4813:..\..\FatFs/ff.c **** 					if (stat == 0) nfree++;
 6081              		.loc 1 4813 0
 6082 004a 0128     		cmp	r0, #1
 6083 004c 31D0     		beq	.L545
4814:..\..\FatFs/ff.c **** 				} while (++clst < fs->n_fatent);
 6084              		.loc 1 4814 0
 6085 004e 00B9     		cbnz	r0, .L536
4814:..\..\FatFs/ff.c **** 				} while (++clst < fs->n_fatent);
 6086              		.loc 1 4814 0 is_stmt 0 discriminator 1
 6087 0050 0136     		adds	r6, r6, #1
 6088              	.LVL917:
 6089              	.L536:
4815:..\..\FatFs/ff.c **** 			} else {
 6090              		.loc 1 4815 0 is_stmt 1
 6091 0052 0134     		adds	r4, r4, #1
 6092              	.LVL918:
 6093 0054 079B     		ldr	r3, [sp, #28]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 241


 6094 0056 9B69     		ldr	r3, [r3, #24]
 6095 0058 9C42     		cmp	r4, r3
 6096 005a EFD3     		bcc	.L537
 6097 005c 2BE0     		b	.L535
 6098              	.LVL919:
 6099              	.L534:
4840:..\..\FatFs/ff.c **** 					i = 0;					/* Offset in the sector */
 6100              		.loc 1 4840 0
 6101 005e 5F6A     		ldr	r7, [r3, #36]
 6102              	.LVL920:
4841:..\..\FatFs/ff.c **** 					do {	/* Counts numbuer of entries with zero in the FAT */
 6103              		.loc 1 4841 0
 6104 0060 0024     		movs	r4, #0
 6105              	.LVL921:
4807:..\..\FatFs/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 6106              		.loc 1 4807 0
 6107 0062 2646     		mov	r6, r4
 6108              	.LVL922:
 6109              	.L543:
4843:..\..\FatFs/ff.c **** 							res = move_window(fs, sect++);
 6110              		.loc 1 4843 0
 6111 0064 44B9     		cbnz	r4, .L538
4844:..\..\FatFs/ff.c **** 							if (res != FR_OK) break;
 6112              		.loc 1 4844 0
 6113 0066 07F1010A 		add	r10, r7, #1
 6114              	.LVL923:
 6115 006a 3946     		mov	r1, r7
 6116 006c 0798     		ldr	r0, [sp, #28]
 6117 006e FFF7FEFF 		bl	move_window
 6118              	.LVL924:
4845:..\..\FatFs/ff.c **** 						}
 6119              		.loc 1 4845 0
 6120 0072 8046     		mov	r8, r0
 6121 0074 F8B9     		cbnz	r0, .L535
4844:..\..\FatFs/ff.c **** 							if (res != FR_OK) break;
 6122              		.loc 1 4844 0
 6123 0076 5746     		mov	r7, r10
 6124              	.LVL925:
 6125              	.L538:
4847:..\..\FatFs/ff.c **** 							if (ld_word(fs->win + i) == 0) nfree++;
 6126              		.loc 1 4847 0
 6127 0078 0798     		ldr	r0, [sp, #28]
 6128 007a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6129 007c 022B     		cmp	r3, #2
 6130 007e 07D1     		bne	.L539
4848:..\..\FatFs/ff.c **** 							i += 2;
 6131              		.loc 1 4848 0
 6132 0080 3430     		adds	r0, r0, #52
 6133 0082 2044     		add	r0, r0, r4
 6134 0084 FFF7FEFF 		bl	ld_word
 6135              	.LVL926:
 6136 0088 00B9     		cbnz	r0, .L540
4848:..\..\FatFs/ff.c **** 							i += 2;
 6137              		.loc 1 4848 0 is_stmt 0 discriminator 1
 6138 008a 0136     		adds	r6, r6, #1
 6139              	.LVL927:
 6140              	.L540:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 242


4849:..\..\FatFs/ff.c **** 						} else {
 6141              		.loc 1 4849 0 is_stmt 1
 6142 008c 0234     		adds	r4, r4, #2
 6143              	.LVL928:
 6144 008e 08E0     		b	.L541
 6145              	.L539:
4851:..\..\FatFs/ff.c **** 							i += 4;
 6146              		.loc 1 4851 0
 6147 0090 3430     		adds	r0, r0, #52
 6148 0092 2044     		add	r0, r0, r4
 6149 0094 FFF7FEFF 		bl	ld_dword
 6150              	.LVL929:
 6151 0098 20F07040 		bic	r0, r0, #-268435456
 6152 009c 00B9     		cbnz	r0, .L542
4851:..\..\FatFs/ff.c **** 							i += 4;
 6153              		.loc 1 4851 0 is_stmt 0 discriminator 1
 6154 009e 0136     		adds	r6, r6, #1
 6155              	.LVL930:
 6156              	.L542:
4852:..\..\FatFs/ff.c **** 						}
 6157              		.loc 1 4852 0 is_stmt 1
 6158 00a0 0434     		adds	r4, r4, #4
 6159              	.LVL931:
 6160              	.L541:
4854:..\..\FatFs/ff.c **** 					} while (--clst);
 6161              		.loc 1 4854 0
 6162 00a2 C4F30804 		ubfx	r4, r4, #0, #9
 6163              	.LVL932:
4855:..\..\FatFs/ff.c **** 				}
 6164              		.loc 1 4855 0
 6165 00a6 013D     		subs	r5, r5, #1
 6166              	.LVL933:
 6167 00a8 DCD1     		bne	.L543
 6168 00aa 04E0     		b	.L535
 6169              	.LVL934:
 6170              	.L544:
4812:..\..\FatFs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6171              		.loc 1 4812 0
 6172 00ac 4FF00108 		mov	r8, #1
 6173 00b0 01E0     		b	.L535
 6174              	.L545:
4813:..\..\FatFs/ff.c **** 					if (stat == 0) nfree++;
 6175              		.loc 1 4813 0
 6176 00b2 4FF00208 		mov	r8, #2
 6177              	.LVL935:
 6178              	.L535:
4858:..\..\FatFs/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 6179              		.loc 1 4858 0
 6180 00b6 C9F80060 		str	r6, [r9]
4859:..\..\FatFs/ff.c **** 			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 6181              		.loc 1 4859 0
 6182 00ba 079B     		ldr	r3, [sp, #28]
 6183 00bc 1E61     		str	r6, [r3, #16]
4860:..\..\FatFs/ff.c **** 		}
 6184              		.loc 1 4860 0
 6185 00be 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 6186 00c0 42F00102 		orr	r2, r2, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 243


 6187 00c4 1A71     		strb	r2, [r3, #4]
 6188              	.LVL936:
 6189              	.L532:
4865:..\..\FatFs/ff.c **** 
 6190              		.loc 1 4865 0
 6191 00c6 4046     		mov	r0, r8
 6192 00c8 08B0     		add	sp, sp, #32
 6193              		.cfi_def_cfa_offset 32
 6194              		@ sp needed
 6195 00ca BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 6196              		.cfi_endproc
 6197              	.LFE49:
 6198              		.size	f_getfree, .-f_getfree
 6199 00ce 00BF     		.section	.text.f_truncate,"ax",%progbits
 6200              		.align	2
 6201              		.global	f_truncate
 6202              		.thumb
 6203              		.thumb_func
 6204              		.type	f_truncate, %function
 6205              	f_truncate:
 6206              	.LFB50:
4877:..\..\FatFs/ff.c **** 	FRESULT res;
 6207              		.loc 1 4877 0
 6208              		.cfi_startproc
 6209              		@ args = 0, pretend = 0, frame = 8
 6210              		@ frame_needed = 0, uses_anonymous_args = 0
 6211              	.LVL937:
 6212 0000 30B5     		push	{r4, r5, lr}
 6213              		.cfi_def_cfa_offset 12
 6214              		.cfi_offset 4, -12
 6215              		.cfi_offset 5, -8
 6216              		.cfi_offset 14, -4
 6217 0002 83B0     		sub	sp, sp, #12
 6218              		.cfi_def_cfa_offset 24
 6219 0004 0546     		mov	r5, r0
4883:..\..\FatFs/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 6220              		.loc 1 4883 0
 6221 0006 01A9     		add	r1, sp, #4
 6222 0008 FFF7FEFF 		bl	validate
 6223              	.LVL938:
4884:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6224              		.loc 1 4884 0
 6225 000c 0028     		cmp	r0, #0
 6226 000e 47D1     		bne	.L554
4884:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6227              		.loc 1 4884 0 is_stmt 0 discriminator 2
 6228 0010 6C7C     		ldrb	r4, [r5, #17]	@ zero_extendqisi2
 6229              	.LVL939:
 6230 0012 002C     		cmp	r4, #0
 6231 0014 45D1     		bne	.L555
4885:..\..\FatFs/ff.c **** 
 6232              		.loc 1 4885 0 is_stmt 1
 6233 0016 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 6234 0018 13F0020F 		tst	r3, #2
 6235 001c 43D0     		beq	.L556
4887:..\..\FatFs/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 6236              		.loc 1 4887 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 244


 6237 001e 6B69     		ldr	r3, [r5, #20]
 6238 0020 EA68     		ldr	r2, [r5, #12]
 6239 0022 9342     		cmp	r3, r2
 6240 0024 41D2     		bcs	.L557
4888:..\..\FatFs/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 6241              		.loc 1 4888 0
 6242 0026 43B9     		cbnz	r3, .L549
4889:..\..\FatFs/ff.c **** 			fp->obj.sclust = 0;
 6243              		.loc 1 4889 0
 6244 0028 0022     		movs	r2, #0
 6245 002a A968     		ldr	r1, [r5, #8]
 6246 002c 2846     		mov	r0, r5
 6247 002e FFF7FEFF 		bl	remove_chain
 6248              	.LVL940:
 6249 0032 0446     		mov	r4, r0
 6250              	.LVL941:
4890:..\..\FatFs/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
 6251              		.loc 1 4890 0
 6252 0034 0023     		movs	r3, #0
 6253 0036 AB60     		str	r3, [r5, #8]
 6254 0038 15E0     		b	.L550
 6255              	.L549:
4892:..\..\FatFs/ff.c **** 			res = FR_OK;
 6256              		.loc 1 4892 0
 6257 003a A969     		ldr	r1, [r5, #24]
 6258 003c 2846     		mov	r0, r5
 6259 003e FFF7FEFF 		bl	get_fat
 6260              	.LVL942:
4894:..\..\FatFs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 6261              		.loc 1 4894 0
 6262 0042 B0F1FF3F 		cmp	r0, #-1
 6263 0046 00D1     		bne	.L551
 6264 0048 0124     		movs	r4, #1
 6265              	.L551:
 6266              	.LVL943:
4895:..\..\FatFs/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 6267              		.loc 1 4895 0
 6268 004a 0128     		cmp	r0, #1
 6269 004c 00D1     		bne	.L552
 6270 004e 0224     		movs	r4, #2
 6271              	.LVL944:
 6272              	.L552:
4896:..\..\FatFs/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 6273              		.loc 1 4896 0
 6274 0050 4CB9     		cbnz	r4, .L550
4896:..\..\FatFs/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 6275              		.loc 1 4896 0 is_stmt 0 discriminator 1
 6276 0052 019B     		ldr	r3, [sp, #4]
 6277 0054 9B69     		ldr	r3, [r3, #24]
 6278 0056 9842     		cmp	r0, r3
 6279 0058 05D2     		bcs	.L550
4897:..\..\FatFs/ff.c **** 			}
 6280              		.loc 1 4897 0 is_stmt 1
 6281 005a AA69     		ldr	r2, [r5, #24]
 6282 005c 0146     		mov	r1, r0
 6283 005e 2846     		mov	r0, r5
 6284              	.LVL945:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 245


 6285 0060 FFF7FEFF 		bl	remove_chain
 6286              	.LVL946:
 6287 0064 0446     		mov	r4, r0
 6288              	.LVL947:
 6289              	.L550:
4900:..\..\FatFs/ff.c **** 		fp->flag |= FA_MODIFIED;
 6290              		.loc 1 4900 0
 6291 0066 6B69     		ldr	r3, [r5, #20]
 6292 0068 EB60     		str	r3, [r5, #12]
4901:..\..\FatFs/ff.c **** #if !FF_FS_TINY
 6293              		.loc 1 4901 0
 6294 006a 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 6295 006c 43F04003 		orr	r3, r3, #64
 6296 0070 2B74     		strb	r3, [r5, #16]
4903:..\..\FatFs/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 6297              		.loc 1 4903 0
 6298 0072 8CB9     		cbnz	r4, .L553
4903:..\..\FatFs/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 6299              		.loc 1 4903 0 is_stmt 0 discriminator 1
 6300 0074 13F0800F 		tst	r3, #128
 6301 0078 0ED0     		beq	.L553
4904:..\..\FatFs/ff.c **** 				res = FR_DISK_ERR;
 6302              		.loc 1 4904 0 is_stmt 1
 6303 007a 0123     		movs	r3, #1
 6304 007c EA69     		ldr	r2, [r5, #28]
 6305 007e 05F12801 		add	r1, r5, #40
 6306 0082 0198     		ldr	r0, [sp, #4]
 6307 0084 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6308 0086 FFF7FEFF 		bl	disk_write
 6309              	.LVL948:
 6310 008a 20B9     		cbnz	r0, .L560
4907:..\..\FatFs/ff.c **** 			}
 6311              		.loc 1 4907 0
 6312 008c 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 6313 008e 03F07F03 		and	r3, r3, #127
 6314 0092 2B74     		strb	r3, [r5, #16]
 6315 0094 00E0     		b	.L553
 6316              	.L560:
4905:..\..\FatFs/ff.c **** 			} else {
 6317              		.loc 1 4905 0
 6318 0096 0124     		movs	r4, #1
 6319              	.LVL949:
 6320              	.L553:
4911:..\..\FatFs/ff.c **** 	}
 6321              		.loc 1 4911 0
 6322 0098 4CB1     		cbz	r4, .L561
4911:..\..\FatFs/ff.c **** 	}
 6323              		.loc 1 4911 0 is_stmt 0 discriminator 1
 6324 009a 6C74     		strb	r4, [r5, #17]
 6325 009c 2046     		mov	r0, r4
 6326 009e 07E0     		b	.L548
 6327              	.LVL950:
 6328              	.L554:
 6329 00a0 06E0     		b	.L548
 6330              	.LVL951:
 6331              	.L555:
4884:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 246


 6332              		.loc 1 4884 0 is_stmt 1
 6333 00a2 2046     		mov	r0, r4
 6334 00a4 04E0     		b	.L548
 6335              	.L556:
4885:..\..\FatFs/ff.c **** 
 6336              		.loc 1 4885 0
 6337 00a6 0720     		movs	r0, #7
 6338 00a8 02E0     		b	.L548
 6339              	.L557:
4884:..\..\FatFs/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6340              		.loc 1 4884 0
 6341 00aa 2046     		mov	r0, r4
 6342 00ac 00E0     		b	.L548
 6343              	.L561:
 6344 00ae 2046     		mov	r0, r4
 6345              	.LVL952:
 6346              	.L548:
4915:..\..\FatFs/ff.c **** 
 6347              		.loc 1 4915 0
 6348 00b0 03B0     		add	sp, sp, #12
 6349              		.cfi_def_cfa_offset 12
 6350              		@ sp needed
 6351 00b2 30BD     		pop	{r4, r5, pc}
 6352              		.cfi_endproc
 6353              	.LFE50:
 6354              		.size	f_truncate, .-f_truncate
 6355              		.section	.text.f_unlink,"ax",%progbits
 6356              		.align	2
 6357              		.global	f_unlink
 6358              		.thumb
 6359              		.thumb_func
 6360              		.type	f_unlink, %function
 6361              	f_unlink:
 6362              	.LFB51:
4927:..\..\FatFs/ff.c **** 	FRESULT res;
 6363              		.loc 1 4927 0
 6364              		.cfi_startproc
 6365              		@ args = 0, pretend = 0, frame = 104
 6366              		@ frame_needed = 0, uses_anonymous_args = 0
 6367              	.LVL953:
 6368 0000 70B5     		push	{r4, r5, r6, lr}
 6369              		.cfi_def_cfa_offset 16
 6370              		.cfi_offset 4, -16
 6371              		.cfi_offset 5, -12
 6372              		.cfi_offset 6, -8
 6373              		.cfi_offset 14, -4
 6374 0002 9AB0     		sub	sp, sp, #104
 6375              		.cfi_def_cfa_offset 120
 6376 0004 0190     		str	r0, [sp, #4]
 6377              	.LVL954:
4939:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 6378              		.loc 1 4939 0
 6379 0006 0222     		movs	r2, #2
 6380 0008 03A9     		add	r1, sp, #12
 6381 000a 01A8     		add	r0, sp, #4
 6382              	.LVL955:
 6383 000c FFF7FEFF 		bl	mount_volume
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 247


 6384              	.LVL956:
4940:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
 6385              		.loc 1 4940 0
 6386 0010 0446     		mov	r4, r0
 6387 0012 0028     		cmp	r0, #0
 6388 0014 53D1     		bne	.L564
4941:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 6389              		.loc 1 4941 0
 6390 0016 039B     		ldr	r3, [sp, #12]
 6391 0018 0F93     		str	r3, [sp, #60]
4943:..\..\FatFs/ff.c **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 6392              		.loc 1 4943 0
 6393 001a 0199     		ldr	r1, [sp, #4]
 6394 001c 0FA8     		add	r0, sp, #60
 6395              	.LVL957:
 6396 001e FFF7FEFF 		bl	follow_path
 6397              	.LVL958:
4944:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 6398              		.loc 1 4944 0
 6399 0022 0446     		mov	r4, r0
 6400 0024 28B9     		cbnz	r0, .L565
4944:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 6401              		.loc 1 4944 0 is_stmt 0 discriminator 1
 6402 0026 9DF86730 		ldrb	r3, [sp, #103]	@ zero_extendqisi2
 6403 002a 13F0200F 		tst	r3, #32
 6404 002e 00D0     		beq	.L565
4945:..\..\FatFs/ff.c **** 		}
 6405              		.loc 1 4945 0 is_stmt 1
 6406 0030 0624     		movs	r4, #6
 6407              	.L565:
 6408              	.LVL959:
4950:..\..\FatFs/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 6409              		.loc 1 4950 0
 6410 0032 002C     		cmp	r4, #0
 6411 0034 43D1     		bne	.L564
4951:..\..\FatFs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 6412              		.loc 1 4951 0
 6413 0036 9DF96730 		ldrsb	r3, [sp, #103]
 6414 003a 002B     		cmp	r3, #0
 6415 003c 05DB     		blt	.L571
4954:..\..\FatFs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 6416              		.loc 1 4954 0
 6417 003e 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 6418 0042 13F0010F 		tst	r3, #1
 6419 0046 02D1     		bne	.L572
 6420 0048 02E0     		b	.L566
 6421              	.L571:
4952:..\..\FatFs/ff.c **** 			} else {
 6422              		.loc 1 4952 0
 6423 004a 0624     		movs	r4, #6
 6424              	.LVL960:
 6425 004c 00E0     		b	.L566
 6426              	.LVL961:
 6427              	.L572:
4955:..\..\FatFs/ff.c **** 				}
 6428              		.loc 1 4955 0
 6429 004e 0724     		movs	r4, #7
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 248


 6430              	.LVL962:
 6431              	.L566:
4958:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6432              		.loc 1 4958 0
 6433 0050 04BB     		cbnz	r4, .L573
4967:..\..\FatFs/ff.c **** 				}
 6434              		.loc 1 4967 0
 6435 0052 039E     		ldr	r6, [sp, #12]
 6436 0054 1699     		ldr	r1, [sp, #88]
 6437 0056 3046     		mov	r0, r6
 6438 0058 FFF7FEFF 		bl	ld_clust
 6439              	.LVL963:
 6440 005c 0546     		mov	r5, r0
 6441              	.LVL964:
4969:..\..\FatFs/ff.c **** #if FF_FS_RPATH != 0
 6442              		.loc 1 4969 0
 6443 005e 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 6444 0062 13F0100F 		tst	r3, #16
 6445 0066 18D0     		beq	.L567
4971:..\..\FatFs/ff.c **** 						res = FR_DENIED;
 6446              		.loc 1 4971 0
 6447 0068 7369     		ldr	r3, [r6, #20]
 6448 006a 9842     		cmp	r0, r3
 6449 006c 14D0     		beq	.L574
4976:..\..\FatFs/ff.c **** 						sdj.obj.sclust = dclst;
 6450              		.loc 1 4976 0
 6451 006e 0496     		str	r6, [sp, #16]
4977:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6452              		.loc 1 4977 0
 6453 0070 0690     		str	r0, [sp, #24]
4984:..\..\FatFs/ff.c **** 						if (res == FR_OK) {
 6454              		.loc 1 4984 0
 6455 0072 0021     		movs	r1, #0
 6456 0074 04A8     		add	r0, sp, #16
 6457              	.LVL965:
 6458 0076 FFF7FEFF 		bl	dir_sdi
 6459              	.LVL966:
4985:..\..\FatFs/ff.c **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 6460              		.loc 1 4985 0
 6461 007a 0446     		mov	r4, r0
 6462 007c 68B9     		cbnz	r0, .L567
4986:..\..\FatFs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 6463              		.loc 1 4986 0
 6464 007e 0021     		movs	r1, #0
 6465 0080 04A8     		add	r0, sp, #16
 6466              	.LVL967:
 6467 0082 FFF7FEFF 		bl	dir_read
 6468              	.LVL968:
4987:..\..\FatFs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 6469              		.loc 1 4987 0
 6470 0086 0346     		mov	r3, r0
 6471 0088 00B9     		cbnz	r0, .L568
 6472 008a 0723     		movs	r3, #7
 6473              	.L568:
 6474              	.LVL969:
4988:..\..\FatFs/ff.c **** 						}
 6475              		.loc 1 4988 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 249


 6476 008c 042B     		cmp	r3, #4
 6477 008e 04D0     		beq	.L567
 6478 0090 1C46     		mov	r4, r3
 6479 0092 02E0     		b	.L567
 6480              	.LVL970:
 6481              	.L573:
4930:..\..\FatFs/ff.c **** 	FATFS *fs;
 6482              		.loc 1 4930 0
 6483 0094 0025     		movs	r5, #0
 6484 0096 00E0     		b	.L567
 6485              	.LVL971:
 6486              	.L574:
4972:..\..\FatFs/ff.c **** 					} else
 6487              		.loc 1 4972 0
 6488 0098 0724     		movs	r4, #7
 6489              	.LVL972:
 6490              	.L567:
4993:..\..\FatFs/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 6491              		.loc 1 4993 0
 6492 009a 84B9     		cbnz	r4, .L564
4994:..\..\FatFs/ff.c **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 6493              		.loc 1 4994 0
 6494 009c 0FA8     		add	r0, sp, #60
 6495 009e FFF7FEFF 		bl	dir_remove
 6496              	.LVL973:
4995:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6497              		.loc 1 4995 0
 6498 00a2 0446     		mov	r4, r0
 6499 00a4 30B9     		cbnz	r0, .L569
4995:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6500              		.loc 1 4995 0 is_stmt 0 discriminator 1
 6501 00a6 2DB1     		cbz	r5, .L569
4999:..\..\FatFs/ff.c **** #endif
 6502              		.loc 1 4999 0 is_stmt 1
 6503 00a8 0022     		movs	r2, #0
 6504 00aa 2946     		mov	r1, r5
 6505 00ac 0FA8     		add	r0, sp, #60
 6506              	.LVL974:
 6507 00ae FFF7FEFF 		bl	remove_chain
 6508              	.LVL975:
 6509 00b2 0446     		mov	r4, r0
 6510              	.LVL976:
 6511              	.L569:
5002:..\..\FatFs/ff.c **** 			}
 6512              		.loc 1 5002 0
 6513 00b4 1CB9     		cbnz	r4, .L564
5002:..\..\FatFs/ff.c **** 			}
 6514              		.loc 1 5002 0 is_stmt 0 discriminator 1
 6515 00b6 0398     		ldr	r0, [sp, #12]
 6516 00b8 FFF7FEFF 		bl	sync_fs
 6517              	.LVL977:
 6518 00bc 0446     		mov	r4, r0
 6519              	.LVL978:
 6520              	.L564:
5009:..\..\FatFs/ff.c **** 
 6521              		.loc 1 5009 0 is_stmt 1
 6522 00be 2046     		mov	r0, r4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 250


 6523 00c0 1AB0     		add	sp, sp, #104
 6524              		.cfi_def_cfa_offset 16
 6525              		@ sp needed
 6526 00c2 70BD     		pop	{r4, r5, r6, pc}
 6527              		.cfi_endproc
 6528              	.LFE51:
 6529              		.size	f_unlink, .-f_unlink
 6530              		.section	.text.f_mkdir,"ax",%progbits
 6531              		.align	2
 6532              		.global	f_mkdir
 6533              		.thumb
 6534              		.thumb_func
 6535              		.type	f_mkdir, %function
 6536              	f_mkdir:
 6537              	.LFB52:
5021:..\..\FatFs/ff.c **** 	FRESULT res;
 6538              		.loc 1 5021 0
 6539              		.cfi_startproc
 6540              		@ args = 0, pretend = 0, frame = 72
 6541              		@ frame_needed = 0, uses_anonymous_args = 0
 6542              	.LVL979:
 6543 0000 30B5     		push	{r4, r5, lr}
 6544              		.cfi_def_cfa_offset 12
 6545              		.cfi_offset 4, -12
 6546              		.cfi_offset 5, -8
 6547              		.cfi_offset 14, -4
 6548 0002 93B0     		sub	sp, sp, #76
 6549              		.cfi_def_cfa_offset 88
 6550 0004 0190     		str	r0, [sp, #4]
5030:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 6551              		.loc 1 5030 0
 6552 0006 0222     		movs	r2, #2
 6553 0008 02A9     		add	r1, sp, #8
 6554 000a 01A8     		add	r0, sp, #4
 6555              	.LVL980:
 6556 000c FFF7FEFF 		bl	mount_volume
 6557              	.LVL981:
5031:..\..\FatFs/ff.c **** 		dj.obj.fs = fs;
 6558              		.loc 1 5031 0
 6559 0010 0446     		mov	r4, r0
 6560 0012 0028     		cmp	r0, #0
 6561 0014 75D1     		bne	.L578
5032:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 6562              		.loc 1 5032 0
 6563 0016 029B     		ldr	r3, [sp, #8]
 6564 0018 0793     		str	r3, [sp, #28]
5034:..\..\FatFs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 6565              		.loc 1 5034 0
 6566 001a 0199     		ldr	r1, [sp, #4]
 6567 001c 07A8     		add	r0, sp, #28
 6568              	.LVL982:
 6569 001e FFF7FEFF 		bl	follow_path
 6570              	.LVL983:
5035:..\..\FatFs/ff.c **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 6571              		.loc 1 5035 0
 6572 0022 0346     		mov	r3, r0
 6573 0024 00B9     		cbnz	r0, .L579
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 251


 6574 0026 0823     		movs	r3, #8
 6575              	.L579:
 6576              	.LVL984:
5036:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;
 6577              		.loc 1 5036 0
 6578 0028 042B     		cmp	r3, #4
 6579 002a 05D1     		bne	.L580
5036:..\..\FatFs/ff.c **** 			res = FR_INVALID_NAME;
 6580              		.loc 1 5036 0 is_stmt 0 discriminator 1
 6581 002c 9DF84720 		ldrb	r2, [sp, #71]	@ zero_extendqisi2
 6582 0030 12F0200F 		tst	r2, #32
 6583 0034 00D0     		beq	.L580
5037:..\..\FatFs/ff.c **** 		}
 6584              		.loc 1 5037 0 is_stmt 1
 6585 0036 0623     		movs	r3, #6
 6586              	.LVL985:
 6587              	.L580:
5039:..\..\FatFs/ff.c **** 			sobj.fs = fs;						/* New object id to create a new chain */
 6588              		.loc 1 5039 0
 6589 0038 042B     		cmp	r3, #4
 6590 003a 61D1     		bne	.L588
5040:..\..\FatFs/ff.c **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 6591              		.loc 1 5040 0
 6592 003c 12A8     		add	r0, sp, #72
 6593 003e 029B     		ldr	r3, [sp, #8]
 6594              	.LVL986:
 6595 0040 40F83C3D 		str	r3, [r0, #-60]!
5041:..\..\FatFs/ff.c **** 			res = FR_OK;
 6596              		.loc 1 5041 0
 6597 0044 0021     		movs	r1, #0
 6598 0046 FFF7FEFF 		bl	create_chain
 6599              	.LVL987:
5043:..\..\FatFs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 6600              		.loc 1 5043 0
 6601 004a 0546     		mov	r5, r0
 6602 004c 00B9     		cbnz	r0, .L581
 6603 004e 0724     		movs	r4, #7
 6604              	.L581:
 6605              	.LVL988:
5044:..\..\FatFs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 6606              		.loc 1 5044 0
 6607 0050 012D     		cmp	r5, #1
 6608 0052 00D1     		bne	.L582
 6609 0054 0224     		movs	r4, #2
 6610              	.LVL989:
 6611              	.L582:
5045:..\..\FatFs/ff.c **** 			tm = GET_FATTIME();
 6612              		.loc 1 5045 0
 6613 0056 B5F1FF3F 		cmp	r5, #-1
 6614 005a 00D1     		bne	.L583
 6615 005c 0124     		movs	r4, #1
 6616              	.LVL990:
 6617              	.L583:
5047:..\..\FatFs/ff.c **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 6618              		.loc 1 5047 0
 6619 005e 94BB     		cbnz	r4, .L584
5048:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 252


 6620              		.loc 1 5048 0
 6621 0060 2946     		mov	r1, r5
 6622 0062 0298     		ldr	r0, [sp, #8]
 6623              	.LVL991:
 6624 0064 FFF7FEFF 		bl	dir_clear
 6625              	.LVL992:
5049:..\..\FatFs/ff.c **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 6626              		.loc 1 5049 0
 6627 0068 0446     		mov	r4, r0
 6628 006a 60BB     		cbnz	r0, .L584
5051:..\..\FatFs/ff.c **** 						fs->win[DIR_Name] = '.';
 6629              		.loc 1 5051 0
 6630 006c 0B22     		movs	r2, #11
 6631 006e 2021     		movs	r1, #32
 6632 0070 0298     		ldr	r0, [sp, #8]
 6633              	.LVL993:
 6634 0072 3430     		adds	r0, r0, #52
 6635 0074 FFF7FEFF 		bl	mem_set
 6636              	.LVL994:
5052:..\..\FatFs/ff.c **** 						fs->win[DIR_Attr] = AM_DIR;
 6637              		.loc 1 5052 0
 6638 0078 0298     		ldr	r0, [sp, #8]
 6639 007a 2E24     		movs	r4, #46
 6640 007c 80F83440 		strb	r4, [r0, #52]
5053:..\..\FatFs/ff.c **** 						st_dword(fs->win + DIR_ModTime, tm);
 6641              		.loc 1 5053 0
 6642 0080 1023     		movs	r3, #16
 6643 0082 80F83F30 		strb	r3, [r0, #63]
5054:..\..\FatFs/ff.c **** 						st_clust(fs, fs->win, dcl);
 6644              		.loc 1 5054 0
 6645 0086 2049     		ldr	r1, .L593
 6646 0088 4A30     		adds	r0, r0, #74
 6647 008a FFF7FEFF 		bl	st_dword
 6648              	.LVL995:
5055:..\..\FatFs/ff.c **** 						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 6649              		.loc 1 5055 0
 6650 008e 0298     		ldr	r0, [sp, #8]
 6651 0090 2A46     		mov	r2, r5
 6652 0092 00F13401 		add	r1, r0, #52
 6653 0096 FFF7FEFF 		bl	st_clust
 6654              	.LVL996:
5056:..\..\FatFs/ff.c **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 6655              		.loc 1 5056 0
 6656 009a 0298     		ldr	r0, [sp, #8]
 6657 009c 2022     		movs	r2, #32
 6658 009e 00F13401 		add	r1, r0, #52
 6659 00a2 5430     		adds	r0, r0, #84
 6660 00a4 FFF7FEFF 		bl	mem_cpy
 6661              	.LVL997:
5057:..\..\FatFs/ff.c **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 6662              		.loc 1 5057 0
 6663 00a8 0298     		ldr	r0, [sp, #8]
 6664 00aa 80F85540 		strb	r4, [r0, #85]
 6665              	.LVL998:
5058:..\..\FatFs/ff.c **** 						fs->wflag = 1;
 6666              		.loc 1 5058 0
 6667 00ae 099A     		ldr	r2, [sp, #36]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 253


 6668 00b0 00F15401 		add	r1, r0, #84
 6669 00b4 FFF7FEFF 		bl	st_clust
 6670              	.LVL999:
5059:..\..\FatFs/ff.c **** 					}
 6671              		.loc 1 5059 0
 6672 00b8 0122     		movs	r2, #1
 6673 00ba 029B     		ldr	r3, [sp, #8]
 6674 00bc DA70     		strb	r2, [r3, #3]
5061:..\..\FatFs/ff.c **** 				}
 6675              		.loc 1 5061 0
 6676 00be 07A8     		add	r0, sp, #28
 6677 00c0 FFF7FEFF 		bl	dir_register
 6678              	.LVL1000:
 6679 00c4 0446     		mov	r4, r0
 6680              	.LVL1001:
 6681              	.L584:
5064:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6682              		.loc 1 5064 0
 6683 00c6 ACB9     		cbnz	r4, .L585
5077:..\..\FatFs/ff.c **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 6684              		.loc 1 5077 0
 6685 00c8 0F49     		ldr	r1, .L593
 6686 00ca 0E98     		ldr	r0, [sp, #56]
 6687 00cc 1630     		adds	r0, r0, #22
 6688 00ce FFF7FEFF 		bl	st_dword
 6689              	.LVL1002:
5078:..\..\FatFs/ff.c **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 6690              		.loc 1 5078 0
 6691 00d2 2A46     		mov	r2, r5
 6692 00d4 0E99     		ldr	r1, [sp, #56]
 6693 00d6 0298     		ldr	r0, [sp, #8]
 6694 00d8 FFF7FEFF 		bl	st_clust
 6695              	.LVL1003:
5079:..\..\FatFs/ff.c **** 					fs->wflag = 1;
 6696              		.loc 1 5079 0
 6697 00dc 1022     		movs	r2, #16
 6698 00de 0E9B     		ldr	r3, [sp, #56]
 6699 00e0 DA72     		strb	r2, [r3, #11]
5080:..\..\FatFs/ff.c **** 				}
 6700              		.loc 1 5080 0
 6701 00e2 0122     		movs	r2, #1
 6702 00e4 029B     		ldr	r3, [sp, #8]
 6703 00e6 DA70     		strb	r2, [r3, #3]
5082:..\..\FatFs/ff.c **** 					res = sync_fs(fs);
 6704              		.loc 1 5082 0
 6705 00e8 5CB9     		cbnz	r4, .L578
5083:..\..\FatFs/ff.c **** 				}
 6706              		.loc 1 5083 0
 6707 00ea 0298     		ldr	r0, [sp, #8]
 6708 00ec FFF7FEFF 		bl	sync_fs
 6709              	.LVL1004:
 6710 00f0 0446     		mov	r4, r0
 6711              	.LVL1005:
 6712 00f2 06E0     		b	.L578
 6713              	.L585:
5086:..\..\FatFs/ff.c **** 			}
 6714              		.loc 1 5086 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 254


 6715 00f4 0022     		movs	r2, #0
 6716 00f6 2946     		mov	r1, r5
 6717 00f8 03A8     		add	r0, sp, #12
 6718 00fa FFF7FEFF 		bl	remove_chain
 6719              	.LVL1006:
 6720 00fe 00E0     		b	.L578
 6721              	.LVL1007:
 6722              	.L588:
 6723 0100 1C46     		mov	r4, r3
 6724              	.LVL1008:
 6725              	.L578:
5093:..\..\FatFs/ff.c **** 
 6726              		.loc 1 5093 0
 6727 0102 2046     		mov	r0, r4
 6728 0104 13B0     		add	sp, sp, #76
 6729              		.cfi_def_cfa_offset 12
 6730              		@ sp needed
 6731 0106 30BD     		pop	{r4, r5, pc}
 6732              	.LVL1009:
 6733              	.L594:
 6734              		.align	2
 6735              	.L593:
 6736 0108 0000214E 		.word	1310785536
 6737              		.cfi_endproc
 6738              	.LFE52:
 6739              		.size	f_mkdir, .-f_mkdir
 6740              		.section	.text.f_rename,"ax",%progbits
 6741              		.align	2
 6742              		.global	f_rename
 6743              		.thumb
 6744              		.thumb_func
 6745              		.type	f_rename, %function
 6746              	f_rename:
 6747              	.LFB53:
5106:..\..\FatFs/ff.c **** 	FRESULT res;
 6748              		.loc 1 5106 0
 6749              		.cfi_startproc
 6750              		@ args = 0, pretend = 0, frame = 136
 6751              		@ frame_needed = 0, uses_anonymous_args = 0
 6752              	.LVL1010:
 6753 0000 30B5     		push	{r4, r5, lr}
 6754              		.cfi_def_cfa_offset 12
 6755              		.cfi_offset 4, -12
 6756              		.cfi_offset 5, -8
 6757              		.cfi_offset 14, -4
 6758 0002 A3B0     		sub	sp, sp, #140
 6759              		.cfi_def_cfa_offset 152
 6760 0004 0190     		str	r0, [sp, #4]
 6761 0006 22A8     		add	r0, sp, #136
 6762              	.LVL1011:
 6763 0008 40F8881D 		str	r1, [r0, #-136]!
5115:..\..\FatFs/ff.c **** 	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 6764              		.loc 1 5115 0
 6765 000c FFF7FEFF 		bl	get_ldnumber
 6766              	.LVL1012:
5116:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 6767              		.loc 1 5116 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 255


 6768 0010 0222     		movs	r2, #2
 6769 0012 0BA9     		add	r1, sp, #44
 6770 0014 01A8     		add	r0, sp, #4
 6771              	.LVL1013:
 6772 0016 FFF7FEFF 		bl	mount_volume
 6773              	.LVL1014:
5117:..\..\FatFs/ff.c **** 		djo.obj.fs = fs;
 6774              		.loc 1 5117 0
 6775 001a 0446     		mov	r4, r0
 6776 001c 0028     		cmp	r0, #0
 6777 001e 7AD1     		bne	.L596
5118:..\..\FatFs/ff.c **** 		INIT_NAMBUF(fs);
 6778              		.loc 1 5118 0
 6779 0020 0B9B     		ldr	r3, [sp, #44]
 6780 0022 1793     		str	r3, [sp, #92]
5120:..\..\FatFs/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 6781              		.loc 1 5120 0
 6782 0024 0199     		ldr	r1, [sp, #4]
 6783 0026 17A8     		add	r0, sp, #92
 6784              	.LVL1015:
 6785 0028 FFF7FEFF 		bl	follow_path
 6786              	.LVL1016:
5121:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 6787              		.loc 1 5121 0
 6788 002c 0446     		mov	r4, r0
 6789 002e 28B9     		cbnz	r0, .L597
5121:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 6790              		.loc 1 5121 0 is_stmt 0 discriminator 1
 6791 0030 9DF88730 		ldrb	r3, [sp, #135]	@ zero_extendqisi2
 6792 0034 13F0A00F 		tst	r3, #160
 6793 0038 00D0     		beq	.L597
5121:..\..\FatFs/ff.c **** #if FF_FS_LOCK != 0
 6794              		.loc 1 5121 0
 6795 003a 0624     		movs	r4, #6
 6796              	.L597:
 6797              	.LVL1017:
5127:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 6798              		.loc 1 5127 0 is_stmt 1
 6799 003c 002C     		cmp	r4, #0
 6800 003e 6AD1     		bne	.L596
5155:..\..\FatFs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 6801              		.loc 1 5155 0
 6802 0040 2022     		movs	r2, #32
 6803 0042 1E99     		ldr	r1, [sp, #120]
 6804 0044 03A8     		add	r0, sp, #12
 6805 0046 FFF7FEFF 		bl	mem_cpy
 6806              	.LVL1018:
5156:..\..\FatFs/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 6807              		.loc 1 5156 0
 6808 004a 2C22     		movs	r2, #44
 6809 004c 17A9     		add	r1, sp, #92
 6810 004e 0CA8     		add	r0, sp, #48
 6811 0050 FFF7FEFF 		bl	mem_cpy
 6812              	.LVL1019:
5157:..\..\FatFs/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 6813              		.loc 1 5157 0
 6814 0054 0099     		ldr	r1, [sp]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 256


 6815 0056 0CA8     		add	r0, sp, #48
 6816 0058 FFF7FEFF 		bl	follow_path
 6817              	.LVL1020:
5158:..\..\FatFs/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 6818              		.loc 1 5158 0
 6819 005c 0446     		mov	r4, r0
 6820 005e 60B9     		cbnz	r0, .L598
5159:..\..\FatFs/ff.c **** 				}
 6821              		.loc 1 5159 0
 6822 0060 199B     		ldr	r3, [sp, #100]
 6823 0062 0E9A     		ldr	r2, [sp, #56]
 6824 0064 9A42     		cmp	r2, r3
 6825 0066 05D1     		bne	.L602
5159:..\..\FatFs/ff.c **** 				}
 6826              		.loc 1 5159 0 is_stmt 0 discriminator 1
 6827 0068 1B9B     		ldr	r3, [sp, #108]
 6828 006a 109A     		ldr	r2, [sp, #64]
 6829 006c 9A42     		cmp	r2, r3
 6830 006e 03D0     		beq	.L603
5159:..\..\FatFs/ff.c **** 				}
 6831              		.loc 1 5159 0
 6832 0070 0824     		movs	r4, #8
 6833 0072 02E0     		b	.L598
 6834              	.L602:
 6835 0074 0824     		movs	r4, #8
 6836 0076 00E0     		b	.L598
 6837              	.L603:
 6838 0078 0424     		movs	r4, #4
 6839              	.L598:
 6840              	.LVL1021:
5161:..\..\FatFs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 6841              		.loc 1 5161 0 is_stmt 1
 6842 007a 042C     		cmp	r4, #4
 6843 007c 41D1     		bne	.L599
5162:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
 6844              		.loc 1 5162 0
 6845 007e 0CA8     		add	r0, sp, #48
 6846 0080 FFF7FEFF 		bl	dir_register
 6847              	.LVL1022:
5163:..\..\FatFs/ff.c **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 6848              		.loc 1 5163 0
 6849 0084 0446     		mov	r4, r0
 6850 0086 0028     		cmp	r0, #0
 6851 0088 3BD1     		bne	.L599
5164:..\..\FatFs/ff.c **** 						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 6852              		.loc 1 5164 0
 6853 008a 139D     		ldr	r5, [sp, #76]
 6854              	.LVL1023:
5165:..\..\FatFs/ff.c **** 						dir[DIR_Attr] = buf[DIR_Attr];
 6855              		.loc 1 5165 0
 6856 008c 1322     		movs	r2, #19
 6857 008e 0DF11901 		add	r1, sp, #25
 6858 0092 05F10D00 		add	r0, r5, #13
 6859              	.LVL1024:
 6860 0096 FFF7FEFF 		bl	mem_cpy
 6861              	.LVL1025:
5166:..\..\FatFs/ff.c **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 257


 6862              		.loc 1 5166 0
 6863 009a 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 6864 009e EB72     		strb	r3, [r5, #11]
5167:..\..\FatFs/ff.c **** 						fs->wflag = 1;
 6865              		.loc 1 5167 0
 6866 00a0 13F0100F 		tst	r3, #16
 6867 00a4 02D1     		bne	.L600
5167:..\..\FatFs/ff.c **** 						fs->wflag = 1;
 6868              		.loc 1 5167 0 is_stmt 0 discriminator 1
 6869 00a6 43F02003 		orr	r3, r3, #32
 6870 00aa EB72     		strb	r3, [r5, #11]
 6871              	.L600:
5168:..\..\FatFs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 6872              		.loc 1 5168 0 is_stmt 1
 6873 00ac 0122     		movs	r2, #1
 6874 00ae 0B9B     		ldr	r3, [sp, #44]
 6875 00b0 DA70     		strb	r2, [r3, #3]
5169:..\..\FatFs/ff.c **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 6876              		.loc 1 5169 0
 6877 00b2 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 6878 00b4 13F0100F 		tst	r3, #16
 6879 00b8 23D0     		beq	.L599
5169:..\..\FatFs/ff.c **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 6880              		.loc 1 5169 0 is_stmt 0 discriminator 1
 6881 00ba 0E9B     		ldr	r3, [sp, #56]
 6882 00bc 199A     		ldr	r2, [sp, #100]
 6883 00be 9A42     		cmp	r2, r3
 6884 00c0 1FD0     		beq	.L599
5170:..\..\FatFs/ff.c **** 							if (sect == 0) {
 6885              		.loc 1 5170 0 is_stmt 1
 6886 00c2 0B9C     		ldr	r4, [sp, #44]
 6887 00c4 2946     		mov	r1, r5
 6888 00c6 2046     		mov	r0, r4
 6889 00c8 FFF7FEFF 		bl	ld_clust
 6890              	.LVL1026:
 6891 00cc 0146     		mov	r1, r0
 6892 00ce 2046     		mov	r0, r4
 6893 00d0 FFF7FEFF 		bl	clst2sect
 6894              	.LVL1027:
5171:..\..\FatFs/ff.c **** 								res = FR_INT_ERR;
 6895              		.loc 1 5171 0
 6896 00d4 0146     		mov	r1, r0
 6897 00d6 98B1     		cbz	r0, .L604
5175:..\..\FatFs/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 6898              		.loc 1 5175 0
 6899 00d8 2046     		mov	r0, r4
 6900              	.LVL1028:
 6901 00da FFF7FEFF 		bl	move_window
 6902              	.LVL1029:
5176:..\..\FatFs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 6903              		.loc 1 5176 0
 6904 00de 0B9B     		ldr	r3, [sp, #44]
 6905 00e0 03F15401 		add	r1, r3, #84
 6906              	.LVL1030:
5177:..\..\FatFs/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 6907              		.loc 1 5177 0
 6908 00e4 0446     		mov	r4, r0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 258


 6909 00e6 60B9     		cbnz	r0, .L599
5177:..\..\FatFs/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 6910              		.loc 1 5177 0 is_stmt 0 discriminator 1
 6911 00e8 93F85520 		ldrb	r2, [r3, #85]	@ zero_extendqisi2
 6912 00ec 2E2A     		cmp	r2, #46
 6913 00ee 08D1     		bne	.L599
5178:..\..\FatFs/ff.c **** 									fs->wflag = 1;
 6914              		.loc 1 5178 0 is_stmt 1
 6915 00f0 0E9A     		ldr	r2, [sp, #56]
 6916 00f2 1846     		mov	r0, r3
 6917              	.LVL1031:
 6918 00f4 FFF7FEFF 		bl	st_clust
 6919              	.LVL1032:
5179:..\..\FatFs/ff.c **** 								}
 6920              		.loc 1 5179 0
 6921 00f8 0122     		movs	r2, #1
 6922 00fa 0B9B     		ldr	r3, [sp, #44]
 6923 00fc DA70     		strb	r2, [r3, #3]
 6924 00fe 00E0     		b	.L599
 6925              	.LVL1033:
 6926              	.L604:
5172:..\..\FatFs/ff.c **** 							} else {
 6927              		.loc 1 5172 0
 6928 0100 0224     		movs	r4, #2
 6929              	.LVL1034:
 6930              	.L599:
5186:..\..\FatFs/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 6931              		.loc 1 5186 0
 6932 0102 44B9     		cbnz	r4, .L596
5187:..\..\FatFs/ff.c **** 				if (res == FR_OK) {
 6933              		.loc 1 5187 0
 6934 0104 17A8     		add	r0, sp, #92
 6935 0106 FFF7FEFF 		bl	dir_remove
 6936              	.LVL1035:
5188:..\..\FatFs/ff.c **** 					res = sync_fs(fs);
 6937              		.loc 1 5188 0
 6938 010a 0446     		mov	r4, r0
 6939 010c 18B9     		cbnz	r0, .L596
5189:..\..\FatFs/ff.c **** 				}
 6940              		.loc 1 5189 0
 6941 010e 0B98     		ldr	r0, [sp, #44]
 6942              	.LVL1036:
 6943 0110 FFF7FEFF 		bl	sync_fs
 6944              	.LVL1037:
 6945 0114 0446     		mov	r4, r0
 6946              	.LVL1038:
 6947              	.L596:
5198:..\..\FatFs/ff.c **** 
 6948              		.loc 1 5198 0
 6949 0116 2046     		mov	r0, r4
 6950 0118 23B0     		add	sp, sp, #140
 6951              		.cfi_def_cfa_offset 12
 6952              		@ sp needed
 6953 011a 30BD     		pop	{r4, r5, pc}
 6954              		.cfi_endproc
 6955              	.LFE53:
 6956              		.size	f_rename, .-f_rename
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 259


 6957              		.section	.text.f_getlabel,"ax",%progbits
 6958              		.align	2
 6959              		.global	f_getlabel
 6960              		.thumb
 6961              		.thumb_func
 6962              		.type	f_getlabel, %function
 6963              	f_getlabel:
 6964              	.LFB54:
5311:..\..\FatFs/ff.c **** 	FRESULT res;
 6965              		.loc 1 5311 0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 56
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
 6969              	.LVL1039:
 6970 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6971              		.cfi_def_cfa_offset 20
 6972              		.cfi_offset 4, -20
 6973              		.cfi_offset 5, -16
 6974              		.cfi_offset 6, -12
 6975              		.cfi_offset 7, -8
 6976              		.cfi_offset 14, -4
 6977 0002 8FB0     		sub	sp, sp, #60
 6978              		.cfi_def_cfa_offset 80
 6979 0004 0190     		str	r0, [sp, #4]
 6980 0006 0D46     		mov	r5, r1
 6981 0008 1646     		mov	r6, r2
5319:..\..\FatFs/ff.c **** 
 6982              		.loc 1 5319 0
 6983 000a 0022     		movs	r2, #0
 6984              	.LVL1040:
 6985 000c 02A9     		add	r1, sp, #8
 6986              	.LVL1041:
 6987 000e 01A8     		add	r0, sp, #4
 6988              	.LVL1042:
 6989 0010 FFF7FEFF 		bl	mount_volume
 6990              	.LVL1043:
5322:..\..\FatFs/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 6991              		.loc 1 5322 0
 6992 0014 0446     		mov	r4, r0
 6993 0016 38BB     		cbnz	r0, .L607
5322:..\..\FatFs/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 6994              		.loc 1 5322 0 is_stmt 0 discriminator 1
 6995 0018 35B3     		cbz	r5, .L607
5323:..\..\FatFs/ff.c **** 		res = dir_sdi(&dj, 0);
 6996              		.loc 1 5323 0 is_stmt 1
 6997 001a 029B     		ldr	r3, [sp, #8]
 6998 001c 0393     		str	r3, [sp, #12]
 6999 001e 0021     		movs	r1, #0
 7000 0020 0591     		str	r1, [sp, #20]
5324:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
 7001              		.loc 1 5324 0
 7002 0022 03A8     		add	r0, sp, #12
 7003              	.LVL1044:
 7004 0024 FFF7FEFF 		bl	dir_sdi
 7005              	.LVL1045:
5325:..\..\FatFs/ff.c **** 		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
 7006              		.loc 1 5325 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 260


 7007 0028 0746     		mov	r7, r0
 7008 002a B8B9     		cbnz	r0, .L608
5326:..\..\FatFs/ff.c **** 		 	if (res == FR_OK) {
 7009              		.loc 1 5326 0
 7010 002c 0121     		movs	r1, #1
 7011 002e 03A8     		add	r0, sp, #12
 7012              	.LVL1046:
 7013 0030 FFF7FEFF 		bl	dir_read
 7014              	.LVL1047:
5327:..\..\FatFs/ff.c **** #if FF_FS_EXFAT
 7015              		.loc 1 5327 0
 7016 0034 0746     		mov	r7, r0
 7017 0036 30B1     		cbz	r0, .L616
 7018 0038 10E0     		b	.L608
 7019              	.LVL1048:
 7020              	.L610:
5349:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 7021              		.loc 1 5349 0
 7022 003a 0A99     		ldr	r1, [sp, #40]
 7023 003c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 7024              	.LVL1049:
5357:..\..\FatFs/ff.c **** #endif
 7025              		.loc 1 5357 0
 7026 003e E954     		strb	r1, [r5, r3]
 7027 0040 0133     		adds	r3, r3, #1
 7028              	.LVL1050:
5349:..\..\FatFs/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 7029              		.loc 1 5349 0
 7030 0042 0132     		adds	r2, r2, #1
 7031              	.LVL1051:
 7032 0044 01E0     		b	.L609
 7033              	.LVL1052:
 7034              	.L616:
 7035 0046 0023     		movs	r3, #0
 7036 0048 1A46     		mov	r2, r3
 7037              	.L609:
 7038              	.LVL1053:
5348:..\..\FatFs/ff.c **** 						wc = dj.dir[si++];
 7039              		.loc 1 5348 0
 7040 004a 0A2A     		cmp	r2, #10
 7041 004c F5D9     		bls	.L610
 7042              	.LVL1054:
 7043              	.L611:
5361:..\..\FatFs/ff.c **** 						if (di == 0) break;
 7044              		.loc 1 5361 0
 7045 004e 0022     		movs	r2, #0
 7046 0050 EA54     		strb	r2, [r5, r3]
5362:..\..\FatFs/ff.c **** 					} while (label[--di] == ' ');
 7047              		.loc 1 5362 0
 7048 0052 1BB1     		cbz	r3, .L608
5363:..\..\FatFs/ff.c **** 				}
 7049              		.loc 1 5363 0
 7050 0054 013B     		subs	r3, r3, #1
 7051              	.LVL1055:
 7052 0056 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 7053 0058 202A     		cmp	r2, #32
 7054 005a F8D0     		beq	.L611
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 261


 7055              	.LVL1056:
 7056              	.L608:
5367:..\..\FatFs/ff.c **** 			label[0] = 0;
 7057              		.loc 1 5367 0
 7058 005c 042F     		cmp	r7, #4
 7059 005e 02D1     		bne	.L617
5368:..\..\FatFs/ff.c **** 			res = FR_OK;
 7060              		.loc 1 5368 0
 7061 0060 0023     		movs	r3, #0
 7062 0062 2B70     		strb	r3, [r5]
 7063              	.LVL1057:
 7064 0064 00E0     		b	.L607
 7065              	.LVL1058:
 7066              	.L617:
 7067 0066 3C46     		mov	r4, r7
 7068              	.LVL1059:
 7069              	.L607:
5374:..\..\FatFs/ff.c **** 		res = move_window(fs, fs->volbase);
 7070              		.loc 1 5374 0
 7071 0068 B4B9     		cbnz	r4, .L612
5374:..\..\FatFs/ff.c **** 		res = move_window(fs, fs->volbase);
 7072              		.loc 1 5374 0 is_stmt 0 discriminator 1
 7073 006a AEB1     		cbz	r6, .L612
5375:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
 7074              		.loc 1 5375 0 is_stmt 1
 7075 006c 0298     		ldr	r0, [sp, #8]
 7076 006e 016A     		ldr	r1, [r0, #32]
 7077 0070 FFF7FEFF 		bl	move_window
 7078              	.LVL1060:
5376:..\..\FatFs/ff.c **** 			switch (fs->fs_type) {
 7079              		.loc 1 5376 0
 7080 0074 0446     		mov	r4, r0
 7081 0076 78B9     		cbnz	r0, .L612
5377:..\..\FatFs/ff.c **** 			case FS_EXFAT:
 7082              		.loc 1 5377 0
 7083 0078 029B     		ldr	r3, [sp, #8]
 7084 007a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7085 007c 032A     		cmp	r2, #3
 7086 007e 05D0     		beq	.L618
 7087 0080 042A     		cmp	r2, #4
 7088 0082 01D1     		bne	.L619
5379:..\..\FatFs/ff.c **** 
 7089              		.loc 1 5379 0
 7090 0084 6420     		movs	r0, #100
 7091              	.LVL1061:
 7092 0086 02E0     		b	.L614
 7093              	.LVL1062:
 7094              	.L619:
5385:..\..\FatFs/ff.c **** 			}
 7095              		.loc 1 5385 0
 7096 0088 2720     		movs	r0, #39
 7097              	.LVL1063:
 7098 008a 00E0     		b	.L614
 7099              	.LVL1064:
 7100              	.L618:
5382:..\..\FatFs/ff.c **** 
 7101              		.loc 1 5382 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 262


 7102 008c 4320     		movs	r0, #67
 7103              	.LVL1065:
 7104              	.L614:
5387:..\..\FatFs/ff.c **** 		}
 7105              		.loc 1 5387 0
 7106 008e 3433     		adds	r3, r3, #52
 7107 0090 1844     		add	r0, r0, r3
 7108              	.LVL1066:
 7109 0092 FFF7FEFF 		bl	ld_dword
 7110              	.LVL1067:
 7111 0096 3060     		str	r0, [r6]
 7112              	.L612:
 7113              	.LVL1068:
5392:..\..\FatFs/ff.c **** 
 7114              		.loc 1 5392 0
 7115 0098 2046     		mov	r0, r4
 7116 009a 0FB0     		add	sp, sp, #60
 7117              		.cfi_def_cfa_offset 20
 7118              		@ sp needed
 7119 009c F0BD     		pop	{r4, r5, r6, r7, pc}
 7120              		.cfi_endproc
 7121              	.LFE54:
 7122              		.size	f_getlabel, .-f_getlabel
 7123 009e 00BF     		.section	.text.f_setlabel,"ax",%progbits
 7124              		.align	2
 7125              		.global	f_setlabel
 7126              		.thumb
 7127              		.thumb_func
 7128              		.type	f_setlabel, %function
 7129              	f_setlabel:
 7130              	.LFB55:
5404:..\..\FatFs/ff.c **** 	FRESULT res;
 7131              		.loc 1 5404 0
 7132              		.cfi_startproc
 7133              		@ args = 0, pretend = 0, frame = 80
 7134              		@ frame_needed = 0, uses_anonymous_args = 0
 7135              	.LVL1069:
 7136 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7137              		.cfi_def_cfa_offset 24
 7138              		.cfi_offset 4, -24
 7139              		.cfi_offset 5, -20
 7140              		.cfi_offset 6, -16
 7141              		.cfi_offset 7, -12
 7142              		.cfi_offset 8, -8
 7143              		.cfi_offset 14, -4
 7144 0004 94B0     		sub	sp, sp, #80
 7145              		.cfi_def_cfa_offset 104
 7146 0006 0190     		str	r0, [sp, #4]
5417:..\..\FatFs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 7147              		.loc 1 5417 0
 7148 0008 0222     		movs	r2, #2
 7149 000a 08A9     		add	r1, sp, #32
 7150 000c 01A8     		add	r0, sp, #4
 7151              	.LVL1070:
 7152 000e FFF7FEFF 		bl	mount_volume
 7153              	.LVL1071:
5418:..\..\FatFs/ff.c **** 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 263


 7154              		.loc 1 5418 0
 7155 0012 0028     		cmp	r0, #0
 7156 0014 40F08C80 		bne	.L634
5441:..\..\FatFs/ff.c **** 		di = 0;
 7157              		.loc 1 5441 0
 7158 0018 0B22     		movs	r2, #11
 7159 001a 2021     		movs	r1, #32
 7160 001c 02A8     		add	r0, sp, #8
 7161              	.LVL1072:
 7162 001e FFF7FEFF 		bl	mem_set
 7163              	.LVL1073:
5442:..\..\FatFs/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
 7164              		.loc 1 5442 0
 7165 0022 0025     		movs	r5, #0
5443:..\..\FatFs/ff.c **** #if FF_USE_LFN
 7166              		.loc 1 5443 0
 7167 0024 37E0     		b	.L623
 7168              	.LVL1074:
 7169              	.L628:
5448:..\..\FatFs/ff.c **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
 7170              		.loc 1 5448 0
 7171 0026 06F10108 		add	r8, r6, #1
 7172 002a CDF80480 		str	r8, [sp, #4]
 7173 002e 3778     		ldrb	r7, [r6]	@ zero_extendqisi2
 7174 0030 BCB2     		uxth	r4, r7
 7175              	.LVL1075:
5449:..\..\FatFs/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 7176              		.loc 1 5449 0
 7177 0032 3846     		mov	r0, r7
 7178 0034 FFF7FEFF 		bl	dbc_1st
 7179              	.LVL1076:
 7180 0038 50B1     		cbz	r0, .L624
5449:..\..\FatFs/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 7181              		.loc 1 5449 0 is_stmt 0 discriminator 1
 7182 003a 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 7183 003c FFF7FEFF 		bl	dbc_2nd
 7184              	.LVL1077:
 7185 0040 28B1     		cbz	r0, .L635
5449:..\..\FatFs/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 7186              		.loc 1 5449 0 discriminator 2
 7187 0042 B31C     		adds	r3, r6, #2
 7188 0044 0193     		str	r3, [sp, #4]
 7189 0046 7478     		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 7190              	.LVL1078:
 7191 0048 44EA0724 		orr	r4, r4, r7, lsl #8
 7192 004c 00E0     		b	.L624
 7193              	.LVL1079:
 7194              	.L635:
5449:..\..\FatFs/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
 7195              		.loc 1 5449 0
 7196 004e 0024     		movs	r4, #0
 7197              	.LVL1080:
 7198              	.L624:
5450:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
 7199              		.loc 1 5450 0 is_stmt 1
 7200 0050 A4F16103 		sub	r3, r4, #97
 7201 0054 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 264


 7202 0056 192B     		cmp	r3, #25
 7203 0058 01D8     		bhi	.L625
5450:..\..\FatFs/ff.c **** #if FF_CODE_PAGE == 0
 7204              		.loc 1 5450 0 is_stmt 0 discriminator 1
 7205 005a 203C     		subs	r4, r4, #32
 7206              	.LVL1081:
 7207 005c A4B2     		uxth	r4, r4
 7208              	.LVL1082:
 7209              	.L625:
5457:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 7210              		.loc 1 5457 0 is_stmt 1
 7211 005e 002C     		cmp	r4, #0
 7212 0060 67D0     		beq	.L636
5457:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 7213              		.loc 1 5457 0 is_stmt 0 discriminator 1
 7214 0062 2146     		mov	r1, r4
 7215 0064 3A48     		ldr	r0, .L647
 7216 0066 FFF7FEFF 		bl	chk_chr
 7217              	.LVL1083:
 7218 006a 0028     		cmp	r0, #0
 7219 006c 63D1     		bne	.L637
5457:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 7220              		.loc 1 5457 0 discriminator 2
 7221 006e FF2C     		cmp	r4, #255
 7222 0070 01D9     		bls	.L638
5457:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 7223              		.loc 1 5457 0
 7224 0072 0A23     		movs	r3, #10
 7225 0074 00E0     		b	.L626
 7226              	.L638:
 7227 0076 0B23     		movs	r3, #11
 7228              	.L626:
5457:..\..\FatFs/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 7229              		.loc 1 5457 0 discriminator 6
 7230 0078 9D42     		cmp	r5, r3
 7231 007a 5ED2     		bcs	.L639
5460:..\..\FatFs/ff.c **** 			dirvn[di++] = (BYTE)wc;
 7232              		.loc 1 5460 0 is_stmt 1
 7233 007c FF2C     		cmp	r4, #255
 7234 007e 05D9     		bls	.L627
 7235              	.LVL1084:
5460:..\..\FatFs/ff.c **** 			dirvn[di++] = (BYTE)wc;
 7236              		.loc 1 5460 0 is_stmt 0 discriminator 1
 7237 0080 230A     		lsrs	r3, r4, #8
 7238 0082 14AA     		add	r2, sp, #80
 7239 0084 2A44     		add	r2, r2, r5
 7240 0086 02F8483C 		strb	r3, [r2, #-72]
 7241 008a 0135     		adds	r5, r5, #1
 7242              	.LVL1085:
 7243              	.L627:
5461:..\..\FatFs/ff.c **** 		}
 7244              		.loc 1 5461 0 is_stmt 1
 7245 008c 14AB     		add	r3, sp, #80
 7246 008e 2B44     		add	r3, r3, r5
 7247 0090 03F8484C 		strb	r4, [r3, #-72]
 7248 0094 0135     		adds	r5, r5, #1
 7249              	.LVL1086:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 265


 7250              	.L623:
5443:..\..\FatFs/ff.c **** #if FF_USE_LFN
 7251              		.loc 1 5443 0
 7252 0096 019E     		ldr	r6, [sp, #4]
 7253 0098 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7254 009a 1F2B     		cmp	r3, #31
 7255 009c C3D8     		bhi	.L628
5463:..\..\FatFs/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 7256              		.loc 1 5463 0
 7257 009e 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 7258 00a2 E52B     		cmp	r3, #229
 7259 00a4 01D1     		bne	.L630
 7260 00a6 4AE0     		b	.L640
 7261              	.L641:
5464:..\..\FatFs/ff.c **** 	}
 7262              		.loc 1 5464 0
 7263 00a8 1D46     		mov	r5, r3
 7264              	.LVL1087:
 7265              	.L630:
5464:..\..\FatFs/ff.c **** 	}
 7266              		.loc 1 5464 0 is_stmt 0 discriminator 1
 7267 00aa 35B1     		cbz	r5, .L629
5464:..\..\FatFs/ff.c **** 	}
 7268              		.loc 1 5464 0 discriminator 2
 7269 00ac 6B1E     		subs	r3, r5, #1
 7270 00ae 14AA     		add	r2, sp, #80
 7271 00b0 1A44     		add	r2, r2, r3
 7272 00b2 12F8482C 		ldrb	r2, [r2, #-72]	@ zero_extendqisi2
 7273 00b6 202A     		cmp	r2, #32
 7274 00b8 F6D0     		beq	.L641
 7275              	.L629:
5468:..\..\FatFs/ff.c **** 	res = dir_sdi(&dj, 0);
 7276              		.loc 1 5468 0 is_stmt 1
 7277 00ba 089B     		ldr	r3, [sp, #32]
 7278 00bc 0993     		str	r3, [sp, #36]
 7279 00be 0021     		movs	r1, #0
 7280 00c0 0B91     		str	r1, [sp, #44]
5469:..\..\FatFs/ff.c **** 	if (res == FR_OK) {
 7281              		.loc 1 5469 0
 7282 00c2 09A8     		add	r0, sp, #36
 7283 00c4 FFF7FEFF 		bl	dir_sdi
 7284              	.LVL1088:
5470:..\..\FatFs/ff.c **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 7285              		.loc 1 5470 0
 7286 00c8 0028     		cmp	r0, #0
 7287 00ca 3AD1     		bne	.L642
5471:..\..\FatFs/ff.c **** 		if (res == FR_OK) {
 7288              		.loc 1 5471 0
 7289 00cc 0121     		movs	r1, #1
 7290 00ce 09A8     		add	r0, sp, #36
 7291              	.LVL1089:
 7292 00d0 FFF7FEFF 		bl	dir_read
 7293              	.LVL1090:
5472:..\..\FatFs/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 7294              		.loc 1 5472 0
 7295 00d4 80B9     		cbnz	r0, .L631
5477:..\..\FatFs/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 266


 7296              		.loc 1 5477 0
 7297 00d6 2DB1     		cbz	r5, .L632
5478:..\..\FatFs/ff.c **** 				} else {
 7298              		.loc 1 5478 0
 7299 00d8 0B22     		movs	r2, #11
 7300 00da 02A9     		add	r1, sp, #8
 7301 00dc 1098     		ldr	r0, [sp, #64]
 7302              	.LVL1091:
 7303 00de FFF7FEFF 		bl	mem_cpy
 7304              	.LVL1092:
 7305 00e2 02E0     		b	.L633
 7306              	.LVL1093:
 7307              	.L632:
5480:..\..\FatFs/ff.c **** 				}
 7308              		.loc 1 5480 0
 7309 00e4 E522     		movs	r2, #229
 7310 00e6 109B     		ldr	r3, [sp, #64]
 7311 00e8 1A70     		strb	r2, [r3]
 7312              	.LVL1094:
 7313              	.L633:
5483:..\..\FatFs/ff.c **** 			res = sync_fs(fs);
 7314              		.loc 1 5483 0
 7315 00ea 0122     		movs	r2, #1
 7316 00ec 089B     		ldr	r3, [sp, #32]
 7317 00ee DA70     		strb	r2, [r3, #3]
5484:..\..\FatFs/ff.c **** 		} else {			/* No volume label entry or an error */
 7318              		.loc 1 5484 0
 7319 00f0 0898     		ldr	r0, [sp, #32]
 7320 00f2 FFF7FEFF 		bl	sync_fs
 7321              	.LVL1095:
 7322 00f6 28E0     		b	.L622
 7323              	.L631:
5486:..\..\FatFs/ff.c **** 				res = FR_OK;
 7324              		.loc 1 5486 0
 7325 00f8 0428     		cmp	r0, #4
 7326 00fa 23D1     		bne	.L643
 7327              	.LVL1096:
5488:..\..\FatFs/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 7328              		.loc 1 5488 0
 7329 00fc 1DB3     		cbz	r5, .L644
5489:..\..\FatFs/ff.c **** 					if (res == FR_OK) {
 7330              		.loc 1 5489 0
 7331 00fe 0121     		movs	r1, #1
 7332 0100 09A8     		add	r0, sp, #36
 7333 0102 FFF7FEFF 		bl	dir_alloc
 7334              	.LVL1097:
5490:..\..\FatFs/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
 7335              		.loc 1 5490 0
 7336 0106 00BB     		cbnz	r0, .L645
5491:..\..\FatFs/ff.c **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 7337              		.loc 1 5491 0
 7338 0108 2022     		movs	r2, #32
 7339 010a 0021     		movs	r1, #0
 7340 010c 1098     		ldr	r0, [sp, #64]
 7341              	.LVL1098:
 7342 010e FFF7FEFF 		bl	mem_set
 7343              	.LVL1099:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 267


5497:..\..\FatFs/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
 7344              		.loc 1 5497 0
 7345 0112 0822     		movs	r2, #8
 7346 0114 109B     		ldr	r3, [sp, #64]
 7347 0116 DA72     		strb	r2, [r3, #11]
5498:..\..\FatFs/ff.c **** 						}
 7348              		.loc 1 5498 0
 7349 0118 0B22     		movs	r2, #11
 7350 011a 02A9     		add	r1, sp, #8
 7351 011c 1098     		ldr	r0, [sp, #64]
 7352 011e FFF7FEFF 		bl	mem_cpy
 7353              	.LVL1100:
5500:..\..\FatFs/ff.c **** 						res = sync_fs(fs);
 7354              		.loc 1 5500 0
 7355 0122 0122     		movs	r2, #1
 7356 0124 089B     		ldr	r3, [sp, #32]
 7357 0126 DA70     		strb	r2, [r3, #3]
5501:..\..\FatFs/ff.c **** 					}
 7358              		.loc 1 5501 0
 7359 0128 0898     		ldr	r0, [sp, #32]
 7360 012a FFF7FEFF 		bl	sync_fs
 7361              	.LVL1101:
 7362 012e 0CE0     		b	.L622
 7363              	.LVL1102:
 7364              	.L634:
 7365 0130 0BE0     		b	.L622
 7366              	.LVL1103:
 7367              	.L636:
5458:..\..\FatFs/ff.c **** 			}
 7368              		.loc 1 5458 0
 7369 0132 0620     		movs	r0, #6
 7370 0134 09E0     		b	.L622
 7371              	.L637:
 7372 0136 0620     		movs	r0, #6
 7373 0138 07E0     		b	.L622
 7374              	.L639:
 7375 013a 0620     		movs	r0, #6
 7376 013c 05E0     		b	.L622
 7377              	.LVL1104:
 7378              	.L640:
5463:..\..\FatFs/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 7379              		.loc 1 5463 0
 7380 013e 0620     		movs	r0, #6
 7381 0140 03E0     		b	.L622
 7382              	.LVL1105:
 7383              	.L642:
 7384 0142 02E0     		b	.L622
 7385              	.L643:
 7386 0144 01E0     		b	.L622
 7387              	.LVL1106:
 7388              	.L644:
5487:..\..\FatFs/ff.c **** 				if (di != 0) {	/* Create a volume label entry */
 7389              		.loc 1 5487 0
 7390 0146 0020     		movs	r0, #0
 7391 0148 FFE7     		b	.L622
 7392              	.LVL1107:
 7393              	.L645:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 268


 7394              	.L622:
5509:..\..\FatFs/ff.c **** 
 7395              		.loc 1 5509 0
 7396 014a 14B0     		add	sp, sp, #80
 7397              		.cfi_def_cfa_offset 24
 7398              		@ sp needed
 7399 014c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7400              	.LVL1108:
 7401              	.L648:
 7402              		.align	2
 7403              	.L647:
 7404 0150 00000000 		.word	.LANCHOR1
 7405              		.cfi_endproc
 7406              	.LFE55:
 7407              		.size	f_setlabel, .-f_setlabel
 7408              		.section	.text.f_gets,"ax",%progbits
 7409              		.align	2
 7410              		.global	f_gets
 7411              		.thumb
 7412              		.thumb_func
 7413              		.type	f_gets, %function
 7414              	f_gets:
 7415              	.LFB56:
6373:..\..\FatFs/ff.c **** 	int nc = 0;
 7416              		.loc 1 6373 0
 7417              		.cfi_startproc
 7418              		@ args = 0, pretend = 0, frame = 8
 7419              		@ frame_needed = 0, uses_anonymous_args = 0
 7420              	.LVL1109:
 7421 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7422              		.cfi_def_cfa_offset 24
 7423              		.cfi_offset 4, -24
 7424              		.cfi_offset 5, -20
 7425              		.cfi_offset 6, -16
 7426              		.cfi_offset 7, -12
 7427              		.cfi_offset 8, -8
 7428              		.cfi_offset 14, -4
 7429 0004 82B0     		sub	sp, sp, #8
 7430              		.cfi_def_cfa_offset 32
 7431 0006 8046     		mov	r8, r0
 7432 0008 1746     		mov	r7, r2
 7433              	.LVL1110:
6474:..\..\FatFs/ff.c **** 	while (nc < len) {
 7434              		.loc 1 6474 0
 7435 000a 4E1E     		subs	r6, r1, #1
 7436              	.LVL1111:
6375:..\..\FatFs/ff.c **** 	BYTE s[4];
 7437              		.loc 1 6375 0
 7438 000c 0546     		mov	r5, r0
6374:..\..\FatFs/ff.c **** 	TCHAR *p = buff;
 7439              		.loc 1 6374 0
 7440 000e 0024     		movs	r4, #0
6475:..\..\FatFs/ff.c **** 		f_read(fp, s, 1, &rc);	/* Get a byte */
 7441              		.loc 1 6475 0
 7442 0010 10E0     		b	.L650
 7443              	.LVL1112:
 7444              	.L652:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 269


6476:..\..\FatFs/ff.c **** 		if (rc != 1) break;		/* EOF? */
 7445              		.loc 1 6476 0
 7446 0012 6B46     		mov	r3, sp
 7447 0014 0122     		movs	r2, #1
 7448 0016 01A9     		add	r1, sp, #4
 7449 0018 3846     		mov	r0, r7
 7450 001a FFF7FEFF 		bl	f_read
 7451              	.LVL1113:
6477:..\..\FatFs/ff.c **** 		dc = s[0];
 7452              		.loc 1 6477 0
 7453 001e 009B     		ldr	r3, [sp]
 7454 0020 012B     		cmp	r3, #1
 7455 0022 0BD1     		bne	.L651
6478:..\..\FatFs/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
 7456              		.loc 1 6478 0
 7457 0024 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 7458              	.LVL1114:
6480:..\..\FatFs/ff.c **** 		if (dc == '\n') break;
 7459              		.loc 1 6480 0
 7460 0028 6A1C     		adds	r2, r5, #1
 7461              	.LVL1115:
 7462 002a 2B70     		strb	r3, [r5]
 7463 002c 0134     		adds	r4, r4, #1
 7464              	.LVL1116:
6481:..\..\FatFs/ff.c **** 	}
 7465              		.loc 1 6481 0
 7466 002e 0A2B     		cmp	r3, #10
 7467 0030 03D0     		beq	.L654
6480:..\..\FatFs/ff.c **** 		if (dc == '\n') break;
 7468              		.loc 1 6480 0
 7469 0032 1546     		mov	r5, r2
 7470              	.LVL1117:
 7471              	.L650:
6475:..\..\FatFs/ff.c **** 		f_read(fp, s, 1, &rc);	/* Get a byte */
 7472              		.loc 1 6475 0
 7473 0034 B442     		cmp	r4, r6
 7474 0036 ECDB     		blt	.L652
 7475 0038 00E0     		b	.L651
 7476              	.LVL1118:
 7477              	.L654:
6480:..\..\FatFs/ff.c **** 		if (dc == '\n') break;
 7478              		.loc 1 6480 0
 7479 003a 1546     		mov	r5, r2
 7480              	.LVL1119:
 7481              	.L651:
6485:..\..\FatFs/ff.c **** 	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 7482              		.loc 1 6485 0
 7483 003c 0023     		movs	r3, #0
 7484 003e 2B70     		strb	r3, [r5]
6486:..\..\FatFs/ff.c **** }
 7485              		.loc 1 6486 0
 7486 0040 0CB9     		cbnz	r4, .L655
 7487 0042 1846     		mov	r0, r3
 7488 0044 00E0     		b	.L653
 7489              	.L655:
 7490 0046 4046     		mov	r0, r8
 7491              	.L653:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 270


6487:..\..\FatFs/ff.c **** 
 7492              		.loc 1 6487 0 discriminator 4
 7493 0048 02B0     		add	sp, sp, #8
 7494              		.cfi_def_cfa_offset 24
 7495              		@ sp needed
 7496 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7497              		.cfi_endproc
 7498              	.LFE56:
 7499              		.size	f_gets, .-f_gets
 7500 004e 00BF     		.section	.text.f_putc,"ax",%progbits
 7501              		.align	2
 7502              		.global	f_putc
 7503              		.thumb
 7504              		.thumb_func
 7505              		.type	f_putc, %function
 7506              	f_putc:
 7507              	.LFB60:
6663:..\..\FatFs/ff.c **** }
6664:..\..\FatFs/ff.c **** 
6665:..\..\FatFs/ff.c **** 
6666:..\..\FatFs/ff.c **** 
6667:..\..\FatFs/ff.c **** int f_putc (
6668:..\..\FatFs/ff.c **** 	TCHAR c,	/* A character to be output */
6669:..\..\FatFs/ff.c **** 	FIL* fp		/* Pointer to the file object */
6670:..\..\FatFs/ff.c **** )
6671:..\..\FatFs/ff.c **** {
 7508              		.loc 1 6671 0
 7509              		.cfi_startproc
 7510              		@ args = 0, pretend = 0, frame = 80
 7511              		@ frame_needed = 0, uses_anonymous_args = 0
 7512              	.LVL1120:
 7513 0000 10B5     		push	{r4, lr}
 7514              		.cfi_def_cfa_offset 8
 7515              		.cfi_offset 4, -8
 7516              		.cfi_offset 14, -4
 7517 0002 94B0     		sub	sp, sp, #80
 7518              		.cfi_def_cfa_offset 88
 7519 0004 0446     		mov	r4, r0
6672:..\..\FatFs/ff.c **** 	putbuff pb;
6673:..\..\FatFs/ff.c **** 
6674:..\..\FatFs/ff.c **** 
6675:..\..\FatFs/ff.c **** 	putc_init(&pb, fp);
 7520              		.loc 1 6675 0
 7521 0006 01A8     		add	r0, sp, #4
 7522              	.LVL1121:
 7523 0008 FFF7FEFF 		bl	putc_init
 7524              	.LVL1122:
6676:..\..\FatFs/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 7525              		.loc 1 6676 0
 7526 000c 2146     		mov	r1, r4
 7527 000e 01A8     		add	r0, sp, #4
 7528 0010 FFF7FEFF 		bl	putc_bfd
 7529              	.LVL1123:
6677:..\..\FatFs/ff.c **** 	return putc_flush(&pb);
 7530              		.loc 1 6677 0
 7531 0014 01A8     		add	r0, sp, #4
 7532 0016 FFF7FEFF 		bl	putc_flush
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 271


 7533              	.LVL1124:
6678:..\..\FatFs/ff.c **** }
 7534              		.loc 1 6678 0
 7535 001a 14B0     		add	sp, sp, #80
 7536              		.cfi_def_cfa_offset 8
 7537              		@ sp needed
 7538 001c 10BD     		pop	{r4, pc}
 7539              		.cfi_endproc
 7540              	.LFE60:
 7541              		.size	f_putc, .-f_putc
 7542 001e 00BF     		.section	.text.f_puts,"ax",%progbits
 7543              		.align	2
 7544              		.global	f_puts
 7545              		.thumb
 7546              		.thumb_func
 7547              		.type	f_puts, %function
 7548              	f_puts:
 7549              	.LFB61:
6679:..\..\FatFs/ff.c **** 
6680:..\..\FatFs/ff.c **** 
6681:..\..\FatFs/ff.c **** 
6682:..\..\FatFs/ff.c **** 
6683:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6684:..\..\FatFs/ff.c **** /* Put a String to the File                                              */
6685:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6686:..\..\FatFs/ff.c **** 
6687:..\..\FatFs/ff.c **** int f_puts (
6688:..\..\FatFs/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6689:..\..\FatFs/ff.c **** 	FIL* fp				/* Pointer to the file object */
6690:..\..\FatFs/ff.c **** )
6691:..\..\FatFs/ff.c **** {
 7550              		.loc 1 6691 0
 7551              		.cfi_startproc
 7552              		@ args = 0, pretend = 0, frame = 80
 7553              		@ frame_needed = 0, uses_anonymous_args = 0
 7554              	.LVL1125:
 7555 0000 10B5     		push	{r4, lr}
 7556              		.cfi_def_cfa_offset 8
 7557              		.cfi_offset 4, -8
 7558              		.cfi_offset 14, -4
 7559 0002 94B0     		sub	sp, sp, #80
 7560              		.cfi_def_cfa_offset 88
 7561 0004 0446     		mov	r4, r0
6692:..\..\FatFs/ff.c **** 	putbuff pb;
6693:..\..\FatFs/ff.c **** 
6694:..\..\FatFs/ff.c **** 
6695:..\..\FatFs/ff.c **** 	putc_init(&pb, fp);
 7562              		.loc 1 6695 0
 7563 0006 01A8     		add	r0, sp, #4
 7564              	.LVL1126:
 7565 0008 FFF7FEFF 		bl	putc_init
 7566              	.LVL1127:
6696:..\..\FatFs/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 7567              		.loc 1 6696 0
 7568 000c 03E0     		b	.L660
 7569              	.L661:
 7570              		.loc 1 6696 0 is_stmt 0 discriminator 2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 272


 7571 000e 0134     		adds	r4, r4, #1
 7572              	.LVL1128:
 7573 0010 01A8     		add	r0, sp, #4
 7574 0012 FFF7FEFF 		bl	putc_bfd
 7575              	.LVL1129:
 7576              	.L660:
 7577              		.loc 1 6696 0 discriminator 1
 7578 0016 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 7579 0018 0029     		cmp	r1, #0
 7580 001a F8D1     		bne	.L661
6697:..\..\FatFs/ff.c **** 	return putc_flush(&pb);
 7581              		.loc 1 6697 0 is_stmt 1
 7582 001c 01A8     		add	r0, sp, #4
 7583 001e FFF7FEFF 		bl	putc_flush
 7584              	.LVL1130:
6698:..\..\FatFs/ff.c **** }
 7585              		.loc 1 6698 0
 7586 0022 14B0     		add	sp, sp, #80
 7587              		.cfi_def_cfa_offset 8
 7588              		@ sp needed
 7589 0024 10BD     		pop	{r4, pc}
 7590              		.cfi_endproc
 7591              	.LFE61:
 7592              		.size	f_puts, .-f_puts
 7593 0026 00BF     		.section	.text.f_printf,"ax",%progbits
 7594              		.align	2
 7595              		.global	f_printf
 7596              		.thumb
 7597              		.thumb_func
 7598              		.type	f_printf, %function
 7599              	f_printf:
 7600              	.LFB62:
6699:..\..\FatFs/ff.c **** 
6700:..\..\FatFs/ff.c **** 
6701:..\..\FatFs/ff.c **** 
6702:..\..\FatFs/ff.c **** 
6703:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6704:..\..\FatFs/ff.c **** /* Put a Formatted String to the File                                    */
6705:..\..\FatFs/ff.c **** /*-----------------------------------------------------------------------*/
6706:..\..\FatFs/ff.c **** 
6707:..\..\FatFs/ff.c **** int f_printf (
6708:..\..\FatFs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6709:..\..\FatFs/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6710:..\..\FatFs/ff.c **** 	...					/* Optional arguments... */
6711:..\..\FatFs/ff.c **** )
6712:..\..\FatFs/ff.c **** {
 7601              		.loc 1 6712 0
 7602              		.cfi_startproc
 7603              		@ args = 4, pretend = 12, frame = 112
 7604              		@ frame_needed = 0, uses_anonymous_args = 1
 7605              	.LVL1131:
 7606 0000 0EB4     		push	{r1, r2, r3}
 7607              		.cfi_def_cfa_offset 12
 7608              		.cfi_offset 1, -12
 7609              		.cfi_offset 2, -8
 7610              		.cfi_offset 3, -4
 7611 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 273


 7612              		.cfi_def_cfa_offset 36
 7613              		.cfi_offset 4, -36
 7614              		.cfi_offset 5, -32
 7615              		.cfi_offset 6, -28
 7616              		.cfi_offset 7, -24
 7617              		.cfi_offset 8, -20
 7618              		.cfi_offset 14, -16
 7619 0006 9DB0     		sub	sp, sp, #116
 7620              		.cfi_def_cfa_offset 152
 7621 0008 23AC     		add	r4, sp, #140
 7622 000a 54F8046B 		ldr	r6, [r4], #4
6713:..\..\FatFs/ff.c **** 	va_list arp;
6714:..\..\FatFs/ff.c **** 	putbuff pb;
6715:..\..\FatFs/ff.c **** 	BYTE f, r;
6716:..\..\FatFs/ff.c **** 	UINT i, j, w;
6717:..\..\FatFs/ff.c **** 	DWORD v;
6718:..\..\FatFs/ff.c **** 	TCHAR c, d, str[32], *p;
6719:..\..\FatFs/ff.c **** 
6720:..\..\FatFs/ff.c **** 
6721:..\..\FatFs/ff.c **** 	putc_init(&pb, fp);
 7623              		.loc 1 6721 0
 7624 000e 0146     		mov	r1, r0
 7625 0010 08A8     		add	r0, sp, #32
 7626              	.LVL1132:
 7627 0012 FFF7FEFF 		bl	putc_init
 7628              	.LVL1133:
6722:..\..\FatFs/ff.c **** 
6723:..\..\FatFs/ff.c **** 	va_start(arp, fmt);
 7629              		.loc 1 6723 0
 7630 0016 1B94     		str	r4, [sp, #108]
 7631              	.LVL1134:
 7632              	.L664:
6724:..\..\FatFs/ff.c **** 
6725:..\..\FatFs/ff.c **** 	for (;;) {
6726:..\..\FatFs/ff.c **** 		c = *fmt++;
 7633              		.loc 1 6726 0
 7634 0018 741C     		adds	r4, r6, #1
 7635              	.LVL1135:
 7636 001a 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 7637              	.LVL1136:
6727:..\..\FatFs/ff.c **** 		if (c == 0) break;			/* End of string */
 7638              		.loc 1 6727 0
 7639 001c 0029     		cmp	r1, #0
 7640 001e 00F00D81 		beq	.L665
6728:..\..\FatFs/ff.c **** 		if (c != '%') {				/* Non escape character */
 7641              		.loc 1 6728 0
 7642 0022 2529     		cmp	r1, #37
 7643 0024 04D0     		beq	.L666
6729:..\..\FatFs/ff.c **** 			putc_bfd(&pb, c);
 7644              		.loc 1 6729 0
 7645 0026 08A8     		add	r0, sp, #32
 7646 0028 FFF7FEFF 		bl	putc_bfd
 7647              	.LVL1137:
6726:..\..\FatFs/ff.c **** 		if (c == 0) break;			/* End of string */
 7648              		.loc 1 6726 0
 7649 002c 2646     		mov	r6, r4
6730:..\..\FatFs/ff.c **** 			continue;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 274


 7650              		.loc 1 6730 0
 7651 002e F3E7     		b	.L664
 7652              	.LVL1138:
 7653              	.L666:
6731:..\..\FatFs/ff.c **** 		}
6732:..\..\FatFs/ff.c **** 		w = f = 0;
6733:..\..\FatFs/ff.c **** 		c = *fmt++;
 7654              		.loc 1 6733 0
 7655 0030 B21C     		adds	r2, r6, #2
 7656              	.LVL1139:
 7657 0032 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 7658              	.LVL1140:
6734:..\..\FatFs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 7659              		.loc 1 6734 0
 7660 0034 3029     		cmp	r1, #48
 7661 0036 03D1     		bne	.L668
 7662              	.LVL1141:
6735:..\..\FatFs/ff.c **** 			f = 1; c = *fmt++;
 7663              		.loc 1 6735 0
 7664 0038 F21C     		adds	r2, r6, #3
 7665              	.LVL1142:
 7666 003a B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 7667              	.LVL1143:
 7668 003c 0127     		movs	r7, #1
 7669 003e 06E0     		b	.L669
 7670              	.LVL1144:
 7671              	.L668:
6736:..\..\FatFs/ff.c **** 		} else {
6737:..\..\FatFs/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 7672              		.loc 1 6737 0
 7673 0040 2D29     		cmp	r1, #45
 7674 0042 03D1     		bne	.L709
 7675              	.LVL1145:
6738:..\..\FatFs/ff.c **** 				f = 2; c = *fmt++;
 7676              		.loc 1 6738 0
 7677 0044 F21C     		adds	r2, r6, #3
 7678              	.LVL1146:
 7679 0046 B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 7680              	.LVL1147:
 7681 0048 0227     		movs	r7, #2
 7682 004a 00E0     		b	.L669
 7683              	.LVL1148:
 7684              	.L709:
6732:..\..\FatFs/ff.c **** 		c = *fmt++;
 7685              		.loc 1 6732 0
 7686 004c 0027     		movs	r7, #0
 7687              	.LVL1149:
 7688              	.L669:
6739:..\..\FatFs/ff.c **** 			}
6740:..\..\FatFs/ff.c **** 		}
6741:..\..\FatFs/ff.c **** 		if (c == '*') {				/* Minimum width by argument */
 7689              		.loc 1 6741 0
 7690 004e 2A29     		cmp	r1, #42
 7691 0050 0ED1     		bne	.L710
6742:..\..\FatFs/ff.c **** 			w = va_arg(arp, int);
 7692              		.loc 1 6742 0
 7693 0052 1B9B     		ldr	r3, [sp, #108]
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 275


 7694 0054 191D     		adds	r1, r3, #4
 7695              	.LVL1150:
 7696 0056 1B91     		str	r1, [sp, #108]
 7697 0058 1D68     		ldr	r5, [r3]
 7698              	.LVL1151:
6743:..\..\FatFs/ff.c **** 			c = *fmt++;
 7699              		.loc 1 6743 0
 7700 005a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 7701              	.LVL1152:
 7702 005c 0132     		adds	r2, r2, #1
 7703              	.LVL1153:
 7704 005e 0DE0     		b	.L671
 7705              	.L672:
6744:..\..\FatFs/ff.c **** 		} else {
6745:..\..\FatFs/ff.c **** 			while (IsDigit(c)) {	/* Minimum width */
6746:..\..\FatFs/ff.c **** 				w = w * 10 + c - '0';
 7706              		.loc 1 6746 0
 7707 0060 05EB8505 		add	r5, r5, r5, lsl #2
 7708              	.LVL1154:
 7709 0064 6B00     		lsls	r3, r5, #1
 7710 0066 CD18     		adds	r5, r1, r3
 7711 0068 303D     		subs	r5, r5, #48
 7712              	.LVL1155:
6747:..\..\FatFs/ff.c **** 				c = *fmt++;
 7713              		.loc 1 6747 0
 7714 006a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 7715              	.LVL1156:
 7716 006c 0132     		adds	r2, r2, #1
 7717              	.LVL1157:
 7718 006e 00E0     		b	.L670
 7719              	.LVL1158:
 7720              	.L710:
 7721 0070 0025     		movs	r5, #0
 7722              	.LVL1159:
 7723              	.L670:
6745:..\..\FatFs/ff.c **** 				w = w * 10 + c - '0';
 7724              		.loc 1 6745 0
 7725 0072 A1F13003 		sub	r3, r1, #48
 7726 0076 DBB2     		uxtb	r3, r3
 7727 0078 092B     		cmp	r3, #9
 7728 007a F1D9     		bls	.L672
 7729              	.L671:
6748:..\..\FatFs/ff.c **** 			}
6749:..\..\FatFs/ff.c **** 		}
6750:..\..\FatFs/ff.c **** 		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 7730              		.loc 1 6750 0
 7731 007c 6C29     		cmp	r1, #108
 7732 007e 01D0     		beq	.L673
 7733              		.loc 1 6750 0 is_stmt 0 discriminator 1
 7734 0080 4C29     		cmp	r1, #76
 7735 0082 04D1     		bne	.L711
 7736              	.L673:
6751:..\..\FatFs/ff.c **** 			f |= 4; c = *fmt++;
 7737              		.loc 1 6751 0 is_stmt 1
 7738 0084 47F00407 		orr	r7, r7, #4
 7739              	.LVL1160:
 7740 0088 561C     		adds	r6, r2, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 276


 7741              	.LVL1161:
 7742 008a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 7743              	.LVL1162:
 7744 008c 00E0     		b	.L674
 7745              	.LVL1163:
 7746              	.L711:
 7747 008e 1646     		mov	r6, r2
 7748              	.LVL1164:
 7749              	.L674:
6752:..\..\FatFs/ff.c **** 		}
6753:..\..\FatFs/ff.c **** 		if (c == 0) break;
 7750              		.loc 1 6753 0
 7751 0090 0029     		cmp	r1, #0
 7752 0092 00F0D380 		beq	.L665
 7753              	.LVL1165:
6754:..\..\FatFs/ff.c **** 		d = c;
6755:..\..\FatFs/ff.c **** 		if (IsLower(d)) d -= 0x20;
 7754              		.loc 1 6755 0
 7755 0096 A1F16103 		sub	r3, r1, #97
 7756 009a DBB2     		uxtb	r3, r3
 7757 009c 192B     		cmp	r3, #25
 7758 009e 03D8     		bhi	.L712
 7759              		.loc 1 6755 0 is_stmt 0 discriminator 1
 7760 00a0 A1F12003 		sub	r3, r1, #32
 7761 00a4 DBB2     		uxtb	r3, r3
 7762              	.LVL1166:
 7763 00a6 00E0     		b	.L675
 7764              	.LVL1167:
 7765              	.L712:
6754:..\..\FatFs/ff.c **** 		d = c;
 7766              		.loc 1 6754 0 is_stmt 1
 7767 00a8 0B46     		mov	r3, r1
 7768              	.LVL1168:
 7769              	.L675:
6756:..\..\FatFs/ff.c **** 		switch (d) {				/* Atgument type is... */
 7770              		.loc 1 6756 0
 7771 00aa A3F14202 		sub	r2, r3, #66
 7772 00ae 162A     		cmp	r2, #22
 7773 00b0 4AD8     		bhi	.L676
 7774 00b2 DFE802F0 		tbb	[pc, r2]
 7775              	.L678:
 7776 00b6 4D       		.byte	(.L677-.L678)/2
 7777 00b7 3B       		.byte	(.L679-.L678)/2
 7778 00b8 43       		.byte	(.L680-.L678)/2
 7779 00b9 49       		.byte	(.L676-.L678)/2
 7780 00ba 49       		.byte	(.L676-.L678)/2
 7781 00bb 49       		.byte	(.L676-.L678)/2
 7782 00bc 49       		.byte	(.L676-.L678)/2
 7783 00bd 49       		.byte	(.L676-.L678)/2
 7784 00be 49       		.byte	(.L676-.L678)/2
 7785 00bf 49       		.byte	(.L676-.L678)/2
 7786 00c0 49       		.byte	(.L676-.L678)/2
 7787 00c1 49       		.byte	(.L676-.L678)/2
 7788 00c2 49       		.byte	(.L676-.L678)/2
 7789 00c3 50       		.byte	(.L713-.L678)/2
 7790 00c4 49       		.byte	(.L676-.L678)/2
 7791 00c5 49       		.byte	(.L676-.L678)/2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 277


 7792 00c6 49       		.byte	(.L676-.L678)/2
 7793 00c7 0C       		.byte	(.L682-.L678)/2
 7794 00c8 49       		.byte	(.L676-.L678)/2
 7795 00c9 43       		.byte	(.L680-.L678)/2
 7796 00ca 49       		.byte	(.L676-.L678)/2
 7797 00cb 49       		.byte	(.L676-.L678)/2
 7798 00cc 46       		.byte	(.L683-.L678)/2
 7799 00cd 00       		.p2align 1
 7800              	.L682:
6757:..\..\FatFs/ff.c **** 		case 'S' :					/* String */
6758:..\..\FatFs/ff.c **** 			p = va_arg(arp, TCHAR*);
 7801              		.loc 1 6758 0
 7802 00ce 1B9B     		ldr	r3, [sp, #108]
 7803              	.LVL1169:
 7804 00d0 1A1D     		adds	r2, r3, #4
 7805 00d2 1B92     		str	r2, [sp, #108]
 7806 00d4 D3F80080 		ldr	r8, [r3]
 7807              	.LVL1170:
6759:..\..\FatFs/ff.c **** 			for (j = 0; p[j]; j++) ;
 7808              		.loc 1 6759 0
 7809 00d8 0024     		movs	r4, #0
 7810 00da 00E0     		b	.L684
 7811              	.LVL1171:
 7812              	.L685:
 7813              		.loc 1 6759 0 is_stmt 0 discriminator 3
 7814 00dc 0134     		adds	r4, r4, #1
 7815              	.LVL1172:
 7816              	.L684:
 7817              		.loc 1 6759 0 discriminator 1
 7818 00de 18F80430 		ldrb	r3, [r8, r4]	@ zero_extendqisi2
 7819 00e2 002B     		cmp	r3, #0
 7820 00e4 FAD1     		bne	.L685
6760:..\..\FatFs/ff.c **** 			if (!(f & 2)) {						/* Right padded */
 7821              		.loc 1 6760 0 is_stmt 1
 7822 00e6 17F0020F 		tst	r7, #2
 7823 00ea 06D0     		beq	.L686
 7824 00ec 0FE0     		b	.L689
 7825              	.LVL1173:
 7826              	.L688:
6761:..\..\FatFs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ') ;
 7827              		.loc 1 6761 0 discriminator 2
 7828 00ee 2021     		movs	r1, #32
 7829 00f0 0DEB0100 		add	r0, sp, r1
 7830 00f4 FFF7FEFF 		bl	putc_bfd
 7831              	.LVL1174:
 7832 00f8 3C46     		mov	r4, r7
 7833              	.LVL1175:
 7834              	.L686:
 7835              		.loc 1 6761 0 is_stmt 0 discriminator 1
 7836 00fa 671C     		adds	r7, r4, #1
 7837              	.LVL1176:
 7838 00fc AC42     		cmp	r4, r5
 7839 00fe F6D3     		bcc	.L688
 7840              		.loc 1 6761 0
 7841 0100 3C46     		mov	r4, r7
 7842 0102 04E0     		b	.L689
 7843              	.LVL1177:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 278


 7844              	.L690:
6762:..\..\FatFs/ff.c **** 			}
6763:..\..\FatFs/ff.c **** 			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 7845              		.loc 1 6763 0 is_stmt 1 discriminator 2
 7846 0104 08F10108 		add	r8, r8, #1
 7847              	.LVL1178:
 7848 0108 08A8     		add	r0, sp, #32
 7849 010a FFF7FEFF 		bl	putc_bfd
 7850              	.LVL1179:
 7851              	.L689:
 7852              		.loc 1 6763 0 is_stmt 0 discriminator 1
 7853 010e 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 7854 0112 0029     		cmp	r1, #0
 7855 0114 F6D1     		bne	.L690
 7856 0116 05E0     		b	.L691
 7857              	.LVL1180:
 7858              	.L692:
6764:..\..\FatFs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 7859              		.loc 1 6764 0 is_stmt 1 discriminator 2
 7860 0118 2021     		movs	r1, #32
 7861 011a 0DEB0100 		add	r0, sp, r1
 7862 011e FFF7FEFF 		bl	putc_bfd
 7863              	.LVL1181:
 7864 0122 3C46     		mov	r4, r7
 7865              	.LVL1182:
 7866              	.L691:
 7867              		.loc 1 6764 0 is_stmt 0 discriminator 1
 7868 0124 671C     		adds	r7, r4, #1
 7869              	.LVL1183:
 7870 0126 AC42     		cmp	r4, r5
 7871 0128 F6D3     		bcc	.L692
 7872 012a 75E7     		b	.L664
 7873              	.LVL1184:
 7874              	.L679:
6765:..\..\FatFs/ff.c **** 			continue;
6766:..\..\FatFs/ff.c **** 
6767:..\..\FatFs/ff.c **** 		case 'C' :					/* Character */
6768:..\..\FatFs/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 7875              		.loc 1 6768 0 is_stmt 1
 7876 012c 1B9B     		ldr	r3, [sp, #108]
 7877              	.LVL1185:
 7878 012e 1A1D     		adds	r2, r3, #4
 7879 0130 1B92     		str	r2, [sp, #108]
 7880 0132 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 7881              	.LVL1186:
 7882 0134 08A8     		add	r0, sp, #32
 7883 0136 FFF7FEFF 		bl	putc_bfd
 7884              	.LVL1187:
 7885 013a 6DE7     		b	.L664
 7886              	.LVL1188:
 7887              	.L680:
6769:..\..\FatFs/ff.c **** 
6770:..\..\FatFs/ff.c **** 		case 'B' :					/* Unsigned binary */
6771:..\..\FatFs/ff.c **** 			r = 2; break;
6772:..\..\FatFs/ff.c **** 
6773:..\..\FatFs/ff.c **** 		case 'O' :					/* Unsigned octal */
6774:..\..\FatFs/ff.c **** 			r = 8; break;
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 279


6775:..\..\FatFs/ff.c **** 
6776:..\..\FatFs/ff.c **** 		case 'D' :					/* Signed decimal */
6777:..\..\FatFs/ff.c **** 		case 'U' :					/* Unsigned decimal */
6778:..\..\FatFs/ff.c **** 			r = 10; break;
 7888              		.loc 1 6778 0
 7889 013c 4FF00A08 		mov	r8, #10
 7890 0140 0BE0     		b	.L681
 7891              	.LVL1189:
 7892              	.L683:
6779:..\..\FatFs/ff.c **** 
6780:..\..\FatFs/ff.c **** 		case 'X' :					/* Unsigned hexdecimal */
6781:..\..\FatFs/ff.c **** 			r = 16; break;
 7893              		.loc 1 6781 0
 7894 0142 4FF01008 		mov	r8, #16
 7895 0146 08E0     		b	.L681
 7896              	.LVL1190:
 7897              	.L676:
6782:..\..\FatFs/ff.c **** 
6783:..\..\FatFs/ff.c **** 		default:					/* Unknown type (pass-through) */
6784:..\..\FatFs/ff.c **** 			putc_bfd(&pb, c); continue;
 7898              		.loc 1 6784 0
 7899 0148 08A8     		add	r0, sp, #32
 7900 014a FFF7FEFF 		bl	putc_bfd
 7901              	.LVL1191:
 7902 014e 63E7     		b	.L664
 7903              	.LVL1192:
 7904              	.L677:
6771:..\..\FatFs/ff.c **** 
 7905              		.loc 1 6771 0
 7906 0150 4FF00208 		mov	r8, #2
 7907 0154 01E0     		b	.L681
 7908              	.L713:
6774:..\..\FatFs/ff.c **** 
 7909              		.loc 1 6774 0
 7910 0156 4FF00808 		mov	r8, #8
 7911              	.L681:
 7912              	.LVL1193:
6785:..\..\FatFs/ff.c **** 		}
6786:..\..\FatFs/ff.c **** 
6787:..\..\FatFs/ff.c **** 		/* Get an argument and put it in numeral */
6788:..\..\FatFs/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 7913              		.loc 1 6788 0
 7914 015a 17F0040F 		tst	r7, #4
 7915 015e 05D0     		beq	.L693
 7916              		.loc 1 6788 0 is_stmt 0 discriminator 1
 7917 0160 1B9A     		ldr	r2, [sp, #108]
 7918 0162 101D     		adds	r0, r2, #4
 7919 0164 1B90     		str	r0, [sp, #108]
 7920 0166 D2F800E0 		ldr	lr, [r2]
 7921 016a 0CE0     		b	.L694
 7922              	.L693:
 7923              		.loc 1 6788 0 discriminator 2
 7924 016c 442B     		cmp	r3, #68
 7925 016e 05D1     		bne	.L695
 7926              		.loc 1 6788 0 discriminator 4
 7927 0170 1B9A     		ldr	r2, [sp, #108]
 7928 0172 101D     		adds	r0, r2, #4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 280


 7929 0174 1B90     		str	r0, [sp, #108]
 7930 0176 D2F800E0 		ldr	lr, [r2]
 7931 017a 04E0     		b	.L694
 7932              	.L695:
 7933              		.loc 1 6788 0 discriminator 5
 7934 017c 1B9A     		ldr	r2, [sp, #108]
 7935 017e 101D     		adds	r0, r2, #4
 7936 0180 1B90     		str	r0, [sp, #108]
 7937 0182 D2F800E0 		ldr	lr, [r2]
 7938              	.L694:
 7939              	.LVL1194:
6789:..\..\FatFs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 7940              		.loc 1 6789 0 is_stmt 1 discriminator 8
 7941 0186 442B     		cmp	r3, #68
 7942 0188 06D1     		bne	.L696
 7943              		.loc 1 6789 0 is_stmt 0 discriminator 1
 7944 018a BEF1000F 		cmp	lr, #0
 7945 018e 03DA     		bge	.L696
6790:..\..\FatFs/ff.c **** 			v = 0 - v;
 7946              		.loc 1 6790 0 is_stmt 1
 7947 0190 CEF1000E 		rsb	lr, lr, #0
 7948              	.LVL1195:
6791:..\..\FatFs/ff.c **** 			f |= 8;
 7949              		.loc 1 6791 0
 7950 0194 47F00807 		orr	r7, r7, #8
 7951              	.LVL1196:
 7952              	.L696:
6792:..\..\FatFs/ff.c **** 		}
6793:..\..\FatFs/ff.c **** 		i = 0;
 7953              		.loc 1 6793 0
 7954 0198 4FF0000C 		mov	ip, #0
 7955 019c 00E0     		b	.L700
 7956              	.LVL1197:
 7957              	.L715:
6794:..\..\FatFs/ff.c **** 		do {
6795:..\..\FatFs/ff.c **** 			d = (TCHAR)(v % r); v /= r;
6796:..\..\FatFs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
6797:..\..\FatFs/ff.c **** 			str[i++] = d + '0';
 7958              		.loc 1 6797 0
 7959 019e A446     		mov	ip, r4
 7960              	.LVL1198:
 7961              	.L700:
6795:..\..\FatFs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 7962              		.loc 1 6795 0
 7963 01a0 BEFBF8F0 		udiv	r0, lr, r8
 7964 01a4 08FB10E3 		mls	r3, r8, r0, lr
 7965 01a8 DBB2     		uxtb	r3, r3
 7966              	.LVL1199:
 7967 01aa 8646     		mov	lr, r0
 7968              	.LVL1200:
6796:..\..\FatFs/ff.c **** 			str[i++] = d + '0';
 7969              		.loc 1 6796 0
 7970 01ac 092B     		cmp	r3, #9
 7971 01ae 06D9     		bls	.L697
6796:..\..\FatFs/ff.c **** 			str[i++] = d + '0';
 7972              		.loc 1 6796 0 is_stmt 0 discriminator 1
 7973 01b0 7829     		cmp	r1, #120
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 281


 7974 01b2 01D1     		bne	.L714
6796:..\..\FatFs/ff.c **** 			str[i++] = d + '0';
 7975              		.loc 1 6796 0
 7976 01b4 2722     		movs	r2, #39
 7977 01b6 00E0     		b	.L698
 7978              	.L714:
 7979 01b8 0722     		movs	r2, #7
 7980              	.L698:
6796:..\..\FatFs/ff.c **** 			str[i++] = d + '0';
 7981              		.loc 1 6796 0 discriminator 5
 7982 01ba 1A44     		add	r2, r2, r3
 7983 01bc D3B2     		uxtb	r3, r2
 7984              	.LVL1201:
 7985              	.L697:
 7986              		.loc 1 6797 0 is_stmt 1
 7987 01be 0CF10104 		add	r4, ip, #1
 7988              	.LVL1202:
 7989 01c2 3033     		adds	r3, r3, #48
 7990              	.LVL1203:
 7991 01c4 1CAA     		add	r2, sp, #112
 7992 01c6 6244     		add	r2, r2, ip
 7993 01c8 02F8703C 		strb	r3, [r2, #-112]
6798:..\..\FatFs/ff.c **** 		} while (v && i < sizeof str / sizeof *str);
 7994              		.loc 1 6798 0
 7995 01cc 08B1     		cbz	r0, .L699
 7996              		.loc 1 6798 0 is_stmt 0 discriminator 1
 7997 01ce 1F2C     		cmp	r4, #31
 7998 01d0 E5D9     		bls	.L715
 7999              	.L699:
6799:..\..\FatFs/ff.c **** 		if (f & 8) str[i++] = '-';
 8000              		.loc 1 6799 0 is_stmt 1
 8001 01d2 17F0080F 		tst	r7, #8
 8002 01d6 06D0     		beq	.L701
 8003              	.LVL1204:
 8004              		.loc 1 6799 0 is_stmt 0 discriminator 1
 8005 01d8 1CAB     		add	r3, sp, #112
 8006 01da 1C44     		add	r4, r4, r3
 8007 01dc 2D23     		movs	r3, #45
 8008 01de 04F8703C 		strb	r3, [r4, #-112]
 8009 01e2 0CF10204 		add	r4, ip, #2
 8010              	.LVL1205:
 8011              	.L701:
6800:..\..\FatFs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 8012              		.loc 1 6800 0 is_stmt 1
 8013 01e6 17F0010F 		tst	r7, #1
 8014 01ea 02D0     		beq	.L716
 8015 01ec 4FF03008 		mov	r8, #48
 8016              	.LVL1206:
 8017 01f0 01E0     		b	.L702
 8018              	.LVL1207:
 8019              	.L716:
 8020 01f2 4FF02008 		mov	r8, #32
 8021              	.LVL1208:
 8022              	.L702:
6801:..\..\FatFs/ff.c **** 		if (!(f & 2)) {
 8023              		.loc 1 6801 0 discriminator 4
 8024 01f6 17F0020F 		tst	r7, #2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 282


 8025 01fa 07D0     		beq	.L717
6800:..\..\FatFs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 8026              		.loc 1 6800 0
 8027 01fc 2746     		mov	r7, r4
 8028              	.LVL1209:
 8029 01fe 09E0     		b	.L706
 8030              	.LVL1210:
 8031              	.L705:
6802:..\..\FatFs/ff.c **** 			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 8032              		.loc 1 6802 0 discriminator 2
 8033 0200 4146     		mov	r1, r8
 8034 0202 08A8     		add	r0, sp, #32
 8035 0204 FFF7FEFF 		bl	putc_bfd
 8036              	.LVL1211:
 8037 0208 3B46     		mov	r3, r7
 8038 020a 00E0     		b	.L703
 8039              	.LVL1212:
 8040              	.L717:
 8041 020c 2346     		mov	r3, r4
 8042              	.LVL1213:
 8043              	.L703:
 8044              		.loc 1 6802 0 is_stmt 0 discriminator 1
 8045 020e 5F1C     		adds	r7, r3, #1
 8046              	.LVL1214:
 8047 0210 AB42     		cmp	r3, r5
 8048 0212 F5D3     		bcc	.L705
 8049              	.L706:
6803:..\..\FatFs/ff.c **** 		}
6804:..\..\FatFs/ff.c **** 		do {
6805:..\..\FatFs/ff.c **** 			putc_bfd(&pb, str[--i]);			/* Number body */
 8050              		.loc 1 6805 0 is_stmt 1 discriminator 1
 8051 0214 013C     		subs	r4, r4, #1
 8052              	.LVL1215:
 8053 0216 1CAB     		add	r3, sp, #112
 8054 0218 2344     		add	r3, r3, r4
 8055 021a 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 8056 021e 08A8     		add	r0, sp, #32
 8057 0220 FFF7FEFF 		bl	putc_bfd
 8058              	.LVL1216:
6806:..\..\FatFs/ff.c **** 		} while (i);
 8059              		.loc 1 6806 0 discriminator 1
 8060 0224 002C     		cmp	r4, #0
 8061 0226 F5D1     		bne	.L706
 8062 0228 04E0     		b	.L707
 8063              	.LVL1217:
 8064              	.L708:
6807:..\..\FatFs/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 8065              		.loc 1 6807 0 discriminator 2
 8066 022a 4146     		mov	r1, r8
 8067 022c 08A8     		add	r0, sp, #32
 8068 022e FFF7FEFF 		bl	putc_bfd
 8069              	.LVL1218:
 8070 0232 2746     		mov	r7, r4
 8071              	.LVL1219:
 8072              	.L707:
 8073              		.loc 1 6807 0 is_stmt 0 discriminator 1
 8074 0234 7C1C     		adds	r4, r7, #1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 283


 8075              	.LVL1220:
 8076 0236 AF42     		cmp	r7, r5
 8077 0238 F7D3     		bcc	.L708
 8078 023a EDE6     		b	.L664
 8079              	.LVL1221:
 8080              	.L665:
6808:..\..\FatFs/ff.c **** 	}
6809:..\..\FatFs/ff.c **** 
6810:..\..\FatFs/ff.c **** 	va_end(arp);
6811:..\..\FatFs/ff.c **** 
6812:..\..\FatFs/ff.c **** 	return putc_flush(&pb);
 8081              		.loc 1 6812 0 is_stmt 1
 8082 023c 08A8     		add	r0, sp, #32
 8083 023e FFF7FEFF 		bl	putc_flush
 8084              	.LVL1222:
6813:..\..\FatFs/ff.c **** }
 8085              		.loc 1 6813 0
 8086 0242 1DB0     		add	sp, sp, #116
 8087              		.cfi_def_cfa_offset 36
 8088              		@ sp needed
 8089 0244 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 8090              		.cfi_restore 14
 8091              		.cfi_restore 8
 8092              		.cfi_restore 7
 8093              		.cfi_restore 6
 8094              		.cfi_restore 5
 8095              		.cfi_restore 4
 8096              		.cfi_def_cfa_offset 12
 8097 0248 03B0     		add	sp, sp, #12
 8098              		.cfi_restore 3
 8099              		.cfi_restore 2
 8100              		.cfi_restore 1
 8101              		.cfi_def_cfa_offset 0
 8102 024a 7047     		bx	lr
 8103              		.cfi_endproc
 8104              	.LFE62:
 8105              		.size	f_printf, .-f_printf
 8106              		.section	.rodata
 8107              		.align	2
 8108              		.set	.LANCHOR1,. + 0
 8109              		.type	badchr.4929, %object
 8110              		.size	badchr.4929, 18
 8111              	badchr.4929:
 8112 0000 2B2E2C3B 		.ascii	"+.,;=[]/\\\"*:<>?|\177\000"
 8112      3D5B5D2F 
 8112      5C222A3A 
 8112      3C3E3F7C 
 8112      7F00
 8113              		.section	.rodata.str1.4,"aMS",%progbits,1
 8114              		.align	2
 8115              	.LC0:
 8116 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 8116      3A3B3C3D 
 8116      3E3F5B5D 
 8116      7C7F00
 8117 000f 00       		.space	1
 8118              	.LC1:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 284


 8119 0010 46415400 		.ascii	"FAT\000"
 8120              	.LC2:
 8121 0014 46415433 		.ascii	"FAT32\000"
 8121      3200
 8122              		.bss
 8123              		.align	2
 8124              		.set	.LANCHOR0,. + 0
 8125              		.type	CurrVol, %object
 8126              		.size	CurrVol, 1
 8127              	CurrVol:
 8128 0000 00       		.space	1
 8129 0001 000000   		.space	3
 8130              		.type	FatFs, %object
 8131              		.size	FatFs, 4
 8132              	FatFs:
 8133 0004 00000000 		.space	4
 8134              		.type	Fsid, %object
 8135              		.size	Fsid, 2
 8136              	Fsid:
 8137 0008 0000     		.space	2
 8138              		.text
 8139              	.Letext0:
 8140              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8141              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8142              		.file 4 "..\\..\\FatFs\\ff.h"
 8143              		.file 5 "..\\..\\FatFs\\diskio.h"
 8144              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 8145              		.file 7 "<built-in>"
 8146              		.section	.debug_info,"",%progbits
 8147              	.Ldebug_info0:
 8148 0000 E1360000 		.4byte	0x36e1
 8149 0004 0400     		.2byte	0x4
 8150 0006 00000000 		.4byte	.Ldebug_abbrev0
 8151 000a 04       		.byte	0x4
 8152 000b 01       		.uleb128 0x1
 8153 000c 00050000 		.4byte	.LASF195
 8154 0010 0C       		.byte	0xc
 8155 0011 E6050000 		.4byte	.LASF196
 8156 0015 4E070000 		.4byte	.LASF197
 8157 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8158 001d 00000000 		.4byte	0
 8159 0021 00000000 		.4byte	.Ldebug_line0
 8160 0025 02       		.uleb128 0x2
 8161 0026 01       		.byte	0x1
 8162 0027 06       		.byte	0x6
 8163 0028 DB000000 		.4byte	.LASF0
 8164 002c 02       		.uleb128 0x2
 8165 002d 01       		.byte	0x1
 8166 002e 08       		.byte	0x8
 8167 002f 9A040000 		.4byte	.LASF1
 8168 0033 02       		.uleb128 0x2
 8169 0034 02       		.byte	0x2
 8170 0035 05       		.byte	0x5
 8171 0036 B7040000 		.4byte	.LASF2
 8172 003a 03       		.uleb128 0x3
 8173 003b 03060000 		.4byte	.LASF5
 8174 003f 02       		.byte	0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 285


 8175 0040 2B       		.byte	0x2b
 8176 0041 45000000 		.4byte	0x45
 8177 0045 02       		.uleb128 0x2
 8178 0046 02       		.byte	0x2
 8179 0047 07       		.byte	0x7
 8180 0048 A5020000 		.4byte	.LASF3
 8181 004c 02       		.uleb128 0x2
 8182 004d 04       		.byte	0x4
 8183 004e 05       		.byte	0x5
 8184 004f 22010000 		.4byte	.LASF4
 8185 0053 03       		.uleb128 0x3
 8186 0054 D2010000 		.4byte	.LASF6
 8187 0058 02       		.byte	0x2
 8188 0059 41       		.byte	0x41
 8189 005a 5E000000 		.4byte	0x5e
 8190 005e 02       		.uleb128 0x2
 8191 005f 04       		.byte	0x4
 8192 0060 07       		.byte	0x7
 8193 0061 6D020000 		.4byte	.LASF7
 8194 0065 02       		.uleb128 0x2
 8195 0066 08       		.byte	0x8
 8196 0067 05       		.byte	0x5
 8197 0068 CD000000 		.4byte	.LASF8
 8198 006c 02       		.uleb128 0x2
 8199 006d 08       		.byte	0x8
 8200 006e 07       		.byte	0x7
 8201 006f 80000000 		.4byte	.LASF9
 8202 0073 04       		.uleb128 0x4
 8203 0074 04       		.byte	0x4
 8204 0075 05       		.byte	0x5
 8205 0076 696E7400 		.ascii	"int\000"
 8206 007a 02       		.uleb128 0x2
 8207 007b 04       		.byte	0x4
 8208 007c 07       		.byte	0x7
 8209 007d 44020000 		.4byte	.LASF10
 8210 0081 03       		.uleb128 0x3
 8211 0082 72010000 		.4byte	.LASF11
 8212 0086 03       		.byte	0x3
 8213 0087 24       		.byte	0x24
 8214 0088 3A000000 		.4byte	0x3a
 8215 008c 03       		.uleb128 0x3
 8216 008d C6050000 		.4byte	.LASF12
 8217 0091 03       		.byte	0x3
 8218 0092 30       		.byte	0x30
 8219 0093 53000000 		.4byte	0x53
 8220 0097 03       		.uleb128 0x3
 8221 0098 62020000 		.4byte	.LASF13
 8222 009c 04       		.byte	0x4
 8223 009d 2D       		.byte	0x2d
 8224 009e 7A000000 		.4byte	0x7a
 8225 00a2 03       		.uleb128 0x3
 8226 00a3 0A020000 		.4byte	.LASF14
 8227 00a7 04       		.byte	0x4
 8228 00a8 2E       		.byte	0x2e
 8229 00a9 2C000000 		.4byte	0x2c
 8230 00ad 03       		.uleb128 0x3
 8231 00ae DB030000 		.4byte	.LASF15
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 286


 8232 00b2 04       		.byte	0x4
 8233 00b3 2F       		.byte	0x2f
 8234 00b4 81000000 		.4byte	0x81
 8235 00b8 03       		.uleb128 0x3
 8236 00b9 9F010000 		.4byte	.LASF16
 8237 00bd 04       		.byte	0x4
 8238 00be 30       		.byte	0x30
 8239 00bf 8C000000 		.4byte	0x8c
 8240 00c3 03       		.uleb128 0x3
 8241 00c4 1C030000 		.4byte	.LASF17
 8242 00c8 04       		.byte	0x4
 8243 00c9 32       		.byte	0x32
 8244 00ca AD000000 		.4byte	0xad
 8245 00ce 03       		.uleb128 0x3
 8246 00cf 04040000 		.4byte	.LASF18
 8247 00d3 04       		.byte	0x4
 8248 00d4 63       		.byte	0x63
 8249 00d5 D9000000 		.4byte	0xd9
 8250 00d9 02       		.uleb128 0x2
 8251 00da 01       		.byte	0x1
 8252 00db 08       		.byte	0x8
 8253 00dc E1050000 		.4byte	.LASF19
 8254 00e0 03       		.uleb128 0x3
 8255 00e1 AD010000 		.4byte	.LASF20
 8256 00e5 04       		.byte	0x4
 8257 00e6 7C       		.byte	0x7c
 8258 00e7 B8000000 		.4byte	0xb8
 8259 00eb 03       		.uleb128 0x3
 8260 00ec FF060000 		.4byte	.LASF21
 8261 00f0 04       		.byte	0x4
 8262 00f1 7D       		.byte	0x7d
 8263 00f2 B8000000 		.4byte	0xb8
 8264 00f6 05       		.uleb128 0x5
 8265 00f7 3402     		.2byte	0x234
 8266 00f9 04       		.byte	0x4
 8267 00fa 84       		.byte	0x84
 8268 00fb E3010000 		.4byte	0x1e3
 8269 00ff 06       		.uleb128 0x6
 8270 0100 29000000 		.4byte	.LASF22
 8271 0104 04       		.byte	0x4
 8272 0105 85       		.byte	0x85
 8273 0106 A2000000 		.4byte	0xa2
 8274 010a 00       		.byte	0
 8275 010b 06       		.uleb128 0x6
 8276 010c FB010000 		.4byte	.LASF23
 8277 0110 04       		.byte	0x4
 8278 0111 86       		.byte	0x86
 8279 0112 A2000000 		.4byte	0xa2
 8280 0116 01       		.byte	0x1
 8281 0117 06       		.uleb128 0x6
 8282 0118 4C010000 		.4byte	.LASF24
 8283 011c 04       		.byte	0x4
 8284 011d 87       		.byte	0x87
 8285 011e A2000000 		.4byte	0xa2
 8286 0122 02       		.byte	0x2
 8287 0123 06       		.uleb128 0x6
 8288 0124 C0050000 		.4byte	.LASF25
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 287


 8289 0128 04       		.byte	0x4
 8290 0129 88       		.byte	0x88
 8291 012a A2000000 		.4byte	0xa2
 8292 012e 03       		.byte	0x3
 8293 012f 06       		.uleb128 0x6
 8294 0130 9C060000 		.4byte	.LASF26
 8295 0134 04       		.byte	0x4
 8296 0135 89       		.byte	0x89
 8297 0136 A2000000 		.4byte	0xa2
 8298 013a 04       		.byte	0x4
 8299 013b 07       		.uleb128 0x7
 8300 013c 696400   		.ascii	"id\000"
 8301 013f 04       		.byte	0x4
 8302 0140 8A       		.byte	0x8a
 8303 0141 AD000000 		.4byte	0xad
 8304 0145 06       		.byte	0x6
 8305 0146 06       		.uleb128 0x6
 8306 0147 5E000000 		.4byte	.LASF27
 8307 014b 04       		.byte	0x4
 8308 014c 8B       		.byte	0x8b
 8309 014d AD000000 		.4byte	0xad
 8310 0151 08       		.byte	0x8
 8311 0152 06       		.uleb128 0x6
 8312 0153 E5010000 		.4byte	.LASF28
 8313 0157 04       		.byte	0x4
 8314 0158 8C       		.byte	0x8c
 8315 0159 AD000000 		.4byte	0xad
 8316 015d 0A       		.byte	0xa
 8317 015e 06       		.uleb128 0x6
 8318 015f 34040000 		.4byte	.LASF29
 8319 0163 04       		.byte	0x4
 8320 0164 9A       		.byte	0x9a
 8321 0165 B8000000 		.4byte	0xb8
 8322 0169 0C       		.byte	0xc
 8323 016a 06       		.uleb128 0x6
 8324 016b 00020000 		.4byte	.LASF30
 8325 016f 04       		.byte	0x4
 8326 0170 9B       		.byte	0x9b
 8327 0171 B8000000 		.4byte	0xb8
 8328 0175 10       		.byte	0x10
 8329 0176 06       		.uleb128 0x6
 8330 0177 E0030000 		.4byte	.LASF31
 8331 017b 04       		.byte	0x4
 8332 017c 9E       		.byte	0x9e
 8333 017d B8000000 		.4byte	0xb8
 8334 0181 14       		.byte	0x14
 8335 0182 06       		.uleb128 0x6
 8336 0183 07010000 		.4byte	.LASF32
 8337 0187 04       		.byte	0x4
 8338 0188 A5       		.byte	0xa5
 8339 0189 B8000000 		.4byte	0xb8
 8340 018d 18       		.byte	0x18
 8341 018e 06       		.uleb128 0x6
 8342 018f 01010000 		.4byte	.LASF33
 8343 0193 04       		.byte	0x4
 8344 0194 A6       		.byte	0xa6
 8345 0195 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 288


 8346 0199 1C       		.byte	0x1c
 8347 019a 06       		.uleb128 0x6
 8348 019b 4D060000 		.4byte	.LASF34
 8349 019f 04       		.byte	0x4
 8350 01a0 A7       		.byte	0xa7
 8351 01a1 EB000000 		.4byte	0xeb
 8352 01a5 20       		.byte	0x20
 8353 01a6 06       		.uleb128 0x6
 8354 01a7 97010000 		.4byte	.LASF35
 8355 01ab 04       		.byte	0x4
 8356 01ac A8       		.byte	0xa8
 8357 01ad EB000000 		.4byte	0xeb
 8358 01b1 24       		.byte	0x24
 8359 01b2 06       		.uleb128 0x6
 8360 01b3 C5000000 		.4byte	.LASF36
 8361 01b7 04       		.byte	0x4
 8362 01b8 A9       		.byte	0xa9
 8363 01b9 EB000000 		.4byte	0xeb
 8364 01bd 28       		.byte	0x28
 8365 01be 06       		.uleb128 0x6
 8366 01bf B8020000 		.4byte	.LASF37
 8367 01c3 04       		.byte	0x4
 8368 01c4 AA       		.byte	0xaa
 8369 01c5 EB000000 		.4byte	0xeb
 8370 01c9 2C       		.byte	0x2c
 8371 01ca 06       		.uleb128 0x6
 8372 01cb F6020000 		.4byte	.LASF38
 8373 01cf 04       		.byte	0x4
 8374 01d0 AE       		.byte	0xae
 8375 01d1 EB000000 		.4byte	0xeb
 8376 01d5 30       		.byte	0x30
 8377 01d6 07       		.uleb128 0x7
 8378 01d7 77696E00 		.ascii	"win\000"
 8379 01db 04       		.byte	0x4
 8380 01dc AF       		.byte	0xaf
 8381 01dd E3010000 		.4byte	0x1e3
 8382 01e1 34       		.byte	0x34
 8383 01e2 00       		.byte	0
 8384 01e3 08       		.uleb128 0x8
 8385 01e4 A2000000 		.4byte	0xa2
 8386 01e8 F4010000 		.4byte	0x1f4
 8387 01ec 09       		.uleb128 0x9
 8388 01ed F4010000 		.4byte	0x1f4
 8389 01f1 FF01     		.2byte	0x1ff
 8390 01f3 00       		.byte	0
 8391 01f4 02       		.uleb128 0x2
 8392 01f5 04       		.byte	0x4
 8393 01f6 07       		.byte	0x7
 8394 01f7 AC030000 		.4byte	.LASF39
 8395 01fb 03       		.uleb128 0x3
 8396 01fc 5C030000 		.4byte	.LASF40
 8397 0200 04       		.byte	0x4
 8398 0201 B0       		.byte	0xb0
 8399 0202 F6000000 		.4byte	0xf6
 8400 0206 0A       		.uleb128 0xa
 8401 0207 10       		.byte	0x10
 8402 0208 04       		.byte	0x4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 289


 8403 0209 B6       		.byte	0xb6
 8404 020a 55020000 		.4byte	0x255
 8405 020e 07       		.uleb128 0x7
 8406 020f 667300   		.ascii	"fs\000"
 8407 0212 04       		.byte	0x4
 8408 0213 B7       		.byte	0xb7
 8409 0214 55020000 		.4byte	0x255
 8410 0218 00       		.byte	0
 8411 0219 07       		.uleb128 0x7
 8412 021a 696400   		.ascii	"id\000"
 8413 021d 04       		.byte	0x4
 8414 021e B8       		.byte	0xb8
 8415 021f AD000000 		.4byte	0xad
 8416 0223 04       		.byte	0x4
 8417 0224 06       		.uleb128 0x6
 8418 0225 28020000 		.4byte	.LASF41
 8419 0229 04       		.byte	0x4
 8420 022a B9       		.byte	0xb9
 8421 022b A2000000 		.4byte	0xa2
 8422 022f 06       		.byte	0x6
 8423 0230 06       		.uleb128 0x6
 8424 0231 0B070000 		.4byte	.LASF42
 8425 0235 04       		.byte	0x4
 8426 0236 BA       		.byte	0xba
 8427 0237 A2000000 		.4byte	0xa2
 8428 023b 07       		.byte	0x7
 8429 023c 06       		.uleb128 0x6
 8430 023d E5030000 		.4byte	.LASF43
 8431 0241 04       		.byte	0x4
 8432 0242 BB       		.byte	0xbb
 8433 0243 B8000000 		.4byte	0xb8
 8434 0247 08       		.byte	0x8
 8435 0248 06       		.uleb128 0x6
 8436 0249 5A040000 		.4byte	.LASF44
 8437 024d 04       		.byte	0x4
 8438 024e BC       		.byte	0xbc
 8439 024f E0000000 		.4byte	0xe0
 8440 0253 0C       		.byte	0xc
 8441 0254 00       		.byte	0
 8442 0255 0B       		.uleb128 0xb
 8443 0256 04       		.byte	0x4
 8444 0257 FB010000 		.4byte	0x1fb
 8445 025b 03       		.uleb128 0x3
 8446 025c AE070000 		.4byte	.LASF45
 8447 0260 04       		.byte	0x4
 8448 0261 C7       		.byte	0xc7
 8449 0262 06020000 		.4byte	0x206
 8450 0266 05       		.uleb128 0x5
 8451 0267 2802     		.2byte	0x228
 8452 0269 04       		.byte	0x4
 8453 026a CD       		.byte	0xcd
 8454 026b DC020000 		.4byte	0x2dc
 8455 026f 07       		.uleb128 0x7
 8456 0270 6F626A00 		.ascii	"obj\000"
 8457 0274 04       		.byte	0x4
 8458 0275 CE       		.byte	0xce
 8459 0276 5B020000 		.4byte	0x25b
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 290


 8460 027a 00       		.byte	0
 8461 027b 06       		.uleb128 0x6
 8462 027c D5040000 		.4byte	.LASF46
 8463 0280 04       		.byte	0x4
 8464 0281 CF       		.byte	0xcf
 8465 0282 A2000000 		.4byte	0xa2
 8466 0286 10       		.byte	0x10
 8467 0287 07       		.uleb128 0x7
 8468 0288 65727200 		.ascii	"err\000"
 8469 028c 04       		.byte	0x4
 8470 028d D0       		.byte	0xd0
 8471 028e A2000000 		.4byte	0xa2
 8472 0292 11       		.byte	0x11
 8473 0293 06       		.uleb128 0x6
 8474 0294 8D030000 		.4byte	.LASF47
 8475 0298 04       		.byte	0x4
 8476 0299 D1       		.byte	0xd1
 8477 029a E0000000 		.4byte	0xe0
 8478 029e 14       		.byte	0x14
 8479 029f 06       		.uleb128 0x6
 8480 02a0 CF070000 		.4byte	.LASF48
 8481 02a4 04       		.byte	0x4
 8482 02a5 D2       		.byte	0xd2
 8483 02a6 B8000000 		.4byte	0xb8
 8484 02aa 18       		.byte	0x18
 8485 02ab 06       		.uleb128 0x6
 8486 02ac A6000000 		.4byte	.LASF49
 8487 02b0 04       		.byte	0x4
 8488 02b1 D3       		.byte	0xd3
 8489 02b2 EB000000 		.4byte	0xeb
 8490 02b6 1C       		.byte	0x1c
 8491 02b7 06       		.uleb128 0x6
 8492 02b8 BC000000 		.4byte	.LASF50
 8493 02bc 04       		.byte	0x4
 8494 02bd D5       		.byte	0xd5
 8495 02be EB000000 		.4byte	0xeb
 8496 02c2 20       		.byte	0x20
 8497 02c3 06       		.uleb128 0x6
 8498 02c4 20020000 		.4byte	.LASF51
 8499 02c8 04       		.byte	0x4
 8500 02c9 D6       		.byte	0xd6
 8501 02ca DC020000 		.4byte	0x2dc
 8502 02ce 24       		.byte	0x24
 8503 02cf 07       		.uleb128 0x7
 8504 02d0 62756600 		.ascii	"buf\000"
 8505 02d4 04       		.byte	0x4
 8506 02d5 DC       		.byte	0xdc
 8507 02d6 E3010000 		.4byte	0x1e3
 8508 02da 28       		.byte	0x28
 8509 02db 00       		.byte	0
 8510 02dc 0B       		.uleb128 0xb
 8511 02dd 04       		.byte	0x4
 8512 02de A2000000 		.4byte	0xa2
 8513 02e2 0C       		.uleb128 0xc
 8514 02e3 46494C00 		.ascii	"FIL\000"
 8515 02e7 04       		.byte	0x4
 8516 02e8 DE       		.byte	0xde
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 291


 8517 02e9 66020000 		.4byte	0x266
 8518 02ed 0A       		.uleb128 0xa
 8519 02ee 2C       		.byte	0x2c
 8520 02ef 04       		.byte	0x4
 8521 02f0 E4       		.byte	0xe4
 8522 02f1 3D030000 		.4byte	0x33d
 8523 02f5 07       		.uleb128 0x7
 8524 02f6 6F626A00 		.ascii	"obj\000"
 8525 02fa 04       		.byte	0x4
 8526 02fb E5       		.byte	0xe5
 8527 02fc 5B020000 		.4byte	0x25b
 8528 0300 00       		.byte	0
 8529 0301 06       		.uleb128 0x6
 8530 0302 97050000 		.4byte	.LASF52
 8531 0306 04       		.byte	0x4
 8532 0307 E6       		.byte	0xe6
 8533 0308 B8000000 		.4byte	0xb8
 8534 030c 10       		.byte	0x10
 8535 030d 06       		.uleb128 0x6
 8536 030e CF070000 		.4byte	.LASF48
 8537 0312 04       		.byte	0x4
 8538 0313 E7       		.byte	0xe7
 8539 0314 B8000000 		.4byte	0xb8
 8540 0318 14       		.byte	0x14
 8541 0319 06       		.uleb128 0x6
 8542 031a A6000000 		.4byte	.LASF49
 8543 031e 04       		.byte	0x4
 8544 031f E8       		.byte	0xe8
 8545 0320 EB000000 		.4byte	0xeb
 8546 0324 18       		.byte	0x18
 8547 0325 07       		.uleb128 0x7
 8548 0326 64697200 		.ascii	"dir\000"
 8549 032a 04       		.byte	0x4
 8550 032b E9       		.byte	0xe9
 8551 032c DC020000 		.4byte	0x2dc
 8552 0330 1C       		.byte	0x1c
 8553 0331 07       		.uleb128 0x7
 8554 0332 666E00   		.ascii	"fn\000"
 8555 0335 04       		.byte	0x4
 8556 0336 EA       		.byte	0xea
 8557 0337 3D030000 		.4byte	0x33d
 8558 033b 20       		.byte	0x20
 8559 033c 00       		.byte	0
 8560 033d 08       		.uleb128 0x8
 8561 033e A2000000 		.4byte	0xa2
 8562 0342 4D030000 		.4byte	0x34d
 8563 0346 0D       		.uleb128 0xd
 8564 0347 F4010000 		.4byte	0x1f4
 8565 034b 0B       		.byte	0xb
 8566 034c 00       		.byte	0
 8567 034d 0C       		.uleb128 0xc
 8568 034e 44495200 		.ascii	"DIR\000"
 8569 0352 04       		.byte	0x4
 8570 0353 F1       		.byte	0xf1
 8571 0354 ED020000 		.4byte	0x2ed
 8572 0358 0A       		.uleb128 0xa
 8573 0359 18       		.byte	0x18
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 292


 8574 035a 04       		.byte	0x4
 8575 035b F7       		.byte	0xf7
 8576 035c 9E030000 		.4byte	0x39e
 8577 0360 06       		.uleb128 0x6
 8578 0361 01010000 		.4byte	.LASF33
 8579 0365 04       		.byte	0x4
 8580 0366 F8       		.byte	0xf8
 8581 0367 E0000000 		.4byte	0xe0
 8582 036b 00       		.byte	0
 8583 036c 06       		.uleb128 0x6
 8584 036d 6A030000 		.4byte	.LASF53
 8585 0371 04       		.byte	0x4
 8586 0372 F9       		.byte	0xf9
 8587 0373 AD000000 		.4byte	0xad
 8588 0377 04       		.byte	0x4
 8589 0378 06       		.uleb128 0x6
 8590 0379 67020000 		.4byte	.LASF54
 8591 037d 04       		.byte	0x4
 8592 037e FA       		.byte	0xfa
 8593 037f AD000000 		.4byte	0xad
 8594 0383 06       		.byte	0x6
 8595 0384 06       		.uleb128 0x6
 8596 0385 C3060000 		.4byte	.LASF55
 8597 0389 04       		.byte	0x4
 8598 038a FB       		.byte	0xfb
 8599 038b A2000000 		.4byte	0xa2
 8600 038f 08       		.byte	0x8
 8601 0390 0E       		.uleb128 0xe
 8602 0391 2F030000 		.4byte	.LASF56
 8603 0395 04       		.byte	0x4
 8604 0396 0001     		.2byte	0x100
 8605 0398 9E030000 		.4byte	0x39e
 8606 039c 09       		.byte	0x9
 8607 039d 00       		.byte	0
 8608 039e 08       		.uleb128 0x8
 8609 039f CE000000 		.4byte	0xce
 8610 03a3 AE030000 		.4byte	0x3ae
 8611 03a7 0D       		.uleb128 0xd
 8612 03a8 F4010000 		.4byte	0x1f4
 8613 03ac 0C       		.byte	0xc
 8614 03ad 00       		.byte	0
 8615 03ae 0F       		.uleb128 0xf
 8616 03af DC060000 		.4byte	.LASF57
 8617 03b3 04       		.byte	0x4
 8618 03b4 0201     		.2byte	0x102
 8619 03b6 58030000 		.4byte	0x358
 8620 03ba 10       		.uleb128 0x10
 8621 03bb 01       		.byte	0x1
 8622 03bc 2C000000 		.4byte	0x2c
 8623 03c0 04       		.byte	0x4
 8624 03c1 1401     		.2byte	0x114
 8625 03c3 40040000 		.4byte	0x440
 8626 03c7 11       		.uleb128 0x11
 8627 03c8 0E060000 		.4byte	.LASF58
 8628 03cc 00       		.byte	0
 8629 03cd 11       		.uleb128 0x11
 8630 03ce EA020000 		.4byte	.LASF59
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 293


 8631 03d2 01       		.byte	0x1
 8632 03d3 11       		.uleb128 0x11
 8633 03d4 D6020000 		.4byte	.LASF60
 8634 03d8 02       		.byte	0x2
 8635 03d9 11       		.uleb128 0x11
 8636 03da A1070000 		.4byte	.LASF61
 8637 03de 03       		.byte	0x3
 8638 03df 11       		.uleb128 0x11
 8639 03e0 F3030000 		.4byte	.LASF62
 8640 03e4 04       		.byte	0x4
 8641 03e5 11       		.uleb128 0x11
 8642 03e6 38070000 		.4byte	.LASF63
 8643 03ea 05       		.byte	0x5
 8644 03eb 11       		.uleb128 0x11
 8645 03ec 6C060000 		.4byte	.LASF64
 8646 03f0 06       		.byte	0x6
 8647 03f1 11       		.uleb128 0x11
 8648 03f2 C0070000 		.4byte	.LASF65
 8649 03f6 07       		.byte	0x7
 8650 03f7 11       		.uleb128 0x11
 8651 03f8 8E010000 		.4byte	.LASF66
 8652 03fc 08       		.byte	0x8
 8653 03fd 11       		.uleb128 0x11
 8654 03fe 10010000 		.4byte	.LASF67
 8655 0402 09       		.byte	0x9
 8656 0403 11       		.uleb128 0x11
 8657 0404 3E030000 		.4byte	.LASF68
 8658 0408 0A       		.byte	0xa
 8659 0409 11       		.uleb128 0x11
 8660 040a EF040000 		.4byte	.LASF69
 8661 040e 0B       		.byte	0xb
 8662 040f 11       		.uleb128 0x11
 8663 0410 25040000 		.4byte	.LASF70
 8664 0414 0C       		.byte	0xc
 8665 0415 11       		.uleb128 0x11
 8666 0416 61010000 		.4byte	.LASF71
 8667 041a 0D       		.byte	0xd
 8668 041b 11       		.uleb128 0x11
 8669 041c 9C050000 		.4byte	.LASF72
 8670 0420 0E       		.byte	0xe
 8671 0421 11       		.uleb128 0x11
 8672 0422 D0030000 		.4byte	.LASF73
 8673 0426 0F       		.byte	0xf
 8674 0427 11       		.uleb128 0x11
 8675 0428 B6050000 		.4byte	.LASF74
 8676 042c 10       		.byte	0x10
 8677 042d 11       		.uleb128 0x11
 8678 042e 7B010000 		.4byte	.LASF75
 8679 0432 11       		.byte	0x11
 8680 0433 11       		.uleb128 0x11
 8681 0434 0A000000 		.4byte	.LASF76
 8682 0438 12       		.byte	0x12
 8683 0439 11       		.uleb128 0x11
 8684 043a EC000000 		.4byte	.LASF77
 8685 043e 13       		.byte	0x13
 8686 043f 00       		.byte	0
 8687 0440 0F       		.uleb128 0xf
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 294


 8688 0441 10070000 		.4byte	.LASF78
 8689 0445 04       		.byte	0x4
 8690 0446 2901     		.2byte	0x129
 8691 0448 BA030000 		.4byte	0x3ba
 8692 044c 03       		.uleb128 0x3
 8693 044d 31060000 		.4byte	.LASF79
 8694 0451 05       		.byte	0x5
 8695 0452 0F       		.byte	0xf
 8696 0453 A2000000 		.4byte	0xa2
 8697 0457 12       		.uleb128 0x12
 8698 0458 01       		.byte	0x1
 8699 0459 2C000000 		.4byte	0x2c
 8700 045d 05       		.byte	0x5
 8701 045e 12       		.byte	0x12
 8702 045f 82040000 		.4byte	0x482
 8703 0463 11       		.uleb128 0x11
 8704 0464 EC030000 		.4byte	.LASF80
 8705 0468 00       		.byte	0
 8706 0469 11       		.uleb128 0x11
 8707 046a 18070000 		.4byte	.LASF81
 8708 046e 01       		.byte	0x1
 8709 046f 11       		.uleb128 0x11
 8710 0470 00000000 		.4byte	.LASF82
 8711 0474 02       		.byte	0x2
 8712 0475 11       		.uleb128 0x11
 8713 0476 53000000 		.4byte	.LASF83
 8714 047a 03       		.byte	0x3
 8715 047b 11       		.uleb128 0x11
 8716 047c 41010000 		.4byte	.LASF84
 8717 0480 04       		.byte	0x4
 8718 0481 00       		.byte	0
 8719 0482 03       		.uleb128 0x3
 8720 0483 22070000 		.4byte	.LASF85
 8721 0487 06       		.byte	0x6
 8722 0488 28       		.byte	0x28
 8723 0489 8D040000 		.4byte	0x48d
 8724 048d 13       		.uleb128 0x13
 8725 048e B5010000 		.4byte	.LASF198
 8726 0492 04       		.byte	0x4
 8727 0493 07       		.byte	0x7
 8728 0494 00       		.byte	0
 8729 0495 A4040000 		.4byte	0x4a4
 8730 0499 14       		.uleb128 0x14
 8731 049a 5D060000 		.4byte	.LASF199
 8732 049e A4040000 		.4byte	0x4a4
 8733 04a2 00       		.byte	0
 8734 04a3 00       		.byte	0
 8735 04a4 15       		.uleb128 0x15
 8736 04a5 04       		.byte	0x4
 8737 04a6 03       		.uleb128 0x3
 8738 04a7 4B000000 		.4byte	.LASF86
 8739 04ab 06       		.byte	0x6
 8740 04ac 62       		.byte	0x62
 8741 04ad 82040000 		.4byte	0x482
 8742 04b1 16       		.uleb128 0x16
 8743 04b2 4C       		.byte	0x4c
 8744 04b3 01       		.byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 295


 8745 04b4 6419     		.2byte	0x1964
 8746 04b6 EE040000 		.4byte	0x4ee
 8747 04ba 17       		.uleb128 0x17
 8748 04bb 667000   		.ascii	"fp\000"
 8749 04be 01       		.byte	0x1
 8750 04bf 6519     		.2byte	0x1965
 8751 04c1 EE040000 		.4byte	0x4ee
 8752 04c5 00       		.byte	0
 8753 04c6 17       		.uleb128 0x17
 8754 04c7 69647800 		.ascii	"idx\000"
 8755 04cb 01       		.byte	0x1
 8756 04cc 6619     		.2byte	0x1966
 8757 04ce 73000000 		.4byte	0x73
 8758 04d2 04       		.byte	0x4
 8759 04d3 0E       		.uleb128 0xe
 8760 04d4 8B020000 		.4byte	.LASF87
 8761 04d8 01       		.byte	0x1
 8762 04d9 6619     		.2byte	0x1966
 8763 04db 73000000 		.4byte	0x73
 8764 04df 08       		.byte	0x8
 8765 04e0 17       		.uleb128 0x17
 8766 04e1 62756600 		.ascii	"buf\000"
 8767 04e5 01       		.byte	0x1
 8768 04e6 6D19     		.2byte	0x196d
 8769 04e8 F4040000 		.4byte	0x4f4
 8770 04ec 0C       		.byte	0xc
 8771 04ed 00       		.byte	0
 8772 04ee 0B       		.uleb128 0xb
 8773 04ef 04       		.byte	0x4
 8774 04f0 E2020000 		.4byte	0x2e2
 8775 04f4 08       		.uleb128 0x8
 8776 04f5 A2000000 		.4byte	0xa2
 8777 04f9 04050000 		.4byte	0x504
 8778 04fd 0D       		.uleb128 0xd
 8779 04fe F4010000 		.4byte	0x1f4
 8780 0502 3F       		.byte	0x3f
 8781 0503 00       		.byte	0
 8782 0504 0F       		.uleb128 0xf
 8783 0505 18020000 		.4byte	.LASF88
 8784 0509 01       		.byte	0x1
 8785 050a 6E19     		.2byte	0x196e
 8786 050c B1040000 		.4byte	0x4b1
 8787 0510 18       		.uleb128 0x18
 8788 0511 55060000 		.4byte	.LASF89
 8789 0515 01       		.byte	0x1
 8790 0516 6202     		.2byte	0x262
 8791 0518 AD000000 		.4byte	0xad
 8792 051c 00000000 		.4byte	.LFB0
 8793 0520 0A000000 		.4byte	.LFE0-.LFB0
 8794 0524 01       		.uleb128 0x1
 8795 0525 9C       		.byte	0x9c
 8796 0526 4A050000 		.4byte	0x54a
 8797 052a 19       		.uleb128 0x19
 8798 052b 70747200 		.ascii	"ptr\000"
 8799 052f 01       		.byte	0x1
 8800 0530 6202     		.2byte	0x262
 8801 0532 4A050000 		.4byte	0x54a
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 296


 8802 0536 00000000 		.4byte	.LLST0
 8803 053a 1A       		.uleb128 0x1a
 8804 053b 727600   		.ascii	"rv\000"
 8805 053e 01       		.byte	0x1
 8806 053f 6402     		.2byte	0x264
 8807 0541 AD000000 		.4byte	0xad
 8808 0545 21000000 		.4byte	.LLST1
 8809 0549 00       		.byte	0
 8810 054a 0B       		.uleb128 0xb
 8811 054b 04       		.byte	0x4
 8812 054c 50050000 		.4byte	0x550
 8813 0550 1B       		.uleb128 0x1b
 8814 0551 A2000000 		.4byte	0xa2
 8815 0555 18       		.uleb128 0x18
 8816 0556 93060000 		.4byte	.LASF90
 8817 055a 01       		.byte	0x1
 8818 055b 6B02     		.2byte	0x26b
 8819 055d B8000000 		.4byte	0xb8
 8820 0561 00000000 		.4byte	.LFB1
 8821 0565 16000000 		.4byte	.LFE1-.LFB1
 8822 0569 01       		.uleb128 0x1
 8823 056a 9C       		.byte	0x9c
 8824 056b 8F050000 		.4byte	0x58f
 8825 056f 19       		.uleb128 0x19
 8826 0570 70747200 		.ascii	"ptr\000"
 8827 0574 01       		.byte	0x1
 8828 0575 6B02     		.2byte	0x26b
 8829 0577 4A050000 		.4byte	0x54a
 8830 057b 63000000 		.4byte	.LLST2
 8831 057f 1A       		.uleb128 0x1a
 8832 0580 727600   		.ascii	"rv\000"
 8833 0583 01       		.byte	0x1
 8834 0584 6D02     		.2byte	0x26d
 8835 0586 B8000000 		.4byte	0xb8
 8836 058a 84000000 		.4byte	.LLST3
 8837 058e 00       		.byte	0
 8838 058f 1C       		.uleb128 0x1c
 8839 0590 D4060000 		.4byte	.LASF91
 8840 0594 01       		.byte	0x1
 8841 0595 8802     		.2byte	0x288
 8842 0597 00000000 		.4byte	.LFB2
 8843 059b 08000000 		.4byte	.LFE2-.LFB2
 8844 059f 01       		.uleb128 0x1
 8845 05a0 9C       		.byte	0x9c
 8846 05a1 C6050000 		.4byte	0x5c6
 8847 05a5 19       		.uleb128 0x19
 8848 05a6 70747200 		.ascii	"ptr\000"
 8849 05aa 01       		.byte	0x1
 8850 05ab 8802     		.2byte	0x288
 8851 05ad DC020000 		.4byte	0x2dc
 8852 05b1 BF000000 		.4byte	.LLST4
 8853 05b5 19       		.uleb128 0x19
 8854 05b6 76616C00 		.ascii	"val\000"
 8855 05ba 01       		.byte	0x1
 8856 05bb 8802     		.2byte	0x288
 8857 05bd AD000000 		.4byte	0xad
 8858 05c1 EC000000 		.4byte	.LLST5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 297


 8859 05c5 00       		.byte	0
 8860 05c6 1C       		.uleb128 0x1c
 8861 05c7 14040000 		.4byte	.LASF92
 8862 05cb 01       		.byte	0x1
 8863 05cc 8E02     		.2byte	0x28e
 8864 05ce 00000000 		.4byte	.LFB3
 8865 05d2 14000000 		.4byte	.LFE3-.LFB3
 8866 05d6 01       		.uleb128 0x1
 8867 05d7 9C       		.byte	0x9c
 8868 05d8 FD050000 		.4byte	0x5fd
 8869 05dc 19       		.uleb128 0x19
 8870 05dd 70747200 		.ascii	"ptr\000"
 8871 05e1 01       		.byte	0x1
 8872 05e2 8E02     		.2byte	0x28e
 8873 05e4 DC020000 		.4byte	0x2dc
 8874 05e8 0E010000 		.4byte	.LLST6
 8875 05ec 19       		.uleb128 0x19
 8876 05ed 76616C00 		.ascii	"val\000"
 8877 05f1 01       		.byte	0x1
 8878 05f2 8E02     		.2byte	0x28e
 8879 05f4 B8000000 		.4byte	0xb8
 8880 05f8 55010000 		.4byte	.LLST7
 8881 05fc 00       		.byte	0
 8882 05fd 1C       		.uleb128 0x1c
 8883 05fe A5060000 		.4byte	.LASF93
 8884 0602 01       		.byte	0x1
 8885 0603 AC02     		.2byte	0x2ac
 8886 0605 00000000 		.4byte	.LFB4
 8887 0609 12000000 		.4byte	.LFE4-.LFB4
 8888 060d 01       		.uleb128 0x1
 8889 060e 9C       		.byte	0x9c
 8890 060f 60060000 		.4byte	0x660
 8891 0613 19       		.uleb128 0x19
 8892 0614 64737400 		.ascii	"dst\000"
 8893 0618 01       		.byte	0x1
 8894 0619 AC02     		.2byte	0x2ac
 8895 061b A4040000 		.4byte	0x4a4
 8896 061f A0010000 		.4byte	.LLST8
 8897 0623 19       		.uleb128 0x19
 8898 0624 73726300 		.ascii	"src\000"
 8899 0628 01       		.byte	0x1
 8900 0629 AC02     		.2byte	0x2ac
 8901 062b 60060000 		.4byte	0x660
 8902 062f C1010000 		.4byte	.LLST9
 8903 0633 19       		.uleb128 0x19
 8904 0634 636E7400 		.ascii	"cnt\000"
 8905 0638 01       		.byte	0x1
 8906 0639 AC02     		.2byte	0x2ac
 8907 063b 97000000 		.4byte	0x97
 8908 063f E2010000 		.4byte	.LLST10
 8909 0643 1A       		.uleb128 0x1a
 8910 0644 6400     		.ascii	"d\000"
 8911 0646 01       		.byte	0x1
 8912 0647 AE02     		.2byte	0x2ae
 8913 0649 DC020000 		.4byte	0x2dc
 8914 064d 18020000 		.4byte	.LLST11
 8915 0651 1A       		.uleb128 0x1a
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 298


 8916 0652 7300     		.ascii	"s\000"
 8917 0654 01       		.byte	0x1
 8918 0655 AF02     		.2byte	0x2af
 8919 0657 4A050000 		.4byte	0x54a
 8920 065b 43020000 		.4byte	.LLST12
 8921 065f 00       		.byte	0
 8922 0660 0B       		.uleb128 0xb
 8923 0661 04       		.byte	0x4
 8924 0662 66060000 		.4byte	0x666
 8925 0666 1D       		.uleb128 0x1d
 8926 0667 1C       		.uleb128 0x1c
 8927 0668 A4030000 		.4byte	.LASF94
 8928 066c 01       		.byte	0x1
 8929 066d BA02     		.2byte	0x2ba
 8930 066f 00000000 		.4byte	.LFB5
 8931 0673 0A000000 		.4byte	.LFE5-.LFB5
 8932 0677 01       		.uleb128 0x1
 8933 0678 9C       		.byte	0x9c
 8934 0679 BB060000 		.4byte	0x6bb
 8935 067d 1E       		.uleb128 0x1e
 8936 067e 64737400 		.ascii	"dst\000"
 8937 0682 01       		.byte	0x1
 8938 0683 BA02     		.2byte	0x2ba
 8939 0685 A4040000 		.4byte	0x4a4
 8940 0689 04       		.uleb128 0x4
 8941 068a F3       		.byte	0xf3
 8942 068b 01       		.uleb128 0x1
 8943 068c 50       		.byte	0x50
 8944 068d 9F       		.byte	0x9f
 8945 068e 1E       		.uleb128 0x1e
 8946 068f 76616C00 		.ascii	"val\000"
 8947 0693 01       		.byte	0x1
 8948 0694 BA02     		.2byte	0x2ba
 8949 0696 73000000 		.4byte	0x73
 8950 069a 01       		.uleb128 0x1
 8951 069b 51       		.byte	0x51
 8952 069c 19       		.uleb128 0x19
 8953 069d 636E7400 		.ascii	"cnt\000"
 8954 06a1 01       		.byte	0x1
 8955 06a2 BA02     		.2byte	0x2ba
 8956 06a4 97000000 		.4byte	0x97
 8957 06a8 6E020000 		.4byte	.LLST13
 8958 06ac 1A       		.uleb128 0x1a
 8959 06ad 6400     		.ascii	"d\000"
 8960 06af 01       		.byte	0x1
 8961 06b0 BC02     		.2byte	0x2bc
 8962 06b2 DC020000 		.4byte	0x2dc
 8963 06b6 AA020000 		.4byte	.LLST14
 8964 06ba 00       		.byte	0
 8965 06bb 18       		.uleb128 0x18
 8966 06bc FE020000 		.4byte	.LASF95
 8967 06c0 01       		.byte	0x1
 8968 06c1 C502     		.2byte	0x2c5
 8969 06c3 73000000 		.4byte	0x73
 8970 06c7 00000000 		.4byte	.LFB6
 8971 06cb 1E000000 		.4byte	.LFE6-.LFB6
 8972 06cf 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 299


 8973 06d0 9C       		.byte	0x9c
 8974 06d1 2E070000 		.4byte	0x72e
 8975 06d5 19       		.uleb128 0x19
 8976 06d6 64737400 		.ascii	"dst\000"
 8977 06da 01       		.byte	0x1
 8978 06db C502     		.2byte	0x2c5
 8979 06dd 60060000 		.4byte	0x660
 8980 06e1 CD020000 		.4byte	.LLST15
 8981 06e5 19       		.uleb128 0x19
 8982 06e6 73726300 		.ascii	"src\000"
 8983 06ea 01       		.byte	0x1
 8984 06eb C502     		.2byte	0x2c5
 8985 06ed 60060000 		.4byte	0x660
 8986 06f1 EE020000 		.4byte	.LLST16
 8987 06f5 19       		.uleb128 0x19
 8988 06f6 636E7400 		.ascii	"cnt\000"
 8989 06fa 01       		.byte	0x1
 8990 06fb C502     		.2byte	0x2c5
 8991 06fd 97000000 		.4byte	0x97
 8992 0701 0F030000 		.4byte	.LLST17
 8993 0705 1A       		.uleb128 0x1a
 8994 0706 6400     		.ascii	"d\000"
 8995 0708 01       		.byte	0x1
 8996 0709 C702     		.2byte	0x2c7
 8997 070b 4A050000 		.4byte	0x54a
 8998 070f 3A030000 		.4byte	.LLST18
 8999 0713 1A       		.uleb128 0x1a
 9000 0714 7300     		.ascii	"s\000"
 9001 0716 01       		.byte	0x1
 9002 0717 C702     		.2byte	0x2c7
 9003 0719 4A050000 		.4byte	0x54a
 9004 071d 58030000 		.4byte	.LLST19
 9005 0721 1F       		.uleb128 0x1f
 9006 0722 7200     		.ascii	"r\000"
 9007 0724 01       		.byte	0x1
 9008 0725 C802     		.2byte	0x2c8
 9009 0727 73000000 		.4byte	0x73
 9010 072b 01       		.uleb128 0x1
 9011 072c 53       		.byte	0x53
 9012 072d 00       		.byte	0
 9013 072e 18       		.uleb128 0x18
 9014 072f 37000000 		.4byte	.LASF96
 9015 0733 01       		.byte	0x1
 9016 0734 D302     		.2byte	0x2d3
 9017 0736 73000000 		.4byte	0x73
 9018 073a 00000000 		.4byte	.LFB7
 9019 073e 10000000 		.4byte	.LFE7-.LFB7
 9020 0742 01       		.uleb128 0x1
 9021 0743 9C       		.byte	0x9c
 9022 0744 67070000 		.4byte	0x767
 9023 0748 19       		.uleb128 0x19
 9024 0749 73747200 		.ascii	"str\000"
 9025 074d 01       		.byte	0x1
 9026 074e D302     		.2byte	0x2d3
 9027 0750 67070000 		.4byte	0x767
 9028 0754 83030000 		.4byte	.LLST20
 9029 0758 1E       		.uleb128 0x1e
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 300


 9030 0759 63687200 		.ascii	"chr\000"
 9031 075d 01       		.byte	0x1
 9032 075e D302     		.2byte	0x2d3
 9033 0760 73000000 		.4byte	0x73
 9034 0764 01       		.uleb128 0x1
 9035 0765 51       		.byte	0x51
 9036 0766 00       		.byte	0
 9037 0767 0B       		.uleb128 0xb
 9038 0768 04       		.byte	0x4
 9039 0769 6D070000 		.4byte	0x76d
 9040 076d 1B       		.uleb128 0x1b
 9041 076e D9000000 		.4byte	0xd9
 9042 0772 18       		.uleb128 0x18
 9043 0773 CD040000 		.4byte	.LASF97
 9044 0777 01       		.byte	0x1
 9045 0778 DB02     		.2byte	0x2db
 9046 077a 73000000 		.4byte	0x73
 9047 077e 00000000 		.4byte	.LFB8
 9048 0782 24000000 		.4byte	.LFE8-.LFB8
 9049 0786 01       		.uleb128 0x1
 9050 0787 9C       		.byte	0x9c
 9051 0788 9B070000 		.4byte	0x79b
 9052 078c 19       		.uleb128 0x19
 9053 078d 6300     		.ascii	"c\000"
 9054 078f 01       		.byte	0x1
 9055 0790 DB02     		.2byte	0x2db
 9056 0792 A2000000 		.4byte	0xa2
 9057 0796 A1030000 		.4byte	.LLST21
 9058 079a 00       		.byte	0
 9059 079b 18       		.uleb128 0x18
 9060 079c 45060000 		.4byte	.LASF98
 9061 07a0 01       		.byte	0x1
 9062 07a1 EF02     		.2byte	0x2ef
 9063 07a3 73000000 		.4byte	0x73
 9064 07a7 00000000 		.4byte	.LFB9
 9065 07ab 26000000 		.4byte	.LFE9-.LFB9
 9066 07af 01       		.uleb128 0x1
 9067 07b0 9C       		.byte	0x9c
 9068 07b1 C4070000 		.4byte	0x7c4
 9069 07b5 19       		.uleb128 0x19
 9070 07b6 6300     		.ascii	"c\000"
 9071 07b8 01       		.byte	0x1
 9072 07b9 EF02     		.2byte	0x2ef
 9073 07bb A2000000 		.4byte	0xa2
 9074 07bf 26040000 		.4byte	.LLST22
 9075 07c3 00       		.byte	0
 9076 07c4 18       		.uleb128 0x18
 9077 07c5 32020000 		.4byte	.LASF99
 9078 07c9 01       		.byte	0x1
 9079 07ca 8A04     		.2byte	0x48a
 9080 07cc EB000000 		.4byte	0xeb
 9081 07d0 00000000 		.4byte	.LFB13
 9082 07d4 18000000 		.4byte	.LFE13-.LFB13
 9083 07d8 01       		.uleb128 0x1
 9084 07d9 9C       		.byte	0x9c
 9085 07da FE070000 		.4byte	0x7fe
 9086 07de 19       		.uleb128 0x19
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 301


 9087 07df 667300   		.ascii	"fs\000"
 9088 07e2 01       		.byte	0x1
 9089 07e3 8B04     		.2byte	0x48b
 9090 07e5 55020000 		.4byte	0x255
 9091 07e9 AB040000 		.4byte	.LLST23
 9092 07ed 20       		.uleb128 0x20
 9093 07ee CA020000 		.4byte	.LASF100
 9094 07f2 01       		.byte	0x1
 9095 07f3 8C04     		.2byte	0x48c
 9096 07f5 B8000000 		.4byte	0xb8
 9097 07f9 E5040000 		.4byte	.LLST24
 9098 07fd 00       		.byte	0
 9099 07fe 18       		.uleb128 0x18
 9100 07ff D8050000 		.4byte	.LASF101
 9101 0803 01       		.byte	0x1
 9102 0804 4807     		.2byte	0x748
 9103 0806 B8000000 		.4byte	0xb8
 9104 080a 00000000 		.4byte	.LFB22
 9105 080e 24000000 		.4byte	.LFE22-.LFB22
 9106 0812 01       		.uleb128 0x1
 9107 0813 9C       		.byte	0x9c
 9108 0814 6B080000 		.4byte	0x86b
 9109 0818 19       		.uleb128 0x19
 9110 0819 667300   		.ascii	"fs\000"
 9111 081c 01       		.byte	0x1
 9112 081d 4907     		.2byte	0x749
 9113 081f 55020000 		.4byte	0x255
 9114 0823 03050000 		.4byte	.LLST25
 9115 0827 19       		.uleb128 0x19
 9116 0828 64697200 		.ascii	"dir\000"
 9117 082c 01       		.byte	0x1
 9118 082d 4A07     		.2byte	0x74a
 9119 082f 4A050000 		.4byte	0x54a
 9120 0833 21050000 		.4byte	.LLST26
 9121 0837 1A       		.uleb128 0x1a
 9122 0838 636C00   		.ascii	"cl\000"
 9123 083b 01       		.byte	0x1
 9124 083c 4D07     		.2byte	0x74d
 9125 083e B8000000 		.4byte	0xb8
 9126 0842 3F050000 		.4byte	.LLST27
 9127 0846 21       		.uleb128 0x21
 9128 0847 0E000000 		.4byte	.LVL67
 9129 084b 10050000 		.4byte	0x510
 9130 084f 5A080000 		.4byte	0x85a
 9131 0853 22       		.uleb128 0x22
 9132 0854 01       		.uleb128 0x1
 9133 0855 50       		.byte	0x50
 9134 0856 02       		.uleb128 0x2
 9135 0857 75       		.byte	0x75
 9136 0858 1A       		.sleb128 26
 9137 0859 00       		.byte	0
 9138 085a 23       		.uleb128 0x23
 9139 085b 1E000000 		.4byte	.LVL70
 9140 085f 10050000 		.4byte	0x510
 9141 0863 22       		.uleb128 0x22
 9142 0864 01       		.uleb128 0x1
 9143 0865 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 302


 9144 0866 02       		.uleb128 0x2
 9145 0867 75       		.byte	0x75
 9146 0868 14       		.sleb128 20
 9147 0869 00       		.byte	0
 9148 086a 00       		.byte	0
 9149 086b 1C       		.uleb128 0x1c
 9150 086c 58010000 		.4byte	.LASF102
 9151 0870 01       		.byte	0x1
 9152 0871 5907     		.2byte	0x759
 9153 0873 00000000 		.4byte	.LFB23
 9154 0877 24000000 		.4byte	.LFE23-.LFB23
 9155 087b 01       		.uleb128 0x1
 9156 087c 9C       		.byte	0x9c
 9157 087d E2080000 		.4byte	0x8e2
 9158 0881 19       		.uleb128 0x19
 9159 0882 667300   		.ascii	"fs\000"
 9160 0885 01       		.byte	0x1
 9161 0886 5A07     		.2byte	0x75a
 9162 0888 55020000 		.4byte	0x255
 9163 088c 68050000 		.4byte	.LLST28
 9164 0890 19       		.uleb128 0x19
 9165 0891 64697200 		.ascii	"dir\000"
 9166 0895 01       		.byte	0x1
 9167 0896 5B07     		.2byte	0x75b
 9168 0898 DC020000 		.4byte	0x2dc
 9169 089c 86050000 		.4byte	.LLST29
 9170 08a0 19       		.uleb128 0x19
 9171 08a1 636C00   		.ascii	"cl\000"
 9172 08a4 01       		.byte	0x1
 9173 08a5 5C07     		.2byte	0x75c
 9174 08a7 B8000000 		.4byte	0xb8
 9175 08ab A4050000 		.4byte	.LLST30
 9176 08af 21       		.uleb128 0x21
 9177 08b0 12000000 		.4byte	.LVL75
 9178 08b4 8F050000 		.4byte	0x58f
 9179 08b8 C9080000 		.4byte	0x8c9
 9180 08bc 22       		.uleb128 0x22
 9181 08bd 01       		.uleb128 0x1
 9182 08be 50       		.byte	0x50
 9183 08bf 02       		.uleb128 0x2
 9184 08c0 74       		.byte	0x74
 9185 08c1 1A       		.sleb128 26
 9186 08c2 22       		.uleb128 0x22
 9187 08c3 01       		.uleb128 0x1
 9188 08c4 51       		.byte	0x51
 9189 08c5 02       		.uleb128 0x2
 9190 08c6 75       		.byte	0x75
 9191 08c7 00       		.sleb128 0
 9192 08c8 00       		.byte	0
 9193 08c9 23       		.uleb128 0x23
 9194 08ca 22000000 		.4byte	.LVL76
 9195 08ce 8F050000 		.4byte	0x58f
 9196 08d2 22       		.uleb128 0x22
 9197 08d3 01       		.uleb128 0x1
 9198 08d4 50       		.byte	0x50
 9199 08d5 02       		.uleb128 0x2
 9200 08d6 74       		.byte	0x74
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 303


 9201 08d7 14       		.sleb128 20
 9202 08d8 22       		.uleb128 0x22
 9203 08d9 01       		.uleb128 0x1
 9204 08da 51       		.byte	0x51
 9205 08db 04       		.uleb128 0x4
 9206 08dc 75       		.byte	0x75
 9207 08dd 00       		.sleb128 0
 9208 08de 40       		.byte	0x40
 9209 08df 25       		.byte	0x25
 9210 08e0 00       		.byte	0
 9211 08e1 00       		.byte	0
 9212 08e2 1C       		.uleb128 0x1c
 9213 08e3 B5030000 		.4byte	.LASF103
 9214 08e7 01       		.byte	0x1
 9215 08e8 730A     		.2byte	0xa73
 9216 08ea 00000000 		.4byte	.LFB28
 9217 08ee 6A000000 		.4byte	.LFE28-.LFB28
 9218 08f2 01       		.uleb128 0x1
 9219 08f3 9C       		.byte	0x9c
 9220 08f4 5F090000 		.4byte	0x95f
 9221 08f8 19       		.uleb128 0x19
 9222 08f9 647000   		.ascii	"dp\000"
 9223 08fc 01       		.byte	0x1
 9224 08fd 740A     		.2byte	0xa74
 9225 08ff 5F090000 		.4byte	0x95f
 9226 0903 C2050000 		.4byte	.LLST31
 9227 0907 19       		.uleb128 0x19
 9228 0908 666E6F00 		.ascii	"fno\000"
 9229 090c 01       		.byte	0x1
 9230 090d 750A     		.2byte	0xa75
 9231 090f 65090000 		.4byte	0x965
 9232 0913 EB050000 		.4byte	.LLST32
 9233 0917 1A       		.uleb128 0x1a
 9234 0918 736900   		.ascii	"si\000"
 9235 091b 01       		.byte	0x1
 9236 091c 780A     		.2byte	0xa78
 9237 091e 97000000 		.4byte	0x97
 9238 0922 14060000 		.4byte	.LLST33
 9239 0926 1A       		.uleb128 0x1a
 9240 0927 646900   		.ascii	"di\000"
 9241 092a 01       		.byte	0x1
 9242 092b 780A     		.2byte	0xa78
 9243 092d 97000000 		.4byte	0x97
 9244 0931 3D060000 		.4byte	.LLST34
 9245 0935 1A       		.uleb128 0x1a
 9246 0936 6300     		.ascii	"c\000"
 9247 0938 01       		.byte	0x1
 9248 0939 7E0A     		.2byte	0xa7e
 9249 093b CE000000 		.4byte	0xce
 9250 093f 68060000 		.4byte	.LLST35
 9251 0943 24       		.uleb128 0x24
 9252 0944 50000000 		.4byte	.LVL89
 9253 0948 55050000 		.4byte	0x555
 9254 094c 24       		.uleb128 0x24
 9255 094d 5A000000 		.4byte	.LVL90
 9256 0951 10050000 		.4byte	0x510
 9257 0955 24       		.uleb128 0x24
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 304


 9258 0956 64000000 		.4byte	.LVL91
 9259 095a 10050000 		.4byte	0x510
 9260 095e 00       		.byte	0
 9261 095f 0B       		.uleb128 0xb
 9262 0960 04       		.byte	0x4
 9263 0961 4D030000 		.4byte	0x34d
 9264 0965 0B       		.uleb128 0xb
 9265 0966 04       		.byte	0x4
 9266 0967 AE030000 		.4byte	0x3ae
 9267 096b 18       		.uleb128 0x18
 9268 096c F7050000 		.4byte	.LASF104
 9269 0970 01       		.byte	0x1
 9270 0971 2B0B     		.2byte	0xb2b
 9271 0973 40040000 		.4byte	0x440
 9272 0977 00000000 		.4byte	.LFB29
 9273 097b 48010000 		.4byte	.LFE29-.LFB29
 9274 097f 01       		.uleb128 0x1
 9275 0980 9C       		.byte	0x9c
 9276 0981 6B0A0000 		.4byte	0xa6b
 9277 0985 19       		.uleb128 0x19
 9278 0986 647000   		.ascii	"dp\000"
 9279 0989 01       		.byte	0x1
 9280 098a 2C0B     		.2byte	0xb2c
 9281 098c 5F090000 		.4byte	0x95f
 9282 0990 7B060000 		.4byte	.LLST36
 9283 0994 20       		.uleb128 0x20
 9284 0995 68000000 		.4byte	.LASF105
 9285 0999 01       		.byte	0x1
 9286 099a 2D0B     		.2byte	0xb2d
 9287 099c 6B0A0000 		.4byte	0xa6b
 9288 09a0 A6060000 		.4byte	.LLST37
 9289 09a4 1A       		.uleb128 0x1a
 9290 09a5 6300     		.ascii	"c\000"
 9291 09a7 01       		.byte	0x1
 9292 09a8 AE0B     		.2byte	0xbae
 9293 09aa A2000000 		.4byte	0xa2
 9294 09ae D2060000 		.4byte	.LLST38
 9295 09b2 1A       		.uleb128 0x1a
 9296 09b3 6400     		.ascii	"d\000"
 9297 09b5 01       		.byte	0x1
 9298 09b6 AE0B     		.2byte	0xbae
 9299 09b8 A2000000 		.4byte	0xa2
 9300 09bc 54070000 		.4byte	.LLST39
 9301 09c0 1A       		.uleb128 0x1a
 9302 09c1 73666E00 		.ascii	"sfn\000"
 9303 09c5 01       		.byte	0x1
 9304 09c6 AE0B     		.2byte	0xbae
 9305 09c8 DC020000 		.4byte	0x2dc
 9306 09cc 72070000 		.4byte	.LLST40
 9307 09d0 1A       		.uleb128 0x1a
 9308 09d1 6E6900   		.ascii	"ni\000"
 9309 09d4 01       		.byte	0x1
 9310 09d5 AF0B     		.2byte	0xbaf
 9311 09d7 97000000 		.4byte	0x97
 9312 09db 95070000 		.4byte	.LLST41
 9313 09df 1A       		.uleb128 0x1a
 9314 09e0 736900   		.ascii	"si\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 305


 9315 09e3 01       		.byte	0x1
 9316 09e4 AF0B     		.2byte	0xbaf
 9317 09e6 97000000 		.4byte	0x97
 9318 09ea D6070000 		.4byte	.LLST42
 9319 09ee 1A       		.uleb128 0x1a
 9320 09ef 6900     		.ascii	"i\000"
 9321 09f1 01       		.byte	0x1
 9322 09f2 AF0B     		.2byte	0xbaf
 9323 09f4 97000000 		.4byte	0x97
 9324 09f8 64080000 		.4byte	.LLST43
 9325 09fc 1A       		.uleb128 0x1a
 9326 09fd 7000     		.ascii	"p\000"
 9327 09ff 01       		.byte	0x1
 9328 0a00 B00B     		.2byte	0xbb0
 9329 0a02 67070000 		.4byte	0x767
 9330 0a06 0E090000 		.4byte	.LLST44
 9331 0a0a 21       		.uleb128 0x21
 9332 0a0b 1A000000 		.4byte	.LVL98
 9333 0a0f 67060000 		.4byte	0x667
 9334 0a13 290A0000 		.4byte	0xa29
 9335 0a17 22       		.uleb128 0x22
 9336 0a18 01       		.uleb128 0x1
 9337 0a19 50       		.byte	0x50
 9338 0a1a 02       		.uleb128 0x2
 9339 0a1b 79       		.byte	0x79
 9340 0a1c 00       		.sleb128 0
 9341 0a1d 22       		.uleb128 0x22
 9342 0a1e 01       		.uleb128 0x1
 9343 0a1f 51       		.byte	0x51
 9344 0a20 02       		.uleb128 0x2
 9345 0a21 08       		.byte	0x8
 9346 0a22 20       		.byte	0x20
 9347 0a23 22       		.uleb128 0x22
 9348 0a24 01       		.uleb128 0x1
 9349 0a25 52       		.byte	0x52
 9350 0a26 01       		.uleb128 0x1
 9351 0a27 3B       		.byte	0x3b
 9352 0a28 00       		.byte	0
 9353 0a29 21       		.uleb128 0x21
 9354 0a2a AE000000 		.4byte	.LVL119
 9355 0a2e 72070000 		.4byte	0x772
 9356 0a32 3D0A0000 		.4byte	0xa3d
 9357 0a36 22       		.uleb128 0x22
 9358 0a37 01       		.uleb128 0x1
 9359 0a38 50       		.byte	0x50
 9360 0a39 02       		.uleb128 0x2
 9361 0a3a 74       		.byte	0x74
 9362 0a3b 00       		.sleb128 0
 9363 0a3c 00       		.byte	0
 9364 0a3d 21       		.uleb128 0x21
 9365 0a3e BC000000 		.4byte	.LVL122
 9366 0a42 9B070000 		.4byte	0x79b
 9367 0a46 510A0000 		.4byte	0xa51
 9368 0a4a 22       		.uleb128 0x22
 9369 0a4b 01       		.uleb128 0x1
 9370 0a4c 50       		.byte	0x50
 9371 0a4d 02       		.uleb128 0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 306


 9372 0a4e 77       		.byte	0x77
 9373 0a4f 00       		.sleb128 0
 9374 0a50 00       		.byte	0
 9375 0a51 23       		.uleb128 0x23
 9376 0a52 DC000000 		.4byte	.LVL127
 9377 0a56 2E070000 		.4byte	0x72e
 9378 0a5a 22       		.uleb128 0x22
 9379 0a5b 01       		.uleb128 0x1
 9380 0a5c 50       		.byte	0x50
 9381 0a5d 05       		.uleb128 0x5
 9382 0a5e 03       		.byte	0x3
 9383 0a5f 00000000 		.4byte	.LC0
 9384 0a63 22       		.uleb128 0x22
 9385 0a64 01       		.uleb128 0x1
 9386 0a65 51       		.byte	0x51
 9387 0a66 02       		.uleb128 0x2
 9388 0a67 74       		.byte	0x74
 9389 0a68 00       		.sleb128 0
 9390 0a69 00       		.byte	0
 9391 0a6a 00       		.byte	0
 9392 0a6b 0B       		.uleb128 0xb
 9393 0a6c 04       		.byte	0x4
 9394 0a6d 710A0000 		.4byte	0xa71
 9395 0a71 0B       		.uleb128 0xb
 9396 0a72 04       		.byte	0x4
 9397 0a73 770A0000 		.4byte	0xa77
 9398 0a77 1B       		.uleb128 0x1b
 9399 0a78 CE000000 		.4byte	0xce
 9400 0a7c 18       		.uleb128 0x18
 9401 0a7d 48040000 		.4byte	.LASF106
 9402 0a81 01       		.byte	0x1
 9403 0a82 4B0C     		.2byte	0xc4b
 9404 0a84 73000000 		.4byte	0x73
 9405 0a88 00000000 		.4byte	.LFB31
 9406 0a8c 58000000 		.4byte	.LFE31-.LFB31
 9407 0a90 01       		.uleb128 0x1
 9408 0a91 9C       		.byte	0x9c
 9409 0a92 F20A0000 		.4byte	0xaf2
 9410 0a96 20       		.uleb128 0x20
 9411 0a97 68000000 		.4byte	.LASF105
 9412 0a9b 01       		.byte	0x1
 9413 0a9c 4C0C     		.2byte	0xc4c
 9414 0a9e 6B0A0000 		.4byte	0xa6b
 9415 0aa2 37090000 		.4byte	.LLST45
 9416 0aa6 1A       		.uleb128 0x1a
 9417 0aa7 747000   		.ascii	"tp\000"
 9418 0aaa 01       		.byte	0x1
 9419 0aab 4F0C     		.2byte	0xc4f
 9420 0aad 710A0000 		.4byte	0xa71
 9421 0ab1 A3090000 		.4byte	.LLST46
 9422 0ab5 1A       		.uleb128 0x1a
 9423 0ab6 747400   		.ascii	"tt\000"
 9424 0ab9 01       		.byte	0x1
 9425 0aba 4F0C     		.2byte	0xc4f
 9426 0abc 710A0000 		.4byte	0xa71
 9427 0ac0 F0090000 		.4byte	.LLST47
 9428 0ac4 1A       		.uleb128 0x1a
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 307


 9429 0ac5 746300   		.ascii	"tc\000"
 9430 0ac8 01       		.byte	0x1
 9431 0ac9 500C     		.2byte	0xc50
 9432 0acb CE000000 		.4byte	0xce
 9433 0acf 2F0A0000 		.4byte	.LLST48
 9434 0ad3 1A       		.uleb128 0x1a
 9435 0ad4 6900     		.ascii	"i\000"
 9436 0ad6 01       		.byte	0x1
 9437 0ad7 510C     		.2byte	0xc51
 9438 0ad9 73000000 		.4byte	0x73
 9439 0add 710A0000 		.4byte	.LLST49
 9440 0ae1 1A       		.uleb128 0x1a
 9441 0ae2 766F6C00 		.ascii	"vol\000"
 9442 0ae6 01       		.byte	0x1
 9443 0ae7 510C     		.2byte	0xc51
 9444 0ae9 73000000 		.4byte	0x73
 9445 0aed B20A0000 		.4byte	.LLST50
 9446 0af1 00       		.byte	0
 9447 0af2 1C       		.uleb128 0x1c
 9448 0af3 51020000 		.4byte	.LASF107
 9449 0af7 01       		.byte	0x1
 9450 0af8 031A     		.2byte	0x1a03
 9451 0afa 00000000 		.4byte	.LFB59
 9452 0afe 12000000 		.4byte	.LFE59-.LFB59
 9453 0b02 01       		.uleb128 0x1
 9454 0b03 9C       		.byte	0x9c
 9455 0b04 420B0000 		.4byte	0xb42
 9456 0b08 19       		.uleb128 0x19
 9457 0b09 706200   		.ascii	"pb\000"
 9458 0b0c 01       		.byte	0x1
 9459 0b0d 031A     		.2byte	0x1a03
 9460 0b0f 420B0000 		.4byte	0xb42
 9461 0b13 EC0A0000 		.4byte	.LLST51
 9462 0b17 19       		.uleb128 0x19
 9463 0b18 667000   		.ascii	"fp\000"
 9464 0b1b 01       		.byte	0x1
 9465 0b1c 031A     		.2byte	0x1a03
 9466 0b1e EE040000 		.4byte	0x4ee
 9467 0b22 0A0B0000 		.4byte	.LLST52
 9468 0b26 23       		.uleb128 0x23
 9469 0b27 0E000000 		.4byte	.LVL164
 9470 0b2b 67060000 		.4byte	0x667
 9471 0b2f 22       		.uleb128 0x22
 9472 0b30 01       		.uleb128 0x1
 9473 0b31 50       		.byte	0x50
 9474 0b32 02       		.uleb128 0x2
 9475 0b33 74       		.byte	0x74
 9476 0b34 00       		.sleb128 0
 9477 0b35 22       		.uleb128 0x22
 9478 0b36 01       		.uleb128 0x1
 9479 0b37 51       		.byte	0x51
 9480 0b38 01       		.uleb128 0x1
 9481 0b39 30       		.byte	0x30
 9482 0b3a 22       		.uleb128 0x22
 9483 0b3b 01       		.uleb128 0x1
 9484 0b3c 52       		.byte	0x52
 9485 0b3d 02       		.uleb128 0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 308


 9486 0b3e 08       		.byte	0x8
 9487 0b3f 4C       		.byte	0x4c
 9488 0b40 00       		.byte	0
 9489 0b41 00       		.byte	0
 9490 0b42 0B       		.uleb128 0xb
 9491 0b43 04       		.byte	0x4
 9492 0b44 04050000 		.4byte	0x504
 9493 0b48 18       		.uleb128 0x18
 9494 0b49 8E050000 		.4byte	.LASF108
 9495 0b4d 01       		.byte	0x1
 9496 0b4e 0F0E     		.2byte	0xe0f
 9497 0b50 40040000 		.4byte	0x440
 9498 0b54 00000000 		.4byte	.LFB35
 9499 0b58 46000000 		.4byte	.LFE35-.LFB35
 9500 0b5c 01       		.uleb128 0x1
 9501 0b5d 9C       		.byte	0x9c
 9502 0b5e 9C0B0000 		.4byte	0xb9c
 9503 0b62 19       		.uleb128 0x19
 9504 0b63 6F626A00 		.ascii	"obj\000"
 9505 0b67 01       		.byte	0x1
 9506 0b68 100E     		.2byte	0xe10
 9507 0b6a 9C0B0000 		.4byte	0xb9c
 9508 0b6e 280B0000 		.4byte	.LLST53
 9509 0b72 19       		.uleb128 0x19
 9510 0b73 72667300 		.ascii	"rfs\000"
 9511 0b77 01       		.byte	0x1
 9512 0b78 110E     		.2byte	0xe11
 9513 0b7a A20B0000 		.4byte	0xba2
 9514 0b7e 9E0B0000 		.4byte	.LLST54
 9515 0b82 1A       		.uleb128 0x1a
 9516 0b83 72657300 		.ascii	"res\000"
 9517 0b87 01       		.byte	0x1
 9518 0b88 140E     		.2byte	0xe14
 9519 0b8a 40040000 		.4byte	0x440
 9520 0b8e D20B0000 		.4byte	.LLST55
 9521 0b92 24       		.uleb128 0x24
 9522 0b93 1E000000 		.4byte	.LVL169
 9523 0b97 AD360000 		.4byte	0x36ad
 9524 0b9b 00       		.byte	0
 9525 0b9c 0B       		.uleb128 0xb
 9526 0b9d 04       		.byte	0x4
 9527 0b9e 5B020000 		.4byte	0x25b
 9528 0ba2 0B       		.uleb128 0xb
 9529 0ba3 04       		.byte	0x4
 9530 0ba4 55020000 		.4byte	0x255
 9531 0ba8 18       		.uleb128 0x18
 9532 0ba9 C6010000 		.4byte	.LASF109
 9533 0bad 01       		.byte	0x1
 9534 0bae 3004     		.2byte	0x430
 9535 0bb0 40040000 		.4byte	0x440
 9536 0bb4 00000000 		.4byte	.LFB10
 9537 0bb8 50000000 		.4byte	.LFE10-.LFB10
 9538 0bbc 01       		.uleb128 0x1
 9539 0bbd 9C       		.byte	0x9c
 9540 0bbe 100C0000 		.4byte	0xc10
 9541 0bc2 19       		.uleb128 0x19
 9542 0bc3 667300   		.ascii	"fs\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 309


 9543 0bc6 01       		.byte	0x1
 9544 0bc7 3104     		.2byte	0x431
 9545 0bc9 55020000 		.4byte	0x255
 9546 0bcd F10B0000 		.4byte	.LLST56
 9547 0bd1 1A       		.uleb128 0x1a
 9548 0bd2 72657300 		.ascii	"res\000"
 9549 0bd6 01       		.byte	0x1
 9550 0bd7 3404     		.2byte	0x434
 9551 0bd9 40040000 		.4byte	0x440
 9552 0bdd 330C0000 		.4byte	.LLST57
 9553 0be1 21       		.uleb128 0x21
 9554 0be2 18000000 		.4byte	.LVL182
 9555 0be6 B8360000 		.4byte	0x36b8
 9556 0bea FA0B0000 		.4byte	0xbfa
 9557 0bee 22       		.uleb128 0x22
 9558 0bef 01       		.uleb128 0x1
 9559 0bf0 51       		.byte	0x51
 9560 0bf1 02       		.uleb128 0x2
 9561 0bf2 75       		.byte	0x75
 9562 0bf3 00       		.sleb128 0
 9563 0bf4 22       		.uleb128 0x22
 9564 0bf5 01       		.uleb128 0x1
 9565 0bf6 53       		.byte	0x53
 9566 0bf7 01       		.uleb128 0x1
 9567 0bf8 31       		.byte	0x31
 9568 0bf9 00       		.byte	0
 9569 0bfa 23       		.uleb128 0x23
 9570 0bfb 3C000000 		.4byte	.LVL183
 9571 0bff B8360000 		.4byte	0x36b8
 9572 0c03 22       		.uleb128 0x22
 9573 0c04 01       		.uleb128 0x1
 9574 0c05 51       		.byte	0x51
 9575 0c06 02       		.uleb128 0x2
 9576 0c07 75       		.byte	0x75
 9577 0c08 00       		.sleb128 0
 9578 0c09 22       		.uleb128 0x22
 9579 0c0a 01       		.uleb128 0x1
 9580 0c0b 53       		.byte	0x53
 9581 0c0c 01       		.uleb128 0x1
 9582 0c0d 31       		.byte	0x31
 9583 0c0e 00       		.byte	0
 9584 0c0f 00       		.byte	0
 9585 0c10 18       		.uleb128 0x18
 9586 0c11 87060000 		.4byte	.LASF110
 9587 0c15 01       		.byte	0x1
 9588 0c16 4604     		.2byte	0x446
 9589 0c18 40040000 		.4byte	0x440
 9590 0c1c 00000000 		.4byte	.LFB11
 9591 0c20 34000000 		.4byte	.LFE11-.LFB11
 9592 0c24 01       		.uleb128 0x1
 9593 0c25 9C       		.byte	0x9c
 9594 0c26 890C0000 		.4byte	0xc89
 9595 0c2a 19       		.uleb128 0x19
 9596 0c2b 667300   		.ascii	"fs\000"
 9597 0c2e 01       		.byte	0x1
 9598 0c2f 4704     		.2byte	0x447
 9599 0c31 55020000 		.4byte	0x255
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 310


 9600 0c35 520C0000 		.4byte	.LLST58
 9601 0c39 20       		.uleb128 0x20
 9602 0c3a A6000000 		.4byte	.LASF49
 9603 0c3e 01       		.byte	0x1
 9604 0c3f 4804     		.2byte	0x448
 9605 0c41 EB000000 		.4byte	0xeb
 9606 0c45 890C0000 		.4byte	.LLST59
 9607 0c49 1A       		.uleb128 0x1a
 9608 0c4a 72657300 		.ascii	"res\000"
 9609 0c4e 01       		.byte	0x1
 9610 0c4f 4B04     		.2byte	0x44b
 9611 0c51 40040000 		.4byte	0x440
 9612 0c55 B20C0000 		.4byte	.LLST60
 9613 0c59 21       		.uleb128 0x21
 9614 0c5a 10000000 		.4byte	.LVL192
 9615 0c5e A80B0000 		.4byte	0xba8
 9616 0c62 6D0C0000 		.4byte	0xc6d
 9617 0c66 22       		.uleb128 0x22
 9618 0c67 01       		.uleb128 0x1
 9619 0c68 50       		.byte	0x50
 9620 0c69 02       		.uleb128 0x2
 9621 0c6a 74       		.byte	0x74
 9622 0c6b 00       		.sleb128 0
 9623 0c6c 00       		.byte	0
 9624 0c6d 23       		.uleb128 0x23
 9625 0c6e 22000000 		.4byte	.LVL194
 9626 0c72 C3360000 		.4byte	0x36c3
 9627 0c76 22       		.uleb128 0x22
 9628 0c77 01       		.uleb128 0x1
 9629 0c78 51       		.byte	0x51
 9630 0c79 02       		.uleb128 0x2
 9631 0c7a 74       		.byte	0x74
 9632 0c7b 34       		.sleb128 52
 9633 0c7c 22       		.uleb128 0x22
 9634 0c7d 01       		.uleb128 0x1
 9635 0c7e 52       		.byte	0x52
 9636 0c7f 02       		.uleb128 0x2
 9637 0c80 75       		.byte	0x75
 9638 0c81 00       		.sleb128 0
 9639 0c82 22       		.uleb128 0x22
 9640 0c83 01       		.uleb128 0x1
 9641 0c84 53       		.byte	0x53
 9642 0c85 01       		.uleb128 0x1
 9643 0c86 31       		.byte	0x31
 9644 0c87 00       		.byte	0
 9645 0c88 00       		.byte	0
 9646 0c89 18       		.uleb128 0x18
 9647 0c8a E6040000 		.4byte	.LASF111
 9648 0c8e 01       		.byte	0x1
 9649 0c8f DD0C     		.2byte	0xcdd
 9650 0c91 97000000 		.4byte	0x97
 9651 0c95 00000000 		.4byte	.LFB32
 9652 0c99 70000000 		.4byte	.LFE32-.LFB32
 9653 0c9d 01       		.uleb128 0x1
 9654 0c9e 9C       		.byte	0x9c
 9655 0c9f 350D0000 		.4byte	0xd35
 9656 0ca3 19       		.uleb128 0x19
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 311


 9657 0ca4 667300   		.ascii	"fs\000"
 9658 0ca7 01       		.byte	0x1
 9659 0ca8 DE0C     		.2byte	0xcde
 9660 0caa 55020000 		.4byte	0x255
 9661 0cae F30C0000 		.4byte	.LLST61
 9662 0cb2 20       		.uleb128 0x20
 9663 0cb3 A6000000 		.4byte	.LASF49
 9664 0cb7 01       		.byte	0x1
 9665 0cb8 DF0C     		.2byte	0xcdf
 9666 0cba EB000000 		.4byte	0xeb
 9667 0cbe 1F0D0000 		.4byte	.LLST62
 9668 0cc2 21       		.uleb128 0x21
 9669 0cc3 12000000 		.4byte	.LVL199
 9670 0cc7 100C0000 		.4byte	0xc10
 9671 0ccb DD0C0000 		.4byte	0xcdd
 9672 0ccf 22       		.uleb128 0x22
 9673 0cd0 01       		.uleb128 0x1
 9674 0cd1 50       		.byte	0x50
 9675 0cd2 02       		.uleb128 0x2
 9676 0cd3 74       		.byte	0x74
 9677 0cd4 00       		.sleb128 0
 9678 0cd5 22       		.uleb128 0x22
 9679 0cd6 01       		.uleb128 0x1
 9680 0cd7 51       		.byte	0x51
 9681 0cd8 03       		.uleb128 0x3
 9682 0cd9 F3       		.byte	0xf3
 9683 0cda 01       		.uleb128 0x1
 9684 0cdb 51       		.byte	0x51
 9685 0cdc 00       		.byte	0
 9686 0cdd 21       		.uleb128 0x21
 9687 0cde 1C000000 		.4byte	.LVL200
 9688 0ce2 10050000 		.4byte	0x510
 9689 0ce6 F20C0000 		.4byte	0xcf2
 9690 0cea 22       		.uleb128 0x22
 9691 0ceb 01       		.uleb128 0x1
 9692 0cec 50       		.byte	0x50
 9693 0ced 03       		.uleb128 0x3
 9694 0cee 74       		.byte	0x74
 9695 0cef B204     		.sleb128 562
 9696 0cf1 00       		.byte	0
 9697 0cf2 21       		.uleb128 0x21
 9698 0cf3 40000000 		.4byte	.LVL201
 9699 0cf7 BB060000 		.4byte	0x6bb
 9700 0cfb 150D0000 		.4byte	0xd15
 9701 0cff 22       		.uleb128 0x22
 9702 0d00 01       		.uleb128 0x1
 9703 0d01 50       		.byte	0x50
 9704 0d02 03       		.uleb128 0x3
 9705 0d03 74       		.byte	0x74
 9706 0d04 EA00     		.sleb128 106
 9707 0d06 22       		.uleb128 0x22
 9708 0d07 01       		.uleb128 0x1
 9709 0d08 51       		.byte	0x51
 9710 0d09 05       		.uleb128 0x5
 9711 0d0a 03       		.byte	0x3
 9712 0d0b 10000000 		.4byte	.LC1
 9713 0d0f 22       		.uleb128 0x22
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 312


 9714 0d10 01       		.uleb128 0x1
 9715 0d11 52       		.byte	0x52
 9716 0d12 01       		.uleb128 0x1
 9717 0d13 33       		.byte	0x33
 9718 0d14 00       		.byte	0
 9719 0d15 23       		.uleb128 0x23
 9720 0d16 4E000000 		.4byte	.LVL202
 9721 0d1a BB060000 		.4byte	0x6bb
 9722 0d1e 22       		.uleb128 0x22
 9723 0d1f 01       		.uleb128 0x1
 9724 0d20 50       		.byte	0x50
 9725 0d21 03       		.uleb128 0x3
 9726 0d22 74       		.byte	0x74
 9727 0d23 8601     		.sleb128 134
 9728 0d25 22       		.uleb128 0x22
 9729 0d26 01       		.uleb128 0x1
 9730 0d27 51       		.byte	0x51
 9731 0d28 05       		.uleb128 0x5
 9732 0d29 03       		.byte	0x3
 9733 0d2a 14000000 		.4byte	.LC2
 9734 0d2e 22       		.uleb128 0x22
 9735 0d2f 01       		.uleb128 0x1
 9736 0d30 52       		.byte	0x52
 9737 0d31 01       		.uleb128 0x1
 9738 0d32 35       		.byte	0x35
 9739 0d33 00       		.byte	0
 9740 0d34 00       		.byte	0
 9741 0d35 18       		.uleb128 0x18
 9742 0d36 C1040000 		.4byte	.LASF112
 9743 0d3a 01       		.byte	0x1
 9744 0d3b F40C     		.2byte	0xcf4
 9745 0d3d 97000000 		.4byte	0x97
 9746 0d41 00000000 		.4byte	.LFB33
 9747 0d45 6C000000 		.4byte	.LFE33-.LFB33
 9748 0d49 01       		.uleb128 0x1
 9749 0d4a 9C       		.byte	0x9c
 9750 0d4b F00D0000 		.4byte	0xdf0
 9751 0d4f 19       		.uleb128 0x19
 9752 0d50 667300   		.ascii	"fs\000"
 9753 0d53 01       		.byte	0x1
 9754 0d54 F50C     		.2byte	0xcf5
 9755 0d56 55020000 		.4byte	0x255
 9756 0d5a 400D0000 		.4byte	.LLST63
 9757 0d5e 20       		.uleb128 0x20
 9758 0d5f B7000000 		.4byte	.LASF113
 9759 0d63 01       		.byte	0x1
 9760 0d64 F60C     		.2byte	0xcf6
 9761 0d66 97000000 		.4byte	0x97
 9762 0d6a 5E0D0000 		.4byte	.LLST64
 9763 0d6e 1A       		.uleb128 0x1a
 9764 0d6f 666D7400 		.ascii	"fmt\000"
 9765 0d73 01       		.byte	0x1
 9766 0d74 F90C     		.2byte	0xcf9
 9767 0d76 97000000 		.4byte	0x97
 9768 0d7a 7C0D0000 		.4byte	.LLST65
 9769 0d7e 1A       		.uleb128 0x1a
 9770 0d7f 6900     		.ascii	"i\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 313


 9771 0d81 01       		.byte	0x1
 9772 0d82 F90C     		.2byte	0xcf9
 9773 0d84 97000000 		.4byte	0x97
 9774 0d88 A50D0000 		.4byte	.LLST66
 9775 0d8c 25       		.uleb128 0x25
 9776 0d8d 9D030000 		.4byte	.LASF114
 9777 0d91 01       		.byte	0x1
 9778 0d92 FA0C     		.2byte	0xcfa
 9779 0d94 F00D0000 		.4byte	0xdf0
 9780 0d98 02       		.uleb128 0x2
 9781 0d99 91       		.byte	0x91
 9782 0d9a 60       		.sleb128 -32
 9783 0d9b 21       		.uleb128 0x21
 9784 0d9c 0E000000 		.4byte	.LVL211
 9785 0da0 890C0000 		.4byte	0xc89
 9786 0da4 B40D0000 		.4byte	0xdb4
 9787 0da8 22       		.uleb128 0x22
 9788 0da9 01       		.uleb128 0x1
 9789 0daa 50       		.byte	0x50
 9790 0dab 02       		.uleb128 0x2
 9791 0dac 76       		.byte	0x76
 9792 0dad 00       		.sleb128 0
 9793 0dae 22       		.uleb128 0x22
 9794 0daf 01       		.uleb128 0x1
 9795 0db0 51       		.byte	0x51
 9796 0db1 01       		.uleb128 0x1
 9797 0db2 30       		.byte	0x30
 9798 0db3 00       		.byte	0
 9799 0db4 21       		.uleb128 0x21
 9800 0db5 2A000000 		.4byte	.LVL213
 9801 0db9 55050000 		.4byte	0x555
 9802 0dbd D00D0000 		.4byte	0xdd0
 9803 0dc1 22       		.uleb128 0x22
 9804 0dc2 01       		.uleb128 0x1
 9805 0dc3 50       		.byte	0x50
 9806 0dc4 0A       		.uleb128 0xa
 9807 0dc5 74       		.byte	0x74
 9808 0dc6 00       		.sleb128 0
 9809 0dc7 34       		.byte	0x34
 9810 0dc8 24       		.byte	0x24
 9811 0dc9 76       		.byte	0x76
 9812 0dca 00       		.sleb128 0
 9813 0dcb 22       		.byte	0x22
 9814 0dcc 23       		.byte	0x23
 9815 0dcd FA03     		.uleb128 0x1fa
 9816 0dcf 00       		.byte	0
 9817 0dd0 23       		.uleb128 0x23
 9818 0dd1 58000000 		.4byte	.LVL220
 9819 0dd5 890C0000 		.4byte	0xc89
 9820 0dd9 22       		.uleb128 0x22
 9821 0dda 01       		.uleb128 0x1
 9822 0ddb 50       		.byte	0x50
 9823 0ddc 02       		.uleb128 0x2
 9824 0ddd 76       		.byte	0x76
 9825 0dde 00       		.sleb128 0
 9826 0ddf 22       		.uleb128 0x22
 9827 0de0 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 314


 9828 0de1 51       		.byte	0x51
 9829 0de2 0B       		.uleb128 0xb
 9830 0de3 74       		.byte	0x74
 9831 0de4 00       		.sleb128 0
 9832 0de5 32       		.byte	0x32
 9833 0de6 24       		.byte	0x24
 9834 0de7 91       		.byte	0x91
 9835 0de8 00       		.sleb128 0
 9836 0de9 22       		.byte	0x22
 9837 0dea 08       		.byte	0x8
 9838 0deb 20       		.byte	0x20
 9839 0dec 1C       		.byte	0x1c
 9840 0ded 06       		.byte	0x6
 9841 0dee 00       		.byte	0
 9842 0def 00       		.byte	0
 9843 0df0 08       		.uleb128 0x8
 9844 0df1 B8000000 		.4byte	0xb8
 9845 0df5 000E0000 		.4byte	0xe00
 9846 0df9 0D       		.uleb128 0xd
 9847 0dfa F4010000 		.4byte	0x1f4
 9848 0dfe 03       		.byte	0x3
 9849 0dff 00       		.byte	0
 9850 0e00 18       		.uleb128 0x18
 9851 0e01 8D040000 		.4byte	.LASF115
 9852 0e05 01       		.byte	0x1
 9853 0e06 2A0D     		.2byte	0xd2a
 9854 0e08 40040000 		.4byte	0x440
 9855 0e0c 00000000 		.4byte	.LFB34
 9856 0e10 C0020000 		.4byte	.LFE34-.LFB34
 9857 0e14 01       		.uleb128 0x1
 9858 0e15 9C       		.byte	0x9c
 9859 0e16 94100000 		.4byte	0x1094
 9860 0e1a 20       		.uleb128 0x20
 9861 0e1b 68000000 		.4byte	.LASF105
 9862 0e1f 01       		.byte	0x1
 9863 0e20 2B0D     		.2byte	0xd2b
 9864 0e22 6B0A0000 		.4byte	0xa6b
 9865 0e26 CE0D0000 		.4byte	.LLST67
 9866 0e2a 19       		.uleb128 0x19
 9867 0e2b 72667300 		.ascii	"rfs\000"
 9868 0e2f 01       		.byte	0x1
 9869 0e30 2C0D     		.2byte	0xd2c
 9870 0e32 A20B0000 		.4byte	0xba2
 9871 0e36 EF0D0000 		.4byte	.LLST68
 9872 0e3a 20       		.uleb128 0x20
 9873 0e3b 2D020000 		.4byte	.LASF116
 9874 0e3f 01       		.byte	0x1
 9875 0e40 2D0D     		.2byte	0xd2d
 9876 0e42 A2000000 		.4byte	0xa2
 9877 0e46 340E0000 		.4byte	.LLST69
 9878 0e4a 1A       		.uleb128 0x1a
 9879 0e4b 766F6C00 		.ascii	"vol\000"
 9880 0e4f 01       		.byte	0x1
 9881 0e50 300D     		.2byte	0xd30
 9882 0e52 73000000 		.4byte	0x73
 9883 0e56 790E0000 		.4byte	.LLST70
 9884 0e5a 26       		.uleb128 0x26
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 315


 9885 0e5b 0B070000 		.4byte	.LASF42
 9886 0e5f 01       		.byte	0x1
 9887 0e60 310D     		.2byte	0xd31
 9888 0e62 4C040000 		.4byte	0x44c
 9889 0e66 C30E0000 		.4byte	.LLST71
 9890 0e6a 26       		.uleb128 0x26
 9891 0e6b 98020000 		.4byte	.LASF117
 9892 0e6f 01       		.byte	0x1
 9893 0e70 320D     		.2byte	0xd32
 9894 0e72 EB000000 		.4byte	0xeb
 9895 0e76 0D0F0000 		.4byte	.LLST72
 9896 0e7a 26       		.uleb128 0x26
 9897 0e7b D5070000 		.4byte	.LASF118
 9898 0e7f 01       		.byte	0x1
 9899 0e80 330D     		.2byte	0xd33
 9900 0e82 B8000000 		.4byte	0xb8
 9901 0e86 2B0F0000 		.4byte	.LLST73
 9902 0e8a 26       		.uleb128 0x26
 9903 0e8b 9E020000 		.4byte	.LASF119
 9904 0e8f 01       		.byte	0x1
 9905 0e90 330D     		.2byte	0xd33
 9906 0e92 B8000000 		.4byte	0xb8
 9907 0e96 6A0F0000 		.4byte	.LLST74
 9908 0e9a 26       		.uleb128 0x26
 9909 0e9b AB000000 		.4byte	.LASF120
 9910 0e9f 01       		.byte	0x1
 9911 0ea0 330D     		.2byte	0xd33
 9912 0ea2 B8000000 		.4byte	0xb8
 9913 0ea6 C70F0000 		.4byte	.LLST75
 9914 0eaa 26       		.uleb128 0x26
 9915 0eab CA030000 		.4byte	.LASF121
 9916 0eaf 01       		.byte	0x1
 9917 0eb0 330D     		.2byte	0xd33
 9918 0eb2 B8000000 		.4byte	0xb8
 9919 0eb6 1C100000 		.4byte	.LLST76
 9920 0eba 26       		.uleb128 0x26
 9921 0ebb 0C030000 		.4byte	.LASF122
 9922 0ebf 01       		.byte	0x1
 9923 0ec0 330D     		.2byte	0xd33
 9924 0ec2 B8000000 		.4byte	0xb8
 9925 0ec6 8E100000 		.4byte	.LLST77
 9926 0eca 26       		.uleb128 0x26
 9927 0ecb B2000000 		.4byte	.LASF123
 9928 0ecf 01       		.byte	0x1
 9929 0ed0 340D     		.2byte	0xd34
 9930 0ed2 AD000000 		.4byte	0xad
 9931 0ed6 C8100000 		.4byte	.LLST78
 9932 0eda 1A       		.uleb128 0x1a
 9933 0edb 667300   		.ascii	"fs\000"
 9934 0ede 01       		.byte	0x1
 9935 0edf 350D     		.2byte	0xd35
 9936 0ee1 55020000 		.4byte	0x255
 9937 0ee5 1D110000 		.4byte	.LLST79
 9938 0ee9 1A       		.uleb128 0x1a
 9939 0eea 666D7400 		.ascii	"fmt\000"
 9940 0eee 01       		.byte	0x1
 9941 0eef 360D     		.2byte	0xd36
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 316


 9942 0ef1 97000000 		.4byte	0x97
 9943 0ef5 3B110000 		.4byte	.LLST80
 9944 0ef9 21       		.uleb128 0x21
 9945 0efa 10000000 		.4byte	.LVL225
 9946 0efe 7C0A0000 		.4byte	0xa7c
 9947 0f02 0E0F0000 		.4byte	0xf0e
 9948 0f06 22       		.uleb128 0x22
 9949 0f07 01       		.uleb128 0x1
 9950 0f08 50       		.byte	0x50
 9951 0f09 03       		.uleb128 0x3
 9952 0f0a F3       		.byte	0xf3
 9953 0f0b 01       		.uleb128 0x1
 9954 0f0c 50       		.byte	0x50
 9955 0f0d 00       		.byte	0
 9956 0f0e 24       		.uleb128 0x24
 9957 0f0f 34000000 		.4byte	.LVL229
 9958 0f13 AD360000 		.4byte	0x36ad
 9959 0f17 21       		.uleb128 0x21
 9960 0f18 5A000000 		.4byte	.LVL232
 9961 0f1c CE360000 		.4byte	0x36ce
 9962 0f20 2B0F0000 		.4byte	0xf2b
 9963 0f24 22       		.uleb128 0x22
 9964 0f25 01       		.uleb128 0x1
 9965 0f26 50       		.byte	0x50
 9966 0f27 02       		.uleb128 0x2
 9967 0f28 75       		.byte	0x75
 9968 0f29 00       		.sleb128 0
 9969 0f2a 00       		.byte	0
 9970 0f2b 21       		.uleb128 0x21
 9971 0f2c 74000000 		.4byte	.LVL234
 9972 0f30 350D0000 		.4byte	0xd35
 9973 0f34 440F0000 		.4byte	0xf44
 9974 0f38 22       		.uleb128 0x22
 9975 0f39 01       		.uleb128 0x1
 9976 0f3a 50       		.byte	0x50
 9977 0f3b 02       		.uleb128 0x2
 9978 0f3c 74       		.byte	0x74
 9979 0f3d 00       		.sleb128 0
 9980 0f3e 22       		.uleb128 0x22
 9981 0f3f 01       		.uleb128 0x1
 9982 0f40 51       		.byte	0x51
 9983 0f41 01       		.uleb128 0x1
 9984 0f42 30       		.byte	0x30
 9985 0f43 00       		.byte	0
 9986 0f44 21       		.uleb128 0x21
 9987 0f45 8A000000 		.4byte	.LVL237
 9988 0f49 10050000 		.4byte	0x510
 9989 0f4d 580F0000 		.4byte	0xf58
 9990 0f51 22       		.uleb128 0x22
 9991 0f52 01       		.uleb128 0x1
 9992 0f53 50       		.byte	0x50
 9993 0f54 02       		.uleb128 0x2
 9994 0f55 74       		.byte	0x74
 9995 0f56 3F       		.sleb128 63
 9996 0f57 00       		.byte	0
 9997 0f58 21       		.uleb128 0x21
 9998 0f59 9A000000 		.4byte	.LVL238
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 317


 9999 0f5d 10050000 		.4byte	0x510
 10000 0f61 6D0F0000 		.4byte	0xf6d
 10001 0f65 22       		.uleb128 0x22
 10002 0f66 01       		.uleb128 0x1
 10003 0f67 50       		.byte	0x50
 10004 0f68 03       		.uleb128 0x3
 10005 0f69 74       		.byte	0x74
 10006 0f6a CA00     		.sleb128 74
 10007 0f6c 00       		.byte	0
 10008 0f6d 21       		.uleb128 0x21
 10009 0f6e A6000000 		.4byte	.LVL241
 10010 0f72 55050000 		.4byte	0x555
 10011 0f76 820F0000 		.4byte	0xf82
 10012 0f7a 22       		.uleb128 0x22
 10013 0f7b 01       		.uleb128 0x1
 10014 0f7c 50       		.byte	0x50
 10015 0f7d 03       		.uleb128 0x3
 10016 0f7e 74       		.byte	0x74
 10017 0f7f D800     		.sleb128 88
 10018 0f81 00       		.byte	0
 10019 0f82 21       		.uleb128 0x21
 10020 0f83 E0000000 		.4byte	.LVL245
 10021 0f87 10050000 		.4byte	0x510
 10022 0f8b 970F0000 		.4byte	0xf97
 10023 0f8f 22       		.uleb128 0x22
 10024 0f90 01       		.uleb128 0x1
 10025 0f91 50       		.byte	0x50
 10026 0f92 03       		.uleb128 0x3
 10027 0f93 74       		.byte	0x74
 10028 0f94 C500     		.sleb128 69
 10029 0f96 00       		.byte	0
 10030 0f97 21       		.uleb128 0x21
 10031 0f98 F4000000 		.4byte	.LVL246
 10032 0f9c 10050000 		.4byte	0x510
 10033 0fa0 AC0F0000 		.4byte	0xfac
 10034 0fa4 22       		.uleb128 0x22
 10035 0fa5 01       		.uleb128 0x1
 10036 0fa6 50       		.byte	0x50
 10037 0fa7 03       		.uleb128 0x3
 10038 0fa8 74       		.byte	0x74
 10039 0fa9 C700     		.sleb128 71
 10040 0fab 00       		.byte	0
 10041 0fac 21       		.uleb128 0x21
 10042 0fad 00010000 		.4byte	.LVL249
 10043 0fb1 55050000 		.4byte	0x555
 10044 0fb5 C10F0000 		.4byte	0xfc1
 10045 0fb9 22       		.uleb128 0x22
 10046 0fba 01       		.uleb128 0x1
 10047 0fbb 50       		.byte	0x50
 10048 0fbc 03       		.uleb128 0x3
 10049 0fbd 74       		.byte	0x74
 10050 0fbe D400     		.sleb128 84
 10051 0fc0 00       		.byte	0
 10052 0fc1 21       		.uleb128 0x21
 10053 0fc2 0A010000 		.4byte	.LVL252
 10054 0fc6 10050000 		.4byte	0x510
 10055 0fca D60F0000 		.4byte	0xfd6
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 318


 10056 0fce 22       		.uleb128 0x22
 10057 0fcf 01       		.uleb128 0x1
 10058 0fd0 50       		.byte	0x50
 10059 0fd1 03       		.uleb128 0x3
 10060 0fd2 74       		.byte	0x74
 10061 0fd3 C200     		.sleb128 66
 10062 0fd5 00       		.byte	0
 10063 0fd6 21       		.uleb128 0x21
 10064 0fd7 6C010000 		.4byte	.LVL263
 10065 0fdb 10050000 		.4byte	0x510
 10066 0fdf EB0F0000 		.4byte	0xfeb
 10067 0fe3 22       		.uleb128 0x22
 10068 0fe4 01       		.uleb128 0x1
 10069 0fe5 50       		.byte	0x50
 10070 0fe6 03       		.uleb128 0x3
 10071 0fe7 74       		.byte	0x74
 10072 0fe8 DE00     		.sleb128 94
 10073 0fea 00       		.byte	0
 10074 0feb 21       		.uleb128 0x21
 10075 0fec 82010000 		.4byte	.LVL264
 10076 0ff0 55050000 		.4byte	0x555
 10077 0ff4 00100000 		.4byte	0x1000
 10078 0ff8 22       		.uleb128 0x22
 10079 0ff9 01       		.uleb128 0x1
 10080 0ffa 50       		.byte	0x50
 10081 0ffb 03       		.uleb128 0x3
 10082 0ffc 74       		.byte	0x74
 10083 0ffd E000     		.sleb128 96
 10084 0fff 00       		.byte	0
 10085 1000 21       		.uleb128 0x21
 10086 1001 CA010000 		.4byte	.LVL272
 10087 1005 10050000 		.4byte	0x510
 10088 1009 15100000 		.4byte	0x1015
 10089 100d 22       		.uleb128 0x22
 10090 100e 01       		.uleb128 0x1
 10091 100f 50       		.byte	0x50
 10092 1010 03       		.uleb128 0x3
 10093 1011 74       		.byte	0x74
 10094 1012 E400     		.sleb128 100
 10095 1014 00       		.byte	0
 10096 1015 21       		.uleb128 0x21
 10097 1016 D6010000 		.4byte	.LVL273
 10098 101a 100C0000 		.4byte	0xc10
 10099 101e 2F100000 		.4byte	0x102f
 10100 1022 22       		.uleb128 0x22
 10101 1023 01       		.uleb128 0x1
 10102 1024 50       		.byte	0x50
 10103 1025 02       		.uleb128 0x2
 10104 1026 74       		.byte	0x74
 10105 1027 00       		.sleb128 0
 10106 1028 22       		.uleb128 0x22
 10107 1029 01       		.uleb128 0x1
 10108 102a 51       		.byte	0x51
 10109 102b 02       		.uleb128 0x2
 10110 102c 76       		.byte	0x76
 10111 102d 01       		.sleb128 1
 10112 102e 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 319


 10113 102f 21       		.uleb128 0x21
 10114 1030 E4010000 		.4byte	.LVL274
 10115 1034 10050000 		.4byte	0x510
 10116 1038 44100000 		.4byte	0x1044
 10117 103c 22       		.uleb128 0x22
 10118 103d 01       		.uleb128 0x1
 10119 103e 50       		.byte	0x50
 10120 103f 03       		.uleb128 0x3
 10121 1040 74       		.byte	0x74
 10122 1041 B204     		.sleb128 562
 10123 1043 00       		.byte	0
 10124 1044 21       		.uleb128 0x21
 10125 1045 F4010000 		.4byte	.LVL275
 10126 1049 55050000 		.4byte	0x555
 10127 104d 58100000 		.4byte	0x1058
 10128 1051 22       		.uleb128 0x22
 10129 1052 01       		.uleb128 0x1
 10130 1053 50       		.byte	0x50
 10131 1054 02       		.uleb128 0x2
 10132 1055 74       		.byte	0x74
 10133 1056 34       		.sleb128 52
 10134 1057 00       		.byte	0
 10135 1058 21       		.uleb128 0x21
 10136 1059 02020000 		.4byte	.LVL276
 10137 105d 55050000 		.4byte	0x555
 10138 1061 6D100000 		.4byte	0x106d
 10139 1065 22       		.uleb128 0x22
 10140 1066 01       		.uleb128 0x1
 10141 1067 50       		.byte	0x50
 10142 1068 03       		.uleb128 0x3
 10143 1069 74       		.byte	0x74
 10144 106a 9804     		.sleb128 536
 10145 106c 00       		.byte	0
 10146 106d 21       		.uleb128 0x21
 10147 106e 10020000 		.4byte	.LVL277
 10148 1072 55050000 		.4byte	0x555
 10149 1076 82100000 		.4byte	0x1082
 10150 107a 22       		.uleb128 0x22
 10151 107b 01       		.uleb128 0x1
 10152 107c 50       		.byte	0x50
 10153 107d 03       		.uleb128 0x3
 10154 107e 74       		.byte	0x74
 10155 107f 9C04     		.sleb128 540
 10156 1081 00       		.byte	0
 10157 1082 23       		.uleb128 0x23
 10158 1083 1A020000 		.4byte	.LVL278
 10159 1087 55050000 		.4byte	0x555
 10160 108b 22       		.uleb128 0x22
 10161 108c 01       		.uleb128 0x1
 10162 108d 50       		.byte	0x50
 10163 108e 03       		.uleb128 0x3
 10164 108f 74       		.byte	0x74
 10165 1090 A004     		.sleb128 544
 10166 1092 00       		.byte	0
 10167 1093 00       		.byte	0
 10168 1094 18       		.uleb128 0x18
 10169 1095 21000000 		.4byte	.LASF124
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 320


 10170 1099 01       		.byte	0x1
 10171 109a E804     		.2byte	0x4e8
 10172 109c 40040000 		.4byte	0x440
 10173 10a0 00000000 		.4byte	.LFB15
 10174 10a4 04010000 		.4byte	.LFE15-.LFB15
 10175 10a8 01       		.uleb128 0x1
 10176 10a9 9C       		.byte	0x9c
 10177 10aa A4110000 		.4byte	0x11a4
 10178 10ae 19       		.uleb128 0x19
 10179 10af 667300   		.ascii	"fs\000"
 10180 10b2 01       		.byte	0x1
 10181 10b3 E904     		.2byte	0x4e9
 10182 10b5 55020000 		.4byte	0x255
 10183 10b9 86110000 		.4byte	.LLST81
 10184 10bd 20       		.uleb128 0x20
 10185 10be CA020000 		.4byte	.LASF100
 10186 10c2 01       		.byte	0x1
 10187 10c3 EA04     		.2byte	0x4ea
 10188 10c5 B8000000 		.4byte	0xb8
 10189 10c9 E9110000 		.4byte	.LLST82
 10190 10cd 19       		.uleb128 0x19
 10191 10ce 76616C00 		.ascii	"val\000"
 10192 10d2 01       		.byte	0x1
 10193 10d3 EB04     		.2byte	0x4eb
 10194 10d5 B8000000 		.4byte	0xb8
 10195 10d9 68120000 		.4byte	.LLST83
 10196 10dd 1A       		.uleb128 0x1a
 10197 10de 626300   		.ascii	"bc\000"
 10198 10e1 01       		.byte	0x1
 10199 10e2 EE04     		.2byte	0x4ee
 10200 10e4 97000000 		.4byte	0x97
 10201 10e8 E6120000 		.4byte	.LLST84
 10202 10ec 1A       		.uleb128 0x1a
 10203 10ed 7000     		.ascii	"p\000"
 10204 10ef 01       		.byte	0x1
 10205 10f0 EF04     		.2byte	0x4ef
 10206 10f2 DC020000 		.4byte	0x2dc
 10207 10f6 25130000 		.4byte	.LLST85
 10208 10fa 1A       		.uleb128 0x1a
 10209 10fb 72657300 		.ascii	"res\000"
 10210 10ff 01       		.byte	0x1
 10211 1100 F004     		.2byte	0x4f0
 10212 1102 40040000 		.4byte	0x440
 10213 1106 4D130000 		.4byte	.LLST86
 10214 110a 21       		.uleb128 0x21
 10215 110b 30000000 		.4byte	.LVL320
 10216 110f 100C0000 		.4byte	0xc10
 10217 1113 1E110000 		.4byte	0x111e
 10218 1117 22       		.uleb128 0x22
 10219 1118 01       		.uleb128 0x1
 10220 1119 50       		.byte	0x50
 10221 111a 02       		.uleb128 0x2
 10222 111b 76       		.byte	0x76
 10223 111c 00       		.sleb128 0
 10224 111d 00       		.byte	0
 10225 111e 21       		.uleb128 0x21
 10226 111f 6E000000 		.4byte	.LVL325
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 321


 10227 1123 100C0000 		.4byte	0xc10
 10228 1127 32110000 		.4byte	0x1132
 10229 112b 22       		.uleb128 0x22
 10230 112c 01       		.uleb128 0x1
 10231 112d 50       		.byte	0x50
 10232 112e 02       		.uleb128 0x2
 10233 112f 76       		.byte	0x76
 10234 1130 00       		.sleb128 0
 10235 1131 00       		.byte	0
 10236 1132 21       		.uleb128 0x21
 10237 1133 A2000000 		.4byte	.LVL329
 10238 1137 100C0000 		.4byte	0xc10
 10239 113b 46110000 		.4byte	0x1146
 10240 113f 22       		.uleb128 0x22
 10241 1140 01       		.uleb128 0x1
 10242 1141 50       		.byte	0x50
 10243 1142 02       		.uleb128 0x2
 10244 1143 76       		.byte	0x76
 10245 1144 00       		.sleb128 0
 10246 1145 00       		.byte	0
 10247 1146 21       		.uleb128 0x21
 10248 1147 B8000000 		.4byte	.LVL331
 10249 114b 8F050000 		.4byte	0x58f
 10250 114f 6B110000 		.4byte	0x116b
 10251 1153 22       		.uleb128 0x22
 10252 1154 01       		.uleb128 0x1
 10253 1155 50       		.byte	0x50
 10254 1156 0D       		.uleb128 0xd
 10255 1157 74       		.byte	0x74
 10256 1158 00       		.sleb128 0
 10257 1159 31       		.byte	0x31
 10258 115a 24       		.byte	0x24
 10259 115b 0A       		.byte	0xa
 10260 115c FE01     		.2byte	0x1fe
 10261 115e 1A       		.byte	0x1a
 10262 115f 76       		.byte	0x76
 10263 1160 00       		.sleb128 0
 10264 1161 22       		.byte	0x22
 10265 1162 23       		.byte	0x23
 10266 1163 34       		.uleb128 0x34
 10267 1164 22       		.uleb128 0x22
 10268 1165 01       		.uleb128 0x1
 10269 1166 51       		.byte	0x51
 10270 1167 02       		.uleb128 0x2
 10271 1168 77       		.byte	0x77
 10272 1169 00       		.sleb128 0
 10273 116a 00       		.byte	0
 10274 116b 21       		.uleb128 0x21
 10275 116c C8000000 		.4byte	.LVL334
 10276 1170 100C0000 		.4byte	0xc10
 10277 1174 7F110000 		.4byte	0x117f
 10278 1178 22       		.uleb128 0x22
 10279 1179 01       		.uleb128 0x1
 10280 117a 50       		.byte	0x50
 10281 117b 02       		.uleb128 0x2
 10282 117c 76       		.byte	0x76
 10283 117d 00       		.sleb128 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 322


 10284 117e 00       		.byte	0
 10285 117f 21       		.uleb128 0x21
 10286 1180 E2000000 		.4byte	.LVL338
 10287 1184 55050000 		.4byte	0x555
 10288 1188 93110000 		.4byte	0x1193
 10289 118c 22       		.uleb128 0x22
 10290 118d 01       		.uleb128 0x1
 10291 118e 50       		.byte	0x50
 10292 118f 02       		.uleb128 0x2
 10293 1190 74       		.byte	0x74
 10294 1191 00       		.sleb128 0
 10295 1192 00       		.byte	0
 10296 1193 23       		.uleb128 0x23
 10297 1194 EE000000 		.4byte	.LVL341
 10298 1198 C6050000 		.4byte	0x5c6
 10299 119c 22       		.uleb128 0x22
 10300 119d 01       		.uleb128 0x1
 10301 119e 50       		.byte	0x50
 10302 119f 02       		.uleb128 0x2
 10303 11a0 74       		.byte	0x74
 10304 11a1 00       		.sleb128 0
 10305 11a2 00       		.byte	0
 10306 11a3 00       		.byte	0
 10307 11a4 18       		.uleb128 0x18
 10308 11a5 70040000 		.4byte	.LASF125
 10309 11a9 01       		.byte	0x1
 10310 11aa 9B04     		.2byte	0x49b
 10311 11ac B8000000 		.4byte	0xb8
 10312 11b0 00000000 		.4byte	.LFB14
 10313 11b4 D4000000 		.4byte	.LFE14-.LFB14
 10314 11b8 01       		.uleb128 0x1
 10315 11b9 9C       		.byte	0x9c
 10316 11ba A2120000 		.4byte	0x12a2
 10317 11be 19       		.uleb128 0x19
 10318 11bf 6F626A00 		.ascii	"obj\000"
 10319 11c3 01       		.byte	0x1
 10320 11c4 9C04     		.2byte	0x49c
 10321 11c6 9C0B0000 		.4byte	0xb9c
 10322 11ca BC130000 		.4byte	.LLST87
 10323 11ce 20       		.uleb128 0x20
 10324 11cf CA020000 		.4byte	.LASF100
 10325 11d3 01       		.byte	0x1
 10326 11d4 9D04     		.2byte	0x49d
 10327 11d6 B8000000 		.4byte	0xb8
 10328 11da 5A140000 		.4byte	.LLST88
 10329 11de 1A       		.uleb128 0x1a
 10330 11df 776300   		.ascii	"wc\000"
 10331 11e2 01       		.byte	0x1
 10332 11e3 A004     		.2byte	0x4a0
 10333 11e5 97000000 		.4byte	0x97
 10334 11e9 BA140000 		.4byte	.LLST89
 10335 11ed 1A       		.uleb128 0x1a
 10336 11ee 626300   		.ascii	"bc\000"
 10337 11f1 01       		.byte	0x1
 10338 11f2 A004     		.2byte	0x4a0
 10339 11f4 97000000 		.4byte	0x97
 10340 11f8 1C150000 		.4byte	.LLST90
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 323


 10341 11fc 1A       		.uleb128 0x1a
 10342 11fd 76616C00 		.ascii	"val\000"
 10343 1201 01       		.byte	0x1
 10344 1202 A104     		.2byte	0x4a1
 10345 1204 B8000000 		.4byte	0xb8
 10346 1208 5B150000 		.4byte	.LLST91
 10347 120c 1F       		.uleb128 0x1f
 10348 120d 667300   		.ascii	"fs\000"
 10349 1210 01       		.byte	0x1
 10350 1211 A204     		.2byte	0x4a2
 10351 1213 55020000 		.4byte	0x255
 10352 1217 01       		.uleb128 0x1
 10353 1218 56       		.byte	0x56
 10354 1219 21       		.uleb128 0x21
 10355 121a 2E000000 		.4byte	.LVL351
 10356 121e 100C0000 		.4byte	0xc10
 10357 1222 2D120000 		.4byte	0x122d
 10358 1226 22       		.uleb128 0x22
 10359 1227 01       		.uleb128 0x1
 10360 1228 50       		.byte	0x50
 10361 1229 02       		.uleb128 0x2
 10362 122a 76       		.byte	0x76
 10363 122b 00       		.sleb128 0
 10364 122c 00       		.byte	0
 10365 122d 21       		.uleb128 0x21
 10366 122e 4A000000 		.4byte	.LVL354
 10367 1232 100C0000 		.4byte	0xc10
 10368 1236 41120000 		.4byte	0x1241
 10369 123a 22       		.uleb128 0x22
 10370 123b 01       		.uleb128 0x1
 10371 123c 50       		.byte	0x50
 10372 123d 02       		.uleb128 0x2
 10373 123e 76       		.byte	0x76
 10374 123f 00       		.sleb128 0
 10375 1240 00       		.byte	0
 10376 1241 21       		.uleb128 0x21
 10377 1242 78000000 		.4byte	.LVL362
 10378 1246 100C0000 		.4byte	0xc10
 10379 124a 55120000 		.4byte	0x1255
 10380 124e 22       		.uleb128 0x22
 10381 124f 01       		.uleb128 0x1
 10382 1250 50       		.byte	0x50
 10383 1251 02       		.uleb128 0x2
 10384 1252 76       		.byte	0x76
 10385 1253 00       		.sleb128 0
 10386 1254 00       		.byte	0
 10387 1255 21       		.uleb128 0x21
 10388 1256 8A000000 		.4byte	.LVL363
 10389 125a 10050000 		.4byte	0x510
 10390 125e 74120000 		.4byte	0x1274
 10391 1262 22       		.uleb128 0x22
 10392 1263 01       		.uleb128 0x1
 10393 1264 50       		.byte	0x50
 10394 1265 0D       		.uleb128 0xd
 10395 1266 74       		.byte	0x74
 10396 1267 00       		.sleb128 0
 10397 1268 31       		.byte	0x31
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 324


 10398 1269 24       		.byte	0x24
 10399 126a 0A       		.byte	0xa
 10400 126b FE01     		.2byte	0x1fe
 10401 126d 1A       		.byte	0x1a
 10402 126e 76       		.byte	0x76
 10403 126f 00       		.sleb128 0
 10404 1270 22       		.byte	0x22
 10405 1271 23       		.byte	0x23
 10406 1272 34       		.uleb128 0x34
 10407 1273 00       		.byte	0
 10408 1274 21       		.uleb128 0x21
 10409 1275 98000000 		.4byte	.LVL367
 10410 1279 100C0000 		.4byte	0xc10
 10411 127d 88120000 		.4byte	0x1288
 10412 1281 22       		.uleb128 0x22
 10413 1282 01       		.uleb128 0x1
 10414 1283 50       		.byte	0x50
 10415 1284 02       		.uleb128 0x2
 10416 1285 76       		.byte	0x76
 10417 1286 00       		.sleb128 0
 10418 1287 00       		.byte	0
 10419 1288 23       		.uleb128 0x23
 10420 1289 AA000000 		.4byte	.LVL368
 10421 128d 55050000 		.4byte	0x555
 10422 1291 22       		.uleb128 0x22
 10423 1292 01       		.uleb128 0x1
 10424 1293 50       		.byte	0x50
 10425 1294 0B       		.uleb128 0xb
 10426 1295 74       		.byte	0x74
 10427 1296 00       		.sleb128 0
 10428 1297 32       		.byte	0x32
 10429 1298 24       		.byte	0x24
 10430 1299 0A       		.byte	0xa
 10431 129a FC01     		.2byte	0x1fc
 10432 129c 1A       		.byte	0x1a
 10433 129d 76       		.byte	0x76
 10434 129e 34       		.sleb128 52
 10435 129f 22       		.byte	0x22
 10436 12a0 00       		.byte	0
 10437 12a1 00       		.byte	0
 10438 12a2 18       		.uleb128 0x18
 10439 12a3 3C020000 		.4byte	.LASF126
 10440 12a7 01       		.byte	0x1
 10441 12a8 B106     		.2byte	0x6b1
 10442 12aa 40040000 		.4byte	0x440
 10443 12ae 00000000 		.4byte	.LFB19
 10444 12b2 B2000000 		.4byte	.LFE19-.LFB19
 10445 12b6 01       		.uleb128 0x1
 10446 12b7 9C       		.byte	0x9c
 10447 12b8 39130000 		.4byte	0x1339
 10448 12bc 19       		.uleb128 0x19
 10449 12bd 647000   		.ascii	"dp\000"
 10450 12c0 01       		.byte	0x1
 10451 12c1 B206     		.2byte	0x6b2
 10452 12c3 5F090000 		.4byte	0x95f
 10453 12c7 AB150000 		.4byte	.LLST92
 10454 12cb 19       		.uleb128 0x19
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 325


 10455 12cc 6F667300 		.ascii	"ofs\000"
 10456 12d0 01       		.byte	0x1
 10457 12d1 B306     		.2byte	0x6b3
 10458 12d3 B8000000 		.4byte	0xb8
 10459 12d7 0E160000 		.4byte	.LLST93
 10460 12db 1A       		.uleb128 0x1a
 10461 12dc 63737A00 		.ascii	"csz\000"
 10462 12e0 01       		.byte	0x1
 10463 12e1 B606     		.2byte	0x6b6
 10464 12e3 B8000000 		.4byte	0xb8
 10465 12e7 42160000 		.4byte	.LLST94
 10466 12eb 26       		.uleb128 0x26
 10467 12ec CA020000 		.4byte	.LASF100
 10468 12f0 01       		.byte	0x1
 10469 12f1 B606     		.2byte	0x6b6
 10470 12f3 B8000000 		.4byte	0xb8
 10471 12f7 60160000 		.4byte	.LLST95
 10472 12fb 1F       		.uleb128 0x1f
 10473 12fc 667300   		.ascii	"fs\000"
 10474 12ff 01       		.byte	0x1
 10475 1300 B706     		.2byte	0x6b7
 10476 1302 55020000 		.4byte	0x255
 10477 1306 01       		.uleb128 0x1
 10478 1307 57       		.byte	0x57
 10479 1308 21       		.uleb128 0x21
 10480 1309 46000000 		.4byte	.LVL387
 10481 130d A4110000 		.4byte	0x11a4
 10482 1311 22130000 		.4byte	0x1322
 10483 1315 22       		.uleb128 0x22
 10484 1316 01       		.uleb128 0x1
 10485 1317 50       		.byte	0x50
 10486 1318 02       		.uleb128 0x2
 10487 1319 76       		.byte	0x76
 10488 131a 00       		.sleb128 0
 10489 131b 22       		.uleb128 0x22
 10490 131c 01       		.uleb128 0x1
 10491 131d 51       		.byte	0x51
 10492 131e 02       		.uleb128 0x2
 10493 131f 75       		.byte	0x75
 10494 1320 00       		.sleb128 0
 10495 1321 00       		.byte	0
 10496 1322 23       		.uleb128 0x23
 10497 1323 68000000 		.4byte	.LVL390
 10498 1327 C4070000 		.4byte	0x7c4
 10499 132b 22       		.uleb128 0x22
 10500 132c 01       		.uleb128 0x1
 10501 132d 50       		.byte	0x50
 10502 132e 02       		.uleb128 0x2
 10503 132f 77       		.byte	0x77
 10504 1330 00       		.sleb128 0
 10505 1331 22       		.uleb128 0x22
 10506 1332 01       		.uleb128 0x1
 10507 1333 51       		.byte	0x51
 10508 1334 02       		.uleb128 0x2
 10509 1335 75       		.byte	0x75
 10510 1336 00       		.sleb128 0
 10511 1337 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 326


 10512 1338 00       		.byte	0
 10513 1339 18       		.uleb128 0x18
 10514 133a 78040000 		.4byte	.LASF127
 10515 133e 01       		.byte	0x1
 10516 133f 0506     		.2byte	0x605
 10517 1341 B8000000 		.4byte	0xb8
 10518 1345 00000000 		.4byte	.LFB17
 10519 1349 14010000 		.4byte	.LFE17-.LFB17
 10520 134d 01       		.uleb128 0x1
 10521 134e 9C       		.byte	0x9c
 10522 134f 39140000 		.4byte	0x1439
 10523 1353 19       		.uleb128 0x19
 10524 1354 6F626A00 		.ascii	"obj\000"
 10525 1358 01       		.byte	0x1
 10526 1359 0606     		.2byte	0x606
 10527 135b 9C0B0000 		.4byte	0xb9c
 10528 135f D6160000 		.4byte	.LLST96
 10529 1363 20       		.uleb128 0x20
 10530 1364 CA020000 		.4byte	.LASF100
 10531 1368 01       		.byte	0x1
 10532 1369 0706     		.2byte	0x607
 10533 136b B8000000 		.4byte	0xb8
 10534 136f 0A170000 		.4byte	.LLST97
 10535 1373 1A       		.uleb128 0x1a
 10536 1374 637300   		.ascii	"cs\000"
 10537 1377 01       		.byte	0x1
 10538 1378 0A06     		.2byte	0x60a
 10539 137a B8000000 		.4byte	0xb8
 10540 137e 3E170000 		.4byte	.LLST98
 10541 1382 1A       		.uleb128 0x1a
 10542 1383 6E636C00 		.ascii	"ncl\000"
 10543 1387 01       		.byte	0x1
 10544 1388 0A06     		.2byte	0x60a
 10545 138a B8000000 		.4byte	0xb8
 10546 138e 93170000 		.4byte	.LLST99
 10547 1392 1A       		.uleb128 0x1a
 10548 1393 73636C00 		.ascii	"scl\000"
 10549 1397 01       		.byte	0x1
 10550 1398 0A06     		.2byte	0x60a
 10551 139a B8000000 		.4byte	0xb8
 10552 139e 02180000 		.4byte	.LLST100
 10553 13a2 1A       		.uleb128 0x1a
 10554 13a3 72657300 		.ascii	"res\000"
 10555 13a7 01       		.byte	0x1
 10556 13a8 0B06     		.2byte	0x60b
 10557 13aa 40040000 		.4byte	0x440
 10558 13ae 4D180000 		.4byte	.LLST101
 10559 13b2 1F       		.uleb128 0x1f
 10560 13b3 667300   		.ascii	"fs\000"
 10561 13b6 01       		.byte	0x1
 10562 13b7 0C06     		.2byte	0x60c
 10563 13b9 55020000 		.4byte	0x255
 10564 13bd 01       		.uleb128 0x1
 10565 13be 56       		.byte	0x56
 10566 13bf 24       		.uleb128 0x24
 10567 13c0 1C000000 		.4byte	.LVL410
 10568 13c4 A4110000 		.4byte	0x11a4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 327


 10569 13c8 21       		.uleb128 0x21
 10570 13c9 52000000 		.4byte	.LVL418
 10571 13cd A4110000 		.4byte	0x11a4
 10572 13d1 E2130000 		.4byte	0x13e2
 10573 13d5 22       		.uleb128 0x22
 10574 13d6 01       		.uleb128 0x1
 10575 13d7 50       		.byte	0x50
 10576 13d8 02       		.uleb128 0x2
 10577 13d9 77       		.byte	0x77
 10578 13da 00       		.sleb128 0
 10579 13db 22       		.uleb128 0x22
 10580 13dc 01       		.uleb128 0x1
 10581 13dd 51       		.byte	0x51
 10582 13de 02       		.uleb128 0x2
 10583 13df 74       		.byte	0x74
 10584 13e0 00       		.sleb128 0
 10585 13e1 00       		.byte	0
 10586 13e2 21       		.uleb128 0x21
 10587 13e3 94000000 		.4byte	.LVL431
 10588 13e7 A4110000 		.4byte	0x11a4
 10589 13eb FC130000 		.4byte	0x13fc
 10590 13ef 22       		.uleb128 0x22
 10591 13f0 01       		.uleb128 0x1
 10592 13f1 50       		.byte	0x50
 10593 13f2 02       		.uleb128 0x2
 10594 13f3 77       		.byte	0x77
 10595 13f4 00       		.sleb128 0
 10596 13f5 22       		.uleb128 0x22
 10597 13f6 01       		.uleb128 0x1
 10598 13f7 51       		.byte	0x51
 10599 13f8 02       		.uleb128 0x2
 10600 13f9 74       		.byte	0x74
 10601 13fa 00       		.sleb128 0
 10602 13fb 00       		.byte	0
 10603 13fc 21       		.uleb128 0x21
 10604 13fd B2000000 		.4byte	.LVL433
 10605 1401 94100000 		.4byte	0x1094
 10606 1405 1C140000 		.4byte	0x141c
 10607 1409 22       		.uleb128 0x22
 10608 140a 01       		.uleb128 0x1
 10609 140b 50       		.byte	0x50
 10610 140c 02       		.uleb128 0x2
 10611 140d 76       		.byte	0x76
 10612 140e 00       		.sleb128 0
 10613 140f 22       		.uleb128 0x22
 10614 1410 01       		.uleb128 0x1
 10615 1411 51       		.byte	0x51
 10616 1412 02       		.uleb128 0x2
 10617 1413 74       		.byte	0x74
 10618 1414 00       		.sleb128 0
 10619 1415 22       		.uleb128 0x22
 10620 1416 01       		.uleb128 0x1
 10621 1417 52       		.byte	0x52
 10622 1418 02       		.uleb128 0x2
 10623 1419 09       		.byte	0x9
 10624 141a FF       		.byte	0xff
 10625 141b 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 328


 10626 141c 23       		.uleb128 0x23
 10627 141d C6000000 		.4byte	.LVL435
 10628 1421 94100000 		.4byte	0x1094
 10629 1425 22       		.uleb128 0x22
 10630 1426 01       		.uleb128 0x1
 10631 1427 50       		.byte	0x50
 10632 1428 02       		.uleb128 0x2
 10633 1429 76       		.byte	0x76
 10634 142a 00       		.sleb128 0
 10635 142b 22       		.uleb128 0x22
 10636 142c 01       		.uleb128 0x1
 10637 142d 51       		.byte	0x51
 10638 142e 02       		.uleb128 0x2
 10639 142f 78       		.byte	0x78
 10640 1430 00       		.sleb128 0
 10641 1431 22       		.uleb128 0x22
 10642 1432 01       		.uleb128 0x1
 10643 1433 52       		.byte	0x52
 10644 1434 02       		.uleb128 0x2
 10645 1435 74       		.byte	0x74
 10646 1436 00       		.sleb128 0
 10647 1437 00       		.byte	0
 10648 1438 00       		.byte	0
 10649 1439 18       		.uleb128 0x18
 10650 143a 24060000 		.4byte	.LASF128
 10651 143e 01       		.byte	0x1
 10652 143f A605     		.2byte	0x5a6
 10653 1441 40040000 		.4byte	0x440
 10654 1445 00000000 		.4byte	.LFB16
 10655 1449 7C000000 		.4byte	.LFE16-.LFB16
 10656 144d 01       		.uleb128 0x1
 10657 144e 9C       		.byte	0x9c
 10658 144f 07150000 		.4byte	0x1507
 10659 1453 19       		.uleb128 0x19
 10660 1454 6F626A00 		.ascii	"obj\000"
 10661 1458 01       		.byte	0x1
 10662 1459 A705     		.2byte	0x5a7
 10663 145b 9C0B0000 		.4byte	0xb9c
 10664 145f 81180000 		.4byte	.LLST102
 10665 1463 20       		.uleb128 0x20
 10666 1464 CA020000 		.4byte	.LASF100
 10667 1468 01       		.byte	0x1
 10668 1469 A805     		.2byte	0x5a8
 10669 146b B8000000 		.4byte	0xb8
 10670 146f CE180000 		.4byte	.LLST103
 10671 1473 20       		.uleb128 0x20
 10672 1474 14060000 		.4byte	.LASF129
 10673 1478 01       		.byte	0x1
 10674 1479 A905     		.2byte	0x5a9
 10675 147b B8000000 		.4byte	0xb8
 10676 147f 0D190000 		.4byte	.LLST104
 10677 1483 1A       		.uleb128 0x1a
 10678 1484 72657300 		.ascii	"res\000"
 10679 1488 01       		.byte	0x1
 10680 1489 AC05     		.2byte	0x5ac
 10681 148b 40040000 		.4byte	0x440
 10682 148f 5D190000 		.4byte	.LLST105
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 329


 10683 1493 1A       		.uleb128 0x1a
 10684 1494 6E787400 		.ascii	"nxt\000"
 10685 1498 01       		.byte	0x1
 10686 1499 AD05     		.2byte	0x5ad
 10687 149b B8000000 		.4byte	0xb8
 10688 149f A9190000 		.4byte	.LLST106
 10689 14a3 1F       		.uleb128 0x1f
 10690 14a4 667300   		.ascii	"fs\000"
 10691 14a7 01       		.byte	0x1
 10692 14a8 AE05     		.2byte	0x5ae
 10693 14aa 55020000 		.4byte	0x255
 10694 14ae 01       		.uleb128 0x1
 10695 14af 54       		.byte	0x54
 10696 14b0 21       		.uleb128 0x21
 10697 14b1 20000000 		.4byte	.LVL454
 10698 14b5 94100000 		.4byte	0x1094
 10699 14b9 D1140000 		.4byte	0x14d1
 10700 14bd 22       		.uleb128 0x22
 10701 14be 01       		.uleb128 0x1
 10702 14bf 50       		.byte	0x50
 10703 14c0 02       		.uleb128 0x2
 10704 14c1 74       		.byte	0x74
 10705 14c2 00       		.sleb128 0
 10706 14c3 22       		.uleb128 0x22
 10707 14c4 01       		.uleb128 0x1
 10708 14c5 51       		.byte	0x51
 10709 14c6 03       		.uleb128 0x3
 10710 14c7 F3       		.byte	0xf3
 10711 14c8 01       		.uleb128 0x1
 10712 14c9 52       		.byte	0x52
 10713 14ca 22       		.uleb128 0x22
 10714 14cb 01       		.uleb128 0x1
 10715 14cc 52       		.byte	0x52
 10716 14cd 02       		.uleb128 0x2
 10717 14ce 09       		.byte	0x9
 10718 14cf FF       		.byte	0xff
 10719 14d0 00       		.byte	0
 10720 14d1 21       		.uleb128 0x21
 10721 14d2 2A000000 		.4byte	.LVL456
 10722 14d6 A4110000 		.4byte	0x11a4
 10723 14da EB140000 		.4byte	0x14eb
 10724 14de 22       		.uleb128 0x22
 10725 14df 01       		.uleb128 0x1
 10726 14e0 50       		.byte	0x50
 10727 14e1 02       		.uleb128 0x2
 10728 14e2 77       		.byte	0x77
 10729 14e3 00       		.sleb128 0
 10730 14e4 22       		.uleb128 0x22
 10731 14e5 01       		.uleb128 0x1
 10732 14e6 51       		.byte	0x51
 10733 14e7 02       		.uleb128 0x2
 10734 14e8 76       		.byte	0x76
 10735 14e9 00       		.sleb128 0
 10736 14ea 00       		.byte	0
 10737 14eb 23       		.uleb128 0x23
 10738 14ec 42000000 		.4byte	.LVL458
 10739 14f0 94100000 		.4byte	0x1094
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 330


 10740 14f4 22       		.uleb128 0x22
 10741 14f5 01       		.uleb128 0x1
 10742 14f6 50       		.byte	0x50
 10743 14f7 02       		.uleb128 0x2
 10744 14f8 74       		.byte	0x74
 10745 14f9 00       		.sleb128 0
 10746 14fa 22       		.uleb128 0x22
 10747 14fb 01       		.uleb128 0x1
 10748 14fc 51       		.byte	0x51
 10749 14fd 02       		.uleb128 0x2
 10750 14fe 76       		.byte	0x76
 10751 14ff 00       		.sleb128 0
 10752 1500 22       		.uleb128 0x22
 10753 1501 01       		.uleb128 0x1
 10754 1502 52       		.byte	0x52
 10755 1503 01       		.uleb128 0x1
 10756 1504 30       		.byte	0x30
 10757 1505 00       		.byte	0
 10758 1506 00       		.byte	0
 10759 1507 18       		.uleb128 0x18
 10760 1508 2B010000 		.4byte	.LASF130
 10761 150c 01       		.byte	0x1
 10762 150d 450A     		.2byte	0xa45
 10763 150f 40040000 		.4byte	0x440
 10764 1513 00000000 		.4byte	.LFB27
 10765 1517 20000000 		.4byte	.LFE27-.LFB27
 10766 151b 01       		.uleb128 0x1
 10767 151c 9C       		.byte	0x9c
 10768 151d 5E150000 		.4byte	0x155e
 10769 1521 19       		.uleb128 0x19
 10770 1522 647000   		.ascii	"dp\000"
 10771 1525 01       		.byte	0x1
 10772 1526 460A     		.2byte	0xa46
 10773 1528 5F090000 		.4byte	0x95f
 10774 152c 091A0000 		.4byte	.LLST107
 10775 1530 1A       		.uleb128 0x1a
 10776 1531 72657300 		.ascii	"res\000"
 10777 1535 01       		.byte	0x1
 10778 1536 490A     		.2byte	0xa49
 10779 1538 40040000 		.4byte	0x440
 10780 153c 271A0000 		.4byte	.LLST108
 10781 1540 1F       		.uleb128 0x1f
 10782 1541 667300   		.ascii	"fs\000"
 10783 1544 01       		.byte	0x1
 10784 1545 4A0A     		.2byte	0xa4a
 10785 1547 55020000 		.4byte	0x255
 10786 154b 01       		.uleb128 0x1
 10787 154c 55       		.byte	0x55
 10788 154d 23       		.uleb128 0x23
 10789 154e 0E000000 		.4byte	.LVL476
 10790 1552 100C0000 		.4byte	0xc10
 10791 1556 22       		.uleb128 0x22
 10792 1557 01       		.uleb128 0x1
 10793 1558 50       		.byte	0x50
 10794 1559 02       		.uleb128 0x2
 10795 155a 75       		.byte	0x75
 10796 155b 00       		.sleb128 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 331


 10797 155c 00       		.byte	0
 10798 155d 00       		.byte	0
 10799 155e 18       		.uleb128 0x18
 10800 155f 0A040000 		.4byte	.LASF131
 10801 1563 01       		.byte	0x1
 10802 1564 8A06     		.2byte	0x68a
 10803 1566 40040000 		.4byte	0x440
 10804 156a 00000000 		.4byte	.LFB18
 10805 156e 52000000 		.4byte	.LFE18-.LFB18
 10806 1572 01       		.uleb128 0x1
 10807 1573 9C       		.byte	0x9c
 10808 1574 42160000 		.4byte	0x1642
 10809 1578 19       		.uleb128 0x19
 10810 1579 667300   		.ascii	"fs\000"
 10811 157c 01       		.byte	0x1
 10812 157d 8B06     		.2byte	0x68b
 10813 157f 55020000 		.4byte	0x255
 10814 1583 3A1A0000 		.4byte	.LLST109
 10815 1587 20       		.uleb128 0x20
 10816 1588 CA020000 		.4byte	.LASF100
 10817 158c 01       		.byte	0x1
 10818 158d 8C06     		.2byte	0x68c
 10819 158f B8000000 		.4byte	0xb8
 10820 1593 581A0000 		.4byte	.LLST110
 10821 1597 26       		.uleb128 0x26
 10822 1598 A6000000 		.4byte	.LASF49
 10823 159c 01       		.byte	0x1
 10824 159d 8F06     		.2byte	0x68f
 10825 159f EB000000 		.4byte	0xeb
 10826 15a3 8F1A0000 		.4byte	.LLST111
 10827 15a7 1A       		.uleb128 0x1a
 10828 15a8 6E00     		.ascii	"n\000"
 10829 15aa 01       		.byte	0x1
 10830 15ab 9006     		.2byte	0x690
 10831 15ad 97000000 		.4byte	0x97
 10832 15b1 AD1A0000 		.4byte	.LLST112
 10833 15b5 1A       		.uleb128 0x1a
 10834 15b6 737A6200 		.ascii	"szb\000"
 10835 15ba 01       		.byte	0x1
 10836 15bb 9006     		.2byte	0x690
 10837 15bd 97000000 		.4byte	0x97
 10838 15c1 CC1A0000 		.4byte	.LLST113
 10839 15c5 26       		.uleb128 0x26
 10840 15c6 55040000 		.4byte	.LASF132
 10841 15ca 01       		.byte	0x1
 10842 15cb 9106     		.2byte	0x691
 10843 15cd DC020000 		.4byte	0x2dc
 10844 15d1 E01A0000 		.4byte	.LLST114
 10845 15d5 21       		.uleb128 0x21
 10846 15d6 0A000000 		.4byte	.LVL479
 10847 15da A80B0000 		.4byte	0xba8
 10848 15de E9150000 		.4byte	0x15e9
 10849 15e2 22       		.uleb128 0x22
 10850 15e3 01       		.uleb128 0x1
 10851 15e4 50       		.byte	0x50
 10852 15e5 02       		.uleb128 0x2
 10853 15e6 75       		.byte	0x75
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 332


 10854 15e7 00       		.sleb128 0
 10855 15e8 00       		.byte	0
 10856 15e9 21       		.uleb128 0x21
 10857 15ea 14000000 		.4byte	.LVL480
 10858 15ee C4070000 		.4byte	0x7c4
 10859 15f2 03160000 		.4byte	0x1603
 10860 15f6 22       		.uleb128 0x22
 10861 15f7 01       		.uleb128 0x1
 10862 15f8 50       		.byte	0x50
 10863 15f9 02       		.uleb128 0x2
 10864 15fa 75       		.byte	0x75
 10865 15fb 00       		.sleb128 0
 10866 15fc 22       		.uleb128 0x22
 10867 15fd 01       		.uleb128 0x1
 10868 15fe 51       		.byte	0x51
 10869 15ff 02       		.uleb128 0x2
 10870 1600 74       		.byte	0x74
 10871 1601 00       		.sleb128 0
 10872 1602 00       		.byte	0
 10873 1603 21       		.uleb128 0x21
 10874 1604 28000000 		.4byte	.LVL483
 10875 1608 67060000 		.4byte	0x667
 10876 160c 23160000 		.4byte	0x1623
 10877 1610 22       		.uleb128 0x22
 10878 1611 01       		.uleb128 0x1
 10879 1612 50       		.byte	0x50
 10880 1613 02       		.uleb128 0x2
 10881 1614 76       		.byte	0x76
 10882 1615 00       		.sleb128 0
 10883 1616 22       		.uleb128 0x22
 10884 1617 01       		.uleb128 0x1
 10885 1618 51       		.byte	0x51
 10886 1619 01       		.uleb128 0x1
 10887 161a 30       		.byte	0x30
 10888 161b 22       		.uleb128 0x22
 10889 161c 01       		.uleb128 0x1
 10890 161d 52       		.byte	0x52
 10891 161e 03       		.uleb128 0x3
 10892 161f 0A       		.byte	0xa
 10893 1620 0002     		.2byte	0x200
 10894 1622 00       		.byte	0
 10895 1623 23       		.uleb128 0x23
 10896 1624 40000000 		.4byte	.LVL487
 10897 1628 B8360000 		.4byte	0x36b8
 10898 162c 22       		.uleb128 0x22
 10899 162d 01       		.uleb128 0x1
 10900 162e 51       		.byte	0x51
 10901 162f 02       		.uleb128 0x2
 10902 1630 76       		.byte	0x76
 10903 1631 00       		.sleb128 0
 10904 1632 22       		.uleb128 0x22
 10905 1633 01       		.uleb128 0x1
 10906 1634 52       		.byte	0x52
 10907 1635 05       		.uleb128 0x5
 10908 1636 74       		.byte	0x74
 10909 1637 00       		.sleb128 0
 10910 1638 77       		.byte	0x77
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 333


 10911 1639 00       		.sleb128 0
 10912 163a 22       		.byte	0x22
 10913 163b 22       		.uleb128 0x22
 10914 163c 01       		.uleb128 0x1
 10915 163d 53       		.byte	0x53
 10916 163e 01       		.uleb128 0x1
 10917 163f 31       		.byte	0x31
 10918 1640 00       		.byte	0
 10919 1641 00       		.byte	0
 10920 1642 18       		.uleb128 0x18
 10921 1643 13030000 		.4byte	.LASF133
 10922 1647 01       		.byte	0x1
 10923 1648 E106     		.2byte	0x6e1
 10924 164a 40040000 		.4byte	0x440
 10925 164e 00000000 		.4byte	.LFB20
 10926 1652 D6000000 		.4byte	.LFE20-.LFB20
 10927 1656 01       		.uleb128 0x1
 10928 1657 9C       		.byte	0x9c
 10929 1658 F6160000 		.4byte	0x16f6
 10930 165c 19       		.uleb128 0x19
 10931 165d 647000   		.ascii	"dp\000"
 10932 1660 01       		.byte	0x1
 10933 1661 E206     		.2byte	0x6e2
 10934 1663 5F090000 		.4byte	0x95f
 10935 1667 F31A0000 		.4byte	.LLST115
 10936 166b 20       		.uleb128 0x20
 10937 166c DD010000 		.4byte	.LASF134
 10938 1670 01       		.byte	0x1
 10939 1671 E306     		.2byte	0x6e3
 10940 1673 73000000 		.4byte	0x73
 10941 1677 4B1B0000 		.4byte	.LLST116
 10942 167b 1F       		.uleb128 0x1f
 10943 167c 6F667300 		.ascii	"ofs\000"
 10944 1680 01       		.byte	0x1
 10945 1681 E606     		.2byte	0x6e6
 10946 1683 B8000000 		.4byte	0xb8
 10947 1687 01       		.uleb128 0x1
 10948 1688 55       		.byte	0x55
 10949 1689 26       		.uleb128 0x26
 10950 168a CA020000 		.4byte	.LASF100
 10951 168e 01       		.byte	0x1
 10952 168f E606     		.2byte	0x6e6
 10953 1691 B8000000 		.4byte	0xb8
 10954 1695 7F1B0000 		.4byte	.LLST117
 10955 1699 1A       		.uleb128 0x1a
 10956 169a 667300   		.ascii	"fs\000"
 10957 169d 01       		.byte	0x1
 10958 169e E706     		.2byte	0x6e7
 10959 16a0 55020000 		.4byte	0x255
 10960 16a4 421C0000 		.4byte	.LLST118
 10961 16a8 24       		.uleb128 0x24
 10962 16a9 4E000000 		.4byte	.LVL495
 10963 16ad A4110000 		.4byte	0x11a4
 10964 16b1 21       		.uleb128 0x21
 10965 16b2 78000000 		.4byte	.LVL500
 10966 16b6 39130000 		.4byte	0x1339
 10967 16ba C5160000 		.4byte	0x16c5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 334


 10968 16be 22       		.uleb128 0x22
 10969 16bf 01       		.uleb128 0x1
 10970 16c0 50       		.byte	0x50
 10971 16c1 02       		.uleb128 0x2
 10972 16c2 74       		.byte	0x74
 10973 16c3 00       		.sleb128 0
 10974 16c4 00       		.byte	0
 10975 16c5 21       		.uleb128 0x21
 10976 16c6 8E000000 		.4byte	.LVL502
 10977 16ca 5E150000 		.4byte	0x155e
 10978 16ce DF160000 		.4byte	0x16df
 10979 16d2 22       		.uleb128 0x22
 10980 16d3 01       		.uleb128 0x1
 10981 16d4 50       		.byte	0x50
 10982 16d5 02       		.uleb128 0x2
 10983 16d6 76       		.byte	0x76
 10984 16d7 00       		.sleb128 0
 10985 16d8 22       		.uleb128 0x22
 10986 16d9 01       		.uleb128 0x1
 10987 16da 51       		.byte	0x51
 10988 16db 02       		.uleb128 0x2
 10989 16dc 79       		.byte	0x79
 10990 16dd 00       		.sleb128 0
 10991 16de 00       		.byte	0
 10992 16df 23       		.uleb128 0x23
 10993 16e0 9C000000 		.4byte	.LVL503
 10994 16e4 C4070000 		.4byte	0x7c4
 10995 16e8 22       		.uleb128 0x22
 10996 16e9 01       		.uleb128 0x1
 10997 16ea 50       		.byte	0x50
 10998 16eb 02       		.uleb128 0x2
 10999 16ec 76       		.byte	0x76
 11000 16ed 00       		.sleb128 0
 11001 16ee 22       		.uleb128 0x22
 11002 16ef 01       		.uleb128 0x1
 11003 16f0 51       		.byte	0x51
 11004 16f1 02       		.uleb128 0x2
 11005 16f2 79       		.byte	0x79
 11006 16f3 00       		.sleb128 0
 11007 16f4 00       		.byte	0
 11008 16f5 00       		.byte	0
 11009 16f6 18       		.uleb128 0x18
 11010 16f7 97000000 		.4byte	.LASF135
 11011 16fb 01       		.byte	0x1
 11012 16fc 8A09     		.2byte	0x98a
 11013 16fe 40040000 		.4byte	0x440
 11014 1702 00000000 		.4byte	.LFB25
 11015 1706 56000000 		.4byte	.LFE25-.LFB25
 11016 170a 01       		.uleb128 0x1
 11017 170b 9C       		.byte	0x9c
 11018 170c A6170000 		.4byte	0x17a6
 11019 1710 19       		.uleb128 0x19
 11020 1711 647000   		.ascii	"dp\000"
 11021 1714 01       		.byte	0x1
 11022 1715 8B09     		.2byte	0x98b
 11023 1717 5F090000 		.4byte	0x95f
 11024 171b 6D1C0000 		.4byte	.LLST119
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 335


 11025 171f 1A       		.uleb128 0x1a
 11026 1720 72657300 		.ascii	"res\000"
 11027 1724 01       		.byte	0x1
 11028 1725 8E09     		.2byte	0x98e
 11029 1727 40040000 		.4byte	0x440
 11030 172b 8B1C0000 		.4byte	.LLST120
 11031 172f 1F       		.uleb128 0x1f
 11032 1730 667300   		.ascii	"fs\000"
 11033 1733 01       		.byte	0x1
 11034 1734 8F09     		.2byte	0x98f
 11035 1736 55020000 		.4byte	0x255
 11036 173a 01       		.uleb128 0x1
 11037 173b 56       		.byte	0x56
 11038 173c 1A       		.uleb128 0x1a
 11039 173d 6300     		.ascii	"c\000"
 11040 173f 01       		.byte	0x1
 11041 1740 9009     		.2byte	0x990
 11042 1742 A2000000 		.4byte	0xa2
 11043 1746 B41C0000 		.4byte	.LLST121
 11044 174a 21       		.uleb128 0x21
 11045 174b 0C000000 		.4byte	.LVL522
 11046 174f A2120000 		.4byte	0x12a2
 11047 1753 63170000 		.4byte	0x1763
 11048 1757 22       		.uleb128 0x22
 11049 1758 01       		.uleb128 0x1
 11050 1759 50       		.byte	0x50
 11051 175a 02       		.uleb128 0x2
 11052 175b 74       		.byte	0x74
 11053 175c 00       		.sleb128 0
 11054 175d 22       		.uleb128 0x22
 11055 175e 01       		.uleb128 0x1
 11056 175f 51       		.byte	0x51
 11057 1760 01       		.uleb128 0x1
 11058 1761 30       		.byte	0x30
 11059 1762 00       		.byte	0
 11060 1763 21       		.uleb128 0x21
 11061 1764 16000000 		.4byte	.LVL524
 11062 1768 100C0000 		.4byte	0xc10
 11063 176c 77170000 		.4byte	0x1777
 11064 1770 22       		.uleb128 0x22
 11065 1771 01       		.uleb128 0x1
 11066 1772 50       		.byte	0x50
 11067 1773 02       		.uleb128 0x2
 11068 1774 76       		.byte	0x76
 11069 1775 00       		.sleb128 0
 11070 1776 00       		.byte	0
 11071 1777 21       		.uleb128 0x21
 11072 1778 3A000000 		.4byte	.LVL529
 11073 177c BB060000 		.4byte	0x6bb
 11074 1780 90170000 		.4byte	0x1790
 11075 1784 22       		.uleb128 0x22
 11076 1785 01       		.uleb128 0x1
 11077 1786 51       		.byte	0x51
 11078 1787 02       		.uleb128 0x2
 11079 1788 74       		.byte	0x74
 11080 1789 20       		.sleb128 32
 11081 178a 22       		.uleb128 0x22
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 336


 11082 178b 01       		.uleb128 0x1
 11083 178c 52       		.byte	0x52
 11084 178d 01       		.uleb128 0x1
 11085 178e 3B       		.byte	0x3b
 11086 178f 00       		.byte	0
 11087 1790 23       		.uleb128 0x23
 11088 1791 44000000 		.4byte	.LVL530
 11089 1795 42160000 		.4byte	0x1642
 11090 1799 22       		.uleb128 0x22
 11091 179a 01       		.uleb128 0x1
 11092 179b 50       		.byte	0x50
 11093 179c 02       		.uleb128 0x2
 11094 179d 74       		.byte	0x74
 11095 179e 00       		.sleb128 0
 11096 179f 22       		.uleb128 0x22
 11097 17a0 01       		.uleb128 0x1
 11098 17a1 51       		.byte	0x51
 11099 17a2 01       		.uleb128 0x1
 11100 17a3 30       		.byte	0x30
 11101 17a4 00       		.byte	0
 11102 17a5 00       		.byte	0
 11103 17a6 18       		.uleb128 0x18
 11104 17a7 DA040000 		.4byte	.LASF136
 11105 17ab 01       		.byte	0x1
 11106 17ac F40B     		.2byte	0xbf4
 11107 17ae 40040000 		.4byte	0x440
 11108 17b2 00000000 		.4byte	.LFB30
 11109 17b6 BA000000 		.4byte	.LFE30-.LFB30
 11110 17ba 01       		.uleb128 0x1
 11111 17bb 9C       		.byte	0x9c
 11112 17bc 63180000 		.4byte	0x1863
 11113 17c0 19       		.uleb128 0x19
 11114 17c1 647000   		.ascii	"dp\000"
 11115 17c4 01       		.byte	0x1
 11116 17c5 F50B     		.2byte	0xbf5
 11117 17c7 5F090000 		.4byte	0x95f
 11118 17cb DE1C0000 		.4byte	.LLST122
 11119 17cf 20       		.uleb128 0x20
 11120 17d0 68000000 		.4byte	.LASF105
 11121 17d4 01       		.byte	0x1
 11122 17d5 F60B     		.2byte	0xbf6
 11123 17d7 710A0000 		.4byte	0xa71
 11124 17db FC1C0000 		.4byte	.LLST123
 11125 17df 1A       		.uleb128 0x1a
 11126 17e0 72657300 		.ascii	"res\000"
 11127 17e4 01       		.byte	0x1
 11128 17e5 F90B     		.2byte	0xbf9
 11129 17e7 40040000 		.4byte	0x440
 11130 17eb 1D1D0000 		.4byte	.LLST124
 11131 17ef 1A       		.uleb128 0x1a
 11132 17f0 6E7300   		.ascii	"ns\000"
 11133 17f3 01       		.byte	0x1
 11134 17f4 FA0B     		.2byte	0xbfa
 11135 17f6 A2000000 		.4byte	0xa2
 11136 17fa 731D0000 		.4byte	.LLST125
 11137 17fe 1F       		.uleb128 0x1f
 11138 17ff 667300   		.ascii	"fs\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 337


 11139 1802 01       		.byte	0x1
 11140 1803 FB0B     		.2byte	0xbfb
 11141 1805 55020000 		.4byte	0x255
 11142 1809 01       		.uleb128 0x1
 11143 180a 55       		.byte	0x55
 11144 180b 21       		.uleb128 0x21
 11145 180c 44000000 		.4byte	.LVL539
 11146 1810 A2120000 		.4byte	0x12a2
 11147 1814 24180000 		.4byte	0x1824
 11148 1818 22       		.uleb128 0x22
 11149 1819 01       		.uleb128 0x1
 11150 181a 50       		.byte	0x50
 11151 181b 02       		.uleb128 0x2
 11152 181c 74       		.byte	0x74
 11153 181d 00       		.sleb128 0
 11154 181e 22       		.uleb128 0x22
 11155 181f 01       		.uleb128 0x1
 11156 1820 51       		.byte	0x51
 11157 1821 01       		.uleb128 0x1
 11158 1822 30       		.byte	0x30
 11159 1823 00       		.byte	0
 11160 1824 21       		.uleb128 0x21
 11161 1825 50000000 		.4byte	.LVL542
 11162 1829 6B090000 		.4byte	0x96b
 11163 182d 3E180000 		.4byte	0x183e
 11164 1831 22       		.uleb128 0x22
 11165 1832 01       		.uleb128 0x1
 11166 1833 50       		.byte	0x50
 11167 1834 02       		.uleb128 0x2
 11168 1835 74       		.byte	0x74
 11169 1836 00       		.sleb128 0
 11170 1837 22       		.uleb128 0x22
 11171 1838 01       		.uleb128 0x1
 11172 1839 51       		.byte	0x51
 11173 183a 02       		.uleb128 0x2
 11174 183b 91       		.byte	0x91
 11175 183c 6C       		.sleb128 -20
 11176 183d 00       		.byte	0
 11177 183e 21       		.uleb128 0x21
 11178 183f 5A000000 		.4byte	.LVL544
 11179 1843 F6160000 		.4byte	0x16f6
 11180 1847 52180000 		.4byte	0x1852
 11181 184b 22       		.uleb128 0x22
 11182 184c 01       		.uleb128 0x1
 11183 184d 50       		.byte	0x50
 11184 184e 02       		.uleb128 0x2
 11185 184f 74       		.byte	0x74
 11186 1850 00       		.sleb128 0
 11187 1851 00       		.byte	0
 11188 1852 23       		.uleb128 0x23
 11189 1853 A2000000 		.4byte	.LVL551
 11190 1857 FE070000 		.4byte	0x7fe
 11191 185b 22       		.uleb128 0x22
 11192 185c 01       		.uleb128 0x1
 11193 185d 50       		.byte	0x50
 11194 185e 02       		.uleb128 0x2
 11195 185f 75       		.byte	0x75
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 338


 11196 1860 00       		.sleb128 0
 11197 1861 00       		.byte	0
 11198 1862 00       		.byte	0
 11199 1863 18       		.uleb128 0x18
 11200 1864 1A060000 		.4byte	.LASF137
 11201 1868 01       		.byte	0x1
 11202 1869 1E07     		.2byte	0x71e
 11203 186b 40040000 		.4byte	0x440
 11204 186f 00000000 		.4byte	.LFB21
 11205 1873 4C000000 		.4byte	.LFE21-.LFB21
 11206 1877 01       		.uleb128 0x1
 11207 1878 9C       		.byte	0x9c
 11208 1879 0A190000 		.4byte	0x190a
 11209 187d 19       		.uleb128 0x19
 11210 187e 647000   		.ascii	"dp\000"
 11211 1881 01       		.byte	0x1
 11212 1882 1F07     		.2byte	0x71f
 11213 1884 5F090000 		.4byte	0x95f
 11214 1888 C01D0000 		.4byte	.LLST126
 11215 188c 20       		.uleb128 0x20
 11216 188d 40060000 		.4byte	.LASF138
 11217 1891 01       		.byte	0x1
 11218 1892 2007     		.2byte	0x720
 11219 1894 97000000 		.4byte	0x97
 11220 1898 DE1D0000 		.4byte	.LLST127
 11221 189c 1A       		.uleb128 0x1a
 11222 189d 72657300 		.ascii	"res\000"
 11223 18a1 01       		.byte	0x1
 11224 18a2 2307     		.2byte	0x723
 11225 18a4 40040000 		.4byte	0x440
 11226 18a8 FC1D0000 		.4byte	.LLST128
 11227 18ac 1A       		.uleb128 0x1a
 11228 18ad 6E00     		.ascii	"n\000"
 11229 18af 01       		.byte	0x1
 11230 18b0 2407     		.2byte	0x724
 11231 18b2 97000000 		.4byte	0x97
 11232 18b6 301E0000 		.4byte	.LLST129
 11233 18ba 1F       		.uleb128 0x1f
 11234 18bb 667300   		.ascii	"fs\000"
 11235 18be 01       		.byte	0x1
 11236 18bf 2507     		.2byte	0x725
 11237 18c1 55020000 		.4byte	0x255
 11238 18c5 01       		.uleb128 0x1
 11239 18c6 56       		.byte	0x56
 11240 18c7 21       		.uleb128 0x21
 11241 18c8 0E000000 		.4byte	.LVL558
 11242 18cc A2120000 		.4byte	0x12a2
 11243 18d0 E0180000 		.4byte	0x18e0
 11244 18d4 22       		.uleb128 0x22
 11245 18d5 01       		.uleb128 0x1
 11246 18d6 50       		.byte	0x50
 11247 18d7 02       		.uleb128 0x2
 11248 18d8 74       		.byte	0x74
 11249 18d9 00       		.sleb128 0
 11250 18da 22       		.uleb128 0x22
 11251 18db 01       		.uleb128 0x1
 11252 18dc 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 339


 11253 18dd 01       		.uleb128 0x1
 11254 18de 30       		.byte	0x30
 11255 18df 00       		.byte	0
 11256 18e0 21       		.uleb128 0x21
 11257 18e1 1C000000 		.4byte	.LVL561
 11258 18e5 100C0000 		.4byte	0xc10
 11259 18e9 F4180000 		.4byte	0x18f4
 11260 18ed 22       		.uleb128 0x22
 11261 18ee 01       		.uleb128 0x1
 11262 18ef 50       		.byte	0x50
 11263 18f0 02       		.uleb128 0x2
 11264 18f1 76       		.byte	0x76
 11265 18f2 00       		.sleb128 0
 11266 18f3 00       		.byte	0
 11267 18f4 23       		.uleb128 0x23
 11268 18f5 3C000000 		.4byte	.LVL565
 11269 18f9 42160000 		.4byte	0x1642
 11270 18fd 22       		.uleb128 0x22
 11271 18fe 01       		.uleb128 0x1
 11272 18ff 50       		.byte	0x50
 11273 1900 02       		.uleb128 0x2
 11274 1901 74       		.byte	0x74
 11275 1902 00       		.sleb128 0
 11276 1903 22       		.uleb128 0x22
 11277 1904 01       		.uleb128 0x1
 11278 1905 51       		.byte	0x51
 11279 1906 01       		.uleb128 0x1
 11280 1907 31       		.byte	0x31
 11281 1908 00       		.byte	0
 11282 1909 00       		.byte	0
 11283 190a 18       		.uleb128 0x18
 11284 190b 6D000000 		.4byte	.LASF139
 11285 190f 01       		.byte	0x1
 11286 1910 DB09     		.2byte	0x9db
 11287 1912 40040000 		.4byte	0x440
 11288 1916 00000000 		.4byte	.LFB26
 11289 191a 3A000000 		.4byte	.LFE26-.LFB26
 11290 191e 01       		.uleb128 0x1
 11291 191f 9C       		.byte	0x9c
 11292 1920 AC190000 		.4byte	0x19ac
 11293 1924 19       		.uleb128 0x19
 11294 1925 647000   		.ascii	"dp\000"
 11295 1928 01       		.byte	0x1
 11296 1929 DC09     		.2byte	0x9dc
 11297 192b 5F090000 		.4byte	0x95f
 11298 192f 431E0000 		.4byte	.LLST130
 11299 1933 1A       		.uleb128 0x1a
 11300 1934 72657300 		.ascii	"res\000"
 11301 1938 01       		.byte	0x1
 11302 1939 DF09     		.2byte	0x9df
 11303 193b 40040000 		.4byte	0x440
 11304 193f 611E0000 		.4byte	.LLST131
 11305 1943 1F       		.uleb128 0x1f
 11306 1944 667300   		.ascii	"fs\000"
 11307 1947 01       		.byte	0x1
 11308 1948 E009     		.2byte	0x9e0
 11309 194a 55020000 		.4byte	0x255
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 340


 11310 194e 01       		.uleb128 0x1
 11311 194f 56       		.byte	0x56
 11312 1950 21       		.uleb128 0x21
 11313 1951 0C000000 		.4byte	.LVL570
 11314 1955 63180000 		.4byte	0x1863
 11315 1959 69190000 		.4byte	0x1969
 11316 195d 22       		.uleb128 0x22
 11317 195e 01       		.uleb128 0x1
 11318 195f 50       		.byte	0x50
 11319 1960 02       		.uleb128 0x2
 11320 1961 74       		.byte	0x74
 11321 1962 00       		.sleb128 0
 11322 1963 22       		.uleb128 0x22
 11323 1964 01       		.uleb128 0x1
 11324 1965 51       		.byte	0x51
 11325 1966 01       		.uleb128 0x1
 11326 1967 31       		.byte	0x31
 11327 1968 00       		.byte	0
 11328 1969 21       		.uleb128 0x21
 11329 196a 18000000 		.4byte	.LVL572
 11330 196e 100C0000 		.4byte	0xc10
 11331 1972 7D190000 		.4byte	0x197d
 11332 1976 22       		.uleb128 0x22
 11333 1977 01       		.uleb128 0x1
 11334 1978 50       		.byte	0x50
 11335 1979 02       		.uleb128 0x2
 11336 197a 76       		.byte	0x76
 11337 197b 00       		.sleb128 0
 11338 197c 00       		.byte	0
 11339 197d 21       		.uleb128 0x21
 11340 197e 26000000 		.4byte	.LVL574
 11341 1982 67060000 		.4byte	0x667
 11342 1986 96190000 		.4byte	0x1996
 11343 198a 22       		.uleb128 0x22
 11344 198b 01       		.uleb128 0x1
 11345 198c 51       		.byte	0x51
 11346 198d 01       		.uleb128 0x1
 11347 198e 30       		.byte	0x30
 11348 198f 22       		.uleb128 0x22
 11349 1990 01       		.uleb128 0x1
 11350 1991 52       		.byte	0x52
 11351 1992 02       		.uleb128 0x2
 11352 1993 08       		.byte	0x8
 11353 1994 20       		.byte	0x20
 11354 1995 00       		.byte	0
 11355 1996 23       		.uleb128 0x23
 11356 1997 32000000 		.4byte	.LVL575
 11357 199b FD050000 		.4byte	0x5fd
 11358 199f 22       		.uleb128 0x22
 11359 19a0 01       		.uleb128 0x1
 11360 19a1 51       		.byte	0x51
 11361 19a2 02       		.uleb128 0x2
 11362 19a3 74       		.byte	0x74
 11363 19a4 20       		.sleb128 32
 11364 19a5 22       		.uleb128 0x22
 11365 19a6 01       		.uleb128 0x1
 11366 19a7 52       		.byte	0x52
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 341


 11367 19a8 01       		.uleb128 0x1
 11368 19a9 3B       		.byte	0x3b
 11369 19aa 00       		.byte	0
 11370 19ab 00       		.byte	0
 11371 19ac 18       		.uleb128 0x18
 11372 19ad 0F020000 		.4byte	.LASF140
 11373 19b1 01       		.byte	0x1
 11374 19b2 3C09     		.2byte	0x93c
 11375 19b4 40040000 		.4byte	0x440
 11376 19b8 00000000 		.4byte	.LFB24
 11377 19bc 60000000 		.4byte	.LFE24-.LFB24
 11378 19c0 01       		.uleb128 0x1
 11379 19c1 9C       		.byte	0x9c
 11380 19c2 4A1A0000 		.4byte	0x1a4a
 11381 19c6 19       		.uleb128 0x19
 11382 19c7 647000   		.ascii	"dp\000"
 11383 19ca 01       		.byte	0x1
 11384 19cb 3D09     		.2byte	0x93d
 11385 19cd 5F090000 		.4byte	0x95f
 11386 19d1 8A1E0000 		.4byte	.LLST132
 11387 19d5 19       		.uleb128 0x19
 11388 19d6 766F6C00 		.ascii	"vol\000"
 11389 19da 01       		.byte	0x1
 11390 19db 3E09     		.2byte	0x93e
 11391 19dd 73000000 		.4byte	0x73
 11392 19e1 A81E0000 		.4byte	.LLST133
 11393 19e5 1A       		.uleb128 0x1a
 11394 19e6 72657300 		.ascii	"res\000"
 11395 19ea 01       		.byte	0x1
 11396 19eb 4109     		.2byte	0x941
 11397 19ed 40040000 		.4byte	0x440
 11398 19f1 C61E0000 		.4byte	.LLST134
 11399 19f5 1F       		.uleb128 0x1f
 11400 19f6 667300   		.ascii	"fs\000"
 11401 19f9 01       		.byte	0x1
 11402 19fa 4209     		.2byte	0x942
 11403 19fc 55020000 		.4byte	0x255
 11404 1a00 01       		.uleb128 0x1
 11405 1a01 55       		.byte	0x55
 11406 1a02 26       		.uleb128 0x26
 11407 1a03 28020000 		.4byte	.LASF41
 11408 1a07 01       		.byte	0x1
 11409 1a08 4309     		.2byte	0x943
 11410 1a0a A2000000 		.4byte	0xa2
 11411 1a0e 1C1F0000 		.4byte	.LLST135
 11412 1a12 1A       		.uleb128 0x1a
 11413 1a13 6200     		.ascii	"b\000"
 11414 1a15 01       		.byte	0x1
 11415 1a16 4309     		.2byte	0x943
 11416 1a18 A2000000 		.4byte	0xa2
 11417 1a1c 3B1F0000 		.4byte	.LLST136
 11418 1a20 21       		.uleb128 0x21
 11419 1a21 12000000 		.4byte	.LVL581
 11420 1a25 100C0000 		.4byte	0xc10
 11421 1a29 341A0000 		.4byte	0x1a34
 11422 1a2d 22       		.uleb128 0x22
 11423 1a2e 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 342


 11424 1a2f 50       		.byte	0x50
 11425 1a30 02       		.uleb128 0x2
 11426 1a31 75       		.byte	0x75
 11427 1a32 00       		.sleb128 0
 11428 1a33 00       		.byte	0
 11429 1a34 23       		.uleb128 0x23
 11430 1a35 48000000 		.4byte	.LVL586
 11431 1a39 42160000 		.4byte	0x1642
 11432 1a3d 22       		.uleb128 0x22
 11433 1a3e 01       		.uleb128 0x1
 11434 1a3f 50       		.byte	0x50
 11435 1a40 02       		.uleb128 0x2
 11436 1a41 74       		.byte	0x74
 11437 1a42 00       		.sleb128 0
 11438 1a43 22       		.uleb128 0x22
 11439 1a44 01       		.uleb128 0x1
 11440 1a45 51       		.byte	0x51
 11441 1a46 01       		.uleb128 0x1
 11442 1a47 30       		.byte	0x30
 11443 1a48 00       		.byte	0
 11444 1a49 00       		.byte	0
 11445 1a4a 18       		.uleb128 0x18
 11446 1a4b 1D040000 		.4byte	.LASF141
 11447 1a4f 01       		.byte	0x1
 11448 1a50 6504     		.2byte	0x465
 11449 1a52 40040000 		.4byte	0x440
 11450 1a56 00000000 		.4byte	.LFB12
 11451 1a5a 8C000000 		.4byte	.LFE12-.LFB12
 11452 1a5e 01       		.uleb128 0x1
 11453 1a5f 9C       		.byte	0x9c
 11454 1a60 661B0000 		.4byte	0x1b66
 11455 1a64 19       		.uleb128 0x19
 11456 1a65 667300   		.ascii	"fs\000"
 11457 1a68 01       		.byte	0x1
 11458 1a69 6604     		.2byte	0x466
 11459 1a6b 55020000 		.4byte	0x255
 11460 1a6f 591F0000 		.4byte	.LLST137
 11461 1a73 1A       		.uleb128 0x1a
 11462 1a74 72657300 		.ascii	"res\000"
 11463 1a78 01       		.byte	0x1
 11464 1a79 6904     		.2byte	0x469
 11465 1a7b 40040000 		.4byte	0x440
 11466 1a7f 851F0000 		.4byte	.LLST138
 11467 1a83 21       		.uleb128 0x21
 11468 1a84 08000000 		.4byte	.LVL591
 11469 1a88 A80B0000 		.4byte	0xba8
 11470 1a8c 971A0000 		.4byte	0x1a97
 11471 1a90 22       		.uleb128 0x22
 11472 1a91 01       		.uleb128 0x1
 11473 1a92 50       		.byte	0x50
 11474 1a93 02       		.uleb128 0x2
 11475 1a94 74       		.byte	0x74
 11476 1a95 00       		.sleb128 0
 11477 1a96 00       		.byte	0
 11478 1a97 21       		.uleb128 0x21
 11479 1a98 2A000000 		.4byte	.LVL593
 11480 1a9c 67060000 		.4byte	0x667
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 343


 11481 1aa0 B71A0000 		.4byte	0x1ab7
 11482 1aa4 22       		.uleb128 0x22
 11483 1aa5 01       		.uleb128 0x1
 11484 1aa6 50       		.byte	0x50
 11485 1aa7 02       		.uleb128 0x2
 11486 1aa8 76       		.byte	0x76
 11487 1aa9 00       		.sleb128 0
 11488 1aaa 22       		.uleb128 0x22
 11489 1aab 01       		.uleb128 0x1
 11490 1aac 51       		.byte	0x51
 11491 1aad 01       		.uleb128 0x1
 11492 1aae 30       		.byte	0x30
 11493 1aaf 22       		.uleb128 0x22
 11494 1ab0 01       		.uleb128 0x1
 11495 1ab1 52       		.byte	0x52
 11496 1ab2 03       		.uleb128 0x3
 11497 1ab3 0A       		.byte	0xa
 11498 1ab4 0002     		.2byte	0x200
 11499 1ab6 00       		.byte	0
 11500 1ab7 21       		.uleb128 0x21
 11501 1ab8 36000000 		.4byte	.LVL594
 11502 1abc 8F050000 		.4byte	0x58f
 11503 1ac0 D31A0000 		.4byte	0x1ad3
 11504 1ac4 22       		.uleb128 0x22
 11505 1ac5 01       		.uleb128 0x1
 11506 1ac6 50       		.byte	0x50
 11507 1ac7 03       		.uleb128 0x3
 11508 1ac8 74       		.byte	0x74
 11509 1ac9 B204     		.sleb128 562
 11510 1acb 22       		.uleb128 0x22
 11511 1acc 01       		.uleb128 0x1
 11512 1acd 51       		.byte	0x51
 11513 1ace 03       		.uleb128 0x3
 11514 1acf 0B       		.byte	0xb
 11515 1ad0 55AA     		.2byte	0xaa55
 11516 1ad2 00       		.byte	0
 11517 1ad3 21       		.uleb128 0x21
 11518 1ad4 3E000000 		.4byte	.LVL595
 11519 1ad8 C6050000 		.4byte	0x5c6
 11520 1adc F01A0000 		.4byte	0x1af0
 11521 1ae0 22       		.uleb128 0x22
 11522 1ae1 01       		.uleb128 0x1
 11523 1ae2 50       		.byte	0x50
 11524 1ae3 02       		.uleb128 0x2
 11525 1ae4 76       		.byte	0x76
 11526 1ae5 00       		.sleb128 0
 11527 1ae6 22       		.uleb128 0x22
 11528 1ae7 01       		.uleb128 0x1
 11529 1ae8 51       		.byte	0x51
 11530 1ae9 05       		.uleb128 0x5
 11531 1aea 0C       		.byte	0xc
 11532 1aeb 52526141 		.4byte	0x41615252
 11533 1aef 00       		.byte	0
 11534 1af0 21       		.uleb128 0x21
 11535 1af1 48000000 		.4byte	.LVL596
 11536 1af5 C6050000 		.4byte	0x5c6
 11537 1af9 0E1B0000 		.4byte	0x1b0e
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 344


 11538 1afd 22       		.uleb128 0x22
 11539 1afe 01       		.uleb128 0x1
 11540 1aff 50       		.byte	0x50
 11541 1b00 03       		.uleb128 0x3
 11542 1b01 74       		.byte	0x74
 11543 1b02 9804     		.sleb128 536
 11544 1b04 22       		.uleb128 0x22
 11545 1b05 01       		.uleb128 0x1
 11546 1b06 51       		.byte	0x51
 11547 1b07 05       		.uleb128 0x5
 11548 1b08 0C       		.byte	0xc
 11549 1b09 72724161 		.4byte	0x61417272
 11550 1b0d 00       		.byte	0
 11551 1b0e 21       		.uleb128 0x21
 11552 1b0f 52000000 		.4byte	.LVL597
 11553 1b13 C6050000 		.4byte	0x5c6
 11554 1b17 231B0000 		.4byte	0x1b23
 11555 1b1b 22       		.uleb128 0x22
 11556 1b1c 01       		.uleb128 0x1
 11557 1b1d 50       		.byte	0x50
 11558 1b1e 03       		.uleb128 0x3
 11559 1b1f 74       		.byte	0x74
 11560 1b20 9C04     		.sleb128 540
 11561 1b22 00       		.byte	0
 11562 1b23 21       		.uleb128 0x21
 11563 1b24 5C000000 		.4byte	.LVL598
 11564 1b28 C6050000 		.4byte	0x5c6
 11565 1b2c 381B0000 		.4byte	0x1b38
 11566 1b30 22       		.uleb128 0x22
 11567 1b31 01       		.uleb128 0x1
 11568 1b32 50       		.byte	0x50
 11569 1b33 03       		.uleb128 0x3
 11570 1b34 74       		.byte	0x74
 11571 1b35 A004     		.sleb128 544
 11572 1b37 00       		.byte	0
 11573 1b38 21       		.uleb128 0x21
 11574 1b39 6C000000 		.4byte	.LVL599
 11575 1b3d B8360000 		.4byte	0x36b8
 11576 1b41 511B0000 		.4byte	0x1b51
 11577 1b45 22       		.uleb128 0x22
 11578 1b46 01       		.uleb128 0x1
 11579 1b47 51       		.byte	0x51
 11580 1b48 02       		.uleb128 0x2
 11581 1b49 76       		.byte	0x76
 11582 1b4a 00       		.sleb128 0
 11583 1b4b 22       		.uleb128 0x22
 11584 1b4c 01       		.uleb128 0x1
 11585 1b4d 53       		.byte	0x53
 11586 1b4e 01       		.uleb128 0x1
 11587 1b4f 31       		.byte	0x31
 11588 1b50 00       		.byte	0
 11589 1b51 23       		.uleb128 0x23
 11590 1b52 7A000000 		.4byte	.LVL600
 11591 1b56 D9360000 		.4byte	0x36d9
 11592 1b5a 22       		.uleb128 0x22
 11593 1b5b 01       		.uleb128 0x1
 11594 1b5c 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 345


 11595 1b5d 01       		.uleb128 0x1
 11596 1b5e 30       		.byte	0x30
 11597 1b5f 22       		.uleb128 0x22
 11598 1b60 01       		.uleb128 0x1
 11599 1b61 52       		.byte	0x52
 11600 1b62 01       		.uleb128 0x1
 11601 1b63 30       		.byte	0x30
 11602 1b64 00       		.byte	0
 11603 1b65 00       		.byte	0
 11604 1b66 27       		.uleb128 0x27
 11605 1b67 62040000 		.4byte	.LASF142
 11606 1b6b 01       		.byte	0x1
 11607 1b6c 3B0E     		.2byte	0xe3b
 11608 1b6e 40040000 		.4byte	0x440
 11609 1b72 00000000 		.4byte	.LFB36
 11610 1b76 54000000 		.4byte	.LFE36-.LFB36
 11611 1b7a 01       		.uleb128 0x1
 11612 1b7b 9C       		.byte	0x9c
 11613 1b7c 1D1C0000 		.4byte	0x1c1d
 11614 1b80 19       		.uleb128 0x19
 11615 1b81 667300   		.ascii	"fs\000"
 11616 1b84 01       		.byte	0x1
 11617 1b85 3C0E     		.2byte	0xe3c
 11618 1b87 55020000 		.4byte	0x255
 11619 1b8b A31F0000 		.4byte	.LLST139
 11620 1b8f 20       		.uleb128 0x20
 11621 1b90 68000000 		.4byte	.LASF105
 11622 1b94 01       		.byte	0x1
 11623 1b95 3D0E     		.2byte	0xe3d
 11624 1b97 710A0000 		.4byte	0xa71
 11625 1b9b E61F0000 		.4byte	.LLST140
 11626 1b9f 19       		.uleb128 0x19
 11627 1ba0 6F707400 		.ascii	"opt\000"
 11628 1ba4 01       		.byte	0x1
 11629 1ba5 3E0E     		.2byte	0xe3e
 11630 1ba7 A2000000 		.4byte	0xa2
 11631 1bab 1D200000 		.4byte	.LLST141
 11632 1baf 1A       		.uleb128 0x1a
 11633 1bb0 63667300 		.ascii	"cfs\000"
 11634 1bb4 01       		.byte	0x1
 11635 1bb5 410E     		.2byte	0xe41
 11636 1bb7 55020000 		.4byte	0x255
 11637 1bbb 3E200000 		.4byte	.LLST142
 11638 1bbf 1A       		.uleb128 0x1a
 11639 1bc0 766F6C00 		.ascii	"vol\000"
 11640 1bc4 01       		.byte	0x1
 11641 1bc5 420E     		.2byte	0xe42
 11642 1bc7 73000000 		.4byte	0x73
 11643 1bcb 51200000 		.4byte	.LLST143
 11644 1bcf 1A       		.uleb128 0x1a
 11645 1bd0 72657300 		.ascii	"res\000"
 11646 1bd4 01       		.byte	0x1
 11647 1bd5 430E     		.2byte	0xe43
 11648 1bd7 40040000 		.4byte	0x440
 11649 1bdb 6F200000 		.4byte	.LLST144
 11650 1bdf 1F       		.uleb128 0x1f
 11651 1be0 727000   		.ascii	"rp\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 346


 11652 1be3 01       		.byte	0x1
 11653 1be4 440E     		.2byte	0xe44
 11654 1be6 710A0000 		.4byte	0xa71
 11655 1bea 02       		.uleb128 0x2
 11656 1beb 91       		.byte	0x91
 11657 1bec 74       		.sleb128 -12
 11658 1bed 21       		.uleb128 0x21
 11659 1bee 14000000 		.4byte	.LVL605
 11660 1bf2 7C0A0000 		.4byte	0xa7c
 11661 1bf6 011C0000 		.4byte	0x1c01
 11662 1bfa 22       		.uleb128 0x22
 11663 1bfb 01       		.uleb128 0x1
 11664 1bfc 50       		.byte	0x50
 11665 1bfd 02       		.uleb128 0x2
 11666 1bfe 91       		.byte	0x91
 11667 1bff 74       		.sleb128 -12
 11668 1c00 00       		.byte	0
 11669 1c01 23       		.uleb128 0x23
 11670 1c02 44000000 		.4byte	.LVL610
 11671 1c06 000E0000 		.4byte	0xe00
 11672 1c0a 22       		.uleb128 0x22
 11673 1c0b 01       		.uleb128 0x1
 11674 1c0c 50       		.byte	0x50
 11675 1c0d 02       		.uleb128 0x2
 11676 1c0e 7D       		.byte	0x7d
 11677 1c0f 00       		.sleb128 0
 11678 1c10 22       		.uleb128 0x22
 11679 1c11 01       		.uleb128 0x1
 11680 1c12 51       		.byte	0x51
 11681 1c13 02       		.uleb128 0x2
 11682 1c14 91       		.byte	0x91
 11683 1c15 6C       		.sleb128 -20
 11684 1c16 22       		.uleb128 0x22
 11685 1c17 01       		.uleb128 0x1
 11686 1c18 52       		.byte	0x52
 11687 1c19 01       		.uleb128 0x1
 11688 1c1a 30       		.byte	0x30
 11689 1c1b 00       		.byte	0
 11690 1c1c 00       		.byte	0
 11691 1c1d 27       		.uleb128 0x27
 11692 1c1e 31070000 		.4byte	.LASF143
 11693 1c22 01       		.byte	0x1
 11694 1c23 6B0E     		.2byte	0xe6b
 11695 1c25 40040000 		.4byte	0x440
 11696 1c29 00000000 		.4byte	.LFB37
 11697 1c2d D0010000 		.4byte	.LFE37-.LFB37
 11698 1c31 01       		.uleb128 0x1
 11699 1c32 9C       		.byte	0x9c
 11700 1c33 451E0000 		.4byte	0x1e45
 11701 1c37 19       		.uleb128 0x19
 11702 1c38 667000   		.ascii	"fp\000"
 11703 1c3b 01       		.byte	0x1
 11704 1c3c 6C0E     		.2byte	0xe6c
 11705 1c3e EE040000 		.4byte	0x4ee
 11706 1c42 82200000 		.4byte	.LLST145
 11707 1c46 20       		.uleb128 0x20
 11708 1c47 68000000 		.4byte	.LASF105
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 347


 11709 1c4b 01       		.byte	0x1
 11710 1c4c 6D0E     		.2byte	0xe6d
 11711 1c4e 710A0000 		.4byte	0xa71
 11712 1c52 D2200000 		.4byte	.LLST146
 11713 1c56 20       		.uleb128 0x20
 11714 1c57 2D020000 		.4byte	.LASF116
 11715 1c5b 01       		.byte	0x1
 11716 1c5c 6E0E     		.2byte	0xe6e
 11717 1c5e A2000000 		.4byte	0xa2
 11718 1c62 30210000 		.4byte	.LLST147
 11719 1c66 1A       		.uleb128 0x1a
 11720 1c67 72657300 		.ascii	"res\000"
 11721 1c6b 01       		.byte	0x1
 11722 1c6c 710E     		.2byte	0xe71
 11723 1c6e 40040000 		.4byte	0x440
 11724 1c72 59210000 		.4byte	.LLST148
 11725 1c76 1F       		.uleb128 0x1f
 11726 1c77 646A00   		.ascii	"dj\000"
 11727 1c7a 01       		.byte	0x1
 11728 1c7b 720E     		.2byte	0xe72
 11729 1c7d 4D030000 		.4byte	0x34d
 11730 1c81 03       		.uleb128 0x3
 11731 1c82 91       		.byte	0x91
 11732 1c83 BC7F     		.sleb128 -68
 11733 1c85 1F       		.uleb128 0x1f
 11734 1c86 667300   		.ascii	"fs\000"
 11735 1c89 01       		.byte	0x1
 11736 1c8a 730E     		.2byte	0xe73
 11737 1c8c 55020000 		.4byte	0x255
 11738 1c90 03       		.uleb128 0x3
 11739 1c91 91       		.byte	0x91
 11740 1c92 B87F     		.sleb128 -72
 11741 1c94 1A       		.uleb128 0x1a
 11742 1c95 636C00   		.ascii	"cl\000"
 11743 1c98 01       		.byte	0x1
 11744 1c99 750E     		.2byte	0xe75
 11745 1c9b B8000000 		.4byte	0xb8
 11746 1c9f C4210000 		.4byte	.LLST149
 11747 1ca3 1A       		.uleb128 0x1a
 11748 1ca4 62637300 		.ascii	"bcs\000"
 11749 1ca8 01       		.byte	0x1
 11750 1ca9 750E     		.2byte	0xe75
 11751 1cab B8000000 		.4byte	0xb8
 11752 1caf E2210000 		.4byte	.LLST150
 11753 1cb3 26       		.uleb128 0x26
 11754 1cb4 CA020000 		.4byte	.LASF100
 11755 1cb8 01       		.byte	0x1
 11756 1cb9 750E     		.2byte	0xe75
 11757 1cbb B8000000 		.4byte	0xb8
 11758 1cbf F5210000 		.4byte	.LLST151
 11759 1cc3 1A       		.uleb128 0x1a
 11760 1cc4 736300   		.ascii	"sc\000"
 11761 1cc7 01       		.byte	0x1
 11762 1cc8 760E     		.2byte	0xe76
 11763 1cca EB000000 		.4byte	0xeb
 11764 1cce 1E220000 		.4byte	.LLST152
 11765 1cd2 1A       		.uleb128 0x1a
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 348


 11766 1cd3 6F667300 		.ascii	"ofs\000"
 11767 1cd7 01       		.byte	0x1
 11768 1cd8 770E     		.2byte	0xe77
 11769 1cda E0000000 		.4byte	0xe0
 11770 1cde 47220000 		.4byte	.LLST153
 11771 1ce2 21       		.uleb128 0x21
 11772 1ce3 20000000 		.4byte	.LVL619
 11773 1ce7 000E0000 		.4byte	0xe00
 11774 1ceb 041D0000 		.4byte	0x1d04
 11775 1cef 22       		.uleb128 0x22
 11776 1cf0 01       		.uleb128 0x1
 11777 1cf1 50       		.byte	0x50
 11778 1cf2 03       		.uleb128 0x3
 11779 1cf3 91       		.byte	0x91
 11780 1cf4 B47F     		.sleb128 -76
 11781 1cf6 22       		.uleb128 0x22
 11782 1cf7 01       		.uleb128 0x1
 11783 1cf8 51       		.byte	0x51
 11784 1cf9 03       		.uleb128 0x3
 11785 1cfa 91       		.byte	0x91
 11786 1cfb B87F     		.sleb128 -72
 11787 1cfd 22       		.uleb128 0x22
 11788 1cfe 01       		.uleb128 0x1
 11789 1cff 52       		.byte	0x52
 11790 1d00 02       		.uleb128 0x2
 11791 1d01 77       		.byte	0x77
 11792 1d02 00       		.sleb128 0
 11793 1d03 00       		.byte	0
 11794 1d04 21       		.uleb128 0x21
 11795 1d05 34000000 		.4byte	.LVL621
 11796 1d09 A6170000 		.4byte	0x17a6
 11797 1d0d 191D0000 		.4byte	0x1d19
 11798 1d11 22       		.uleb128 0x22
 11799 1d12 01       		.uleb128 0x1
 11800 1d13 50       		.byte	0x50
 11801 1d14 03       		.uleb128 0x3
 11802 1d15 91       		.byte	0x91
 11803 1d16 BC7F     		.sleb128 -68
 11804 1d18 00       		.byte	0
 11805 1d19 21       		.uleb128 0x21
 11806 1d1a 54000000 		.4byte	.LVL623
 11807 1d1e 0A190000 		.4byte	0x190a
 11808 1d22 2E1D0000 		.4byte	0x1d2e
 11809 1d26 22       		.uleb128 0x22
 11810 1d27 01       		.uleb128 0x1
 11811 1d28 50       		.byte	0x50
 11812 1d29 03       		.uleb128 0x3
 11813 1d2a 91       		.byte	0x91
 11814 1d2b BC7F     		.sleb128 -68
 11815 1d2d 00       		.byte	0
 11816 1d2e 21       		.uleb128 0x21
 11817 1d2f 88000000 		.4byte	.LVL629
 11818 1d33 FE070000 		.4byte	0x7fe
 11819 1d37 421D0000 		.4byte	0x1d42
 11820 1d3b 22       		.uleb128 0x22
 11821 1d3c 01       		.uleb128 0x1
 11822 1d3d 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 349


 11823 1d3e 02       		.uleb128 0x2
 11824 1d3f 76       		.byte	0x76
 11825 1d40 00       		.sleb128 0
 11826 1d41 00       		.byte	0
 11827 1d42 21       		.uleb128 0x21
 11828 1d43 94000000 		.4byte	.LVL632
 11829 1d47 C6050000 		.4byte	0x5c6
 11830 1d4b 5F1D0000 		.4byte	0x1d5f
 11831 1d4f 22       		.uleb128 0x22
 11832 1d50 01       		.uleb128 0x1
 11833 1d51 50       		.byte	0x50
 11834 1d52 02       		.uleb128 0x2
 11835 1d53 76       		.byte	0x76
 11836 1d54 0E       		.sleb128 14
 11837 1d55 22       		.uleb128 0x22
 11838 1d56 01       		.uleb128 0x1
 11839 1d57 51       		.byte	0x51
 11840 1d58 05       		.uleb128 0x5
 11841 1d59 0C       		.byte	0xc
 11842 1d5a 0000214E 		.4byte	0x4e210000
 11843 1d5e 00       		.byte	0
 11844 1d5f 21       		.uleb128 0x21
 11845 1d60 A4000000 		.4byte	.LVL633
 11846 1d64 6B080000 		.4byte	0x86b
 11847 1d68 721D0000 		.4byte	0x1d72
 11848 1d6c 22       		.uleb128 0x22
 11849 1d6d 01       		.uleb128 0x1
 11850 1d6e 52       		.byte	0x52
 11851 1d6f 01       		.uleb128 0x1
 11852 1d70 30       		.byte	0x30
 11853 1d71 00       		.byte	0
 11854 1d72 21       		.uleb128 0x21
 11855 1d73 AE000000 		.4byte	.LVL634
 11856 1d77 C6050000 		.4byte	0x5c6
 11857 1d7b 851D0000 		.4byte	0x1d85
 11858 1d7f 22       		.uleb128 0x22
 11859 1d80 01       		.uleb128 0x1
 11860 1d81 51       		.byte	0x51
 11861 1d82 01       		.uleb128 0x1
 11862 1d83 30       		.byte	0x30
 11863 1d84 00       		.byte	0
 11864 1d85 21       		.uleb128 0x21
 11865 1d86 C8000000 		.4byte	.LVL636
 11866 1d8a 39140000 		.4byte	0x1439
 11867 1d8e A51D0000 		.4byte	0x1da5
 11868 1d92 22       		.uleb128 0x22
 11869 1d93 01       		.uleb128 0x1
 11870 1d94 50       		.byte	0x50
 11871 1d95 03       		.uleb128 0x3
 11872 1d96 91       		.byte	0x91
 11873 1d97 BC7F     		.sleb128 -68
 11874 1d99 22       		.uleb128 0x22
 11875 1d9a 01       		.uleb128 0x1
 11876 1d9b 51       		.byte	0x51
 11877 1d9c 02       		.uleb128 0x2
 11878 1d9d 78       		.byte	0x78
 11879 1d9e 00       		.sleb128 0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 350


 11880 1d9f 22       		.uleb128 0x22
 11881 1da0 01       		.uleb128 0x1
 11882 1da1 52       		.byte	0x52
 11883 1da2 01       		.uleb128 0x1
 11884 1da3 30       		.byte	0x30
 11885 1da4 00       		.byte	0
 11886 1da5 21       		.uleb128 0x21
 11887 1da6 D4000000 		.4byte	.LVL638
 11888 1daa 100C0000 		.4byte	0xc10
 11889 1dae B91D0000 		.4byte	0x1db9
 11890 1db2 22       		.uleb128 0x22
 11891 1db3 01       		.uleb128 0x1
 11892 1db4 51       		.byte	0x51
 11893 1db5 02       		.uleb128 0x2
 11894 1db6 76       		.byte	0x76
 11895 1db7 00       		.sleb128 0
 11896 1db8 00       		.byte	0
 11897 1db9 21       		.uleb128 0x21
 11898 1dba 28010000 		.4byte	.LVL645
 11899 1dbe FE070000 		.4byte	0x7fe
 11900 1dc2 D31D0000 		.4byte	0x1dd3
 11901 1dc6 22       		.uleb128 0x22
 11902 1dc7 01       		.uleb128 0x1
 11903 1dc8 50       		.byte	0x50
 11904 1dc9 02       		.uleb128 0x2
 11905 1dca 76       		.byte	0x76
 11906 1dcb 00       		.sleb128 0
 11907 1dcc 22       		.uleb128 0x22
 11908 1dcd 01       		.uleb128 0x1
 11909 1dce 51       		.byte	0x51
 11910 1dcf 02       		.uleb128 0x2
 11911 1dd0 78       		.byte	0x78
 11912 1dd1 00       		.sleb128 0
 11913 1dd2 00       		.byte	0
 11914 1dd3 21       		.uleb128 0x21
 11915 1dd4 32010000 		.4byte	.LVL646
 11916 1dd8 55050000 		.4byte	0x555
 11917 1ddc E71D0000 		.4byte	0x1de7
 11918 1de0 22       		.uleb128 0x22
 11919 1de1 01       		.uleb128 0x1
 11920 1de2 50       		.byte	0x50
 11921 1de3 02       		.uleb128 0x2
 11922 1de4 78       		.byte	0x78
 11923 1de5 1C       		.sleb128 28
 11924 1de6 00       		.byte	0
 11925 1de7 21       		.uleb128 0x21
 11926 1de8 52010000 		.4byte	.LVL647
 11927 1dec 67060000 		.4byte	0x667
 11928 1df0 071E0000 		.4byte	0x1e07
 11929 1df4 22       		.uleb128 0x22
 11930 1df5 01       		.uleb128 0x1
 11931 1df6 50       		.byte	0x50
 11932 1df7 02       		.uleb128 0x2
 11933 1df8 78       		.byte	0x78
 11934 1df9 00       		.sleb128 0
 11935 1dfa 22       		.uleb128 0x22
 11936 1dfb 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 351


 11937 1dfc 51       		.byte	0x51
 11938 1dfd 01       		.uleb128 0x1
 11939 1dfe 30       		.byte	0x30
 11940 1dff 22       		.uleb128 0x22
 11941 1e00 01       		.uleb128 0x1
 11942 1e01 52       		.byte	0x52
 11943 1e02 03       		.uleb128 0x3
 11944 1e03 0A       		.byte	0xa
 11945 1e04 0002     		.2byte	0x200
 11946 1e06 00       		.byte	0
 11947 1e07 21       		.uleb128 0x21
 11948 1e08 6E010000 		.4byte	.LVL651
 11949 1e0c A4110000 		.4byte	0x11a4
 11950 1e10 1B1E0000 		.4byte	0x1e1b
 11951 1e14 22       		.uleb128 0x22
 11952 1e15 01       		.uleb128 0x1
 11953 1e16 50       		.byte	0x50
 11954 1e17 02       		.uleb128 0x2
 11955 1e18 75       		.byte	0x75
 11956 1e19 00       		.sleb128 0
 11957 1e1a 00       		.byte	0
 11958 1e1b 21       		.uleb128 0x21
 11959 1e1c 98010000 		.4byte	.LVL657
 11960 1e20 C4070000 		.4byte	0x7c4
 11961 1e24 2F1E0000 		.4byte	0x1e2f
 11962 1e28 22       		.uleb128 0x22
 11963 1e29 01       		.uleb128 0x1
 11964 1e2a 50       		.byte	0x50
 11965 1e2b 02       		.uleb128 0x2
 11966 1e2c 77       		.byte	0x77
 11967 1e2d 00       		.sleb128 0
 11968 1e2e 00       		.byte	0
 11969 1e2f 23       		.uleb128 0x23
 11970 1e30 AA010000 		.4byte	.LVL659
 11971 1e34 C3360000 		.4byte	0x36c3
 11972 1e38 22       		.uleb128 0x22
 11973 1e39 01       		.uleb128 0x1
 11974 1e3a 51       		.byte	0x51
 11975 1e3b 02       		.uleb128 0x2
 11976 1e3c 78       		.byte	0x78
 11977 1e3d 00       		.sleb128 0
 11978 1e3e 22       		.uleb128 0x22
 11979 1e3f 01       		.uleb128 0x1
 11980 1e40 53       		.byte	0x53
 11981 1e41 01       		.uleb128 0x1
 11982 1e42 31       		.byte	0x31
 11983 1e43 00       		.byte	0
 11984 1e44 00       		.byte	0
 11985 1e45 27       		.uleb128 0x27
 11986 1e46 B4060000 		.4byte	.LASF144
 11987 1e4a 01       		.byte	0x1
 11988 1e4b 2B0F     		.2byte	0xf2b
 11989 1e4d 40040000 		.4byte	0x440
 11990 1e51 00000000 		.4byte	.LFB38
 11991 1e55 74010000 		.4byte	.LFE38-.LFB38
 11992 1e59 01       		.uleb128 0x1
 11993 1e5a 9C       		.byte	0x9c
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 352


 11994 1e5b F71F0000 		.4byte	0x1ff7
 11995 1e5f 19       		.uleb128 0x19
 11996 1e60 667000   		.ascii	"fp\000"
 11997 1e63 01       		.byte	0x1
 11998 1e64 2C0F     		.2byte	0xf2c
 11999 1e66 EE040000 		.4byte	0x4ee
 12000 1e6a 5A220000 		.4byte	.LLST154
 12001 1e6e 20       		.uleb128 0x20
 12002 1e6f 53010000 		.4byte	.LASF145
 12003 1e73 01       		.byte	0x1
 12004 1e74 2D0F     		.2byte	0xf2d
 12005 1e76 A4040000 		.4byte	0x4a4
 12006 1e7a 78220000 		.4byte	.LLST155
 12007 1e7e 19       		.uleb128 0x19
 12008 1e7f 62747200 		.ascii	"btr\000"
 12009 1e83 01       		.byte	0x1
 12010 1e84 2E0F     		.2byte	0xf2e
 12011 1e86 97000000 		.4byte	0x97
 12012 1e8a BD220000 		.4byte	.LLST156
 12013 1e8e 19       		.uleb128 0x19
 12014 1e8f 627200   		.ascii	"br\000"
 12015 1e92 01       		.byte	0x1
 12016 1e93 2F0F     		.2byte	0xf2f
 12017 1e95 F71F0000 		.4byte	0x1ff7
 12018 1e99 F1220000 		.4byte	.LLST157
 12019 1e9d 1A       		.uleb128 0x1a
 12020 1e9e 72657300 		.ascii	"res\000"
 12021 1ea2 01       		.byte	0x1
 12022 1ea3 320F     		.2byte	0xf32
 12023 1ea5 40040000 		.4byte	0x440
 12024 1ea9 0F230000 		.4byte	.LLST158
 12025 1ead 1F       		.uleb128 0x1f
 12026 1eae 667300   		.ascii	"fs\000"
 12027 1eb1 01       		.byte	0x1
 12028 1eb2 330F     		.2byte	0xf33
 12029 1eb4 55020000 		.4byte	0x255
 12030 1eb8 02       		.uleb128 0x2
 12031 1eb9 91       		.byte	0x91
 12032 1eba 54       		.sleb128 -44
 12033 1ebb 26       		.uleb128 0x26
 12034 1ebc CA020000 		.4byte	.LASF100
 12035 1ec0 01       		.byte	0x1
 12036 1ec1 340F     		.2byte	0xf34
 12037 1ec3 B8000000 		.4byte	0xb8
 12038 1ec7 2D230000 		.4byte	.LLST159
 12039 1ecb 26       		.uleb128 0x26
 12040 1ecc A6000000 		.4byte	.LASF49
 12041 1ed0 01       		.byte	0x1
 12042 1ed1 350F     		.2byte	0xf35
 12043 1ed3 EB000000 		.4byte	0xeb
 12044 1ed7 61230000 		.4byte	.LLST160
 12045 1edb 26       		.uleb128 0x26
 12046 1edc AD060000 		.4byte	.LASF146
 12047 1ee0 01       		.byte	0x1
 12048 1ee1 360F     		.2byte	0xf36
 12049 1ee3 E0000000 		.4byte	0xe0
 12050 1ee7 95230000 		.4byte	.LLST161
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 353


 12051 1eeb 26       		.uleb128 0x26
 12052 1eec FA060000 		.4byte	.LASF147
 12053 1ef0 01       		.byte	0x1
 12054 1ef1 370F     		.2byte	0xf37
 12055 1ef3 97000000 		.4byte	0x97
 12056 1ef7 B9230000 		.4byte	.LLST162
 12057 1efb 1A       		.uleb128 0x1a
 12058 1efc 636300   		.ascii	"cc\000"
 12059 1eff 01       		.byte	0x1
 12060 1f00 370F     		.2byte	0xf37
 12061 1f02 97000000 		.4byte	0x97
 12062 1f06 D7230000 		.4byte	.LLST163
 12063 1f0a 26       		.uleb128 0x26
 12064 1f0b 31000000 		.4byte	.LASF148
 12065 1f0f 01       		.byte	0x1
 12066 1f10 370F     		.2byte	0xf37
 12067 1f12 97000000 		.4byte	0x97
 12068 1f16 04240000 		.4byte	.LLST164
 12069 1f1a 26       		.uleb128 0x26
 12070 1f1b 7A000000 		.4byte	.LASF149
 12071 1f1f 01       		.byte	0x1
 12072 1f20 380F     		.2byte	0xf38
 12073 1f22 DC020000 		.4byte	0x2dc
 12074 1f26 29240000 		.4byte	.LLST165
 12075 1f2a 21       		.uleb128 0x21
 12076 1f2b 1A000000 		.4byte	.LVL673
 12077 1f2f 480B0000 		.4byte	0xb48
 12078 1f33 441F0000 		.4byte	0x1f44
 12079 1f37 22       		.uleb128 0x22
 12080 1f38 01       		.uleb128 0x1
 12081 1f39 50       		.byte	0x50
 12082 1f3a 02       		.uleb128 0x2
 12083 1f3b 74       		.byte	0x74
 12084 1f3c 00       		.sleb128 0
 12085 1f3d 22       		.uleb128 0x22
 12086 1f3e 01       		.uleb128 0x1
 12087 1f3f 51       		.byte	0x51
 12088 1f40 02       		.uleb128 0x2
 12089 1f41 91       		.byte	0x91
 12090 1f42 54       		.sleb128 -44
 12091 1f43 00       		.byte	0
 12092 1f44 21       		.uleb128 0x21
 12093 1f45 6A000000 		.4byte	.LVL682
 12094 1f49 A4110000 		.4byte	0x11a4
 12095 1f4d 591F0000 		.4byte	0x1f59
 12096 1f51 22       		.uleb128 0x22
 12097 1f52 01       		.uleb128 0x1
 12098 1f53 50       		.byte	0x50
 12099 1f54 03       		.uleb128 0x3
 12100 1f55 91       		.byte	0x91
 12101 1f56 4C       		.sleb128 -52
 12102 1f57 06       		.byte	0x6
 12103 1f58 00       		.byte	0
 12104 1f59 21       		.uleb128 0x21
 12105 1f5a 8E000000 		.4byte	.LVL688
 12106 1f5e C4070000 		.4byte	0x7c4
 12107 1f62 6D1F0000 		.4byte	0x1f6d
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 354


 12108 1f66 22       		.uleb128 0x22
 12109 1f67 01       		.uleb128 0x1
 12110 1f68 50       		.byte	0x50
 12111 1f69 02       		.uleb128 0x2
 12112 1f6a 7B       		.byte	0x7b
 12113 1f6b 00       		.sleb128 0
 12114 1f6c 00       		.byte	0
 12115 1f6d 21       		.uleb128 0x21
 12116 1f6e BC000000 		.4byte	.LVL694
 12117 1f72 C3360000 		.4byte	0x36c3
 12118 1f76 8D1F0000 		.4byte	0x1f8d
 12119 1f7a 22       		.uleb128 0x22
 12120 1f7b 01       		.uleb128 0x1
 12121 1f7c 51       		.byte	0x51
 12122 1f7d 02       		.uleb128 0x2
 12123 1f7e 78       		.byte	0x78
 12124 1f7f 00       		.sleb128 0
 12125 1f80 22       		.uleb128 0x22
 12126 1f81 01       		.uleb128 0x1
 12127 1f82 52       		.byte	0x52
 12128 1f83 02       		.uleb128 0x2
 12129 1f84 7A       		.byte	0x7a
 12130 1f85 00       		.sleb128 0
 12131 1f86 22       		.uleb128 0x22
 12132 1f87 01       		.uleb128 0x1
 12133 1f88 53       		.byte	0x53
 12134 1f89 02       		.uleb128 0x2
 12135 1f8a 75       		.byte	0x75
 12136 1f8b 00       		.sleb128 0
 12137 1f8c 00       		.byte	0
 12138 1f8d 21       		.uleb128 0x21
 12139 1f8e E6000000 		.4byte	.LVL695
 12140 1f92 FD050000 		.4byte	0x5fd
 12141 1f96 A81F0000 		.4byte	0x1fa8
 12142 1f9a 22       		.uleb128 0x22
 12143 1f9b 01       		.uleb128 0x1
 12144 1f9c 51       		.byte	0x51
 12145 1f9d 02       		.uleb128 0x2
 12146 1f9e 74       		.byte	0x74
 12147 1f9f 28       		.sleb128 40
 12148 1fa0 22       		.uleb128 0x22
 12149 1fa1 01       		.uleb128 0x1
 12150 1fa2 52       		.byte	0x52
 12151 1fa3 03       		.uleb128 0x3
 12152 1fa4 0A       		.byte	0xa
 12153 1fa5 0002     		.2byte	0x200
 12154 1fa7 00       		.byte	0
 12155 1fa8 21       		.uleb128 0x21
 12156 1fa9 06010000 		.4byte	.LVL698
 12157 1fad B8360000 		.4byte	0x36b8
 12158 1fb1 C11F0000 		.4byte	0x1fc1
 12159 1fb5 22       		.uleb128 0x22
 12160 1fb6 01       		.uleb128 0x1
 12161 1fb7 51       		.byte	0x51
 12162 1fb8 02       		.uleb128 0x2
 12163 1fb9 74       		.byte	0x74
 12164 1fba 28       		.sleb128 40
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 355


 12165 1fbb 22       		.uleb128 0x22
 12166 1fbc 01       		.uleb128 0x1
 12167 1fbd 53       		.byte	0x53
 12168 1fbe 01       		.uleb128 0x1
 12169 1fbf 31       		.byte	0x31
 12170 1fc0 00       		.byte	0
 12171 1fc1 21       		.uleb128 0x21
 12172 1fc2 26010000 		.4byte	.LVL699
 12173 1fc6 C3360000 		.4byte	0x36c3
 12174 1fca E01F0000 		.4byte	0x1fe0
 12175 1fce 22       		.uleb128 0x22
 12176 1fcf 01       		.uleb128 0x1
 12177 1fd0 51       		.byte	0x51
 12178 1fd1 02       		.uleb128 0x2
 12179 1fd2 74       		.byte	0x74
 12180 1fd3 28       		.sleb128 40
 12181 1fd4 22       		.uleb128 0x22
 12182 1fd5 01       		.uleb128 0x1
 12183 1fd6 52       		.byte	0x52
 12184 1fd7 02       		.uleb128 0x2
 12185 1fd8 7A       		.byte	0x7a
 12186 1fd9 00       		.sleb128 0
 12187 1fda 22       		.uleb128 0x22
 12188 1fdb 01       		.uleb128 0x1
 12189 1fdc 53       		.byte	0x53
 12190 1fdd 01       		.uleb128 0x1
 12191 1fde 31       		.byte	0x31
 12192 1fdf 00       		.byte	0
 12193 1fe0 23       		.uleb128 0x23
 12194 1fe1 50010000 		.4byte	.LVL703
 12195 1fe5 FD050000 		.4byte	0x5fd
 12196 1fe9 22       		.uleb128 0x22
 12197 1fea 01       		.uleb128 0x1
 12198 1feb 50       		.byte	0x50
 12199 1fec 02       		.uleb128 0x2
 12200 1fed 78       		.byte	0x78
 12201 1fee 00       		.sleb128 0
 12202 1fef 22       		.uleb128 0x22
 12203 1ff0 01       		.uleb128 0x1
 12204 1ff1 52       		.byte	0x52
 12205 1ff2 02       		.uleb128 0x2
 12206 1ff3 75       		.byte	0x75
 12207 1ff4 00       		.sleb128 0
 12208 1ff5 00       		.byte	0
 12209 1ff6 00       		.byte	0
 12210 1ff7 0B       		.uleb128 0xb
 12211 1ff8 04       		.byte	0x4
 12212 1ff9 97000000 		.4byte	0x97
 12213 1ffd 27       		.uleb128 0x27
 12214 1ffe A5010000 		.4byte	.LASF150
 12215 2002 01       		.byte	0x1
 12216 2003 900F     		.2byte	0xf90
 12217 2005 40040000 		.4byte	0x440
 12218 2009 00000000 		.4byte	.LFB39
 12219 200d AC010000 		.4byte	.LFE39-.LFB39
 12220 2011 01       		.uleb128 0x1
 12221 2012 9C       		.byte	0x9c
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 356


 12222 2013 B9210000 		.4byte	0x21b9
 12223 2017 19       		.uleb128 0x19
 12224 2018 667000   		.ascii	"fp\000"
 12225 201b 01       		.byte	0x1
 12226 201c 910F     		.2byte	0xf91
 12227 201e EE040000 		.4byte	0x4ee
 12228 2022 47240000 		.4byte	.LLST166
 12229 2026 20       		.uleb128 0x20
 12230 2027 53010000 		.4byte	.LASF145
 12231 202b 01       		.byte	0x1
 12232 202c 920F     		.2byte	0xf92
 12233 202e 60060000 		.4byte	0x660
 12234 2032 65240000 		.4byte	.LLST167
 12235 2036 19       		.uleb128 0x19
 12236 2037 62747700 		.ascii	"btw\000"
 12237 203b 01       		.byte	0x1
 12238 203c 930F     		.2byte	0xf93
 12239 203e 97000000 		.4byte	0x97
 12240 2042 AA240000 		.4byte	.LLST168
 12241 2046 19       		.uleb128 0x19
 12242 2047 627700   		.ascii	"bw\000"
 12243 204a 01       		.byte	0x1
 12244 204b 940F     		.2byte	0xf94
 12245 204d F71F0000 		.4byte	0x1ff7
 12246 2051 C8240000 		.4byte	.LLST169
 12247 2055 1A       		.uleb128 0x1a
 12248 2056 72657300 		.ascii	"res\000"
 12249 205a 01       		.byte	0x1
 12250 205b 970F     		.2byte	0xf97
 12251 205d 40040000 		.4byte	0x440
 12252 2061 E6240000 		.4byte	.LLST170
 12253 2065 1F       		.uleb128 0x1f
 12254 2066 667300   		.ascii	"fs\000"
 12255 2069 01       		.byte	0x1
 12256 206a 980F     		.2byte	0xf98
 12257 206c 55020000 		.4byte	0x255
 12258 2070 02       		.uleb128 0x2
 12259 2071 91       		.byte	0x91
 12260 2072 54       		.sleb128 -44
 12261 2073 26       		.uleb128 0x26
 12262 2074 CA020000 		.4byte	.LASF100
 12263 2078 01       		.byte	0x1
 12264 2079 990F     		.2byte	0xf99
 12265 207b B8000000 		.4byte	0xb8
 12266 207f 04250000 		.4byte	.LLST171
 12267 2083 26       		.uleb128 0x26
 12268 2084 A6000000 		.4byte	.LASF49
 12269 2088 01       		.byte	0x1
 12270 2089 9A0F     		.2byte	0xf9a
 12271 208b EB000000 		.4byte	0xeb
 12272 208f 4F250000 		.4byte	.LLST172
 12273 2093 26       		.uleb128 0x26
 12274 2094 7E030000 		.4byte	.LASF151
 12275 2098 01       		.byte	0x1
 12276 2099 9B0F     		.2byte	0xf9b
 12277 209b 97000000 		.4byte	0x97
 12278 209f 83250000 		.4byte	.LLST173
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 357


 12279 20a3 1A       		.uleb128 0x1a
 12280 20a4 636300   		.ascii	"cc\000"
 12281 20a7 01       		.byte	0x1
 12282 20a8 9B0F     		.2byte	0xf9b
 12283 20aa 97000000 		.4byte	0x97
 12284 20ae A1250000 		.4byte	.LLST174
 12285 20b2 26       		.uleb128 0x26
 12286 20b3 31000000 		.4byte	.LASF148
 12287 20b7 01       		.byte	0x1
 12288 20b8 9B0F     		.2byte	0xf9b
 12289 20ba 97000000 		.4byte	0x97
 12290 20be CE250000 		.4byte	.LLST175
 12291 20c2 26       		.uleb128 0x26
 12292 20c3 B1040000 		.4byte	.LASF152
 12293 20c7 01       		.byte	0x1
 12294 20c8 9C0F     		.2byte	0xf9c
 12295 20ca 4A050000 		.4byte	0x54a
 12296 20ce F3250000 		.4byte	.LLST176
 12297 20d2 21       		.uleb128 0x21
 12298 20d3 1A000000 		.4byte	.LVL714
 12299 20d7 480B0000 		.4byte	0xb48
 12300 20db EC200000 		.4byte	0x20ec
 12301 20df 22       		.uleb128 0x22
 12302 20e0 01       		.uleb128 0x1
 12303 20e1 50       		.byte	0x50
 12304 20e2 02       		.uleb128 0x2
 12305 20e3 74       		.byte	0x74
 12306 20e4 00       		.sleb128 0
 12307 20e5 22       		.uleb128 0x22
 12308 20e6 01       		.uleb128 0x1
 12309 20e7 51       		.byte	0x51
 12310 20e8 02       		.uleb128 0x2
 12311 20e9 91       		.byte	0x91
 12312 20ea 54       		.sleb128 -44
 12313 20eb 00       		.byte	0
 12314 20ec 21       		.uleb128 0x21
 12315 20ed 68000000 		.4byte	.LVL722
 12316 20f1 39130000 		.4byte	0x1339
 12317 20f5 06210000 		.4byte	0x2106
 12318 20f9 22       		.uleb128 0x22
 12319 20fa 01       		.uleb128 0x1
 12320 20fb 50       		.byte	0x50
 12321 20fc 03       		.uleb128 0x3
 12322 20fd 91       		.byte	0x91
 12323 20fe 4C       		.sleb128 -52
 12324 20ff 06       		.byte	0x6
 12325 2100 22       		.uleb128 0x22
 12326 2101 01       		.uleb128 0x1
 12327 2102 51       		.byte	0x51
 12328 2103 01       		.uleb128 0x1
 12329 2104 30       		.byte	0x30
 12330 2105 00       		.byte	0
 12331 2106 21       		.uleb128 0x21
 12332 2107 72000000 		.4byte	.LVL724
 12333 210b 39130000 		.4byte	0x1339
 12334 210f 1B210000 		.4byte	0x211b
 12335 2113 22       		.uleb128 0x22
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 358


 12336 2114 01       		.uleb128 0x1
 12337 2115 50       		.byte	0x50
 12338 2116 03       		.uleb128 0x3
 12339 2117 91       		.byte	0x91
 12340 2118 4C       		.sleb128 -52
 12341 2119 06       		.byte	0x6
 12342 211a 00       		.byte	0
 12343 211b 21       		.uleb128 0x21
 12344 211c AE000000 		.4byte	.LVL730
 12345 2120 B8360000 		.4byte	0x36b8
 12346 2124 34210000 		.4byte	0x2134
 12347 2128 22       		.uleb128 0x22
 12348 2129 01       		.uleb128 0x1
 12349 212a 51       		.byte	0x51
 12350 212b 02       		.uleb128 0x2
 12351 212c 74       		.byte	0x74
 12352 212d 28       		.sleb128 40
 12353 212e 22       		.uleb128 0x22
 12354 212f 01       		.uleb128 0x1
 12355 2130 53       		.byte	0x53
 12356 2131 01       		.uleb128 0x1
 12357 2132 31       		.byte	0x31
 12358 2133 00       		.byte	0
 12359 2134 21       		.uleb128 0x21
 12360 2135 CA000000 		.4byte	.LVL731
 12361 2139 C4070000 		.4byte	0x7c4
 12362 213d 48210000 		.4byte	0x2148
 12363 2141 22       		.uleb128 0x22
 12364 2142 01       		.uleb128 0x1
 12365 2143 50       		.byte	0x50
 12366 2144 02       		.uleb128 0x2
 12367 2145 7B       		.byte	0x7b
 12368 2146 00       		.sleb128 0
 12369 2147 00       		.byte	0
 12370 2148 21       		.uleb128 0x21
 12371 2149 F8000000 		.4byte	.LVL737
 12372 214d B8360000 		.4byte	0x36b8
 12373 2151 68210000 		.4byte	0x2168
 12374 2155 22       		.uleb128 0x22
 12375 2156 01       		.uleb128 0x1
 12376 2157 51       		.byte	0x51
 12377 2158 02       		.uleb128 0x2
 12378 2159 78       		.byte	0x78
 12379 215a 00       		.sleb128 0
 12380 215b 22       		.uleb128 0x22
 12381 215c 01       		.uleb128 0x1
 12382 215d 52       		.byte	0x52
 12383 215e 02       		.uleb128 0x2
 12384 215f 7A       		.byte	0x7a
 12385 2160 00       		.sleb128 0
 12386 2161 22       		.uleb128 0x22
 12387 2162 01       		.uleb128 0x1
 12388 2163 53       		.byte	0x53
 12389 2164 02       		.uleb128 0x2
 12390 2165 75       		.byte	0x75
 12391 2166 00       		.sleb128 0
 12392 2167 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 359


 12393 2168 21       		.uleb128 0x21
 12394 2169 1A010000 		.4byte	.LVL738
 12395 216d FD050000 		.4byte	0x5fd
 12396 2171 83210000 		.4byte	0x2183
 12397 2175 22       		.uleb128 0x22
 12398 2176 01       		.uleb128 0x1
 12399 2177 50       		.byte	0x50
 12400 2178 02       		.uleb128 0x2
 12401 2179 74       		.byte	0x74
 12402 217a 28       		.sleb128 40
 12403 217b 22       		.uleb128 0x22
 12404 217c 01       		.uleb128 0x1
 12405 217d 52       		.byte	0x52
 12406 217e 03       		.uleb128 0x3
 12407 217f 0A       		.byte	0xa
 12408 2180 0002     		.2byte	0x200
 12409 2182 00       		.byte	0
 12410 2183 21       		.uleb128 0x21
 12411 2184 44010000 		.4byte	.LVL741
 12412 2188 C3360000 		.4byte	0x36c3
 12413 218c A2210000 		.4byte	0x21a2
 12414 2190 22       		.uleb128 0x22
 12415 2191 01       		.uleb128 0x1
 12416 2192 51       		.byte	0x51
 12417 2193 02       		.uleb128 0x2
 12418 2194 74       		.byte	0x74
 12419 2195 28       		.sleb128 40
 12420 2196 22       		.uleb128 0x22
 12421 2197 01       		.uleb128 0x1
 12422 2198 52       		.byte	0x52
 12423 2199 02       		.uleb128 0x2
 12424 219a 7A       		.byte	0x7a
 12425 219b 00       		.sleb128 0
 12426 219c 22       		.uleb128 0x22
 12427 219d 01       		.uleb128 0x1
 12428 219e 53       		.byte	0x53
 12429 219f 01       		.uleb128 0x1
 12430 21a0 31       		.byte	0x31
 12431 21a1 00       		.byte	0
 12432 21a2 23       		.uleb128 0x23
 12433 21a3 6E010000 		.4byte	.LVL745
 12434 21a7 FD050000 		.4byte	0x5fd
 12435 21ab 22       		.uleb128 0x22
 12436 21ac 01       		.uleb128 0x1
 12437 21ad 51       		.byte	0x51
 12438 21ae 02       		.uleb128 0x2
 12439 21af 78       		.byte	0x78
 12440 21b0 00       		.sleb128 0
 12441 21b1 22       		.uleb128 0x22
 12442 21b2 01       		.uleb128 0x1
 12443 21b3 52       		.byte	0x52
 12444 21b4 02       		.uleb128 0x2
 12445 21b5 75       		.byte	0x75
 12446 21b6 00       		.sleb128 0
 12447 21b7 00       		.byte	0
 12448 21b8 00       		.byte	0
 12449 21b9 1C       		.uleb128 0x1c
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 360


 12450 21ba CF050000 		.4byte	.LASF153
 12451 21be 01       		.byte	0x1
 12452 21bf 7319     		.2byte	0x1973
 12453 21c1 00000000 		.4byte	.LFB57
 12454 21c5 40000000 		.4byte	.LFE57-.LFB57
 12455 21c9 01       		.uleb128 0x1
 12456 21ca 9C       		.byte	0x9c
 12457 21cb 33220000 		.4byte	0x2233
 12458 21cf 19       		.uleb128 0x19
 12459 21d0 706200   		.ascii	"pb\000"
 12460 21d3 01       		.byte	0x1
 12461 21d4 7319     		.2byte	0x1973
 12462 21d6 420B0000 		.4byte	0xb42
 12463 21da 11260000 		.4byte	.LLST177
 12464 21de 19       		.uleb128 0x19
 12465 21df 6300     		.ascii	"c\000"
 12466 21e1 01       		.byte	0x1
 12467 21e2 7319     		.2byte	0x1973
 12468 21e4 CE000000 		.4byte	0xce
 12469 21e8 3A260000 		.4byte	.LLST178
 12470 21ec 1F       		.uleb128 0x1f
 12471 21ed 6E00     		.ascii	"n\000"
 12472 21ef 01       		.byte	0x1
 12473 21f0 7519     		.2byte	0x1975
 12474 21f2 97000000 		.4byte	0x97
 12475 21f6 02       		.uleb128 0x2
 12476 21f7 91       		.byte	0x91
 12477 21f8 6C       		.sleb128 -20
 12478 21f9 1A       		.uleb128 0x1a
 12479 21fa 6900     		.ascii	"i\000"
 12480 21fc 01       		.byte	0x1
 12481 21fd 7619     		.2byte	0x1976
 12482 21ff 73000000 		.4byte	0x73
 12483 2203 88260000 		.4byte	.LLST179
 12484 2207 1A       		.uleb128 0x1a
 12485 2208 6E6300   		.ascii	"nc\000"
 12486 220b 01       		.byte	0x1
 12487 220c 7619     		.2byte	0x1976
 12488 220e 73000000 		.4byte	0x73
 12489 2212 BC260000 		.4byte	.LLST180
 12490 2216 23       		.uleb128 0x23
 12491 2217 26000000 		.4byte	.LVL757
 12492 221b FD1F0000 		.4byte	0x1ffd
 12493 221f 22       		.uleb128 0x22
 12494 2220 01       		.uleb128 0x1
 12495 2221 51       		.byte	0x51
 12496 2222 02       		.uleb128 0x2
 12497 2223 74       		.byte	0x74
 12498 2224 0C       		.sleb128 12
 12499 2225 22       		.uleb128 0x22
 12500 2226 01       		.uleb128 0x1
 12501 2227 52       		.byte	0x52
 12502 2228 02       		.uleb128 0x2
 12503 2229 75       		.byte	0x75
 12504 222a 00       		.sleb128 0
 12505 222b 22       		.uleb128 0x22
 12506 222c 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 361


 12507 222d 53       		.byte	0x53
 12508 222e 02       		.uleb128 0x2
 12509 222f 91       		.byte	0x91
 12510 2230 6C       		.sleb128 -20
 12511 2231 00       		.byte	0
 12512 2232 00       		.byte	0
 12513 2233 18       		.uleb128 0x18
 12514 2234 36010000 		.4byte	.LASF154
 12515 2238 01       		.byte	0x1
 12516 2239 F619     		.2byte	0x19f6
 12517 223b 73000000 		.4byte	0x73
 12518 223f 00000000 		.4byte	.LFB58
 12519 2243 3A000000 		.4byte	.LFE58-.LFB58
 12520 2247 01       		.uleb128 0x1
 12521 2248 9C       		.byte	0x9c
 12522 2249 81220000 		.4byte	0x2281
 12523 224d 19       		.uleb128 0x19
 12524 224e 706200   		.ascii	"pb\000"
 12525 2251 01       		.byte	0x1
 12526 2252 F619     		.2byte	0x19f6
 12527 2254 420B0000 		.4byte	0xb42
 12528 2258 DC260000 		.4byte	.LLST181
 12529 225c 1F       		.uleb128 0x1f
 12530 225d 6E7700   		.ascii	"nw\000"
 12531 2260 01       		.byte	0x1
 12532 2261 F819     		.2byte	0x19f8
 12533 2263 97000000 		.4byte	0x97
 12534 2267 02       		.uleb128 0x2
 12535 2268 91       		.byte	0x91
 12536 2269 74       		.sleb128 -12
 12537 226a 23       		.uleb128 0x23
 12538 226b 18000000 		.4byte	.LVL765
 12539 226f FD1F0000 		.4byte	0x1ffd
 12540 2273 22       		.uleb128 0x22
 12541 2274 01       		.uleb128 0x1
 12542 2275 51       		.byte	0x51
 12543 2276 02       		.uleb128 0x2
 12544 2277 74       		.byte	0x74
 12545 2278 0C       		.sleb128 12
 12546 2279 22       		.uleb128 0x22
 12547 227a 01       		.uleb128 0x1
 12548 227b 53       		.byte	0x53
 12549 227c 02       		.uleb128 0x2
 12550 227d 91       		.byte	0x91
 12551 227e 74       		.sleb128 -12
 12552 227f 00       		.byte	0
 12553 2280 00       		.byte	0
 12554 2281 27       		.uleb128 0x27
 12555 2282 77030000 		.4byte	.LASF155
 12556 2286 01       		.byte	0x1
 12557 2287 0A10     		.2byte	0x100a
 12558 2289 40040000 		.4byte	0x440
 12559 228d 00000000 		.4byte	.LFB40
 12560 2291 9C000000 		.4byte	.LFE40-.LFB40
 12561 2295 01       		.uleb128 0x1
 12562 2296 9C       		.byte	0x9c
 12563 2297 8B230000 		.4byte	0x238b
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 362


 12564 229b 19       		.uleb128 0x19
 12565 229c 667000   		.ascii	"fp\000"
 12566 229f 01       		.byte	0x1
 12567 22a0 0B10     		.2byte	0x100b
 12568 22a2 EE040000 		.4byte	0x4ee
 12569 22a6 1E270000 		.4byte	.LLST182
 12570 22aa 1A       		.uleb128 0x1a
 12571 22ab 72657300 		.ascii	"res\000"
 12572 22af 01       		.byte	0x1
 12573 22b0 0E10     		.2byte	0x100e
 12574 22b2 40040000 		.4byte	0x440
 12575 22b6 4A270000 		.4byte	.LLST183
 12576 22ba 1F       		.uleb128 0x1f
 12577 22bb 667300   		.ascii	"fs\000"
 12578 22be 01       		.byte	0x1
 12579 22bf 0F10     		.2byte	0x100f
 12580 22c1 55020000 		.4byte	0x255
 12581 22c5 02       		.uleb128 0x2
 12582 22c6 91       		.byte	0x91
 12583 22c7 6C       		.sleb128 -20
 12584 22c8 1A       		.uleb128 0x1a
 12585 22c9 746D00   		.ascii	"tm\000"
 12586 22cc 01       		.byte	0x1
 12587 22cd 1010     		.2byte	0x1010
 12588 22cf B8000000 		.4byte	0xb8
 12589 22d3 73270000 		.4byte	.LLST184
 12590 22d7 1A       		.uleb128 0x1a
 12591 22d8 64697200 		.ascii	"dir\000"
 12592 22dc 01       		.byte	0x1
 12593 22dd 1110     		.2byte	0x1011
 12594 22df DC020000 		.4byte	0x2dc
 12595 22e3 8B270000 		.4byte	.LLST185
 12596 22e7 21       		.uleb128 0x21
 12597 22e8 0C000000 		.4byte	.LVL770
 12598 22ec 480B0000 		.4byte	0xb48
 12599 22f0 01230000 		.4byte	0x2301
 12600 22f4 22       		.uleb128 0x22
 12601 22f5 01       		.uleb128 0x1
 12602 22f6 50       		.byte	0x50
 12603 22f7 02       		.uleb128 0x2
 12604 22f8 74       		.byte	0x74
 12605 22f9 00       		.sleb128 0
 12606 22fa 22       		.uleb128 0x22
 12607 22fb 01       		.uleb128 0x1
 12608 22fc 51       		.byte	0x51
 12609 22fd 02       		.uleb128 0x2
 12610 22fe 91       		.byte	0x91
 12611 22ff 6C       		.sleb128 -20
 12612 2300 00       		.byte	0
 12613 2301 21       		.uleb128 0x21
 12614 2302 2E000000 		.4byte	.LVL772
 12615 2306 B8360000 		.4byte	0x36b8
 12616 230a 1A230000 		.4byte	0x231a
 12617 230e 22       		.uleb128 0x22
 12618 230f 01       		.uleb128 0x1
 12619 2310 51       		.byte	0x51
 12620 2311 02       		.uleb128 0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 363


 12621 2312 74       		.byte	0x74
 12622 2313 28       		.sleb128 40
 12623 2314 22       		.uleb128 0x22
 12624 2315 01       		.uleb128 0x1
 12625 2316 53       		.byte	0x53
 12626 2317 01       		.uleb128 0x1
 12627 2318 31       		.byte	0x31
 12628 2319 00       		.byte	0
 12629 231a 24       		.uleb128 0x24
 12630 231b 40000000 		.4byte	.LVL774
 12631 231f 100C0000 		.4byte	0xc10
 12632 2323 21       		.uleb128 0x21
 12633 2324 56000000 		.4byte	.LVL777
 12634 2328 6B080000 		.4byte	0x86b
 12635 232c 37230000 		.4byte	0x2337
 12636 2330 22       		.uleb128 0x22
 12637 2331 01       		.uleb128 0x1
 12638 2332 51       		.byte	0x51
 12639 2333 02       		.uleb128 0x2
 12640 2334 75       		.byte	0x75
 12641 2335 00       		.sleb128 0
 12642 2336 00       		.byte	0
 12643 2337 21       		.uleb128 0x21
 12644 2338 60000000 		.4byte	.LVL778
 12645 233c C6050000 		.4byte	0x5c6
 12646 2340 4B230000 		.4byte	0x234b
 12647 2344 22       		.uleb128 0x22
 12648 2345 01       		.uleb128 0x1
 12649 2346 50       		.byte	0x50
 12650 2347 02       		.uleb128 0x2
 12651 2348 75       		.byte	0x75
 12652 2349 1C       		.sleb128 28
 12653 234a 00       		.byte	0
 12654 234b 21       		.uleb128 0x21
 12655 234c 6A000000 		.4byte	.LVL779
 12656 2350 C6050000 		.4byte	0x5c6
 12657 2354 68230000 		.4byte	0x2368
 12658 2358 22       		.uleb128 0x22
 12659 2359 01       		.uleb128 0x1
 12660 235a 50       		.byte	0x50
 12661 235b 02       		.uleb128 0x2
 12662 235c 75       		.byte	0x75
 12663 235d 16       		.sleb128 22
 12664 235e 22       		.uleb128 0x22
 12665 235f 01       		.uleb128 0x1
 12666 2360 51       		.byte	0x51
 12667 2361 05       		.uleb128 0x5
 12668 2362 0C       		.byte	0xc
 12669 2363 0000214E 		.4byte	0x4e210000
 12670 2367 00       		.byte	0
 12671 2368 21       		.uleb128 0x21
 12672 2369 74000000 		.4byte	.LVL780
 12673 236d 8F050000 		.4byte	0x58f
 12674 2371 81230000 		.4byte	0x2381
 12675 2375 22       		.uleb128 0x22
 12676 2376 01       		.uleb128 0x1
 12677 2377 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 364


 12678 2378 02       		.uleb128 0x2
 12679 2379 75       		.byte	0x75
 12680 237a 12       		.sleb128 18
 12681 237b 22       		.uleb128 0x22
 12682 237c 01       		.uleb128 0x1
 12683 237d 51       		.byte	0x51
 12684 237e 01       		.uleb128 0x1
 12685 237f 30       		.byte	0x30
 12686 2380 00       		.byte	0
 12687 2381 24       		.uleb128 0x24
 12688 2382 80000000 		.4byte	.LVL781
 12689 2386 4A1A0000 		.4byte	0x1a4a
 12690 238a 00       		.byte	0
 12691 238b 27       		.uleb128 0x27
 12692 238c 90020000 		.4byte	.LASF156
 12693 2390 01       		.byte	0x1
 12694 2391 5B10     		.2byte	0x105b
 12695 2393 40040000 		.4byte	0x440
 12696 2397 00000000 		.4byte	.LFB41
 12697 239b 24000000 		.4byte	.LFE41-.LFB41
 12698 239f 01       		.uleb128 0x1
 12699 23a0 9C       		.byte	0x9c
 12700 23a1 FD230000 		.4byte	0x23fd
 12701 23a5 19       		.uleb128 0x19
 12702 23a6 667000   		.ascii	"fp\000"
 12703 23a9 01       		.byte	0x1
 12704 23aa 5C10     		.2byte	0x105c
 12705 23ac EE040000 		.4byte	0x4ee
 12706 23b0 9E270000 		.4byte	.LLST186
 12707 23b4 1A       		.uleb128 0x1a
 12708 23b5 72657300 		.ascii	"res\000"
 12709 23b9 01       		.byte	0x1
 12710 23ba 5F10     		.2byte	0x105f
 12711 23bc 40040000 		.4byte	0x440
 12712 23c0 BC270000 		.4byte	.LLST187
 12713 23c4 1F       		.uleb128 0x1f
 12714 23c5 667300   		.ascii	"fs\000"
 12715 23c8 01       		.byte	0x1
 12716 23c9 6010     		.2byte	0x1060
 12717 23cb 55020000 		.4byte	0x255
 12718 23cf 02       		.uleb128 0x2
 12719 23d0 91       		.byte	0x91
 12720 23d1 74       		.sleb128 -12
 12721 23d2 21       		.uleb128 0x21
 12722 23d3 0A000000 		.4byte	.LVL787
 12723 23d7 81220000 		.4byte	0x2281
 12724 23db E6230000 		.4byte	0x23e6
 12725 23df 22       		.uleb128 0x22
 12726 23e0 01       		.uleb128 0x1
 12727 23e1 50       		.byte	0x50
 12728 23e2 02       		.uleb128 0x2
 12729 23e3 74       		.byte	0x74
 12730 23e4 00       		.sleb128 0
 12731 23e5 00       		.byte	0
 12732 23e6 23       		.uleb128 0x23
 12733 23e7 16000000 		.4byte	.LVL789
 12734 23eb 480B0000 		.4byte	0xb48
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 365


 12735 23ef 22       		.uleb128 0x22
 12736 23f0 01       		.uleb128 0x1
 12737 23f1 50       		.byte	0x50
 12738 23f2 02       		.uleb128 0x2
 12739 23f3 74       		.byte	0x74
 12740 23f4 00       		.sleb128 0
 12741 23f5 22       		.uleb128 0x22
 12742 23f6 01       		.uleb128 0x1
 12743 23f7 51       		.byte	0x51
 12744 23f8 02       		.uleb128 0x2
 12745 23f9 91       		.byte	0x91
 12746 23fa 74       		.sleb128 -12
 12747 23fb 00       		.byte	0
 12748 23fc 00       		.byte	0
 12749 23fd 27       		.uleb128 0x27
 12750 23fe 83030000 		.4byte	.LASF157
 12751 2402 01       		.byte	0x1
 12752 2403 7F10     		.2byte	0x107f
 12753 2405 40040000 		.4byte	0x440
 12754 2409 00000000 		.4byte	.LFB42
 12755 240d 28000000 		.4byte	.LFE42-.LFB42
 12756 2411 01       		.uleb128 0x1
 12757 2412 9C       		.byte	0x9c
 12758 2413 48240000 		.4byte	0x2448
 12759 2417 20       		.uleb128 0x20
 12760 2418 68000000 		.4byte	.LASF105
 12761 241c 01       		.byte	0x1
 12762 241d 8010     		.2byte	0x1080
 12763 241f 710A0000 		.4byte	0xa71
 12764 2423 E5270000 		.4byte	.LLST188
 12765 2427 1A       		.uleb128 0x1a
 12766 2428 766F6C00 		.ascii	"vol\000"
 12767 242c 01       		.byte	0x1
 12768 242d 8310     		.2byte	0x1083
 12769 242f 73000000 		.4byte	0x73
 12770 2433 1C280000 		.4byte	.LLST189
 12771 2437 23       		.uleb128 0x23
 12772 2438 10000000 		.4byte	.LVL793
 12773 243c 7C0A0000 		.4byte	0xa7c
 12774 2440 22       		.uleb128 0x22
 12775 2441 01       		.uleb128 0x1
 12776 2442 50       		.byte	0x50
 12777 2443 02       		.uleb128 0x2
 12778 2444 91       		.byte	0x91
 12779 2445 74       		.sleb128 -12
 12780 2446 00       		.byte	0
 12781 2447 00       		.byte	0
 12782 2448 27       		.uleb128 0x27
 12783 2449 C2030000 		.4byte	.LASF158
 12784 244d 01       		.byte	0x1
 12785 244e 9010     		.2byte	0x1090
 12786 2450 40040000 		.4byte	0x440
 12787 2454 00000000 		.4byte	.LFB43
 12788 2458 5A000000 		.4byte	.LFE43-.LFB43
 12789 245c 01       		.uleb128 0x1
 12790 245d 9C       		.byte	0x9c
 12791 245e E3240000 		.4byte	0x24e3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 366


 12792 2462 20       		.uleb128 0x20
 12793 2463 68000000 		.4byte	.LASF105
 12794 2467 01       		.byte	0x1
 12795 2468 9110     		.2byte	0x1091
 12796 246a 710A0000 		.4byte	0xa71
 12797 246e 3A280000 		.4byte	.LLST190
 12798 2472 1A       		.uleb128 0x1a
 12799 2473 72657300 		.ascii	"res\000"
 12800 2477 01       		.byte	0x1
 12801 2478 9710     		.2byte	0x1097
 12802 247a 40040000 		.4byte	0x440
 12803 247e 66280000 		.4byte	.LLST191
 12804 2482 1F       		.uleb128 0x1f
 12805 2483 646A00   		.ascii	"dj\000"
 12806 2486 01       		.byte	0x1
 12807 2487 9810     		.2byte	0x1098
 12808 2489 4D030000 		.4byte	0x34d
 12809 248d 02       		.uleb128 0x2
 12810 248e 91       		.byte	0x91
 12811 248f 44       		.sleb128 -60
 12812 2490 1F       		.uleb128 0x1f
 12813 2491 667300   		.ascii	"fs\000"
 12814 2494 01       		.byte	0x1
 12815 2495 9910     		.2byte	0x1099
 12816 2497 55020000 		.4byte	0x255
 12817 249b 02       		.uleb128 0x2
 12818 249c 91       		.byte	0x91
 12819 249d 40       		.sleb128 -64
 12820 249e 21       		.uleb128 0x21
 12821 249f 10000000 		.4byte	.LVL800
 12822 24a3 000E0000 		.4byte	0xe00
 12823 24a7 BE240000 		.4byte	0x24be
 12824 24ab 22       		.uleb128 0x22
 12825 24ac 01       		.uleb128 0x1
 12826 24ad 50       		.byte	0x50
 12827 24ae 03       		.uleb128 0x3
 12828 24af 91       		.byte	0x91
 12829 24b0 BC7F     		.sleb128 -68
 12830 24b2 22       		.uleb128 0x22
 12831 24b3 01       		.uleb128 0x1
 12832 24b4 51       		.byte	0x51
 12833 24b5 02       		.uleb128 0x2
 12834 24b6 91       		.byte	0x91
 12835 24b7 40       		.sleb128 -64
 12836 24b8 22       		.uleb128 0x22
 12837 24b9 01       		.uleb128 0x1
 12838 24ba 52       		.byte	0x52
 12839 24bb 01       		.uleb128 0x1
 12840 24bc 30       		.byte	0x30
 12841 24bd 00       		.byte	0
 12842 24be 21       		.uleb128 0x21
 12843 24bf 20000000 		.4byte	.LVL802
 12844 24c3 A6170000 		.4byte	0x17a6
 12845 24c7 D2240000 		.4byte	0x24d2
 12846 24cb 22       		.uleb128 0x22
 12847 24cc 01       		.uleb128 0x1
 12848 24cd 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 367


 12849 24ce 02       		.uleb128 0x2
 12850 24cf 91       		.byte	0x91
 12851 24d0 44       		.sleb128 -60
 12852 24d1 00       		.byte	0
 12853 24d2 23       		.uleb128 0x23
 12854 24d3 48000000 		.4byte	.LVL804
 12855 24d7 FE070000 		.4byte	0x7fe
 12856 24db 22       		.uleb128 0x22
 12857 24dc 01       		.uleb128 0x1
 12858 24dd 50       		.byte	0x50
 12859 24de 02       		.uleb128 0x2
 12860 24df 75       		.byte	0x75
 12861 24e0 00       		.sleb128 0
 12862 24e1 00       		.byte	0
 12863 24e2 00       		.byte	0
 12864 24e3 27       		.uleb128 0x27
 12865 24e4 85040000 		.4byte	.LASF159
 12866 24e8 01       		.byte	0x1
 12867 24e9 3211     		.2byte	0x1132
 12868 24eb 40040000 		.4byte	0x440
 12869 24ef 00000000 		.4byte	.LFB44
 12870 24f3 7A010000 		.4byte	.LFE44-.LFB44
 12871 24f7 01       		.uleb128 0x1
 12872 24f8 9C       		.byte	0x9c
 12873 24f9 0E260000 		.4byte	0x260e
 12874 24fd 19       		.uleb128 0x19
 12875 24fe 667000   		.ascii	"fp\000"
 12876 2501 01       		.byte	0x1
 12877 2502 3311     		.2byte	0x1133
 12878 2504 EE040000 		.4byte	0x4ee
 12879 2508 9A280000 		.4byte	.LLST192
 12880 250c 19       		.uleb128 0x19
 12881 250d 6F667300 		.ascii	"ofs\000"
 12882 2511 01       		.byte	0x1
 12883 2512 3411     		.2byte	0x1134
 12884 2514 E0000000 		.4byte	0xe0
 12885 2518 B8280000 		.4byte	.LLST193
 12886 251c 1A       		.uleb128 0x1a
 12887 251d 72657300 		.ascii	"res\000"
 12888 2521 01       		.byte	0x1
 12889 2522 3711     		.2byte	0x1137
 12890 2524 40040000 		.4byte	0x440
 12891 2528 02290000 		.4byte	.LLST194
 12892 252c 1F       		.uleb128 0x1f
 12893 252d 667300   		.ascii	"fs\000"
 12894 2530 01       		.byte	0x1
 12895 2531 3811     		.2byte	0x1138
 12896 2533 55020000 		.4byte	0x255
 12897 2537 02       		.uleb128 0x2
 12898 2538 91       		.byte	0x91
 12899 2539 64       		.sleb128 -28
 12900 253a 26       		.uleb128 0x26
 12901 253b CA020000 		.4byte	.LASF100
 12902 253f 01       		.byte	0x1
 12903 2540 3911     		.2byte	0x1139
 12904 2542 B8000000 		.4byte	0xb8
 12905 2546 6D290000 		.4byte	.LLST195
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 368


 12906 254a 1A       		.uleb128 0x1a
 12907 254b 62637300 		.ascii	"bcs\000"
 12908 254f 01       		.byte	0x1
 12909 2550 3911     		.2byte	0x1139
 12910 2552 B8000000 		.4byte	0xb8
 12911 2556 462A0000 		.4byte	.LLST196
 12912 255a 26       		.uleb128 0x26
 12913 255b 05070000 		.4byte	.LASF160
 12914 255f 01       		.byte	0x1
 12915 2560 3A11     		.2byte	0x113a
 12916 2562 EB000000 		.4byte	0xeb
 12917 2566 642A0000 		.4byte	.LLST197
 12918 256a 26       		.uleb128 0x26
 12919 256b 45000000 		.4byte	.LASF161
 12920 256f 01       		.byte	0x1
 12921 2570 3B11     		.2byte	0x113b
 12922 2572 E0000000 		.4byte	0xe0
 12923 2576 BB2A0000 		.4byte	.LLST198
 12924 257a 21       		.uleb128 0x21
 12925 257b 12000000 		.4byte	.LVL810
 12926 257f 480B0000 		.4byte	0xb48
 12927 2583 94250000 		.4byte	0x2594
 12928 2587 22       		.uleb128 0x22
 12929 2588 01       		.uleb128 0x1
 12930 2589 50       		.byte	0x50
 12931 258a 02       		.uleb128 0x2
 12932 258b 74       		.byte	0x74
 12933 258c 00       		.sleb128 0
 12934 258d 22       		.uleb128 0x22
 12935 258e 01       		.uleb128 0x1
 12936 258f 51       		.byte	0x51
 12937 2590 02       		.uleb128 0x2
 12938 2591 91       		.byte	0x91
 12939 2592 64       		.sleb128 -28
 12940 2593 00       		.byte	0
 12941 2594 21       		.uleb128 0x21
 12942 2595 66000000 		.4byte	.LVL821
 12943 2599 39130000 		.4byte	0x1339
 12944 259d A8250000 		.4byte	0x25a8
 12945 25a1 22       		.uleb128 0x22
 12946 25a2 01       		.uleb128 0x1
 12947 25a3 50       		.byte	0x50
 12948 25a4 02       		.uleb128 0x2
 12949 25a5 74       		.byte	0x74
 12950 25a6 00       		.sleb128 0
 12951 25a7 00       		.byte	0
 12952 25a8 21       		.uleb128 0x21
 12953 25a9 A2000000 		.4byte	.LVL833
 12954 25ad 39130000 		.4byte	0x1339
 12955 25b1 BC250000 		.4byte	0x25bc
 12956 25b5 22       		.uleb128 0x22
 12957 25b6 01       		.uleb128 0x1
 12958 25b7 50       		.byte	0x50
 12959 25b8 02       		.uleb128 0x2
 12960 25b9 74       		.byte	0x74
 12961 25ba 00       		.sleb128 0
 12962 25bb 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 369


 12963 25bc 21       		.uleb128 0x21
 12964 25bd AE000000 		.4byte	.LVL835
 12965 25c1 A4110000 		.4byte	0x11a4
 12966 25c5 D0250000 		.4byte	0x25d0
 12967 25c9 22       		.uleb128 0x22
 12968 25ca 01       		.uleb128 0x1
 12969 25cb 50       		.byte	0x50
 12970 25cc 02       		.uleb128 0x2
 12971 25cd 74       		.byte	0x74
 12972 25ce 00       		.sleb128 0
 12973 25cf 00       		.byte	0
 12974 25d0 24       		.uleb128 0x24
 12975 25d1 EE000000 		.4byte	.LVL846
 12976 25d5 C4070000 		.4byte	0x7c4
 12977 25d9 21       		.uleb128 0x21
 12978 25da 38010000 		.4byte	.LVL855
 12979 25de B8360000 		.4byte	0x36b8
 12980 25e2 F2250000 		.4byte	0x25f2
 12981 25e6 22       		.uleb128 0x22
 12982 25e7 01       		.uleb128 0x1
 12983 25e8 51       		.byte	0x51
 12984 25e9 02       		.uleb128 0x2
 12985 25ea 74       		.byte	0x74
 12986 25eb 28       		.sleb128 40
 12987 25ec 22       		.uleb128 0x22
 12988 25ed 01       		.uleb128 0x1
 12989 25ee 53       		.byte	0x53
 12990 25ef 01       		.uleb128 0x1
 12991 25f0 31       		.byte	0x31
 12992 25f1 00       		.byte	0
 12993 25f2 23       		.uleb128 0x23
 12994 25f3 5A010000 		.4byte	.LVL858
 12995 25f7 C3360000 		.4byte	0x36c3
 12996 25fb 22       		.uleb128 0x22
 12997 25fc 01       		.uleb128 0x1
 12998 25fd 51       		.byte	0x51
 12999 25fe 02       		.uleb128 0x2
 13000 25ff 74       		.byte	0x74
 13001 2600 28       		.sleb128 40
 13002 2601 22       		.uleb128 0x22
 13003 2602 01       		.uleb128 0x1
 13004 2603 52       		.byte	0x52
 13005 2604 02       		.uleb128 0x2
 13006 2605 75       		.byte	0x75
 13007 2606 00       		.sleb128 0
 13008 2607 22       		.uleb128 0x22
 13009 2608 01       		.uleb128 0x1
 13010 2609 53       		.byte	0x53
 13011 260a 01       		.uleb128 0x1
 13012 260b 31       		.byte	0x31
 13013 260c 00       		.byte	0
 13014 260d 00       		.byte	0
 13015 260e 27       		.uleb128 0x27
 13016 260f 62060000 		.4byte	.LASF162
 13017 2613 01       		.byte	0x1
 13018 2614 D511     		.2byte	0x11d5
 13019 2616 40040000 		.4byte	0x440
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 370


 13020 261a 00000000 		.4byte	.LFB45
 13021 261e 72000000 		.4byte	.LFE45-.LFB45
 13022 2622 01       		.uleb128 0x1
 13023 2623 9C       		.byte	0x9c
 13024 2624 B7260000 		.4byte	0x26b7
 13025 2628 19       		.uleb128 0x19
 13026 2629 647000   		.ascii	"dp\000"
 13027 262c 01       		.byte	0x1
 13028 262d D611     		.2byte	0x11d6
 13029 262f 5F090000 		.4byte	0x95f
 13030 2633 E62A0000 		.4byte	.LLST199
 13031 2637 20       		.uleb128 0x20
 13032 2638 68000000 		.4byte	.LASF105
 13033 263c 01       		.byte	0x1
 13034 263d D711     		.2byte	0x11d7
 13035 263f 710A0000 		.4byte	0xa71
 13036 2643 362B0000 		.4byte	.LLST200
 13037 2647 1A       		.uleb128 0x1a
 13038 2648 72657300 		.ascii	"res\000"
 13039 264c 01       		.byte	0x1
 13040 264d DA11     		.2byte	0x11da
 13041 264f 40040000 		.4byte	0x440
 13042 2653 842B0000 		.4byte	.LLST201
 13043 2657 1F       		.uleb128 0x1f
 13044 2658 667300   		.ascii	"fs\000"
 13045 265b 01       		.byte	0x1
 13046 265c DB11     		.2byte	0x11db
 13047 265e 55020000 		.4byte	0x255
 13048 2662 02       		.uleb128 0x2
 13049 2663 91       		.byte	0x91
 13050 2664 6C       		.sleb128 -20
 13051 2665 21       		.uleb128 0x21
 13052 2666 14000000 		.4byte	.LVL867
 13053 266a 000E0000 		.4byte	0xe00
 13054 266e 84260000 		.4byte	0x2684
 13055 2672 22       		.uleb128 0x22
 13056 2673 01       		.uleb128 0x1
 13057 2674 50       		.byte	0x50
 13058 2675 02       		.uleb128 0x2
 13059 2676 91       		.byte	0x91
 13060 2677 64       		.sleb128 -28
 13061 2678 22       		.uleb128 0x22
 13062 2679 01       		.uleb128 0x1
 13063 267a 51       		.byte	0x51
 13064 267b 02       		.uleb128 0x2
 13065 267c 91       		.byte	0x91
 13066 267d 6C       		.sleb128 -20
 13067 267e 22       		.uleb128 0x22
 13068 267f 01       		.uleb128 0x1
 13069 2680 52       		.byte	0x52
 13070 2681 01       		.uleb128 0x1
 13071 2682 30       		.byte	0x30
 13072 2683 00       		.byte	0
 13073 2684 21       		.uleb128 0x21
 13074 2685 24000000 		.4byte	.LVL869
 13075 2689 A6170000 		.4byte	0x17a6
 13076 268d 98260000 		.4byte	0x2698
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 371


 13077 2691 22       		.uleb128 0x22
 13078 2692 01       		.uleb128 0x1
 13079 2693 50       		.byte	0x50
 13080 2694 02       		.uleb128 0x2
 13081 2695 75       		.byte	0x75
 13082 2696 00       		.sleb128 0
 13083 2697 00       		.byte	0
 13084 2698 24       		.uleb128 0x24
 13085 2699 40000000 		.4byte	.LVL871
 13086 269d FE070000 		.4byte	0x7fe
 13087 26a1 23       		.uleb128 0x23
 13088 26a2 56000000 		.4byte	.LVL874
 13089 26a6 A2120000 		.4byte	0x12a2
 13090 26aa 22       		.uleb128 0x22
 13091 26ab 01       		.uleb128 0x1
 13092 26ac 50       		.byte	0x50
 13093 26ad 02       		.uleb128 0x2
 13094 26ae 75       		.byte	0x75
 13095 26af 00       		.sleb128 0
 13096 26b0 22       		.uleb128 0x22
 13097 26b1 01       		.uleb128 0x1
 13098 26b2 51       		.byte	0x51
 13099 26b3 01       		.uleb128 0x1
 13100 26b4 30       		.byte	0x30
 13101 26b5 00       		.byte	0
 13102 26b6 00       		.byte	0
 13103 26b7 27       		.uleb128 0x27
 13104 26b8 43070000 		.4byte	.LASF163
 13105 26bc 01       		.byte	0x1
 13106 26bd 1712     		.2byte	0x1217
 13107 26bf 40040000 		.4byte	0x440
 13108 26c3 00000000 		.4byte	.LFB46
 13109 26c7 1A000000 		.4byte	.LFE46-.LFB46
 13110 26cb 01       		.uleb128 0x1
 13111 26cc 9C       		.byte	0x9c
 13112 26cd 15270000 		.4byte	0x2715
 13113 26d1 19       		.uleb128 0x19
 13114 26d2 647000   		.ascii	"dp\000"
 13115 26d5 01       		.byte	0x1
 13116 26d6 1812     		.2byte	0x1218
 13117 26d8 5F090000 		.4byte	0x95f
 13118 26dc C32B0000 		.4byte	.LLST202
 13119 26e0 1A       		.uleb128 0x1a
 13120 26e1 72657300 		.ascii	"res\000"
 13121 26e5 01       		.byte	0x1
 13122 26e6 1B12     		.2byte	0x121b
 13123 26e8 40040000 		.4byte	0x440
 13124 26ec E12B0000 		.4byte	.LLST203
 13125 26f0 1F       		.uleb128 0x1f
 13126 26f1 667300   		.ascii	"fs\000"
 13127 26f4 01       		.byte	0x1
 13128 26f5 1C12     		.2byte	0x121c
 13129 26f7 55020000 		.4byte	0x255
 13130 26fb 02       		.uleb128 0x2
 13131 26fc 91       		.byte	0x91
 13132 26fd 74       		.sleb128 -12
 13133 26fe 23       		.uleb128 0x23
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 372


 13134 26ff 0C000000 		.4byte	.LVL882
 13135 2703 480B0000 		.4byte	0xb48
 13136 2707 22       		.uleb128 0x22
 13137 2708 01       		.uleb128 0x1
 13138 2709 50       		.byte	0x50
 13139 270a 02       		.uleb128 0x2
 13140 270b 74       		.byte	0x74
 13141 270c 00       		.sleb128 0
 13142 270d 22       		.uleb128 0x22
 13143 270e 01       		.uleb128 0x1
 13144 270f 51       		.byte	0x51
 13145 2710 02       		.uleb128 0x2
 13146 2711 91       		.byte	0x91
 13147 2712 74       		.sleb128 -12
 13148 2713 00       		.byte	0
 13149 2714 00       		.byte	0
 13150 2715 27       		.uleb128 0x27
 13151 2716 AC050000 		.4byte	.LASF164
 13152 271a 01       		.byte	0x1
 13153 271b 3512     		.2byte	0x1235
 13154 271d 40040000 		.4byte	0x440
 13155 2721 00000000 		.4byte	.LFB47
 13156 2725 4C000000 		.4byte	.LFE47-.LFB47
 13157 2729 01       		.uleb128 0x1
 13158 272a 9C       		.byte	0x9c
 13159 272b E8270000 		.4byte	0x27e8
 13160 272f 19       		.uleb128 0x19
 13161 2730 647000   		.ascii	"dp\000"
 13162 2733 01       		.byte	0x1
 13163 2734 3612     		.2byte	0x1236
 13164 2736 5F090000 		.4byte	0x95f
 13165 273a F42B0000 		.4byte	.LLST204
 13166 273e 19       		.uleb128 0x19
 13167 273f 666E6F00 		.ascii	"fno\000"
 13168 2743 01       		.byte	0x1
 13169 2744 3712     		.2byte	0x1237
 13170 2746 65090000 		.4byte	0x965
 13171 274a 122C0000 		.4byte	.LLST205
 13172 274e 1A       		.uleb128 0x1a
 13173 274f 72657300 		.ascii	"res\000"
 13174 2753 01       		.byte	0x1
 13175 2754 3A12     		.2byte	0x123a
 13176 2756 40040000 		.4byte	0x440
 13177 275a 302C0000 		.4byte	.LLST206
 13178 275e 1F       		.uleb128 0x1f
 13179 275f 667300   		.ascii	"fs\000"
 13180 2762 01       		.byte	0x1
 13181 2763 3B12     		.2byte	0x123b
 13182 2765 55020000 		.4byte	0x255
 13183 2769 02       		.uleb128 0x2
 13184 276a 91       		.byte	0x91
 13185 276b 6C       		.sleb128 -20
 13186 276c 21       		.uleb128 0x21
 13187 276d 0E000000 		.4byte	.LVL886
 13188 2771 480B0000 		.4byte	0xb48
 13189 2775 86270000 		.4byte	0x2786
 13190 2779 22       		.uleb128 0x22
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 373


 13191 277a 01       		.uleb128 0x1
 13192 277b 50       		.byte	0x50
 13193 277c 02       		.uleb128 0x2
 13194 277d 75       		.byte	0x75
 13195 277e 00       		.sleb128 0
 13196 277f 22       		.uleb128 0x22
 13197 2780 01       		.uleb128 0x1
 13198 2781 51       		.byte	0x51
 13199 2782 02       		.uleb128 0x2
 13200 2783 91       		.byte	0x91
 13201 2784 6C       		.sleb128 -20
 13202 2785 00       		.byte	0
 13203 2786 21       		.uleb128 0x21
 13204 2787 1C000000 		.4byte	.LVL888
 13205 278b A2120000 		.4byte	0x12a2
 13206 278f 9F270000 		.4byte	0x279f
 13207 2793 22       		.uleb128 0x22
 13208 2794 01       		.uleb128 0x1
 13209 2795 50       		.byte	0x50
 13210 2796 02       		.uleb128 0x2
 13211 2797 75       		.byte	0x75
 13212 2798 00       		.sleb128 0
 13213 2799 22       		.uleb128 0x22
 13214 279a 01       		.uleb128 0x1
 13215 279b 51       		.byte	0x51
 13216 279c 01       		.uleb128 0x1
 13217 279d 30       		.byte	0x30
 13218 279e 00       		.byte	0
 13219 279f 21       		.uleb128 0x21
 13220 27a0 28000000 		.4byte	.LVL892
 13221 27a4 AC190000 		.4byte	0x19ac
 13222 27a8 B8270000 		.4byte	0x27b8
 13223 27ac 22       		.uleb128 0x22
 13224 27ad 01       		.uleb128 0x1
 13225 27ae 50       		.byte	0x50
 13226 27af 02       		.uleb128 0x2
 13227 27b0 75       		.byte	0x75
 13228 27b1 00       		.sleb128 0
 13229 27b2 22       		.uleb128 0x22
 13230 27b3 01       		.uleb128 0x1
 13231 27b4 51       		.byte	0x51
 13232 27b5 01       		.uleb128 0x1
 13233 27b6 30       		.byte	0x30
 13234 27b7 00       		.byte	0
 13235 27b8 21       		.uleb128 0x21
 13236 27b9 38000000 		.4byte	.LVL894
 13237 27bd E2080000 		.4byte	0x8e2
 13238 27c1 D2270000 		.4byte	0x27d2
 13239 27c5 22       		.uleb128 0x22
 13240 27c6 01       		.uleb128 0x1
 13241 27c7 50       		.byte	0x50
 13242 27c8 02       		.uleb128 0x2
 13243 27c9 75       		.byte	0x75
 13244 27ca 00       		.sleb128 0
 13245 27cb 22       		.uleb128 0x22
 13246 27cc 01       		.uleb128 0x1
 13247 27cd 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 374


 13248 27ce 02       		.uleb128 0x2
 13249 27cf 76       		.byte	0x76
 13250 27d0 00       		.sleb128 0
 13251 27d1 00       		.byte	0
 13252 27d2 23       		.uleb128 0x23
 13253 27d3 40000000 		.4byte	.LVL895
 13254 27d7 42160000 		.4byte	0x1642
 13255 27db 22       		.uleb128 0x22
 13256 27dc 01       		.uleb128 0x1
 13257 27dd 50       		.byte	0x50
 13258 27de 02       		.uleb128 0x2
 13259 27df 75       		.byte	0x75
 13260 27e0 00       		.sleb128 0
 13261 27e1 22       		.uleb128 0x22
 13262 27e2 01       		.uleb128 0x1
 13263 27e3 51       		.byte	0x51
 13264 27e4 01       		.uleb128 0x1
 13265 27e5 30       		.byte	0x30
 13266 27e6 00       		.byte	0
 13267 27e7 00       		.byte	0
 13268 27e8 27       		.uleb128 0x27
 13269 27e9 BF010000 		.4byte	.LASF165
 13270 27ed 01       		.byte	0x1
 13271 27ee 8D12     		.2byte	0x128d
 13272 27f0 40040000 		.4byte	0x440
 13273 27f4 00000000 		.4byte	.LFB48
 13274 27f8 3E000000 		.4byte	.LFE48-.LFB48
 13275 27fc 01       		.uleb128 0x1
 13276 27fd 9C       		.byte	0x9c
 13277 27fe 8B280000 		.4byte	0x288b
 13278 2802 20       		.uleb128 0x20
 13279 2803 68000000 		.4byte	.LASF105
 13280 2807 01       		.byte	0x1
 13281 2808 8E12     		.2byte	0x128e
 13282 280a 710A0000 		.4byte	0xa71
 13283 280e 852C0000 		.4byte	.LLST207
 13284 2812 19       		.uleb128 0x19
 13285 2813 666E6F00 		.ascii	"fno\000"
 13286 2817 01       		.byte	0x1
 13287 2818 8F12     		.2byte	0x128f
 13288 281a 65090000 		.4byte	0x965
 13289 281e B12C0000 		.4byte	.LLST208
 13290 2822 1A       		.uleb128 0x1a
 13291 2823 72657300 		.ascii	"res\000"
 13292 2827 01       		.byte	0x1
 13293 2828 9212     		.2byte	0x1292
 13294 282a 40040000 		.4byte	0x440
 13295 282e CF2C0000 		.4byte	.LLST209
 13296 2832 1F       		.uleb128 0x1f
 13297 2833 646A00   		.ascii	"dj\000"
 13298 2836 01       		.byte	0x1
 13299 2837 9312     		.2byte	0x1293
 13300 2839 4D030000 		.4byte	0x34d
 13301 283d 02       		.uleb128 0x2
 13302 283e 91       		.byte	0x91
 13303 283f 44       		.sleb128 -60
 13304 2840 21       		.uleb128 0x21
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 375


 13305 2841 12000000 		.4byte	.LVL900
 13306 2845 000E0000 		.4byte	0xe00
 13307 2849 60280000 		.4byte	0x2860
 13308 284d 22       		.uleb128 0x22
 13309 284e 01       		.uleb128 0x1
 13310 284f 50       		.byte	0x50
 13311 2850 03       		.uleb128 0x3
 13312 2851 91       		.byte	0x91
 13313 2852 BC7F     		.sleb128 -68
 13314 2854 22       		.uleb128 0x22
 13315 2855 01       		.uleb128 0x1
 13316 2856 51       		.byte	0x51
 13317 2857 02       		.uleb128 0x2
 13318 2858 91       		.byte	0x91
 13319 2859 44       		.sleb128 -60
 13320 285a 22       		.uleb128 0x22
 13321 285b 01       		.uleb128 0x1
 13322 285c 52       		.byte	0x52
 13323 285d 01       		.uleb128 0x1
 13324 285e 30       		.byte	0x30
 13325 285f 00       		.byte	0
 13326 2860 21       		.uleb128 0x21
 13327 2861 1E000000 		.4byte	.LVL902
 13328 2865 A6170000 		.4byte	0x17a6
 13329 2869 74280000 		.4byte	0x2874
 13330 286d 22       		.uleb128 0x22
 13331 286e 01       		.uleb128 0x1
 13332 286f 50       		.byte	0x50
 13333 2870 02       		.uleb128 0x2
 13334 2871 91       		.byte	0x91
 13335 2872 44       		.sleb128 -60
 13336 2873 00       		.byte	0
 13337 2874 23       		.uleb128 0x23
 13338 2875 34000000 		.4byte	.LVL904
 13339 2879 E2080000 		.4byte	0x8e2
 13340 287d 22       		.uleb128 0x22
 13341 287e 01       		.uleb128 0x1
 13342 287f 50       		.byte	0x50
 13343 2880 02       		.uleb128 0x2
 13344 2881 91       		.byte	0x91
 13345 2882 44       		.sleb128 -60
 13346 2883 22       		.uleb128 0x22
 13347 2884 01       		.uleb128 0x1
 13348 2885 51       		.byte	0x51
 13349 2886 02       		.uleb128 0x2
 13350 2887 75       		.byte	0x75
 13351 2888 00       		.sleb128 0
 13352 2889 00       		.byte	0
 13353 288a 00       		.byte	0
 13354 288b 27       		.uleb128 0x27
 13355 288c 3E040000 		.4byte	.LASF166
 13356 2890 01       		.byte	0x1
 13357 2891 B012     		.2byte	0x12b0
 13358 2893 40040000 		.4byte	0x440
 13359 2897 00000000 		.4byte	.LFB49
 13360 289b CE000000 		.4byte	.LFE49-.LFB49
 13361 289f 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 376


 13362 28a0 9C       		.byte	0x9c
 13363 28a1 B0290000 		.4byte	0x29b0
 13364 28a5 20       		.uleb128 0x20
 13365 28a6 68000000 		.4byte	.LASF105
 13366 28aa 01       		.byte	0x1
 13367 28ab B112     		.2byte	0x12b1
 13368 28ad 710A0000 		.4byte	0xa71
 13369 28b1 032D0000 		.4byte	.LLST210
 13370 28b5 20       		.uleb128 0x20
 13371 28b6 CA030000 		.4byte	.LASF121
 13372 28ba 01       		.byte	0x1
 13373 28bb B212     		.2byte	0x12b2
 13374 28bd B0290000 		.4byte	0x29b0
 13375 28c1 2E2D0000 		.4byte	.LLST211
 13376 28c5 20       		.uleb128 0x20
 13377 28c6 FE030000 		.4byte	.LASF167
 13378 28ca 01       		.byte	0x1
 13379 28cb B312     		.2byte	0x12b3
 13380 28cd A20B0000 		.4byte	0xba2
 13381 28d1 4C2D0000 		.4byte	.LLST212
 13382 28d5 1A       		.uleb128 0x1a
 13383 28d6 72657300 		.ascii	"res\000"
 13384 28da 01       		.byte	0x1
 13385 28db B612     		.2byte	0x12b6
 13386 28dd 40040000 		.4byte	0x440
 13387 28e1 912D0000 		.4byte	.LLST213
 13388 28e5 1F       		.uleb128 0x1f
 13389 28e6 667300   		.ascii	"fs\000"
 13390 28e9 01       		.byte	0x1
 13391 28ea B712     		.2byte	0x12b7
 13392 28ec 55020000 		.4byte	0x255
 13393 28f0 02       		.uleb128 0x2
 13394 28f1 91       		.byte	0x91
 13395 28f2 5C       		.sleb128 -36
 13396 28f3 26       		.uleb128 0x26
 13397 28f4 22030000 		.4byte	.LASF168
 13398 28f8 01       		.byte	0x1
 13399 28f9 B812     		.2byte	0x12b8
 13400 28fb B8000000 		.4byte	0xb8
 13401 28ff DB2D0000 		.4byte	.LLST214
 13402 2903 26       		.uleb128 0x26
 13403 2904 CA020000 		.4byte	.LASF100
 13404 2908 01       		.byte	0x1
 13405 2909 B812     		.2byte	0x12b8
 13406 290b B8000000 		.4byte	0xb8
 13407 290f 112E0000 		.4byte	.LLST215
 13408 2913 26       		.uleb128 0x26
 13409 2914 0B070000 		.4byte	.LASF42
 13410 2918 01       		.byte	0x1
 13411 2919 B812     		.2byte	0x12b8
 13412 291b B8000000 		.4byte	0xb8
 13413 291f 5E2E0000 		.4byte	.LLST216
 13414 2923 26       		.uleb128 0x26
 13415 2924 A6000000 		.4byte	.LASF49
 13416 2928 01       		.byte	0x1
 13417 2929 B912     		.2byte	0x12b9
 13418 292b EB000000 		.4byte	0xeb
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 377


 13419 292f 7C2E0000 		.4byte	.LLST217
 13420 2933 1A       		.uleb128 0x1a
 13421 2934 6900     		.ascii	"i\000"
 13422 2936 01       		.byte	0x1
 13423 2937 BA12     		.2byte	0x12ba
 13424 2939 97000000 		.4byte	0x97
 13425 293d A52E0000 		.4byte	.LLST218
 13426 2941 1F       		.uleb128 0x1f
 13427 2942 6F626A00 		.ascii	"obj\000"
 13428 2946 01       		.byte	0x1
 13429 2947 BB12     		.2byte	0x12bb
 13430 2949 5B020000 		.4byte	0x25b
 13431 294d 02       		.uleb128 0x2
 13432 294e 91       		.byte	0x91
 13433 294f 4C       		.sleb128 -52
 13434 2950 21       		.uleb128 0x21
 13435 2951 16000000 		.4byte	.LVL911
 13436 2955 000E0000 		.4byte	0xe00
 13437 2959 6F290000 		.4byte	0x296f
 13438 295d 22       		.uleb128 0x22
 13439 295e 01       		.uleb128 0x1
 13440 295f 50       		.byte	0x50
 13441 2960 02       		.uleb128 0x2
 13442 2961 91       		.byte	0x91
 13443 2962 44       		.sleb128 -60
 13444 2963 22       		.uleb128 0x22
 13445 2964 01       		.uleb128 0x1
 13446 2965 51       		.byte	0x51
 13447 2966 02       		.uleb128 0x2
 13448 2967 91       		.byte	0x91
 13449 2968 5C       		.sleb128 -36
 13450 2969 22       		.uleb128 0x22
 13451 296a 01       		.uleb128 0x1
 13452 296b 52       		.byte	0x52
 13453 296c 01       		.uleb128 0x1
 13454 296d 30       		.byte	0x30
 13455 296e 00       		.byte	0
 13456 296f 21       		.uleb128 0x21
 13457 2970 44000000 		.4byte	.LVL916
 13458 2974 A4110000 		.4byte	0x11a4
 13459 2978 89290000 		.4byte	0x2989
 13460 297c 22       		.uleb128 0x22
 13461 297d 01       		.uleb128 0x1
 13462 297e 50       		.byte	0x50
 13463 297f 02       		.uleb128 0x2
 13464 2980 91       		.byte	0x91
 13465 2981 4C       		.sleb128 -52
 13466 2982 22       		.uleb128 0x22
 13467 2983 01       		.uleb128 0x1
 13468 2984 51       		.byte	0x51
 13469 2985 02       		.uleb128 0x2
 13470 2986 74       		.byte	0x74
 13471 2987 00       		.sleb128 0
 13472 2988 00       		.byte	0
 13473 2989 21       		.uleb128 0x21
 13474 298a 72000000 		.4byte	.LVL924
 13475 298e 100C0000 		.4byte	0xc10
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 378


 13476 2992 9D290000 		.4byte	0x299d
 13477 2996 22       		.uleb128 0x22
 13478 2997 01       		.uleb128 0x1
 13479 2998 51       		.byte	0x51
 13480 2999 02       		.uleb128 0x2
 13481 299a 77       		.byte	0x77
 13482 299b 00       		.sleb128 0
 13483 299c 00       		.byte	0
 13484 299d 24       		.uleb128 0x24
 13485 299e 88000000 		.4byte	.LVL926
 13486 29a2 10050000 		.4byte	0x510
 13487 29a6 24       		.uleb128 0x24
 13488 29a7 98000000 		.4byte	.LVL929
 13489 29ab 55050000 		.4byte	0x555
 13490 29af 00       		.byte	0
 13491 29b0 0B       		.uleb128 0xb
 13492 29b1 04       		.byte	0x4
 13493 29b2 B8000000 		.4byte	0xb8
 13494 29b6 27       		.uleb128 0x27
 13495 29b7 EF060000 		.4byte	.LASF169
 13496 29bb 01       		.byte	0x1
 13497 29bc 0A13     		.2byte	0x130a
 13498 29be 40040000 		.4byte	0x440
 13499 29c2 00000000 		.4byte	.LFB50
 13500 29c6 B4000000 		.4byte	.LFE50-.LFB50
 13501 29ca 01       		.uleb128 0x1
 13502 29cb 9C       		.byte	0x9c
 13503 29cc 7E2A0000 		.4byte	0x2a7e
 13504 29d0 19       		.uleb128 0x19
 13505 29d1 667000   		.ascii	"fp\000"
 13506 29d4 01       		.byte	0x1
 13507 29d5 0B13     		.2byte	0x130b
 13508 29d7 EE040000 		.4byte	0x4ee
 13509 29db C42E0000 		.4byte	.LLST219
 13510 29df 1A       		.uleb128 0x1a
 13511 29e0 72657300 		.ascii	"res\000"
 13512 29e4 01       		.byte	0x1
 13513 29e5 0E13     		.2byte	0x130e
 13514 29e7 40040000 		.4byte	0x440
 13515 29eb E22E0000 		.4byte	.LLST220
 13516 29ef 1F       		.uleb128 0x1f
 13517 29f0 667300   		.ascii	"fs\000"
 13518 29f3 01       		.byte	0x1
 13519 29f4 0F13     		.2byte	0x130f
 13520 29f6 55020000 		.4byte	0x255
 13521 29fa 02       		.uleb128 0x2
 13522 29fb 91       		.byte	0x91
 13523 29fc 6C       		.sleb128 -20
 13524 29fd 1A       		.uleb128 0x1a
 13525 29fe 6E636C00 		.ascii	"ncl\000"
 13526 2a02 01       		.byte	0x1
 13527 2a03 1013     		.2byte	0x1310
 13528 2a05 B8000000 		.4byte	0xb8
 13529 2a09 2D2F0000 		.4byte	.LLST221
 13530 2a0d 21       		.uleb128 0x21
 13531 2a0e 0C000000 		.4byte	.LVL938
 13532 2a12 480B0000 		.4byte	0xb48
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 379


 13533 2a16 272A0000 		.4byte	0x2a27
 13534 2a1a 22       		.uleb128 0x22
 13535 2a1b 01       		.uleb128 0x1
 13536 2a1c 50       		.byte	0x50
 13537 2a1d 02       		.uleb128 0x2
 13538 2a1e 75       		.byte	0x75
 13539 2a1f 00       		.sleb128 0
 13540 2a20 22       		.uleb128 0x22
 13541 2a21 01       		.uleb128 0x1
 13542 2a22 51       		.byte	0x51
 13543 2a23 02       		.uleb128 0x2
 13544 2a24 91       		.byte	0x91
 13545 2a25 6C       		.sleb128 -20
 13546 2a26 00       		.byte	0
 13547 2a27 21       		.uleb128 0x21
 13548 2a28 32000000 		.4byte	.LVL940
 13549 2a2c 39140000 		.4byte	0x1439
 13550 2a30 402A0000 		.4byte	0x2a40
 13551 2a34 22       		.uleb128 0x22
 13552 2a35 01       		.uleb128 0x1
 13553 2a36 50       		.byte	0x50
 13554 2a37 02       		.uleb128 0x2
 13555 2a38 75       		.byte	0x75
 13556 2a39 00       		.sleb128 0
 13557 2a3a 22       		.uleb128 0x22
 13558 2a3b 01       		.uleb128 0x1
 13559 2a3c 52       		.byte	0x52
 13560 2a3d 01       		.uleb128 0x1
 13561 2a3e 30       		.byte	0x30
 13562 2a3f 00       		.byte	0
 13563 2a40 21       		.uleb128 0x21
 13564 2a41 42000000 		.4byte	.LVL942
 13565 2a45 A4110000 		.4byte	0x11a4
 13566 2a49 542A0000 		.4byte	0x2a54
 13567 2a4d 22       		.uleb128 0x22
 13568 2a4e 01       		.uleb128 0x1
 13569 2a4f 50       		.byte	0x50
 13570 2a50 02       		.uleb128 0x2
 13571 2a51 75       		.byte	0x75
 13572 2a52 00       		.sleb128 0
 13573 2a53 00       		.byte	0
 13574 2a54 21       		.uleb128 0x21
 13575 2a55 64000000 		.4byte	.LVL946
 13576 2a59 39140000 		.4byte	0x1439
 13577 2a5d 682A0000 		.4byte	0x2a68
 13578 2a61 22       		.uleb128 0x22
 13579 2a62 01       		.uleb128 0x1
 13580 2a63 50       		.byte	0x50
 13581 2a64 02       		.uleb128 0x2
 13582 2a65 75       		.byte	0x75
 13583 2a66 00       		.sleb128 0
 13584 2a67 00       		.byte	0
 13585 2a68 23       		.uleb128 0x23
 13586 2a69 8A000000 		.4byte	.LVL948
 13587 2a6d B8360000 		.4byte	0x36b8
 13588 2a71 22       		.uleb128 0x22
 13589 2a72 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 380


 13590 2a73 51       		.byte	0x51
 13591 2a74 02       		.uleb128 0x2
 13592 2a75 75       		.byte	0x75
 13593 2a76 28       		.sleb128 40
 13594 2a77 22       		.uleb128 0x22
 13595 2a78 01       		.uleb128 0x1
 13596 2a79 53       		.byte	0x53
 13597 2a7a 01       		.uleb128 0x1
 13598 2a7b 31       		.byte	0x31
 13599 2a7c 00       		.byte	0
 13600 2a7d 00       		.byte	0
 13601 2a7e 27       		.uleb128 0x27
 13602 2a7f A8040000 		.4byte	.LASF170
 13603 2a83 01       		.byte	0x1
 13604 2a84 3C13     		.2byte	0x133c
 13605 2a86 40040000 		.4byte	0x440
 13606 2a8a 00000000 		.4byte	.LFB51
 13607 2a8e C4000000 		.4byte	.LFE51-.LFB51
 13608 2a92 01       		.uleb128 0x1
 13609 2a93 9C       		.byte	0x9c
 13610 2a94 AF2B0000 		.4byte	0x2baf
 13611 2a98 20       		.uleb128 0x20
 13612 2a99 68000000 		.4byte	.LASF105
 13613 2a9d 01       		.byte	0x1
 13614 2a9e 3D13     		.2byte	0x133d
 13615 2aa0 710A0000 		.4byte	0xa71
 13616 2aa4 4B2F0000 		.4byte	.LLST222
 13617 2aa8 1A       		.uleb128 0x1a
 13618 2aa9 72657300 		.ascii	"res\000"
 13619 2aad 01       		.byte	0x1
 13620 2aae 4013     		.2byte	0x1340
 13621 2ab0 40040000 		.4byte	0x440
 13622 2ab4 772F0000 		.4byte	.LLST223
 13623 2ab8 1F       		.uleb128 0x1f
 13624 2ab9 646A00   		.ascii	"dj\000"
 13625 2abc 01       		.byte	0x1
 13626 2abd 4113     		.2byte	0x1341
 13627 2abf 4D030000 		.4byte	0x34d
 13628 2ac3 02       		.uleb128 0x2
 13629 2ac4 91       		.byte	0x91
 13630 2ac5 44       		.sleb128 -60
 13631 2ac6 1F       		.uleb128 0x1f
 13632 2ac7 73646A00 		.ascii	"sdj\000"
 13633 2acb 01       		.byte	0x1
 13634 2acc 4113     		.2byte	0x1341
 13635 2ace 4D030000 		.4byte	0x34d
 13636 2ad2 03       		.uleb128 0x3
 13637 2ad3 91       		.byte	0x91
 13638 2ad4 987F     		.sleb128 -104
 13639 2ad6 26       		.uleb128 0x26
 13640 2ad7 6A040000 		.4byte	.LASF171
 13641 2adb 01       		.byte	0x1
 13642 2adc 4213     		.2byte	0x1342
 13643 2ade B8000000 		.4byte	0xb8
 13644 2ae2 ED2F0000 		.4byte	.LLST224
 13645 2ae6 1F       		.uleb128 0x1f
 13646 2ae7 667300   		.ascii	"fs\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 381


 13647 2aea 01       		.byte	0x1
 13648 2aeb 4313     		.2byte	0x1343
 13649 2aed 55020000 		.4byte	0x255
 13650 2af1 03       		.uleb128 0x3
 13651 2af2 91       		.byte	0x91
 13652 2af3 947F     		.sleb128 -108
 13653 2af5 21       		.uleb128 0x21
 13654 2af6 10000000 		.4byte	.LVL956
 13655 2afa 000E0000 		.4byte	0xe00
 13656 2afe 162B0000 		.4byte	0x2b16
 13657 2b02 22       		.uleb128 0x22
 13658 2b03 01       		.uleb128 0x1
 13659 2b04 50       		.byte	0x50
 13660 2b05 03       		.uleb128 0x3
 13661 2b06 91       		.byte	0x91
 13662 2b07 8C7F     		.sleb128 -116
 13663 2b09 22       		.uleb128 0x22
 13664 2b0a 01       		.uleb128 0x1
 13665 2b0b 51       		.byte	0x51
 13666 2b0c 03       		.uleb128 0x3
 13667 2b0d 91       		.byte	0x91
 13668 2b0e 947F     		.sleb128 -108
 13669 2b10 22       		.uleb128 0x22
 13670 2b11 01       		.uleb128 0x1
 13671 2b12 52       		.byte	0x52
 13672 2b13 01       		.uleb128 0x1
 13673 2b14 32       		.byte	0x32
 13674 2b15 00       		.byte	0
 13675 2b16 21       		.uleb128 0x21
 13676 2b17 22000000 		.4byte	.LVL958
 13677 2b1b A6170000 		.4byte	0x17a6
 13678 2b1f 2A2B0000 		.4byte	0x2b2a
 13679 2b23 22       		.uleb128 0x22
 13680 2b24 01       		.uleb128 0x1
 13681 2b25 50       		.byte	0x50
 13682 2b26 02       		.uleb128 0x2
 13683 2b27 91       		.byte	0x91
 13684 2b28 44       		.sleb128 -60
 13685 2b29 00       		.byte	0
 13686 2b2a 21       		.uleb128 0x21
 13687 2b2b 5C000000 		.4byte	.LVL963
 13688 2b2f FE070000 		.4byte	0x7fe
 13689 2b33 3E2B0000 		.4byte	0x2b3e
 13690 2b37 22       		.uleb128 0x22
 13691 2b38 01       		.uleb128 0x1
 13692 2b39 50       		.byte	0x50
 13693 2b3a 02       		.uleb128 0x2
 13694 2b3b 76       		.byte	0x76
 13695 2b3c 00       		.sleb128 0
 13696 2b3d 00       		.byte	0
 13697 2b3e 21       		.uleb128 0x21
 13698 2b3f 7A000000 		.4byte	.LVL966
 13699 2b43 A2120000 		.4byte	0x12a2
 13700 2b47 582B0000 		.4byte	0x2b58
 13701 2b4b 22       		.uleb128 0x22
 13702 2b4c 01       		.uleb128 0x1
 13703 2b4d 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 382


 13704 2b4e 03       		.uleb128 0x3
 13705 2b4f 91       		.byte	0x91
 13706 2b50 987F     		.sleb128 -104
 13707 2b52 22       		.uleb128 0x22
 13708 2b53 01       		.uleb128 0x1
 13709 2b54 51       		.byte	0x51
 13710 2b55 01       		.uleb128 0x1
 13711 2b56 30       		.byte	0x30
 13712 2b57 00       		.byte	0
 13713 2b58 21       		.uleb128 0x21
 13714 2b59 86000000 		.4byte	.LVL968
 13715 2b5d AC190000 		.4byte	0x19ac
 13716 2b61 722B0000 		.4byte	0x2b72
 13717 2b65 22       		.uleb128 0x22
 13718 2b66 01       		.uleb128 0x1
 13719 2b67 50       		.byte	0x50
 13720 2b68 03       		.uleb128 0x3
 13721 2b69 91       		.byte	0x91
 13722 2b6a 987F     		.sleb128 -104
 13723 2b6c 22       		.uleb128 0x22
 13724 2b6d 01       		.uleb128 0x1
 13725 2b6e 51       		.byte	0x51
 13726 2b6f 01       		.uleb128 0x1
 13727 2b70 30       		.byte	0x30
 13728 2b71 00       		.byte	0
 13729 2b72 21       		.uleb128 0x21
 13730 2b73 A2000000 		.4byte	.LVL973
 13731 2b77 07150000 		.4byte	0x1507
 13732 2b7b 862B0000 		.4byte	0x2b86
 13733 2b7f 22       		.uleb128 0x22
 13734 2b80 01       		.uleb128 0x1
 13735 2b81 50       		.byte	0x50
 13736 2b82 02       		.uleb128 0x2
 13737 2b83 91       		.byte	0x91
 13738 2b84 44       		.sleb128 -60
 13739 2b85 00       		.byte	0
 13740 2b86 21       		.uleb128 0x21
 13741 2b87 B2000000 		.4byte	.LVL975
 13742 2b8b 39140000 		.4byte	0x1439
 13743 2b8f A52B0000 		.4byte	0x2ba5
 13744 2b93 22       		.uleb128 0x22
 13745 2b94 01       		.uleb128 0x1
 13746 2b95 50       		.byte	0x50
 13747 2b96 02       		.uleb128 0x2
 13748 2b97 91       		.byte	0x91
 13749 2b98 44       		.sleb128 -60
 13750 2b99 22       		.uleb128 0x22
 13751 2b9a 01       		.uleb128 0x1
 13752 2b9b 51       		.byte	0x51
 13753 2b9c 02       		.uleb128 0x2
 13754 2b9d 75       		.byte	0x75
 13755 2b9e 00       		.sleb128 0
 13756 2b9f 22       		.uleb128 0x22
 13757 2ba0 01       		.uleb128 0x1
 13758 2ba1 52       		.byte	0x52
 13759 2ba2 01       		.uleb128 0x1
 13760 2ba3 30       		.byte	0x30
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 383


 13761 2ba4 00       		.byte	0
 13762 2ba5 24       		.uleb128 0x24
 13763 2ba6 BC000000 		.4byte	.LVL977
 13764 2baa 4A1A0000 		.4byte	0x1a4a
 13765 2bae 00       		.byte	0
 13766 2baf 27       		.uleb128 0x27
 13767 2bb0 62030000 		.4byte	.LASF172
 13768 2bb4 01       		.byte	0x1
 13769 2bb5 9A13     		.2byte	0x139a
 13770 2bb7 40040000 		.4byte	0x440
 13771 2bbb 00000000 		.4byte	.LFB52
 13772 2bbf 0C010000 		.4byte	.LFE52-.LFB52
 13773 2bc3 01       		.uleb128 0x1
 13774 2bc4 9C       		.byte	0x9c
 13775 2bc5 6E2D0000 		.4byte	0x2d6e
 13776 2bc9 20       		.uleb128 0x20
 13777 2bca 68000000 		.4byte	.LASF105
 13778 2bce 01       		.byte	0x1
 13779 2bcf 9B13     		.2byte	0x139b
 13780 2bd1 710A0000 		.4byte	0xa71
 13781 2bd5 39300000 		.4byte	.LLST225
 13782 2bd9 1A       		.uleb128 0x1a
 13783 2bda 72657300 		.ascii	"res\000"
 13784 2bde 01       		.byte	0x1
 13785 2bdf 9E13     		.2byte	0x139e
 13786 2be1 40040000 		.4byte	0x440
 13787 2be5 72300000 		.4byte	.LLST226
 13788 2be9 1F       		.uleb128 0x1f
 13789 2bea 646A00   		.ascii	"dj\000"
 13790 2bed 01       		.byte	0x1
 13791 2bee 9F13     		.2byte	0x139f
 13792 2bf0 4D030000 		.4byte	0x34d
 13793 2bf4 02       		.uleb128 0x2
 13794 2bf5 91       		.byte	0x91
 13795 2bf6 44       		.sleb128 -60
 13796 2bf7 25       		.uleb128 0x25
 13797 2bf8 E7000000 		.4byte	.LASF173
 13798 2bfc 01       		.byte	0x1
 13799 2bfd A013     		.2byte	0x13a0
 13800 2bff 5B020000 		.4byte	0x25b
 13801 2c03 03       		.uleb128 0x3
 13802 2c04 91       		.byte	0x91
 13803 2c05 B47F     		.sleb128 -76
 13804 2c07 1F       		.uleb128 0x1f
 13805 2c08 667300   		.ascii	"fs\000"
 13806 2c0b 01       		.byte	0x1
 13807 2c0c A113     		.2byte	0x13a1
 13808 2c0e 55020000 		.4byte	0x255
 13809 2c12 03       		.uleb128 0x3
 13810 2c13 91       		.byte	0x91
 13811 2c14 B07F     		.sleb128 -80
 13812 2c16 1A       		.uleb128 0x1a
 13813 2c17 64636C00 		.ascii	"dcl\000"
 13814 2c1b 01       		.byte	0x1
 13815 2c1c A213     		.2byte	0x13a2
 13816 2c1e B8000000 		.4byte	0xb8
 13817 2c22 DE300000 		.4byte	.LLST227
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 384


 13818 2c26 1A       		.uleb128 0x1a
 13819 2c27 70636C00 		.ascii	"pcl\000"
 13820 2c2b 01       		.byte	0x1
 13821 2c2c A213     		.2byte	0x13a2
 13822 2c2e B8000000 		.4byte	0xb8
 13823 2c32 FC300000 		.4byte	.LLST228
 13824 2c36 1A       		.uleb128 0x1a
 13825 2c37 746D00   		.ascii	"tm\000"
 13826 2c3a 01       		.byte	0x1
 13827 2c3b A213     		.2byte	0x13a2
 13828 2c3d B8000000 		.4byte	0xb8
 13829 2c41 10310000 		.4byte	.LLST229
 13830 2c45 21       		.uleb128 0x21
 13831 2c46 10000000 		.4byte	.LVL981
 13832 2c4a 000E0000 		.4byte	0xe00
 13833 2c4e 662C0000 		.4byte	0x2c66
 13834 2c52 22       		.uleb128 0x22
 13835 2c53 01       		.uleb128 0x1
 13836 2c54 50       		.byte	0x50
 13837 2c55 03       		.uleb128 0x3
 13838 2c56 91       		.byte	0x91
 13839 2c57 AC7F     		.sleb128 -84
 13840 2c59 22       		.uleb128 0x22
 13841 2c5a 01       		.uleb128 0x1
 13842 2c5b 51       		.byte	0x51
 13843 2c5c 03       		.uleb128 0x3
 13844 2c5d 91       		.byte	0x91
 13845 2c5e B07F     		.sleb128 -80
 13846 2c60 22       		.uleb128 0x22
 13847 2c61 01       		.uleb128 0x1
 13848 2c62 52       		.byte	0x52
 13849 2c63 01       		.uleb128 0x1
 13850 2c64 32       		.byte	0x32
 13851 2c65 00       		.byte	0
 13852 2c66 21       		.uleb128 0x21
 13853 2c67 22000000 		.4byte	.LVL983
 13854 2c6b A6170000 		.4byte	0x17a6
 13855 2c6f 7A2C0000 		.4byte	0x2c7a
 13856 2c73 22       		.uleb128 0x22
 13857 2c74 01       		.uleb128 0x1
 13858 2c75 50       		.byte	0x50
 13859 2c76 02       		.uleb128 0x2
 13860 2c77 91       		.byte	0x91
 13861 2c78 44       		.sleb128 -60
 13862 2c79 00       		.byte	0
 13863 2c7a 21       		.uleb128 0x21
 13864 2c7b 4A000000 		.4byte	.LVL987
 13865 2c7f 39130000 		.4byte	0x1339
 13866 2c83 942C0000 		.4byte	0x2c94
 13867 2c87 22       		.uleb128 0x22
 13868 2c88 01       		.uleb128 0x1
 13869 2c89 50       		.byte	0x50
 13870 2c8a 03       		.uleb128 0x3
 13871 2c8b 91       		.byte	0x91
 13872 2c8c B47F     		.sleb128 -76
 13873 2c8e 22       		.uleb128 0x22
 13874 2c8f 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 385


 13875 2c90 51       		.byte	0x51
 13876 2c91 01       		.uleb128 0x1
 13877 2c92 30       		.byte	0x30
 13878 2c93 00       		.byte	0
 13879 2c94 21       		.uleb128 0x21
 13880 2c95 68000000 		.4byte	.LVL992
 13881 2c99 5E150000 		.4byte	0x155e
 13882 2c9d A82C0000 		.4byte	0x2ca8
 13883 2ca1 22       		.uleb128 0x22
 13884 2ca2 01       		.uleb128 0x1
 13885 2ca3 51       		.byte	0x51
 13886 2ca4 02       		.uleb128 0x2
 13887 2ca5 75       		.byte	0x75
 13888 2ca6 00       		.sleb128 0
 13889 2ca7 00       		.byte	0
 13890 2ca8 21       		.uleb128 0x21
 13891 2ca9 78000000 		.4byte	.LVL994
 13892 2cad 67060000 		.4byte	0x667
 13893 2cb1 C12C0000 		.4byte	0x2cc1
 13894 2cb5 22       		.uleb128 0x22
 13895 2cb6 01       		.uleb128 0x1
 13896 2cb7 51       		.byte	0x51
 13897 2cb8 02       		.uleb128 0x2
 13898 2cb9 08       		.byte	0x8
 13899 2cba 20       		.byte	0x20
 13900 2cbb 22       		.uleb128 0x22
 13901 2cbc 01       		.uleb128 0x1
 13902 2cbd 52       		.byte	0x52
 13903 2cbe 01       		.uleb128 0x1
 13904 2cbf 3B       		.byte	0x3b
 13905 2cc0 00       		.byte	0
 13906 2cc1 21       		.uleb128 0x21
 13907 2cc2 8E000000 		.4byte	.LVL995
 13908 2cc6 C6050000 		.4byte	0x5c6
 13909 2cca D82C0000 		.4byte	0x2cd8
 13910 2cce 22       		.uleb128 0x22
 13911 2ccf 01       		.uleb128 0x1
 13912 2cd0 51       		.byte	0x51
 13913 2cd1 05       		.uleb128 0x5
 13914 2cd2 0C       		.byte	0xc
 13915 2cd3 0000214E 		.4byte	0x4e210000
 13916 2cd7 00       		.byte	0
 13917 2cd8 21       		.uleb128 0x21
 13918 2cd9 9A000000 		.4byte	.LVL996
 13919 2cdd 6B080000 		.4byte	0x86b
 13920 2ce1 EC2C0000 		.4byte	0x2cec
 13921 2ce5 22       		.uleb128 0x22
 13922 2ce6 01       		.uleb128 0x1
 13923 2ce7 52       		.byte	0x52
 13924 2ce8 02       		.uleb128 0x2
 13925 2ce9 75       		.byte	0x75
 13926 2cea 00       		.sleb128 0
 13927 2ceb 00       		.byte	0
 13928 2cec 21       		.uleb128 0x21
 13929 2ced A8000000 		.4byte	.LVL997
 13930 2cf1 FD050000 		.4byte	0x5fd
 13931 2cf5 002D0000 		.4byte	0x2d00
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 386


 13932 2cf9 22       		.uleb128 0x22
 13933 2cfa 01       		.uleb128 0x1
 13934 2cfb 52       		.byte	0x52
 13935 2cfc 02       		.uleb128 0x2
 13936 2cfd 08       		.byte	0x8
 13937 2cfe 20       		.byte	0x20
 13938 2cff 00       		.byte	0
 13939 2d00 24       		.uleb128 0x24
 13940 2d01 B8000000 		.4byte	.LVL999
 13941 2d05 6B080000 		.4byte	0x86b
 13942 2d09 21       		.uleb128 0x21
 13943 2d0a C4000000 		.4byte	.LVL1000
 13944 2d0e 0A190000 		.4byte	0x190a
 13945 2d12 1D2D0000 		.4byte	0x2d1d
 13946 2d16 22       		.uleb128 0x22
 13947 2d17 01       		.uleb128 0x1
 13948 2d18 50       		.byte	0x50
 13949 2d19 02       		.uleb128 0x2
 13950 2d1a 91       		.byte	0x91
 13951 2d1b 44       		.sleb128 -60
 13952 2d1c 00       		.byte	0
 13953 2d1d 21       		.uleb128 0x21
 13954 2d1e D2000000 		.4byte	.LVL1002
 13955 2d22 C6050000 		.4byte	0x5c6
 13956 2d26 342D0000 		.4byte	0x2d34
 13957 2d2a 22       		.uleb128 0x22
 13958 2d2b 01       		.uleb128 0x1
 13959 2d2c 51       		.byte	0x51
 13960 2d2d 05       		.uleb128 0x5
 13961 2d2e 0C       		.byte	0xc
 13962 2d2f 0000214E 		.4byte	0x4e210000
 13963 2d33 00       		.byte	0
 13964 2d34 21       		.uleb128 0x21
 13965 2d35 DC000000 		.4byte	.LVL1003
 13966 2d39 6B080000 		.4byte	0x86b
 13967 2d3d 482D0000 		.4byte	0x2d48
 13968 2d41 22       		.uleb128 0x22
 13969 2d42 01       		.uleb128 0x1
 13970 2d43 52       		.byte	0x52
 13971 2d44 02       		.uleb128 0x2
 13972 2d45 75       		.byte	0x75
 13973 2d46 00       		.sleb128 0
 13974 2d47 00       		.byte	0
 13975 2d48 24       		.uleb128 0x24
 13976 2d49 F0000000 		.4byte	.LVL1004
 13977 2d4d 4A1A0000 		.4byte	0x1a4a
 13978 2d51 23       		.uleb128 0x23
 13979 2d52 FE000000 		.4byte	.LVL1006
 13980 2d56 39140000 		.4byte	0x1439
 13981 2d5a 22       		.uleb128 0x22
 13982 2d5b 01       		.uleb128 0x1
 13983 2d5c 50       		.byte	0x50
 13984 2d5d 03       		.uleb128 0x3
 13985 2d5e 91       		.byte	0x91
 13986 2d5f B47F     		.sleb128 -76
 13987 2d61 22       		.uleb128 0x22
 13988 2d62 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 387


 13989 2d63 51       		.byte	0x51
 13990 2d64 02       		.uleb128 0x2
 13991 2d65 75       		.byte	0x75
 13992 2d66 00       		.sleb128 0
 13993 2d67 22       		.uleb128 0x22
 13994 2d68 01       		.uleb128 0x1
 13995 2d69 52       		.byte	0x52
 13996 2d6a 01       		.uleb128 0x1
 13997 2d6b 30       		.byte	0x30
 13998 2d6c 00       		.byte	0
 13999 2d6d 00       		.byte	0
 14000 2d6e 27       		.uleb128 0x27
 14001 2d6f C1020000 		.4byte	.LASF174
 14002 2d73 01       		.byte	0x1
 14003 2d74 EE13     		.2byte	0x13ee
 14004 2d76 40040000 		.4byte	0x440
 14005 2d7a 00000000 		.4byte	.LFB53
 14006 2d7e 1C010000 		.4byte	.LFE53-.LFB53
 14007 2d82 01       		.uleb128 0x1
 14008 2d83 9C       		.byte	0x9c
 14009 2d84 4F2F0000 		.4byte	0x2f4f
 14010 2d88 20       		.uleb128 0x20
 14011 2d89 CB060000 		.4byte	.LASF175
 14012 2d8d 01       		.byte	0x1
 14013 2d8e EF13     		.2byte	0x13ef
 14014 2d90 710A0000 		.4byte	0xa71
 14015 2d94 28310000 		.4byte	.LLST230
 14016 2d98 20       		.uleb128 0x20
 14017 2d99 E1020000 		.4byte	.LASF176
 14018 2d9d 01       		.byte	0x1
 14019 2d9e F013     		.2byte	0x13f0
 14020 2da0 710A0000 		.4byte	0xa71
 14021 2da4 61310000 		.4byte	.LLST231
 14022 2da8 1A       		.uleb128 0x1a
 14023 2da9 72657300 		.ascii	"res\000"
 14024 2dad 01       		.byte	0x1
 14025 2dae F313     		.2byte	0x13f3
 14026 2db0 40040000 		.4byte	0x440
 14027 2db4 81310000 		.4byte	.LLST232
 14028 2db8 1F       		.uleb128 0x1f
 14029 2db9 646A6F00 		.ascii	"djo\000"
 14030 2dbd 01       		.byte	0x1
 14031 2dbe F413     		.2byte	0x13f4
 14032 2dc0 4D030000 		.4byte	0x34d
 14033 2dc4 02       		.uleb128 0x2
 14034 2dc5 91       		.byte	0x91
 14035 2dc6 44       		.sleb128 -60
 14036 2dc7 1F       		.uleb128 0x1f
 14037 2dc8 646A6E00 		.ascii	"djn\000"
 14038 2dcc 01       		.byte	0x1
 14039 2dcd F413     		.2byte	0x13f4
 14040 2dcf 4D030000 		.4byte	0x34d
 14041 2dd3 03       		.uleb128 0x3
 14042 2dd4 91       		.byte	0x91
 14043 2dd5 987F     		.sleb128 -104
 14044 2dd7 1F       		.uleb128 0x1f
 14045 2dd8 667300   		.ascii	"fs\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 388


 14046 2ddb 01       		.byte	0x1
 14047 2ddc F513     		.2byte	0x13f5
 14048 2dde 55020000 		.4byte	0x255
 14049 2de2 03       		.uleb128 0x3
 14050 2de3 91       		.byte	0x91
 14051 2de4 947F     		.sleb128 -108
 14052 2de6 1F       		.uleb128 0x1f
 14053 2de7 62756600 		.ascii	"buf\000"
 14054 2deb 01       		.byte	0x1
 14055 2dec F613     		.2byte	0x13f6
 14056 2dee 4F2F0000 		.4byte	0x2f4f
 14057 2df2 03       		.uleb128 0x3
 14058 2df3 91       		.byte	0x91
 14059 2df4 F47E     		.sleb128 -140
 14060 2df6 1A       		.uleb128 0x1a
 14061 2df7 64697200 		.ascii	"dir\000"
 14062 2dfb 01       		.byte	0x1
 14063 2dfc F613     		.2byte	0x13f6
 14064 2dfe DC020000 		.4byte	0x2dc
 14065 2e02 F7310000 		.4byte	.LLST233
 14066 2e06 26       		.uleb128 0x26
 14067 2e07 A6000000 		.4byte	.LASF49
 14068 2e0b 01       		.byte	0x1
 14069 2e0c F713     		.2byte	0x13f7
 14070 2e0e EB000000 		.4byte	0xeb
 14071 2e12 20320000 		.4byte	.LLST234
 14072 2e16 21       		.uleb128 0x21
 14073 2e17 10000000 		.4byte	.LVL1012
 14074 2e1b 7C0A0000 		.4byte	0xa7c
 14075 2e1f 2B2E0000 		.4byte	0x2e2b
 14076 2e23 22       		.uleb128 0x22
 14077 2e24 01       		.uleb128 0x1
 14078 2e25 50       		.byte	0x50
 14079 2e26 03       		.uleb128 0x3
 14080 2e27 91       		.byte	0x91
 14081 2e28 E87E     		.sleb128 -152
 14082 2e2a 00       		.byte	0
 14083 2e2b 21       		.uleb128 0x21
 14084 2e2c 1A000000 		.4byte	.LVL1014
 14085 2e30 000E0000 		.4byte	0xe00
 14086 2e34 4C2E0000 		.4byte	0x2e4c
 14087 2e38 22       		.uleb128 0x22
 14088 2e39 01       		.uleb128 0x1
 14089 2e3a 50       		.byte	0x50
 14090 2e3b 03       		.uleb128 0x3
 14091 2e3c 91       		.byte	0x91
 14092 2e3d EC7E     		.sleb128 -148
 14093 2e3f 22       		.uleb128 0x22
 14094 2e40 01       		.uleb128 0x1
 14095 2e41 51       		.byte	0x51
 14096 2e42 03       		.uleb128 0x3
 14097 2e43 91       		.byte	0x91
 14098 2e44 947F     		.sleb128 -108
 14099 2e46 22       		.uleb128 0x22
 14100 2e47 01       		.uleb128 0x1
 14101 2e48 52       		.byte	0x52
 14102 2e49 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 389


 14103 2e4a 32       		.byte	0x32
 14104 2e4b 00       		.byte	0
 14105 2e4c 21       		.uleb128 0x21
 14106 2e4d 2C000000 		.4byte	.LVL1016
 14107 2e51 A6170000 		.4byte	0x17a6
 14108 2e55 602E0000 		.4byte	0x2e60
 14109 2e59 22       		.uleb128 0x22
 14110 2e5a 01       		.uleb128 0x1
 14111 2e5b 50       		.byte	0x50
 14112 2e5c 02       		.uleb128 0x2
 14113 2e5d 91       		.byte	0x91
 14114 2e5e 44       		.sleb128 -60
 14115 2e5f 00       		.byte	0
 14116 2e60 21       		.uleb128 0x21
 14117 2e61 4A000000 		.4byte	.LVL1018
 14118 2e65 FD050000 		.4byte	0x5fd
 14119 2e69 7B2E0000 		.4byte	0x2e7b
 14120 2e6d 22       		.uleb128 0x22
 14121 2e6e 01       		.uleb128 0x1
 14122 2e6f 50       		.byte	0x50
 14123 2e70 03       		.uleb128 0x3
 14124 2e71 91       		.byte	0x91
 14125 2e72 F47E     		.sleb128 -140
 14126 2e74 22       		.uleb128 0x22
 14127 2e75 01       		.uleb128 0x1
 14128 2e76 52       		.byte	0x52
 14129 2e77 02       		.uleb128 0x2
 14130 2e78 08       		.byte	0x8
 14131 2e79 20       		.byte	0x20
 14132 2e7a 00       		.byte	0
 14133 2e7b 21       		.uleb128 0x21
 14134 2e7c 54000000 		.4byte	.LVL1019
 14135 2e80 FD050000 		.4byte	0x5fd
 14136 2e84 9C2E0000 		.4byte	0x2e9c
 14137 2e88 22       		.uleb128 0x22
 14138 2e89 01       		.uleb128 0x1
 14139 2e8a 50       		.byte	0x50
 14140 2e8b 03       		.uleb128 0x3
 14141 2e8c 91       		.byte	0x91
 14142 2e8d 987F     		.sleb128 -104
 14143 2e8f 22       		.uleb128 0x22
 14144 2e90 01       		.uleb128 0x1
 14145 2e91 51       		.byte	0x51
 14146 2e92 02       		.uleb128 0x2
 14147 2e93 91       		.byte	0x91
 14148 2e94 44       		.sleb128 -60
 14149 2e95 22       		.uleb128 0x22
 14150 2e96 01       		.uleb128 0x1
 14151 2e97 52       		.byte	0x52
 14152 2e98 02       		.uleb128 0x2
 14153 2e99 08       		.byte	0x8
 14154 2e9a 2C       		.byte	0x2c
 14155 2e9b 00       		.byte	0
 14156 2e9c 21       		.uleb128 0x21
 14157 2e9d 5C000000 		.4byte	.LVL1020
 14158 2ea1 A6170000 		.4byte	0x17a6
 14159 2ea5 B12E0000 		.4byte	0x2eb1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 390


 14160 2ea9 22       		.uleb128 0x22
 14161 2eaa 01       		.uleb128 0x1
 14162 2eab 50       		.byte	0x50
 14163 2eac 03       		.uleb128 0x3
 14164 2ead 91       		.byte	0x91
 14165 2eae 987F     		.sleb128 -104
 14166 2eb0 00       		.byte	0
 14167 2eb1 21       		.uleb128 0x21
 14168 2eb2 84000000 		.4byte	.LVL1022
 14169 2eb6 0A190000 		.4byte	0x190a
 14170 2eba C62E0000 		.4byte	0x2ec6
 14171 2ebe 22       		.uleb128 0x22
 14172 2ebf 01       		.uleb128 0x1
 14173 2ec0 50       		.byte	0x50
 14174 2ec1 03       		.uleb128 0x3
 14175 2ec2 91       		.byte	0x91
 14176 2ec3 987F     		.sleb128 -104
 14177 2ec5 00       		.byte	0
 14178 2ec6 21       		.uleb128 0x21
 14179 2ec7 9A000000 		.4byte	.LVL1025
 14180 2ecb FD050000 		.4byte	0x5fd
 14181 2ecf E62E0000 		.4byte	0x2ee6
 14182 2ed3 22       		.uleb128 0x22
 14183 2ed4 01       		.uleb128 0x1
 14184 2ed5 50       		.byte	0x50
 14185 2ed6 02       		.uleb128 0x2
 14186 2ed7 75       		.byte	0x75
 14187 2ed8 0D       		.sleb128 13
 14188 2ed9 22       		.uleb128 0x22
 14189 2eda 01       		.uleb128 0x1
 14190 2edb 51       		.byte	0x51
 14191 2edc 03       		.uleb128 0x3
 14192 2edd 91       		.byte	0x91
 14193 2ede 817F     		.sleb128 -127
 14194 2ee0 22       		.uleb128 0x22
 14195 2ee1 01       		.uleb128 0x1
 14196 2ee2 52       		.byte	0x52
 14197 2ee3 01       		.uleb128 0x1
 14198 2ee4 43       		.byte	0x43
 14199 2ee5 00       		.byte	0
 14200 2ee6 21       		.uleb128 0x21
 14201 2ee7 CC000000 		.4byte	.LVL1026
 14202 2eeb FE070000 		.4byte	0x7fe
 14203 2eef 002F0000 		.4byte	0x2f00
 14204 2ef3 22       		.uleb128 0x22
 14205 2ef4 01       		.uleb128 0x1
 14206 2ef5 50       		.byte	0x50
 14207 2ef6 02       		.uleb128 0x2
 14208 2ef7 74       		.byte	0x74
 14209 2ef8 00       		.sleb128 0
 14210 2ef9 22       		.uleb128 0x22
 14211 2efa 01       		.uleb128 0x1
 14212 2efb 51       		.byte	0x51
 14213 2efc 02       		.uleb128 0x2
 14214 2efd 75       		.byte	0x75
 14215 2efe 00       		.sleb128 0
 14216 2eff 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 391


 14217 2f00 21       		.uleb128 0x21
 14218 2f01 D4000000 		.4byte	.LVL1027
 14219 2f05 C4070000 		.4byte	0x7c4
 14220 2f09 142F0000 		.4byte	0x2f14
 14221 2f0d 22       		.uleb128 0x22
 14222 2f0e 01       		.uleb128 0x1
 14223 2f0f 50       		.byte	0x50
 14224 2f10 02       		.uleb128 0x2
 14225 2f11 74       		.byte	0x74
 14226 2f12 00       		.sleb128 0
 14227 2f13 00       		.byte	0
 14228 2f14 21       		.uleb128 0x21
 14229 2f15 DE000000 		.4byte	.LVL1029
 14230 2f19 100C0000 		.4byte	0xc10
 14231 2f1d 282F0000 		.4byte	0x2f28
 14232 2f21 22       		.uleb128 0x22
 14233 2f22 01       		.uleb128 0x1
 14234 2f23 50       		.byte	0x50
 14235 2f24 02       		.uleb128 0x2
 14236 2f25 74       		.byte	0x74
 14237 2f26 00       		.sleb128 0
 14238 2f27 00       		.byte	0
 14239 2f28 24       		.uleb128 0x24
 14240 2f29 F8000000 		.4byte	.LVL1032
 14241 2f2d 6B080000 		.4byte	0x86b
 14242 2f31 21       		.uleb128 0x21
 14243 2f32 0A010000 		.4byte	.LVL1035
 14244 2f36 07150000 		.4byte	0x1507
 14245 2f3a 452F0000 		.4byte	0x2f45
 14246 2f3e 22       		.uleb128 0x22
 14247 2f3f 01       		.uleb128 0x1
 14248 2f40 50       		.byte	0x50
 14249 2f41 02       		.uleb128 0x2
 14250 2f42 91       		.byte	0x91
 14251 2f43 44       		.sleb128 -60
 14252 2f44 00       		.byte	0
 14253 2f45 24       		.uleb128 0x24
 14254 2f46 14010000 		.4byte	.LVL1037
 14255 2f4a 4A1A0000 		.4byte	0x1a4a
 14256 2f4e 00       		.byte	0
 14257 2f4f 08       		.uleb128 0x8
 14258 2f50 A2000000 		.4byte	0xa2
 14259 2f54 5F2F0000 		.4byte	0x2f5f
 14260 2f58 0D       		.uleb128 0xd
 14261 2f59 F4010000 		.4byte	0x1f4
 14262 2f5d 1F       		.byte	0x1f
 14263 2f5e 00       		.byte	0
 14264 2f5f 27       		.uleb128 0x27
 14265 2f60 92030000 		.4byte	.LASF177
 14266 2f64 01       		.byte	0x1
 14267 2f65 BA14     		.2byte	0x14ba
 14268 2f67 40040000 		.4byte	0x440
 14269 2f6b 00000000 		.4byte	.LFB54
 14270 2f6f 9E000000 		.4byte	.LFE54-.LFB54
 14271 2f73 01       		.uleb128 0x1
 14272 2f74 9C       		.byte	0x9c
 14273 2f75 6C300000 		.4byte	0x306c
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 392


 14274 2f79 20       		.uleb128 0x20
 14275 2f7a 68000000 		.4byte	.LASF105
 14276 2f7e 01       		.byte	0x1
 14277 2f7f BB14     		.2byte	0x14bb
 14278 2f81 710A0000 		.4byte	0xa71
 14279 2f85 49320000 		.4byte	.LLST235
 14280 2f89 20       		.uleb128 0x20
 14281 2f8a 06030000 		.4byte	.LASF178
 14282 2f8e 01       		.byte	0x1
 14283 2f8f BC14     		.2byte	0x14bc
 14284 2f91 6C300000 		.4byte	0x306c
 14285 2f95 75320000 		.4byte	.LLST236
 14286 2f99 19       		.uleb128 0x19
 14287 2f9a 76736E00 		.ascii	"vsn\000"
 14288 2f9e 01       		.byte	0x1
 14289 2f9f BD14     		.2byte	0x14bd
 14290 2fa1 B0290000 		.4byte	0x29b0
 14291 2fa5 93320000 		.4byte	.LLST237
 14292 2fa9 1A       		.uleb128 0x1a
 14293 2faa 72657300 		.ascii	"res\000"
 14294 2fae 01       		.byte	0x1
 14295 2faf C014     		.2byte	0x14c0
 14296 2fb1 40040000 		.4byte	0x440
 14297 2fb5 B1320000 		.4byte	.LLST238
 14298 2fb9 1F       		.uleb128 0x1f
 14299 2fba 646A00   		.ascii	"dj\000"
 14300 2fbd 01       		.byte	0x1
 14301 2fbe C114     		.2byte	0x14c1
 14302 2fc0 4D030000 		.4byte	0x34d
 14303 2fc4 03       		.uleb128 0x3
 14304 2fc5 91       		.byte	0x91
 14305 2fc6 BC7F     		.sleb128 -68
 14306 2fc8 1F       		.uleb128 0x1f
 14307 2fc9 667300   		.ascii	"fs\000"
 14308 2fcc 01       		.byte	0x1
 14309 2fcd C214     		.2byte	0x14c2
 14310 2fcf 55020000 		.4byte	0x255
 14311 2fd3 03       		.uleb128 0x3
 14312 2fd4 91       		.byte	0x91
 14313 2fd5 B87F     		.sleb128 -72
 14314 2fd7 1A       		.uleb128 0x1a
 14315 2fd8 736900   		.ascii	"si\000"
 14316 2fdb 01       		.byte	0x1
 14317 2fdc C314     		.2byte	0x14c3
 14318 2fde 97000000 		.4byte	0x97
 14319 2fe2 33330000 		.4byte	.LLST239
 14320 2fe6 1A       		.uleb128 0x1a
 14321 2fe7 646900   		.ascii	"di\000"
 14322 2fea 01       		.byte	0x1
 14323 2feb C314     		.2byte	0x14c3
 14324 2fed 97000000 		.4byte	0x97
 14325 2ff1 5E330000 		.4byte	.LLST240
 14326 2ff5 1A       		.uleb128 0x1a
 14327 2ff6 776300   		.ascii	"wc\000"
 14328 2ff9 01       		.byte	0x1
 14329 2ffa C414     		.2byte	0x14c4
 14330 2ffc C3000000 		.4byte	0xc3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 393


 14331 3000 AC330000 		.4byte	.LLST241
 14332 3004 21       		.uleb128 0x21
 14333 3005 14000000 		.4byte	.LVL1043
 14334 3009 000E0000 		.4byte	0xe00
 14335 300d 25300000 		.4byte	0x3025
 14336 3011 22       		.uleb128 0x22
 14337 3012 01       		.uleb128 0x1
 14338 3013 50       		.byte	0x50
 14339 3014 03       		.uleb128 0x3
 14340 3015 91       		.byte	0x91
 14341 3016 B47F     		.sleb128 -76
 14342 3018 22       		.uleb128 0x22
 14343 3019 01       		.uleb128 0x1
 14344 301a 51       		.byte	0x51
 14345 301b 03       		.uleb128 0x3
 14346 301c 91       		.byte	0x91
 14347 301d B87F     		.sleb128 -72
 14348 301f 22       		.uleb128 0x22
 14349 3020 01       		.uleb128 0x1
 14350 3021 52       		.byte	0x52
 14351 3022 01       		.uleb128 0x1
 14352 3023 30       		.byte	0x30
 14353 3024 00       		.byte	0
 14354 3025 21       		.uleb128 0x21
 14355 3026 28000000 		.4byte	.LVL1045
 14356 302a A2120000 		.4byte	0x12a2
 14357 302e 3F300000 		.4byte	0x303f
 14358 3032 22       		.uleb128 0x22
 14359 3033 01       		.uleb128 0x1
 14360 3034 50       		.byte	0x50
 14361 3035 03       		.uleb128 0x3
 14362 3036 91       		.byte	0x91
 14363 3037 BC7F     		.sleb128 -68
 14364 3039 22       		.uleb128 0x22
 14365 303a 01       		.uleb128 0x1
 14366 303b 51       		.byte	0x51
 14367 303c 01       		.uleb128 0x1
 14368 303d 30       		.byte	0x30
 14369 303e 00       		.byte	0
 14370 303f 21       		.uleb128 0x21
 14371 3040 34000000 		.4byte	.LVL1047
 14372 3044 AC190000 		.4byte	0x19ac
 14373 3048 59300000 		.4byte	0x3059
 14374 304c 22       		.uleb128 0x22
 14375 304d 01       		.uleb128 0x1
 14376 304e 50       		.byte	0x50
 14377 304f 03       		.uleb128 0x3
 14378 3050 91       		.byte	0x91
 14379 3051 BC7F     		.sleb128 -68
 14380 3053 22       		.uleb128 0x22
 14381 3054 01       		.uleb128 0x1
 14382 3055 51       		.byte	0x51
 14383 3056 01       		.uleb128 0x1
 14384 3057 31       		.byte	0x31
 14385 3058 00       		.byte	0
 14386 3059 24       		.uleb128 0x24
 14387 305a 74000000 		.4byte	.LVL1060
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 394


 14388 305e 100C0000 		.4byte	0xc10
 14389 3062 24       		.uleb128 0x24
 14390 3063 96000000 		.4byte	.LVL1067
 14391 3067 55050000 		.4byte	0x555
 14392 306b 00       		.byte	0
 14393 306c 0B       		.uleb128 0xb
 14394 306d 04       		.byte	0x4
 14395 306e CE000000 		.4byte	0xce
 14396 3072 27       		.uleb128 0x27
 14397 3073 E4060000 		.4byte	.LASF179
 14398 3077 01       		.byte	0x1
 14399 3078 1915     		.2byte	0x1519
 14400 307a 40040000 		.4byte	0x440
 14401 307e 00000000 		.4byte	.LFB55
 14402 3082 54010000 		.4byte	.LFE55-.LFB55
 14403 3086 01       		.uleb128 0x1
 14404 3087 9C       		.byte	0x9c
 14405 3088 33320000 		.4byte	0x3233
 14406 308c 20       		.uleb128 0x20
 14407 308d 06030000 		.4byte	.LASF178
 14408 3091 01       		.byte	0x1
 14409 3092 1A15     		.2byte	0x151a
 14410 3094 710A0000 		.4byte	0xa71
 14411 3098 C4330000 		.4byte	.LLST242
 14412 309c 1A       		.uleb128 0x1a
 14413 309d 72657300 		.ascii	"res\000"
 14414 30a1 01       		.byte	0x1
 14415 30a2 1D15     		.2byte	0x151d
 14416 30a4 40040000 		.4byte	0x440
 14417 30a8 FD330000 		.4byte	.LLST243
 14418 30ac 1F       		.uleb128 0x1f
 14419 30ad 646A00   		.ascii	"dj\000"
 14420 30b0 01       		.byte	0x1
 14421 30b1 1E15     		.2byte	0x151e
 14422 30b3 4D030000 		.4byte	0x34d
 14423 30b7 03       		.uleb128 0x3
 14424 30b8 91       		.byte	0x91
 14425 30b9 BC7F     		.sleb128 -68
 14426 30bb 1F       		.uleb128 0x1f
 14427 30bc 667300   		.ascii	"fs\000"
 14428 30bf 01       		.byte	0x1
 14429 30c0 1F15     		.2byte	0x151f
 14430 30c2 55020000 		.4byte	0x255
 14431 30c6 03       		.uleb128 0x3
 14432 30c7 91       		.byte	0x91
 14433 30c8 B87F     		.sleb128 -72
 14434 30ca 25       		.uleb128 0x25
 14435 30cb A0000000 		.4byte	.LASF180
 14436 30cf 01       		.byte	0x1
 14437 30d0 2015     		.2byte	0x1520
 14438 30d2 33320000 		.4byte	0x3233
 14439 30d6 03       		.uleb128 0x3
 14440 30d7 91       		.byte	0x91
 14441 30d8 A07F     		.sleb128 -96
 14442 30da 1A       		.uleb128 0x1a
 14443 30db 646900   		.ascii	"di\000"
 14444 30de 01       		.byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 395


 14445 30df 2115     		.2byte	0x1521
 14446 30e1 97000000 		.4byte	0x97
 14447 30e5 75340000 		.4byte	.LLST244
 14448 30e9 1A       		.uleb128 0x1a
 14449 30ea 776300   		.ascii	"wc\000"
 14450 30ed 01       		.byte	0x1
 14451 30ee 2215     		.2byte	0x1522
 14452 30f0 C3000000 		.4byte	0xc3
 14453 30f4 B7340000 		.4byte	.LLST245
 14454 30f8 25       		.uleb128 0x25
 14455 30f9 5B020000 		.4byte	.LASF181
 14456 30fd 01       		.byte	0x1
 14457 30fe 2315     		.2byte	0x1523
 14458 3100 53320000 		.4byte	0x3253
 14459 3104 05       		.uleb128 0x5
 14460 3105 03       		.byte	0x3
 14461 3106 00000000 		.4byte	badchr.4929
 14462 310a 21       		.uleb128 0x21
 14463 310b 12000000 		.4byte	.LVL1071
 14464 310f 000E0000 		.4byte	0xe00
 14465 3113 2B310000 		.4byte	0x312b
 14466 3117 22       		.uleb128 0x22
 14467 3118 01       		.uleb128 0x1
 14468 3119 50       		.byte	0x50
 14469 311a 03       		.uleb128 0x3
 14470 311b 91       		.byte	0x91
 14471 311c 9C7F     		.sleb128 -100
 14472 311e 22       		.uleb128 0x22
 14473 311f 01       		.uleb128 0x1
 14474 3120 51       		.byte	0x51
 14475 3121 03       		.uleb128 0x3
 14476 3122 91       		.byte	0x91
 14477 3123 B87F     		.sleb128 -72
 14478 3125 22       		.uleb128 0x22
 14479 3126 01       		.uleb128 0x1
 14480 3127 52       		.byte	0x52
 14481 3128 01       		.uleb128 0x1
 14482 3129 32       		.byte	0x32
 14483 312a 00       		.byte	0
 14484 312b 21       		.uleb128 0x21
 14485 312c 22000000 		.4byte	.LVL1073
 14486 3130 67060000 		.4byte	0x667
 14487 3134 4B310000 		.4byte	0x314b
 14488 3138 22       		.uleb128 0x22
 14489 3139 01       		.uleb128 0x1
 14490 313a 50       		.byte	0x50
 14491 313b 03       		.uleb128 0x3
 14492 313c 91       		.byte	0x91
 14493 313d A07F     		.sleb128 -96
 14494 313f 22       		.uleb128 0x22
 14495 3140 01       		.uleb128 0x1
 14496 3141 51       		.byte	0x51
 14497 3142 02       		.uleb128 0x2
 14498 3143 08       		.byte	0x8
 14499 3144 20       		.byte	0x20
 14500 3145 22       		.uleb128 0x22
 14501 3146 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 396


 14502 3147 52       		.byte	0x52
 14503 3148 01       		.uleb128 0x1
 14504 3149 3B       		.byte	0x3b
 14505 314a 00       		.byte	0
 14506 314b 21       		.uleb128 0x21
 14507 314c 38000000 		.4byte	.LVL1076
 14508 3150 72070000 		.4byte	0x772
 14509 3154 5F310000 		.4byte	0x315f
 14510 3158 22       		.uleb128 0x22
 14511 3159 01       		.uleb128 0x1
 14512 315a 50       		.byte	0x50
 14513 315b 02       		.uleb128 0x2
 14514 315c 77       		.byte	0x77
 14515 315d 00       		.sleb128 0
 14516 315e 00       		.byte	0
 14517 315f 24       		.uleb128 0x24
 14518 3160 40000000 		.4byte	.LVL1077
 14519 3164 9B070000 		.4byte	0x79b
 14520 3168 21       		.uleb128 0x21
 14521 3169 6A000000 		.4byte	.LVL1083
 14522 316d 2E070000 		.4byte	0x72e
 14523 3171 85310000 		.4byte	0x3185
 14524 3175 22       		.uleb128 0x22
 14525 3176 01       		.uleb128 0x1
 14526 3177 50       		.byte	0x50
 14527 3178 05       		.uleb128 0x5
 14528 3179 03       		.byte	0x3
 14529 317a 00000000 		.4byte	.LANCHOR1
 14530 317e 22       		.uleb128 0x22
 14531 317f 01       		.uleb128 0x1
 14532 3180 51       		.byte	0x51
 14533 3181 02       		.uleb128 0x2
 14534 3182 74       		.byte	0x74
 14535 3183 00       		.sleb128 0
 14536 3184 00       		.byte	0
 14537 3185 21       		.uleb128 0x21
 14538 3186 C8000000 		.4byte	.LVL1088
 14539 318a A2120000 		.4byte	0x12a2
 14540 318e 9F310000 		.4byte	0x319f
 14541 3192 22       		.uleb128 0x22
 14542 3193 01       		.uleb128 0x1
 14543 3194 50       		.byte	0x50
 14544 3195 03       		.uleb128 0x3
 14545 3196 91       		.byte	0x91
 14546 3197 BC7F     		.sleb128 -68
 14547 3199 22       		.uleb128 0x22
 14548 319a 01       		.uleb128 0x1
 14549 319b 51       		.byte	0x51
 14550 319c 01       		.uleb128 0x1
 14551 319d 30       		.byte	0x30
 14552 319e 00       		.byte	0
 14553 319f 21       		.uleb128 0x21
 14554 31a0 D4000000 		.4byte	.LVL1090
 14555 31a4 AC190000 		.4byte	0x19ac
 14556 31a8 B9310000 		.4byte	0x31b9
 14557 31ac 22       		.uleb128 0x22
 14558 31ad 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 397


 14559 31ae 50       		.byte	0x50
 14560 31af 03       		.uleb128 0x3
 14561 31b0 91       		.byte	0x91
 14562 31b1 BC7F     		.sleb128 -68
 14563 31b3 22       		.uleb128 0x22
 14564 31b4 01       		.uleb128 0x1
 14565 31b5 51       		.byte	0x51
 14566 31b6 01       		.uleb128 0x1
 14567 31b7 31       		.byte	0x31
 14568 31b8 00       		.byte	0
 14569 31b9 21       		.uleb128 0x21
 14570 31ba E2000000 		.4byte	.LVL1092
 14571 31be FD050000 		.4byte	0x5fd
 14572 31c2 D3310000 		.4byte	0x31d3
 14573 31c6 22       		.uleb128 0x22
 14574 31c7 01       		.uleb128 0x1
 14575 31c8 51       		.byte	0x51
 14576 31c9 03       		.uleb128 0x3
 14577 31ca 91       		.byte	0x91
 14578 31cb A07F     		.sleb128 -96
 14579 31cd 22       		.uleb128 0x22
 14580 31ce 01       		.uleb128 0x1
 14581 31cf 52       		.byte	0x52
 14582 31d0 01       		.uleb128 0x1
 14583 31d1 3B       		.byte	0x3b
 14584 31d2 00       		.byte	0
 14585 31d3 24       		.uleb128 0x24
 14586 31d4 F6000000 		.4byte	.LVL1095
 14587 31d8 4A1A0000 		.4byte	0x1a4a
 14588 31dc 21       		.uleb128 0x21
 14589 31dd 06010000 		.4byte	.LVL1097
 14590 31e1 63180000 		.4byte	0x1863
 14591 31e5 F6310000 		.4byte	0x31f6
 14592 31e9 22       		.uleb128 0x22
 14593 31ea 01       		.uleb128 0x1
 14594 31eb 50       		.byte	0x50
 14595 31ec 03       		.uleb128 0x3
 14596 31ed 91       		.byte	0x91
 14597 31ee BC7F     		.sleb128 -68
 14598 31f0 22       		.uleb128 0x22
 14599 31f1 01       		.uleb128 0x1
 14600 31f2 51       		.byte	0x51
 14601 31f3 01       		.uleb128 0x1
 14602 31f4 31       		.byte	0x31
 14603 31f5 00       		.byte	0
 14604 31f6 21       		.uleb128 0x21
 14605 31f7 12010000 		.4byte	.LVL1099
 14606 31fb 67060000 		.4byte	0x667
 14607 31ff 0F320000 		.4byte	0x320f
 14608 3203 22       		.uleb128 0x22
 14609 3204 01       		.uleb128 0x1
 14610 3205 51       		.byte	0x51
 14611 3206 01       		.uleb128 0x1
 14612 3207 30       		.byte	0x30
 14613 3208 22       		.uleb128 0x22
 14614 3209 01       		.uleb128 0x1
 14615 320a 52       		.byte	0x52
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 398


 14616 320b 02       		.uleb128 0x2
 14617 320c 08       		.byte	0x8
 14618 320d 20       		.byte	0x20
 14619 320e 00       		.byte	0
 14620 320f 21       		.uleb128 0x21
 14621 3210 22010000 		.4byte	.LVL1100
 14622 3214 FD050000 		.4byte	0x5fd
 14623 3218 29320000 		.4byte	0x3229
 14624 321c 22       		.uleb128 0x22
 14625 321d 01       		.uleb128 0x1
 14626 321e 51       		.byte	0x51
 14627 321f 03       		.uleb128 0x3
 14628 3220 91       		.byte	0x91
 14629 3221 A07F     		.sleb128 -96
 14630 3223 22       		.uleb128 0x22
 14631 3224 01       		.uleb128 0x1
 14632 3225 52       		.byte	0x52
 14633 3226 01       		.uleb128 0x1
 14634 3227 3B       		.byte	0x3b
 14635 3228 00       		.byte	0
 14636 3229 24       		.uleb128 0x24
 14637 322a 2E010000 		.4byte	.LVL1101
 14638 322e 4A1A0000 		.4byte	0x1a4a
 14639 3232 00       		.byte	0
 14640 3233 08       		.uleb128 0x8
 14641 3234 A2000000 		.4byte	0xa2
 14642 3238 43320000 		.4byte	0x3243
 14643 323c 0D       		.uleb128 0xd
 14644 323d F4010000 		.4byte	0x1f4
 14645 3241 15       		.byte	0x15
 14646 3242 00       		.byte	0
 14647 3243 08       		.uleb128 0x8
 14648 3244 6D070000 		.4byte	0x76d
 14649 3248 53320000 		.4byte	0x3253
 14650 324c 0D       		.uleb128 0xd
 14651 324d F4010000 		.4byte	0x1f4
 14652 3251 11       		.byte	0x11
 14653 3252 00       		.byte	0
 14654 3253 1B       		.uleb128 0x1b
 14655 3254 43320000 		.4byte	0x3243
 14656 3258 27       		.uleb128 0x27
 14657 3259 39060000 		.4byte	.LASF182
 14658 325d 01       		.byte	0x1
 14659 325e E018     		.2byte	0x18e0
 14660 3260 6C300000 		.4byte	0x306c
 14661 3264 00000000 		.4byte	.LFB56
 14662 3268 4E000000 		.4byte	.LFE56-.LFB56
 14663 326c 01       		.uleb128 0x1
 14664 326d 9C       		.byte	0x9c
 14665 326e 0A330000 		.4byte	0x330a
 14666 3272 20       		.uleb128 0x20
 14667 3273 53010000 		.4byte	.LASF145
 14668 3277 01       		.byte	0x1
 14669 3278 E118     		.2byte	0x18e1
 14670 327a 6C300000 		.4byte	0x306c
 14671 327e F6340000 		.4byte	.LLST246
 14672 3282 19       		.uleb128 0x19
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 399


 14673 3283 6C656E00 		.ascii	"len\000"
 14674 3287 01       		.byte	0x1
 14675 3288 E218     		.2byte	0x18e2
 14676 328a 73000000 		.4byte	0x73
 14677 328e 14350000 		.4byte	.LLST247
 14678 3292 19       		.uleb128 0x19
 14679 3293 667000   		.ascii	"fp\000"
 14680 3296 01       		.byte	0x1
 14681 3297 E318     		.2byte	0x18e3
 14682 3299 EE040000 		.4byte	0x4ee
 14683 329d 32350000 		.4byte	.LLST248
 14684 32a1 1A       		.uleb128 0x1a
 14685 32a2 6E6300   		.ascii	"nc\000"
 14686 32a5 01       		.byte	0x1
 14687 32a6 E618     		.2byte	0x18e6
 14688 32a8 73000000 		.4byte	0x73
 14689 32ac 50350000 		.4byte	.LLST249
 14690 32b0 1A       		.uleb128 0x1a
 14691 32b1 7000     		.ascii	"p\000"
 14692 32b3 01       		.byte	0x1
 14693 32b4 E718     		.2byte	0x18e7
 14694 32b6 6C300000 		.4byte	0x306c
 14695 32ba 6F350000 		.4byte	.LLST250
 14696 32be 1F       		.uleb128 0x1f
 14697 32bf 7300     		.ascii	"s\000"
 14698 32c1 01       		.byte	0x1
 14699 32c2 E818     		.2byte	0x18e8
 14700 32c4 0A330000 		.4byte	0x330a
 14701 32c8 02       		.uleb128 0x2
 14702 32c9 91       		.byte	0x91
 14703 32ca 64       		.sleb128 -28
 14704 32cb 1F       		.uleb128 0x1f
 14705 32cc 726300   		.ascii	"rc\000"
 14706 32cf 01       		.byte	0x1
 14707 32d0 E918     		.2byte	0x18e9
 14708 32d2 97000000 		.4byte	0x97
 14709 32d6 02       		.uleb128 0x2
 14710 32d7 91       		.byte	0x91
 14711 32d8 60       		.sleb128 -32
 14712 32d9 1A       		.uleb128 0x1a
 14713 32da 646300   		.ascii	"dc\000"
 14714 32dd 01       		.byte	0x1
 14715 32de EA18     		.2byte	0x18ea
 14716 32e0 B8000000 		.4byte	0xb8
 14717 32e4 B9350000 		.4byte	.LLST251
 14718 32e8 23       		.uleb128 0x23
 14719 32e9 1E000000 		.4byte	.LVL1113
 14720 32ed 451E0000 		.4byte	0x1e45
 14721 32f1 22       		.uleb128 0x22
 14722 32f2 01       		.uleb128 0x1
 14723 32f3 50       		.byte	0x50
 14724 32f4 02       		.uleb128 0x2
 14725 32f5 77       		.byte	0x77
 14726 32f6 00       		.sleb128 0
 14727 32f7 22       		.uleb128 0x22
 14728 32f8 01       		.uleb128 0x1
 14729 32f9 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 400


 14730 32fa 02       		.uleb128 0x2
 14731 32fb 91       		.byte	0x91
 14732 32fc 64       		.sleb128 -28
 14733 32fd 22       		.uleb128 0x22
 14734 32fe 01       		.uleb128 0x1
 14735 32ff 52       		.byte	0x52
 14736 3300 01       		.uleb128 0x1
 14737 3301 31       		.byte	0x31
 14738 3302 22       		.uleb128 0x22
 14739 3303 01       		.uleb128 0x1
 14740 3304 53       		.byte	0x53
 14741 3305 02       		.uleb128 0x2
 14742 3306 7D       		.byte	0x7d
 14743 3307 00       		.sleb128 0
 14744 3308 00       		.byte	0
 14745 3309 00       		.byte	0
 14746 330a 08       		.uleb128 0x8
 14747 330b A2000000 		.4byte	0xa2
 14748 330f 1A330000 		.4byte	0x331a
 14749 3313 0D       		.uleb128 0xd
 14750 3314 F4010000 		.4byte	0x1f4
 14751 3318 03       		.byte	0x3
 14752 3319 00       		.byte	0
 14753 331a 27       		.uleb128 0x27
 14754 331b CF020000 		.4byte	.LASF183
 14755 331f 01       		.byte	0x1
 14756 3320 0B1A     		.2byte	0x1a0b
 14757 3322 73000000 		.4byte	0x73
 14758 3326 00000000 		.4byte	.LFB60
 14759 332a 1E000000 		.4byte	.LFE60-.LFB60
 14760 332e 01       		.uleb128 0x1
 14761 332f 9C       		.byte	0x9c
 14762 3330 A9330000 		.4byte	0x33a9
 14763 3334 19       		.uleb128 0x19
 14764 3335 6300     		.ascii	"c\000"
 14765 3337 01       		.byte	0x1
 14766 3338 0C1A     		.2byte	0x1a0c
 14767 333a CE000000 		.4byte	0xce
 14768 333e E1350000 		.4byte	.LLST252
 14769 3342 19       		.uleb128 0x19
 14770 3343 667000   		.ascii	"fp\000"
 14771 3346 01       		.byte	0x1
 14772 3347 0D1A     		.2byte	0x1a0d
 14773 3349 EE040000 		.4byte	0x4ee
 14774 334d 02360000 		.4byte	.LLST253
 14775 3351 1F       		.uleb128 0x1f
 14776 3352 706200   		.ascii	"pb\000"
 14777 3355 01       		.byte	0x1
 14778 3356 101A     		.2byte	0x1a10
 14779 3358 04050000 		.4byte	0x504
 14780 335c 03       		.uleb128 0x3
 14781 335d 91       		.byte	0x91
 14782 335e AC7F     		.sleb128 -84
 14783 3360 21       		.uleb128 0x21
 14784 3361 0C000000 		.4byte	.LVL1122
 14785 3365 F20A0000 		.4byte	0xaf2
 14786 3369 7C330000 		.4byte	0x337c
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 401


 14787 336d 22       		.uleb128 0x22
 14788 336e 01       		.uleb128 0x1
 14789 336f 50       		.byte	0x50
 14790 3370 03       		.uleb128 0x3
 14791 3371 91       		.byte	0x91
 14792 3372 AC7F     		.sleb128 -84
 14793 3374 22       		.uleb128 0x22
 14794 3375 01       		.uleb128 0x1
 14795 3376 51       		.byte	0x51
 14796 3377 03       		.uleb128 0x3
 14797 3378 F3       		.byte	0xf3
 14798 3379 01       		.uleb128 0x1
 14799 337a 51       		.byte	0x51
 14800 337b 00       		.byte	0
 14801 337c 21       		.uleb128 0x21
 14802 337d 14000000 		.4byte	.LVL1123
 14803 3381 B9210000 		.4byte	0x21b9
 14804 3385 97330000 		.4byte	0x3397
 14805 3389 22       		.uleb128 0x22
 14806 338a 01       		.uleb128 0x1
 14807 338b 50       		.byte	0x50
 14808 338c 03       		.uleb128 0x3
 14809 338d 91       		.byte	0x91
 14810 338e AC7F     		.sleb128 -84
 14811 3390 22       		.uleb128 0x22
 14812 3391 01       		.uleb128 0x1
 14813 3392 51       		.byte	0x51
 14814 3393 02       		.uleb128 0x2
 14815 3394 74       		.byte	0x74
 14816 3395 00       		.sleb128 0
 14817 3396 00       		.byte	0
 14818 3397 23       		.uleb128 0x23
 14819 3398 1A000000 		.4byte	.LVL1124
 14820 339c 33220000 		.4byte	0x2233
 14821 33a0 22       		.uleb128 0x22
 14822 33a1 01       		.uleb128 0x1
 14823 33a2 50       		.byte	0x50
 14824 33a3 03       		.uleb128 0x3
 14825 33a4 91       		.byte	0x91
 14826 33a5 AC7F     		.sleb128 -84
 14827 33a7 00       		.byte	0
 14828 33a8 00       		.byte	0
 14829 33a9 27       		.uleb128 0x27
 14830 33aa 70030000 		.4byte	.LASF184
 14831 33ae 01       		.byte	0x1
 14832 33af 1F1A     		.2byte	0x1a1f
 14833 33b1 73000000 		.4byte	0x73
 14834 33b5 00000000 		.4byte	.LFB61
 14835 33b9 26000000 		.4byte	.LFE61-.LFB61
 14836 33bd 01       		.uleb128 0x1
 14837 33be 9C       		.byte	0x9c
 14838 33bf 34340000 		.4byte	0x3434
 14839 33c3 19       		.uleb128 0x19
 14840 33c4 73747200 		.ascii	"str\000"
 14841 33c8 01       		.byte	0x1
 14842 33c9 201A     		.2byte	0x1a20
 14843 33cb 710A0000 		.4byte	0xa71
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 402


 14844 33cf 23360000 		.4byte	.LLST254
 14845 33d3 19       		.uleb128 0x19
 14846 33d4 667000   		.ascii	"fp\000"
 14847 33d7 01       		.byte	0x1
 14848 33d8 211A     		.2byte	0x1a21
 14849 33da EE040000 		.4byte	0x4ee
 14850 33de 41360000 		.4byte	.LLST255
 14851 33e2 1F       		.uleb128 0x1f
 14852 33e3 706200   		.ascii	"pb\000"
 14853 33e6 01       		.byte	0x1
 14854 33e7 241A     		.2byte	0x1a24
 14855 33e9 04050000 		.4byte	0x504
 14856 33ed 03       		.uleb128 0x3
 14857 33ee 91       		.byte	0x91
 14858 33ef AC7F     		.sleb128 -84
 14859 33f1 21       		.uleb128 0x21
 14860 33f2 0C000000 		.4byte	.LVL1127
 14861 33f6 F20A0000 		.4byte	0xaf2
 14862 33fa 0D340000 		.4byte	0x340d
 14863 33fe 22       		.uleb128 0x22
 14864 33ff 01       		.uleb128 0x1
 14865 3400 50       		.byte	0x50
 14866 3401 03       		.uleb128 0x3
 14867 3402 91       		.byte	0x91
 14868 3403 AC7F     		.sleb128 -84
 14869 3405 22       		.uleb128 0x22
 14870 3406 01       		.uleb128 0x1
 14871 3407 51       		.byte	0x51
 14872 3408 03       		.uleb128 0x3
 14873 3409 F3       		.byte	0xf3
 14874 340a 01       		.uleb128 0x1
 14875 340b 51       		.byte	0x51
 14876 340c 00       		.byte	0
 14877 340d 21       		.uleb128 0x21
 14878 340e 16000000 		.4byte	.LVL1129
 14879 3412 B9210000 		.4byte	0x21b9
 14880 3416 22340000 		.4byte	0x3422
 14881 341a 22       		.uleb128 0x22
 14882 341b 01       		.uleb128 0x1
 14883 341c 50       		.byte	0x50
 14884 341d 03       		.uleb128 0x3
 14885 341e 91       		.byte	0x91
 14886 341f AC7F     		.sleb128 -84
 14887 3421 00       		.byte	0
 14888 3422 23       		.uleb128 0x23
 14889 3423 22000000 		.4byte	.LVL1130
 14890 3427 33220000 		.4byte	0x2233
 14891 342b 22       		.uleb128 0x22
 14892 342c 01       		.uleb128 0x1
 14893 342d 50       		.byte	0x50
 14894 342e 03       		.uleb128 0x3
 14895 342f 91       		.byte	0x91
 14896 3430 AC7F     		.sleb128 -84
 14897 3432 00       		.byte	0
 14898 3433 00       		.byte	0
 14899 3434 27       		.uleb128 0x27
 14900 3435 35030000 		.4byte	.LASF185
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 403


 14901 3439 01       		.byte	0x1
 14902 343a 331A     		.2byte	0x1a33
 14903 343c 73000000 		.4byte	0x73
 14904 3440 00000000 		.4byte	.LFB62
 14905 3444 4C020000 		.4byte	.LFE62-.LFB62
 14906 3448 01       		.uleb128 0x1
 14907 3449 9C       		.byte	0x9c
 14908 344a 2B360000 		.4byte	0x362b
 14909 344e 19       		.uleb128 0x19
 14910 344f 667000   		.ascii	"fp\000"
 14911 3452 01       		.byte	0x1
 14912 3453 341A     		.2byte	0x1a34
 14913 3455 EE040000 		.4byte	0x4ee
 14914 3459 62360000 		.4byte	.LLST256
 14915 345d 19       		.uleb128 0x19
 14916 345e 666D7400 		.ascii	"fmt\000"
 14917 3462 01       		.byte	0x1
 14918 3463 351A     		.2byte	0x1a35
 14919 3465 710A0000 		.4byte	0xa71
 14920 3469 8E360000 		.4byte	.LLST257
 14921 346d 28       		.uleb128 0x28
 14922 346e 1F       		.uleb128 0x1f
 14923 346f 61727000 		.ascii	"arp\000"
 14924 3473 01       		.byte	0x1
 14925 3474 391A     		.2byte	0x1a39
 14926 3476 A6040000 		.4byte	0x4a6
 14927 347a 02       		.uleb128 0x2
 14928 347b 91       		.byte	0x91
 14929 347c 54       		.sleb128 -44
 14930 347d 1F       		.uleb128 0x1f
 14931 347e 706200   		.ascii	"pb\000"
 14932 3481 01       		.byte	0x1
 14933 3482 3A1A     		.2byte	0x1a3a
 14934 3484 04050000 		.4byte	0x504
 14935 3488 03       		.uleb128 0x3
 14936 3489 91       		.byte	0x91
 14937 348a 887F     		.sleb128 -120
 14938 348c 1A       		.uleb128 0x1a
 14939 348d 6600     		.ascii	"f\000"
 14940 348f 01       		.byte	0x1
 14941 3490 3B1A     		.2byte	0x1a3b
 14942 3492 A2000000 		.4byte	0xa2
 14943 3496 14370000 		.4byte	.LLST258
 14944 349a 1A       		.uleb128 0x1a
 14945 349b 7200     		.ascii	"r\000"
 14946 349d 01       		.byte	0x1
 14947 349e 3B1A     		.2byte	0x1a3b
 14948 34a0 A2000000 		.4byte	0xa2
 14949 34a4 79370000 		.4byte	.LLST259
 14950 34a8 1A       		.uleb128 0x1a
 14951 34a9 6900     		.ascii	"i\000"
 14952 34ab 01       		.byte	0x1
 14953 34ac 3C1A     		.2byte	0x1a3c
 14954 34ae 97000000 		.4byte	0x97
 14955 34b2 AF370000 		.4byte	.LLST260
 14956 34b6 1A       		.uleb128 0x1a
 14957 34b7 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 404


 14958 34b9 01       		.byte	0x1
 14959 34ba 3C1A     		.2byte	0x1a3c
 14960 34bc 97000000 		.4byte	0x97
 14961 34c0 FC370000 		.4byte	.LLST261
 14962 34c4 1A       		.uleb128 0x1a
 14963 34c5 7700     		.ascii	"w\000"
 14964 34c7 01       		.byte	0x1
 14965 34c8 3C1A     		.2byte	0x1a3c
 14966 34ca 97000000 		.4byte	0x97
 14967 34ce C0380000 		.4byte	.LLST262
 14968 34d2 1A       		.uleb128 0x1a
 14969 34d3 7600     		.ascii	"v\000"
 14970 34d5 01       		.byte	0x1
 14971 34d6 3D1A     		.2byte	0x1a3d
 14972 34d8 B8000000 		.4byte	0xb8
 14973 34dc 01390000 		.4byte	.LLST263
 14974 34e0 1A       		.uleb128 0x1a
 14975 34e1 6300     		.ascii	"c\000"
 14976 34e3 01       		.byte	0x1
 14977 34e4 3E1A     		.2byte	0x1a3e
 14978 34e6 CE000000 		.4byte	0xce
 14979 34ea 40390000 		.4byte	.LLST264
 14980 34ee 1A       		.uleb128 0x1a
 14981 34ef 6400     		.ascii	"d\000"
 14982 34f1 01       		.byte	0x1
 14983 34f2 3E1A     		.2byte	0x1a3e
 14984 34f4 CE000000 		.4byte	0xce
 14985 34f8 A0390000 		.4byte	.LLST265
 14986 34fc 1F       		.uleb128 0x1f
 14987 34fd 73747200 		.ascii	"str\000"
 14988 3501 01       		.byte	0x1
 14989 3502 3E1A     		.2byte	0x1a3e
 14990 3504 2B360000 		.4byte	0x362b
 14991 3508 03       		.uleb128 0x3
 14992 3509 91       		.byte	0x91
 14993 350a E87E     		.sleb128 -152
 14994 350c 1A       		.uleb128 0x1a
 14995 350d 7000     		.ascii	"p\000"
 14996 350f 01       		.byte	0x1
 14997 3510 3E1A     		.2byte	0x1a3e
 14998 3512 6C300000 		.4byte	0x306c
 14999 3516 0B3A0000 		.4byte	.LLST266
 15000 351a 21       		.uleb128 0x21
 15001 351b 16000000 		.4byte	.LVL1133
 15002 351f F20A0000 		.4byte	0xaf2
 15003 3523 36350000 		.4byte	0x3536
 15004 3527 22       		.uleb128 0x22
 15005 3528 01       		.uleb128 0x1
 15006 3529 50       		.byte	0x50
 15007 352a 03       		.uleb128 0x3
 15008 352b 91       		.byte	0x91
 15009 352c F07E     		.sleb128 -144
 15010 352e 22       		.uleb128 0x22
 15011 352f 01       		.uleb128 0x1
 15012 3530 51       		.byte	0x51
 15013 3531 03       		.uleb128 0x3
 15014 3532 F3       		.byte	0xf3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 405


 15015 3533 01       		.uleb128 0x1
 15016 3534 50       		.byte	0x50
 15017 3535 00       		.byte	0
 15018 3536 21       		.uleb128 0x21
 15019 3537 2C000000 		.4byte	.LVL1137
 15020 353b B9210000 		.4byte	0x21b9
 15021 353f 4B350000 		.4byte	0x354b
 15022 3543 22       		.uleb128 0x22
 15023 3544 01       		.uleb128 0x1
 15024 3545 50       		.byte	0x50
 15025 3546 03       		.uleb128 0x3
 15026 3547 91       		.byte	0x91
 15027 3548 F07E     		.sleb128 -144
 15028 354a 00       		.byte	0
 15029 354b 21       		.uleb128 0x21
 15030 354c F8000000 		.4byte	.LVL1174
 15031 3550 B9210000 		.4byte	0x21b9
 15032 3554 66350000 		.4byte	0x3566
 15033 3558 22       		.uleb128 0x22
 15034 3559 01       		.uleb128 0x1
 15035 355a 50       		.byte	0x50
 15036 355b 03       		.uleb128 0x3
 15037 355c 91       		.byte	0x91
 15038 355d F07E     		.sleb128 -144
 15039 355f 22       		.uleb128 0x22
 15040 3560 01       		.uleb128 0x1
 15041 3561 51       		.byte	0x51
 15042 3562 02       		.uleb128 0x2
 15043 3563 08       		.byte	0x8
 15044 3564 20       		.byte	0x20
 15045 3565 00       		.byte	0
 15046 3566 21       		.uleb128 0x21
 15047 3567 0E010000 		.4byte	.LVL1179
 15048 356b B9210000 		.4byte	0x21b9
 15049 356f 7B350000 		.4byte	0x357b
 15050 3573 22       		.uleb128 0x22
 15051 3574 01       		.uleb128 0x1
 15052 3575 50       		.byte	0x50
 15053 3576 03       		.uleb128 0x3
 15054 3577 91       		.byte	0x91
 15055 3578 F07E     		.sleb128 -144
 15056 357a 00       		.byte	0
 15057 357b 21       		.uleb128 0x21
 15058 357c 22010000 		.4byte	.LVL1181
 15059 3580 B9210000 		.4byte	0x21b9
 15060 3584 96350000 		.4byte	0x3596
 15061 3588 22       		.uleb128 0x22
 15062 3589 01       		.uleb128 0x1
 15063 358a 50       		.byte	0x50
 15064 358b 03       		.uleb128 0x3
 15065 358c 91       		.byte	0x91
 15066 358d F07E     		.sleb128 -144
 15067 358f 22       		.uleb128 0x22
 15068 3590 01       		.uleb128 0x1
 15069 3591 51       		.byte	0x51
 15070 3592 02       		.uleb128 0x2
 15071 3593 08       		.byte	0x8
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 406


 15072 3594 20       		.byte	0x20
 15073 3595 00       		.byte	0
 15074 3596 21       		.uleb128 0x21
 15075 3597 3A010000 		.4byte	.LVL1187
 15076 359b B9210000 		.4byte	0x21b9
 15077 359f AB350000 		.4byte	0x35ab
 15078 35a3 22       		.uleb128 0x22
 15079 35a4 01       		.uleb128 0x1
 15080 35a5 50       		.byte	0x50
 15081 35a6 03       		.uleb128 0x3
 15082 35a7 91       		.byte	0x91
 15083 35a8 F07E     		.sleb128 -144
 15084 35aa 00       		.byte	0
 15085 35ab 21       		.uleb128 0x21
 15086 35ac 4E010000 		.4byte	.LVL1191
 15087 35b0 B9210000 		.4byte	0x21b9
 15088 35b4 C0350000 		.4byte	0x35c0
 15089 35b8 22       		.uleb128 0x22
 15090 35b9 01       		.uleb128 0x1
 15091 35ba 50       		.byte	0x50
 15092 35bb 03       		.uleb128 0x3
 15093 35bc 91       		.byte	0x91
 15094 35bd F07E     		.sleb128 -144
 15095 35bf 00       		.byte	0
 15096 35c0 21       		.uleb128 0x21
 15097 35c1 08020000 		.4byte	.LVL1211
 15098 35c5 B9210000 		.4byte	0x21b9
 15099 35c9 DB350000 		.4byte	0x35db
 15100 35cd 22       		.uleb128 0x22
 15101 35ce 01       		.uleb128 0x1
 15102 35cf 50       		.byte	0x50
 15103 35d0 03       		.uleb128 0x3
 15104 35d1 91       		.byte	0x91
 15105 35d2 F07E     		.sleb128 -144
 15106 35d4 22       		.uleb128 0x22
 15107 35d5 01       		.uleb128 0x1
 15108 35d6 51       		.byte	0x51
 15109 35d7 02       		.uleb128 0x2
 15110 35d8 78       		.byte	0x78
 15111 35d9 00       		.sleb128 0
 15112 35da 00       		.byte	0
 15113 35db 21       		.uleb128 0x21
 15114 35dc 24020000 		.4byte	.LVL1216
 15115 35e0 B9210000 		.4byte	0x21b9
 15116 35e4 FE350000 		.4byte	0x35fe
 15117 35e8 22       		.uleb128 0x22
 15118 35e9 01       		.uleb128 0x1
 15119 35ea 50       		.byte	0x50
 15120 35eb 03       		.uleb128 0x3
 15121 35ec 91       		.byte	0x91
 15122 35ed F07E     		.sleb128 -144
 15123 35ef 22       		.uleb128 0x22
 15124 35f0 01       		.uleb128 0x1
 15125 35f1 51       		.byte	0x51
 15126 35f2 0A       		.uleb128 0xa
 15127 35f3 91       		.byte	0x91
 15128 35f4 74       		.sleb128 -12
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 407


 15129 35f5 74       		.byte	0x74
 15130 35f6 00       		.sleb128 0
 15131 35f7 22       		.byte	0x22
 15132 35f8 08       		.byte	0x8
 15133 35f9 A4       		.byte	0xa4
 15134 35fa 1C       		.byte	0x1c
 15135 35fb 94       		.byte	0x94
 15136 35fc 01       		.byte	0x1
 15137 35fd 00       		.byte	0
 15138 35fe 21       		.uleb128 0x21
 15139 35ff 32020000 		.4byte	.LVL1218
 15140 3603 B9210000 		.4byte	0x21b9
 15141 3607 19360000 		.4byte	0x3619
 15142 360b 22       		.uleb128 0x22
 15143 360c 01       		.uleb128 0x1
 15144 360d 50       		.byte	0x50
 15145 360e 03       		.uleb128 0x3
 15146 360f 91       		.byte	0x91
 15147 3610 F07E     		.sleb128 -144
 15148 3612 22       		.uleb128 0x22
 15149 3613 01       		.uleb128 0x1
 15150 3614 51       		.byte	0x51
 15151 3615 02       		.uleb128 0x2
 15152 3616 78       		.byte	0x78
 15153 3617 00       		.sleb128 0
 15154 3618 00       		.byte	0
 15155 3619 23       		.uleb128 0x23
 15156 361a 42020000 		.4byte	.LVL1222
 15157 361e 33220000 		.4byte	0x2233
 15158 3622 22       		.uleb128 0x22
 15159 3623 01       		.uleb128 0x1
 15160 3624 50       		.byte	0x50
 15161 3625 03       		.uleb128 0x3
 15162 3626 91       		.byte	0x91
 15163 3627 F07E     		.sleb128 -144
 15164 3629 00       		.byte	0
 15165 362a 00       		.byte	0
 15166 362b 08       		.uleb128 0x8
 15167 362c CE000000 		.4byte	0xce
 15168 3630 3B360000 		.4byte	0x363b
 15169 3634 0D       		.uleb128 0xd
 15170 3635 F4010000 		.4byte	0x1f4
 15171 3639 1F       		.byte	0x1f
 15172 363a 00       		.byte	0
 15173 363b 08       		.uleb128 0x8
 15174 363c 55020000 		.4byte	0x255
 15175 3640 4B360000 		.4byte	0x364b
 15176 3644 0D       		.uleb128 0xd
 15177 3645 F4010000 		.4byte	0x1f4
 15178 3649 00       		.byte	0
 15179 364a 00       		.byte	0
 15180 364b 25       		.uleb128 0x25
 15181 364c 3F000000 		.4byte	.LASF186
 15182 3650 01       		.byte	0x1
 15183 3651 CC01     		.2byte	0x1cc
 15184 3653 3B360000 		.4byte	0x363b
 15185 3657 05       		.uleb128 0x5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 408


 15186 3658 03       		.byte	0x3
 15187 3659 04000000 		.4byte	FatFs
 15188 365d 25       		.uleb128 0x25
 15189 365e CA070000 		.4byte	.LASF187
 15190 3662 01       		.byte	0x1
 15191 3663 CD01     		.2byte	0x1cd
 15192 3665 AD000000 		.4byte	0xad
 15193 3669 05       		.uleb128 0x5
 15194 366a 03       		.byte	0x3
 15195 366b 08000000 		.4byte	Fsid
 15196 366f 25       		.uleb128 0x25
 15197 3670 BB060000 		.4byte	.LASF188
 15198 3674 01       		.byte	0x1
 15199 3675 D001     		.2byte	0x1d0
 15200 3677 A2000000 		.4byte	0xa2
 15201 367b 05       		.uleb128 0x5
 15202 367c 03       		.byte	0x3
 15203 367d 00000000 		.4byte	CurrVol
 15204 3681 08       		.uleb128 0x8
 15205 3682 50050000 		.4byte	0x550
 15206 3686 91360000 		.4byte	0x3691
 15207 368a 0D       		.uleb128 0xd
 15208 368b F4010000 		.4byte	0x1f4
 15209 368f 09       		.byte	0x9
 15210 3690 00       		.byte	0
 15211 3691 29       		.uleb128 0x29
 15212 3692 28030000 		.4byte	.LASF189
 15213 3696 01       		.byte	0x1
 15214 3697 5002     		.2byte	0x250
 15215 3699 A8360000 		.4byte	0x36a8
 15216 369d 0A       		.byte	0xa
 15217 369e 81       		.byte	0x81
 15218 369f 9F       		.byte	0x9f
 15219 36a0 E0       		.byte	0xe0
 15220 36a1 FC       		.byte	0xfc
 15221 36a2 40       		.byte	0x40
 15222 36a3 7E       		.byte	0x7e
 15223 36a4 80       		.byte	0x80
 15224 36a5 FC       		.byte	0xfc
 15225 36a6 00       		.byte	0
 15226 36a7 00       		.byte	0
 15227 36a8 1B       		.uleb128 0x1b
 15228 36a9 81360000 		.4byte	0x3681
 15229 36ad 2A       		.uleb128 0x2a
 15230 36ae 7F020000 		.4byte	.LASF190
 15231 36b2 7F020000 		.4byte	.LASF190
 15232 36b6 05       		.byte	0x5
 15233 36b7 20       		.byte	0x20
 15234 36b8 2A       		.uleb128 0x2a
 15235 36b9 7C060000 		.4byte	.LASF191
 15236 36bd 7C060000 		.4byte	.LASF191
 15237 36c1 05       		.byte	0x5
 15238 36c2 22       		.byte	0x22
 15239 36c3 2A       		.uleb128 0x2a
 15240 36c4 B6070000 		.4byte	.LASF192
 15241 36c8 B6070000 		.4byte	.LASF192
 15242 36cc 05       		.byte	0x5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 409


 15243 36cd 21       		.byte	0x21
 15244 36ce 2A       		.uleb128 0x2a
 15245 36cf EB010000 		.4byte	.LASF193
 15246 36d3 EB010000 		.4byte	.LASF193
 15247 36d7 05       		.byte	0x5
 15248 36d8 1F       		.byte	0x1f
 15249 36d9 2A       		.uleb128 0x2a
 15250 36da 51030000 		.4byte	.LASF194
 15251 36de 51030000 		.4byte	.LASF194
 15252 36e2 05       		.byte	0x5
 15253 36e3 23       		.byte	0x23
 15254 36e4 00       		.byte	0
 15255              		.section	.debug_abbrev,"",%progbits
 15256              	.Ldebug_abbrev0:
 15257 0000 01       		.uleb128 0x1
 15258 0001 11       		.uleb128 0x11
 15259 0002 01       		.byte	0x1
 15260 0003 25       		.uleb128 0x25
 15261 0004 0E       		.uleb128 0xe
 15262 0005 13       		.uleb128 0x13
 15263 0006 0B       		.uleb128 0xb
 15264 0007 03       		.uleb128 0x3
 15265 0008 0E       		.uleb128 0xe
 15266 0009 1B       		.uleb128 0x1b
 15267 000a 0E       		.uleb128 0xe
 15268 000b 55       		.uleb128 0x55
 15269 000c 17       		.uleb128 0x17
 15270 000d 11       		.uleb128 0x11
 15271 000e 01       		.uleb128 0x1
 15272 000f 10       		.uleb128 0x10
 15273 0010 17       		.uleb128 0x17
 15274 0011 00       		.byte	0
 15275 0012 00       		.byte	0
 15276 0013 02       		.uleb128 0x2
 15277 0014 24       		.uleb128 0x24
 15278 0015 00       		.byte	0
 15279 0016 0B       		.uleb128 0xb
 15280 0017 0B       		.uleb128 0xb
 15281 0018 3E       		.uleb128 0x3e
 15282 0019 0B       		.uleb128 0xb
 15283 001a 03       		.uleb128 0x3
 15284 001b 0E       		.uleb128 0xe
 15285 001c 00       		.byte	0
 15286 001d 00       		.byte	0
 15287 001e 03       		.uleb128 0x3
 15288 001f 16       		.uleb128 0x16
 15289 0020 00       		.byte	0
 15290 0021 03       		.uleb128 0x3
 15291 0022 0E       		.uleb128 0xe
 15292 0023 3A       		.uleb128 0x3a
 15293 0024 0B       		.uleb128 0xb
 15294 0025 3B       		.uleb128 0x3b
 15295 0026 0B       		.uleb128 0xb
 15296 0027 49       		.uleb128 0x49
 15297 0028 13       		.uleb128 0x13
 15298 0029 00       		.byte	0
 15299 002a 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 410


 15300 002b 04       		.uleb128 0x4
 15301 002c 24       		.uleb128 0x24
 15302 002d 00       		.byte	0
 15303 002e 0B       		.uleb128 0xb
 15304 002f 0B       		.uleb128 0xb
 15305 0030 3E       		.uleb128 0x3e
 15306 0031 0B       		.uleb128 0xb
 15307 0032 03       		.uleb128 0x3
 15308 0033 08       		.uleb128 0x8
 15309 0034 00       		.byte	0
 15310 0035 00       		.byte	0
 15311 0036 05       		.uleb128 0x5
 15312 0037 13       		.uleb128 0x13
 15313 0038 01       		.byte	0x1
 15314 0039 0B       		.uleb128 0xb
 15315 003a 05       		.uleb128 0x5
 15316 003b 3A       		.uleb128 0x3a
 15317 003c 0B       		.uleb128 0xb
 15318 003d 3B       		.uleb128 0x3b
 15319 003e 0B       		.uleb128 0xb
 15320 003f 01       		.uleb128 0x1
 15321 0040 13       		.uleb128 0x13
 15322 0041 00       		.byte	0
 15323 0042 00       		.byte	0
 15324 0043 06       		.uleb128 0x6
 15325 0044 0D       		.uleb128 0xd
 15326 0045 00       		.byte	0
 15327 0046 03       		.uleb128 0x3
 15328 0047 0E       		.uleb128 0xe
 15329 0048 3A       		.uleb128 0x3a
 15330 0049 0B       		.uleb128 0xb
 15331 004a 3B       		.uleb128 0x3b
 15332 004b 0B       		.uleb128 0xb
 15333 004c 49       		.uleb128 0x49
 15334 004d 13       		.uleb128 0x13
 15335 004e 38       		.uleb128 0x38
 15336 004f 0B       		.uleb128 0xb
 15337 0050 00       		.byte	0
 15338 0051 00       		.byte	0
 15339 0052 07       		.uleb128 0x7
 15340 0053 0D       		.uleb128 0xd
 15341 0054 00       		.byte	0
 15342 0055 03       		.uleb128 0x3
 15343 0056 08       		.uleb128 0x8
 15344 0057 3A       		.uleb128 0x3a
 15345 0058 0B       		.uleb128 0xb
 15346 0059 3B       		.uleb128 0x3b
 15347 005a 0B       		.uleb128 0xb
 15348 005b 49       		.uleb128 0x49
 15349 005c 13       		.uleb128 0x13
 15350 005d 38       		.uleb128 0x38
 15351 005e 0B       		.uleb128 0xb
 15352 005f 00       		.byte	0
 15353 0060 00       		.byte	0
 15354 0061 08       		.uleb128 0x8
 15355 0062 01       		.uleb128 0x1
 15356 0063 01       		.byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 411


 15357 0064 49       		.uleb128 0x49
 15358 0065 13       		.uleb128 0x13
 15359 0066 01       		.uleb128 0x1
 15360 0067 13       		.uleb128 0x13
 15361 0068 00       		.byte	0
 15362 0069 00       		.byte	0
 15363 006a 09       		.uleb128 0x9
 15364 006b 21       		.uleb128 0x21
 15365 006c 00       		.byte	0
 15366 006d 49       		.uleb128 0x49
 15367 006e 13       		.uleb128 0x13
 15368 006f 2F       		.uleb128 0x2f
 15369 0070 05       		.uleb128 0x5
 15370 0071 00       		.byte	0
 15371 0072 00       		.byte	0
 15372 0073 0A       		.uleb128 0xa
 15373 0074 13       		.uleb128 0x13
 15374 0075 01       		.byte	0x1
 15375 0076 0B       		.uleb128 0xb
 15376 0077 0B       		.uleb128 0xb
 15377 0078 3A       		.uleb128 0x3a
 15378 0079 0B       		.uleb128 0xb
 15379 007a 3B       		.uleb128 0x3b
 15380 007b 0B       		.uleb128 0xb
 15381 007c 01       		.uleb128 0x1
 15382 007d 13       		.uleb128 0x13
 15383 007e 00       		.byte	0
 15384 007f 00       		.byte	0
 15385 0080 0B       		.uleb128 0xb
 15386 0081 0F       		.uleb128 0xf
 15387 0082 00       		.byte	0
 15388 0083 0B       		.uleb128 0xb
 15389 0084 0B       		.uleb128 0xb
 15390 0085 49       		.uleb128 0x49
 15391 0086 13       		.uleb128 0x13
 15392 0087 00       		.byte	0
 15393 0088 00       		.byte	0
 15394 0089 0C       		.uleb128 0xc
 15395 008a 16       		.uleb128 0x16
 15396 008b 00       		.byte	0
 15397 008c 03       		.uleb128 0x3
 15398 008d 08       		.uleb128 0x8
 15399 008e 3A       		.uleb128 0x3a
 15400 008f 0B       		.uleb128 0xb
 15401 0090 3B       		.uleb128 0x3b
 15402 0091 0B       		.uleb128 0xb
 15403 0092 49       		.uleb128 0x49
 15404 0093 13       		.uleb128 0x13
 15405 0094 00       		.byte	0
 15406 0095 00       		.byte	0
 15407 0096 0D       		.uleb128 0xd
 15408 0097 21       		.uleb128 0x21
 15409 0098 00       		.byte	0
 15410 0099 49       		.uleb128 0x49
 15411 009a 13       		.uleb128 0x13
 15412 009b 2F       		.uleb128 0x2f
 15413 009c 0B       		.uleb128 0xb
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 412


 15414 009d 00       		.byte	0
 15415 009e 00       		.byte	0
 15416 009f 0E       		.uleb128 0xe
 15417 00a0 0D       		.uleb128 0xd
 15418 00a1 00       		.byte	0
 15419 00a2 03       		.uleb128 0x3
 15420 00a3 0E       		.uleb128 0xe
 15421 00a4 3A       		.uleb128 0x3a
 15422 00a5 0B       		.uleb128 0xb
 15423 00a6 3B       		.uleb128 0x3b
 15424 00a7 05       		.uleb128 0x5
 15425 00a8 49       		.uleb128 0x49
 15426 00a9 13       		.uleb128 0x13
 15427 00aa 38       		.uleb128 0x38
 15428 00ab 0B       		.uleb128 0xb
 15429 00ac 00       		.byte	0
 15430 00ad 00       		.byte	0
 15431 00ae 0F       		.uleb128 0xf
 15432 00af 16       		.uleb128 0x16
 15433 00b0 00       		.byte	0
 15434 00b1 03       		.uleb128 0x3
 15435 00b2 0E       		.uleb128 0xe
 15436 00b3 3A       		.uleb128 0x3a
 15437 00b4 0B       		.uleb128 0xb
 15438 00b5 3B       		.uleb128 0x3b
 15439 00b6 05       		.uleb128 0x5
 15440 00b7 49       		.uleb128 0x49
 15441 00b8 13       		.uleb128 0x13
 15442 00b9 00       		.byte	0
 15443 00ba 00       		.byte	0
 15444 00bb 10       		.uleb128 0x10
 15445 00bc 04       		.uleb128 0x4
 15446 00bd 01       		.byte	0x1
 15447 00be 0B       		.uleb128 0xb
 15448 00bf 0B       		.uleb128 0xb
 15449 00c0 49       		.uleb128 0x49
 15450 00c1 13       		.uleb128 0x13
 15451 00c2 3A       		.uleb128 0x3a
 15452 00c3 0B       		.uleb128 0xb
 15453 00c4 3B       		.uleb128 0x3b
 15454 00c5 05       		.uleb128 0x5
 15455 00c6 01       		.uleb128 0x1
 15456 00c7 13       		.uleb128 0x13
 15457 00c8 00       		.byte	0
 15458 00c9 00       		.byte	0
 15459 00ca 11       		.uleb128 0x11
 15460 00cb 28       		.uleb128 0x28
 15461 00cc 00       		.byte	0
 15462 00cd 03       		.uleb128 0x3
 15463 00ce 0E       		.uleb128 0xe
 15464 00cf 1C       		.uleb128 0x1c
 15465 00d0 0B       		.uleb128 0xb
 15466 00d1 00       		.byte	0
 15467 00d2 00       		.byte	0
 15468 00d3 12       		.uleb128 0x12
 15469 00d4 04       		.uleb128 0x4
 15470 00d5 01       		.byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 413


 15471 00d6 0B       		.uleb128 0xb
 15472 00d7 0B       		.uleb128 0xb
 15473 00d8 49       		.uleb128 0x49
 15474 00d9 13       		.uleb128 0x13
 15475 00da 3A       		.uleb128 0x3a
 15476 00db 0B       		.uleb128 0xb
 15477 00dc 3B       		.uleb128 0x3b
 15478 00dd 0B       		.uleb128 0xb
 15479 00de 01       		.uleb128 0x1
 15480 00df 13       		.uleb128 0x13
 15481 00e0 00       		.byte	0
 15482 00e1 00       		.byte	0
 15483 00e2 13       		.uleb128 0x13
 15484 00e3 13       		.uleb128 0x13
 15485 00e4 01       		.byte	0x1
 15486 00e5 03       		.uleb128 0x3
 15487 00e6 0E       		.uleb128 0xe
 15488 00e7 0B       		.uleb128 0xb
 15489 00e8 0B       		.uleb128 0xb
 15490 00e9 3A       		.uleb128 0x3a
 15491 00ea 0B       		.uleb128 0xb
 15492 00eb 3B       		.uleb128 0x3b
 15493 00ec 0B       		.uleb128 0xb
 15494 00ed 01       		.uleb128 0x1
 15495 00ee 13       		.uleb128 0x13
 15496 00ef 00       		.byte	0
 15497 00f0 00       		.byte	0
 15498 00f1 14       		.uleb128 0x14
 15499 00f2 0D       		.uleb128 0xd
 15500 00f3 00       		.byte	0
 15501 00f4 03       		.uleb128 0x3
 15502 00f5 0E       		.uleb128 0xe
 15503 00f6 49       		.uleb128 0x49
 15504 00f7 13       		.uleb128 0x13
 15505 00f8 38       		.uleb128 0x38
 15506 00f9 0B       		.uleb128 0xb
 15507 00fa 34       		.uleb128 0x34
 15508 00fb 19       		.uleb128 0x19
 15509 00fc 00       		.byte	0
 15510 00fd 00       		.byte	0
 15511 00fe 15       		.uleb128 0x15
 15512 00ff 0F       		.uleb128 0xf
 15513 0100 00       		.byte	0
 15514 0101 0B       		.uleb128 0xb
 15515 0102 0B       		.uleb128 0xb
 15516 0103 00       		.byte	0
 15517 0104 00       		.byte	0
 15518 0105 16       		.uleb128 0x16
 15519 0106 13       		.uleb128 0x13
 15520 0107 01       		.byte	0x1
 15521 0108 0B       		.uleb128 0xb
 15522 0109 0B       		.uleb128 0xb
 15523 010a 3A       		.uleb128 0x3a
 15524 010b 0B       		.uleb128 0xb
 15525 010c 3B       		.uleb128 0x3b
 15526 010d 05       		.uleb128 0x5
 15527 010e 01       		.uleb128 0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 414


 15528 010f 13       		.uleb128 0x13
 15529 0110 00       		.byte	0
 15530 0111 00       		.byte	0
 15531 0112 17       		.uleb128 0x17
 15532 0113 0D       		.uleb128 0xd
 15533 0114 00       		.byte	0
 15534 0115 03       		.uleb128 0x3
 15535 0116 08       		.uleb128 0x8
 15536 0117 3A       		.uleb128 0x3a
 15537 0118 0B       		.uleb128 0xb
 15538 0119 3B       		.uleb128 0x3b
 15539 011a 05       		.uleb128 0x5
 15540 011b 49       		.uleb128 0x49
 15541 011c 13       		.uleb128 0x13
 15542 011d 38       		.uleb128 0x38
 15543 011e 0B       		.uleb128 0xb
 15544 011f 00       		.byte	0
 15545 0120 00       		.byte	0
 15546 0121 18       		.uleb128 0x18
 15547 0122 2E       		.uleb128 0x2e
 15548 0123 01       		.byte	0x1
 15549 0124 03       		.uleb128 0x3
 15550 0125 0E       		.uleb128 0xe
 15551 0126 3A       		.uleb128 0x3a
 15552 0127 0B       		.uleb128 0xb
 15553 0128 3B       		.uleb128 0x3b
 15554 0129 05       		.uleb128 0x5
 15555 012a 27       		.uleb128 0x27
 15556 012b 19       		.uleb128 0x19
 15557 012c 49       		.uleb128 0x49
 15558 012d 13       		.uleb128 0x13
 15559 012e 11       		.uleb128 0x11
 15560 012f 01       		.uleb128 0x1
 15561 0130 12       		.uleb128 0x12
 15562 0131 06       		.uleb128 0x6
 15563 0132 40       		.uleb128 0x40
 15564 0133 18       		.uleb128 0x18
 15565 0134 9742     		.uleb128 0x2117
 15566 0136 19       		.uleb128 0x19
 15567 0137 01       		.uleb128 0x1
 15568 0138 13       		.uleb128 0x13
 15569 0139 00       		.byte	0
 15570 013a 00       		.byte	0
 15571 013b 19       		.uleb128 0x19
 15572 013c 05       		.uleb128 0x5
 15573 013d 00       		.byte	0
 15574 013e 03       		.uleb128 0x3
 15575 013f 08       		.uleb128 0x8
 15576 0140 3A       		.uleb128 0x3a
 15577 0141 0B       		.uleb128 0xb
 15578 0142 3B       		.uleb128 0x3b
 15579 0143 05       		.uleb128 0x5
 15580 0144 49       		.uleb128 0x49
 15581 0145 13       		.uleb128 0x13
 15582 0146 02       		.uleb128 0x2
 15583 0147 17       		.uleb128 0x17
 15584 0148 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 415


 15585 0149 00       		.byte	0
 15586 014a 1A       		.uleb128 0x1a
 15587 014b 34       		.uleb128 0x34
 15588 014c 00       		.byte	0
 15589 014d 03       		.uleb128 0x3
 15590 014e 08       		.uleb128 0x8
 15591 014f 3A       		.uleb128 0x3a
 15592 0150 0B       		.uleb128 0xb
 15593 0151 3B       		.uleb128 0x3b
 15594 0152 05       		.uleb128 0x5
 15595 0153 49       		.uleb128 0x49
 15596 0154 13       		.uleb128 0x13
 15597 0155 02       		.uleb128 0x2
 15598 0156 17       		.uleb128 0x17
 15599 0157 00       		.byte	0
 15600 0158 00       		.byte	0
 15601 0159 1B       		.uleb128 0x1b
 15602 015a 26       		.uleb128 0x26
 15603 015b 00       		.byte	0
 15604 015c 49       		.uleb128 0x49
 15605 015d 13       		.uleb128 0x13
 15606 015e 00       		.byte	0
 15607 015f 00       		.byte	0
 15608 0160 1C       		.uleb128 0x1c
 15609 0161 2E       		.uleb128 0x2e
 15610 0162 01       		.byte	0x1
 15611 0163 03       		.uleb128 0x3
 15612 0164 0E       		.uleb128 0xe
 15613 0165 3A       		.uleb128 0x3a
 15614 0166 0B       		.uleb128 0xb
 15615 0167 3B       		.uleb128 0x3b
 15616 0168 05       		.uleb128 0x5
 15617 0169 27       		.uleb128 0x27
 15618 016a 19       		.uleb128 0x19
 15619 016b 11       		.uleb128 0x11
 15620 016c 01       		.uleb128 0x1
 15621 016d 12       		.uleb128 0x12
 15622 016e 06       		.uleb128 0x6
 15623 016f 40       		.uleb128 0x40
 15624 0170 18       		.uleb128 0x18
 15625 0171 9742     		.uleb128 0x2117
 15626 0173 19       		.uleb128 0x19
 15627 0174 01       		.uleb128 0x1
 15628 0175 13       		.uleb128 0x13
 15629 0176 00       		.byte	0
 15630 0177 00       		.byte	0
 15631 0178 1D       		.uleb128 0x1d
 15632 0179 26       		.uleb128 0x26
 15633 017a 00       		.byte	0
 15634 017b 00       		.byte	0
 15635 017c 00       		.byte	0
 15636 017d 1E       		.uleb128 0x1e
 15637 017e 05       		.uleb128 0x5
 15638 017f 00       		.byte	0
 15639 0180 03       		.uleb128 0x3
 15640 0181 08       		.uleb128 0x8
 15641 0182 3A       		.uleb128 0x3a
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 416


 15642 0183 0B       		.uleb128 0xb
 15643 0184 3B       		.uleb128 0x3b
 15644 0185 05       		.uleb128 0x5
 15645 0186 49       		.uleb128 0x49
 15646 0187 13       		.uleb128 0x13
 15647 0188 02       		.uleb128 0x2
 15648 0189 18       		.uleb128 0x18
 15649 018a 00       		.byte	0
 15650 018b 00       		.byte	0
 15651 018c 1F       		.uleb128 0x1f
 15652 018d 34       		.uleb128 0x34
 15653 018e 00       		.byte	0
 15654 018f 03       		.uleb128 0x3
 15655 0190 08       		.uleb128 0x8
 15656 0191 3A       		.uleb128 0x3a
 15657 0192 0B       		.uleb128 0xb
 15658 0193 3B       		.uleb128 0x3b
 15659 0194 05       		.uleb128 0x5
 15660 0195 49       		.uleb128 0x49
 15661 0196 13       		.uleb128 0x13
 15662 0197 02       		.uleb128 0x2
 15663 0198 18       		.uleb128 0x18
 15664 0199 00       		.byte	0
 15665 019a 00       		.byte	0
 15666 019b 20       		.uleb128 0x20
 15667 019c 05       		.uleb128 0x5
 15668 019d 00       		.byte	0
 15669 019e 03       		.uleb128 0x3
 15670 019f 0E       		.uleb128 0xe
 15671 01a0 3A       		.uleb128 0x3a
 15672 01a1 0B       		.uleb128 0xb
 15673 01a2 3B       		.uleb128 0x3b
 15674 01a3 05       		.uleb128 0x5
 15675 01a4 49       		.uleb128 0x49
 15676 01a5 13       		.uleb128 0x13
 15677 01a6 02       		.uleb128 0x2
 15678 01a7 17       		.uleb128 0x17
 15679 01a8 00       		.byte	0
 15680 01a9 00       		.byte	0
 15681 01aa 21       		.uleb128 0x21
 15682 01ab 898201   		.uleb128 0x4109
 15683 01ae 01       		.byte	0x1
 15684 01af 11       		.uleb128 0x11
 15685 01b0 01       		.uleb128 0x1
 15686 01b1 31       		.uleb128 0x31
 15687 01b2 13       		.uleb128 0x13
 15688 01b3 01       		.uleb128 0x1
 15689 01b4 13       		.uleb128 0x13
 15690 01b5 00       		.byte	0
 15691 01b6 00       		.byte	0
 15692 01b7 22       		.uleb128 0x22
 15693 01b8 8A8201   		.uleb128 0x410a
 15694 01bb 00       		.byte	0
 15695 01bc 02       		.uleb128 0x2
 15696 01bd 18       		.uleb128 0x18
 15697 01be 9142     		.uleb128 0x2111
 15698 01c0 18       		.uleb128 0x18
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 417


 15699 01c1 00       		.byte	0
 15700 01c2 00       		.byte	0
 15701 01c3 23       		.uleb128 0x23
 15702 01c4 898201   		.uleb128 0x4109
 15703 01c7 01       		.byte	0x1
 15704 01c8 11       		.uleb128 0x11
 15705 01c9 01       		.uleb128 0x1
 15706 01ca 31       		.uleb128 0x31
 15707 01cb 13       		.uleb128 0x13
 15708 01cc 00       		.byte	0
 15709 01cd 00       		.byte	0
 15710 01ce 24       		.uleb128 0x24
 15711 01cf 898201   		.uleb128 0x4109
 15712 01d2 00       		.byte	0
 15713 01d3 11       		.uleb128 0x11
 15714 01d4 01       		.uleb128 0x1
 15715 01d5 31       		.uleb128 0x31
 15716 01d6 13       		.uleb128 0x13
 15717 01d7 00       		.byte	0
 15718 01d8 00       		.byte	0
 15719 01d9 25       		.uleb128 0x25
 15720 01da 34       		.uleb128 0x34
 15721 01db 00       		.byte	0
 15722 01dc 03       		.uleb128 0x3
 15723 01dd 0E       		.uleb128 0xe
 15724 01de 3A       		.uleb128 0x3a
 15725 01df 0B       		.uleb128 0xb
 15726 01e0 3B       		.uleb128 0x3b
 15727 01e1 05       		.uleb128 0x5
 15728 01e2 49       		.uleb128 0x49
 15729 01e3 13       		.uleb128 0x13
 15730 01e4 02       		.uleb128 0x2
 15731 01e5 18       		.uleb128 0x18
 15732 01e6 00       		.byte	0
 15733 01e7 00       		.byte	0
 15734 01e8 26       		.uleb128 0x26
 15735 01e9 34       		.uleb128 0x34
 15736 01ea 00       		.byte	0
 15737 01eb 03       		.uleb128 0x3
 15738 01ec 0E       		.uleb128 0xe
 15739 01ed 3A       		.uleb128 0x3a
 15740 01ee 0B       		.uleb128 0xb
 15741 01ef 3B       		.uleb128 0x3b
 15742 01f0 05       		.uleb128 0x5
 15743 01f1 49       		.uleb128 0x49
 15744 01f2 13       		.uleb128 0x13
 15745 01f3 02       		.uleb128 0x2
 15746 01f4 17       		.uleb128 0x17
 15747 01f5 00       		.byte	0
 15748 01f6 00       		.byte	0
 15749 01f7 27       		.uleb128 0x27
 15750 01f8 2E       		.uleb128 0x2e
 15751 01f9 01       		.byte	0x1
 15752 01fa 3F       		.uleb128 0x3f
 15753 01fb 19       		.uleb128 0x19
 15754 01fc 03       		.uleb128 0x3
 15755 01fd 0E       		.uleb128 0xe
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 418


 15756 01fe 3A       		.uleb128 0x3a
 15757 01ff 0B       		.uleb128 0xb
 15758 0200 3B       		.uleb128 0x3b
 15759 0201 05       		.uleb128 0x5
 15760 0202 27       		.uleb128 0x27
 15761 0203 19       		.uleb128 0x19
 15762 0204 49       		.uleb128 0x49
 15763 0205 13       		.uleb128 0x13
 15764 0206 11       		.uleb128 0x11
 15765 0207 01       		.uleb128 0x1
 15766 0208 12       		.uleb128 0x12
 15767 0209 06       		.uleb128 0x6
 15768 020a 40       		.uleb128 0x40
 15769 020b 18       		.uleb128 0x18
 15770 020c 9742     		.uleb128 0x2117
 15771 020e 19       		.uleb128 0x19
 15772 020f 01       		.uleb128 0x1
 15773 0210 13       		.uleb128 0x13
 15774 0211 00       		.byte	0
 15775 0212 00       		.byte	0
 15776 0213 28       		.uleb128 0x28
 15777 0214 18       		.uleb128 0x18
 15778 0215 00       		.byte	0
 15779 0216 00       		.byte	0
 15780 0217 00       		.byte	0
 15781 0218 29       		.uleb128 0x29
 15782 0219 34       		.uleb128 0x34
 15783 021a 00       		.byte	0
 15784 021b 03       		.uleb128 0x3
 15785 021c 0E       		.uleb128 0xe
 15786 021d 3A       		.uleb128 0x3a
 15787 021e 0B       		.uleb128 0xb
 15788 021f 3B       		.uleb128 0x3b
 15789 0220 05       		.uleb128 0x5
 15790 0221 49       		.uleb128 0x49
 15791 0222 13       		.uleb128 0x13
 15792 0223 1C       		.uleb128 0x1c
 15793 0224 0A       		.uleb128 0xa
 15794 0225 00       		.byte	0
 15795 0226 00       		.byte	0
 15796 0227 2A       		.uleb128 0x2a
 15797 0228 2E       		.uleb128 0x2e
 15798 0229 00       		.byte	0
 15799 022a 3F       		.uleb128 0x3f
 15800 022b 19       		.uleb128 0x19
 15801 022c 3C       		.uleb128 0x3c
 15802 022d 19       		.uleb128 0x19
 15803 022e 6E       		.uleb128 0x6e
 15804 022f 0E       		.uleb128 0xe
 15805 0230 03       		.uleb128 0x3
 15806 0231 0E       		.uleb128 0xe
 15807 0232 3A       		.uleb128 0x3a
 15808 0233 0B       		.uleb128 0xb
 15809 0234 3B       		.uleb128 0x3b
 15810 0235 0B       		.uleb128 0xb
 15811 0236 00       		.byte	0
 15812 0237 00       		.byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 419


 15813 0238 00       		.byte	0
 15814              		.section	.debug_loc,"",%progbits
 15815              	.Ldebug_loc0:
 15816              	.LLST0:
 15817 0000 00000000 		.4byte	.LVL0
 15818 0004 04000000 		.4byte	.LVL2
 15819 0008 0100     		.2byte	0x1
 15820 000a 50       		.byte	0x50
 15821 000b 04000000 		.4byte	.LVL2
 15822 000f 0A000000 		.4byte	.LFE0
 15823 0013 0400     		.2byte	0x4
 15824 0015 F3       		.byte	0xf3
 15825 0016 01       		.uleb128 0x1
 15826 0017 50       		.byte	0x50
 15827 0018 9F       		.byte	0x9f
 15828 0019 00000000 		.4byte	0
 15829 001d 00000000 		.4byte	0
 15830              	.LLST1:
 15831 0021 02000000 		.4byte	.LVL1
 15832 0025 04000000 		.4byte	.LVL2
 15833 0029 0600     		.2byte	0x6
 15834 002b 72       		.byte	0x72
 15835 002c 00       		.sleb128 0
 15836 002d 08       		.byte	0x8
 15837 002e FF       		.byte	0xff
 15838 002f 1A       		.byte	0x1a
 15839 0030 9F       		.byte	0x9f
 15840 0031 04000000 		.4byte	.LVL2
 15841 0035 08000000 		.4byte	.LVL3
 15842 0039 0800     		.2byte	0x8
 15843 003b 72       		.byte	0x72
 15844 003c 00       		.sleb128 0
 15845 003d 38       		.byte	0x38
 15846 003e 24       		.byte	0x24
 15847 003f 70       		.byte	0x70
 15848 0040 00       		.sleb128 0
 15849 0041 21       		.byte	0x21
 15850 0042 9F       		.byte	0x9f
 15851 0043 08000000 		.4byte	.LVL3
 15852 0047 0A000000 		.4byte	.LFE0
 15853 004b 0E00     		.2byte	0xe
 15854 004d 72       		.byte	0x72
 15855 004e 00       		.sleb128 0
 15856 004f 38       		.byte	0x38
 15857 0050 24       		.byte	0x24
 15858 0051 F3       		.byte	0xf3
 15859 0052 01       		.uleb128 0x1
 15860 0053 50       		.byte	0x50
 15861 0054 94       		.byte	0x94
 15862 0055 01       		.byte	0x1
 15863 0056 08       		.byte	0x8
 15864 0057 FF       		.byte	0xff
 15865 0058 1A       		.byte	0x1a
 15866 0059 21       		.byte	0x21
 15867 005a 9F       		.byte	0x9f
 15868 005b 00000000 		.4byte	0
 15869 005f 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 420


 15870              	.LLST2:
 15871 0063 00000000 		.4byte	.LVL4
 15872 0067 10000000 		.4byte	.LVL8
 15873 006b 0100     		.2byte	0x1
 15874 006d 50       		.byte	0x50
 15875 006e 10000000 		.4byte	.LVL8
 15876 0072 16000000 		.4byte	.LFE1
 15877 0076 0400     		.2byte	0x4
 15878 0078 F3       		.byte	0xf3
 15879 0079 01       		.uleb128 0x1
 15880 007a 50       		.byte	0x50
 15881 007b 9F       		.byte	0x9f
 15882 007c 00000000 		.4byte	0
 15883 0080 00000000 		.4byte	0
 15884              	.LLST3:
 15885 0084 02000000 		.4byte	.LVL5
 15886 0088 0E000000 		.4byte	.LVL7
 15887 008c 0100     		.2byte	0x1
 15888 008e 52       		.byte	0x52
 15889 008f 0E000000 		.4byte	.LVL7
 15890 0093 10000000 		.4byte	.LVL8
 15891 0097 0100     		.2byte	0x1
 15892 0099 53       		.byte	0x53
 15893 009a 10000000 		.4byte	.LVL8
 15894 009e 14000000 		.4byte	.LVL9
 15895 00a2 0800     		.2byte	0x8
 15896 00a4 73       		.byte	0x73
 15897 00a5 00       		.sleb128 0
 15898 00a6 38       		.byte	0x38
 15899 00a7 24       		.byte	0x24
 15900 00a8 70       		.byte	0x70
 15901 00a9 00       		.sleb128 0
 15902 00aa 21       		.byte	0x21
 15903 00ab 9F       		.byte	0x9f
 15904 00ac 14000000 		.4byte	.LVL9
 15905 00b0 16000000 		.4byte	.LFE1
 15906 00b4 0100     		.2byte	0x1
 15907 00b6 50       		.byte	0x50
 15908 00b7 00000000 		.4byte	0
 15909 00bb 00000000 		.4byte	0
 15910              	.LLST4:
 15911 00bf 00000000 		.4byte	.LVL10
 15912 00c3 00000000 		.4byte	.LVL10
 15913 00c7 0100     		.2byte	0x1
 15914 00c9 50       		.byte	0x50
 15915 00ca 00000000 		.4byte	.LVL10
 15916 00ce 02000000 		.4byte	.LVL11
 15917 00d2 0300     		.2byte	0x3
 15918 00d4 70       		.byte	0x70
 15919 00d5 01       		.sleb128 1
 15920 00d6 9F       		.byte	0x9f
 15921 00d7 02000000 		.4byte	.LVL11
 15922 00db 08000000 		.4byte	.LFE2
 15923 00df 0300     		.2byte	0x3
 15924 00e1 70       		.byte	0x70
 15925 00e2 02       		.sleb128 2
 15926 00e3 9F       		.byte	0x9f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 421


 15927 00e4 00000000 		.4byte	0
 15928 00e8 00000000 		.4byte	0
 15929              	.LLST5:
 15930 00ec 00000000 		.4byte	.LVL10
 15931 00f0 02000000 		.4byte	.LVL11
 15932 00f4 0100     		.2byte	0x1
 15933 00f6 51       		.byte	0x51
 15934 00f7 02000000 		.4byte	.LVL11
 15935 00fb 04000000 		.4byte	.LVL12
 15936 00ff 0500     		.2byte	0x5
 15937 0101 71       		.byte	0x71
 15938 0102 00       		.sleb128 0
 15939 0103 38       		.byte	0x38
 15940 0104 25       		.byte	0x25
 15941 0105 9F       		.byte	0x9f
 15942 0106 00000000 		.4byte	0
 15943 010a 00000000 		.4byte	0
 15944              	.LLST6:
 15945 010e 00000000 		.4byte	.LVL13
 15946 0112 00000000 		.4byte	.LVL13
 15947 0116 0100     		.2byte	0x1
 15948 0118 50       		.byte	0x50
 15949 0119 00000000 		.4byte	.LVL13
 15950 011d 02000000 		.4byte	.LVL14
 15951 0121 0300     		.2byte	0x3
 15952 0123 70       		.byte	0x70
 15953 0124 01       		.sleb128 1
 15954 0125 9F       		.byte	0x9f
 15955 0126 02000000 		.4byte	.LVL14
 15956 012a 08000000 		.4byte	.LVL15
 15957 012e 0300     		.2byte	0x3
 15958 0130 70       		.byte	0x70
 15959 0131 02       		.sleb128 2
 15960 0132 9F       		.byte	0x9f
 15961 0133 08000000 		.4byte	.LVL15
 15962 0137 0E000000 		.4byte	.LVL16
 15963 013b 0300     		.2byte	0x3
 15964 013d 70       		.byte	0x70
 15965 013e 03       		.sleb128 3
 15966 013f 9F       		.byte	0x9f
 15967 0140 0E000000 		.4byte	.LVL16
 15968 0144 14000000 		.4byte	.LFE3
 15969 0148 0300     		.2byte	0x3
 15970 014a 70       		.byte	0x70
 15971 014b 04       		.sleb128 4
 15972 014c 9F       		.byte	0x9f
 15973 014d 00000000 		.4byte	0
 15974 0151 00000000 		.4byte	0
 15975              	.LLST7:
 15976 0155 00000000 		.4byte	.LVL13
 15977 0159 02000000 		.4byte	.LVL14
 15978 015d 0100     		.2byte	0x1
 15979 015f 51       		.byte	0x51
 15980 0160 02000000 		.4byte	.LVL14
 15981 0164 08000000 		.4byte	.LVL15
 15982 0168 0500     		.2byte	0x5
 15983 016a 71       		.byte	0x71
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 422


 15984 016b 00       		.sleb128 0
 15985 016c 38       		.byte	0x38
 15986 016d 25       		.byte	0x25
 15987 016e 9F       		.byte	0x9f
 15988 016f 08000000 		.4byte	.LVL15
 15989 0173 0E000000 		.4byte	.LVL16
 15990 0177 0500     		.2byte	0x5
 15991 0179 71       		.byte	0x71
 15992 017a 00       		.sleb128 0
 15993 017b 40       		.byte	0x40
 15994 017c 25       		.byte	0x25
 15995 017d 9F       		.byte	0x9f
 15996 017e 0E000000 		.4byte	.LVL16
 15997 0182 10000000 		.4byte	.LVL17
 15998 0186 0500     		.2byte	0x5
 15999 0188 71       		.byte	0x71
 16000 0189 00       		.sleb128 0
 16001 018a 48       		.byte	0x48
 16002 018b 25       		.byte	0x25
 16003 018c 9F       		.byte	0x9f
 16004 018d 10000000 		.4byte	.LVL17
 16005 0191 14000000 		.4byte	.LFE3
 16006 0195 0100     		.2byte	0x1
 16007 0197 51       		.byte	0x51
 16008 0198 00000000 		.4byte	0
 16009 019c 00000000 		.4byte	0
 16010              	.LLST8:
 16011 01a0 00000000 		.4byte	.LVL18
 16012 01a4 04000000 		.4byte	.LVL19
 16013 01a8 0100     		.2byte	0x1
 16014 01aa 50       		.byte	0x50
 16015 01ab 04000000 		.4byte	.LVL19
 16016 01af 12000000 		.4byte	.LFE4
 16017 01b3 0400     		.2byte	0x4
 16018 01b5 F3       		.byte	0xf3
 16019 01b6 01       		.uleb128 0x1
 16020 01b7 50       		.byte	0x50
 16021 01b8 9F       		.byte	0x9f
 16022 01b9 00000000 		.4byte	0
 16023 01bd 00000000 		.4byte	0
 16024              	.LLST9:
 16025 01c1 00000000 		.4byte	.LVL18
 16026 01c5 04000000 		.4byte	.LVL19
 16027 01c9 0100     		.2byte	0x1
 16028 01cb 51       		.byte	0x51
 16029 01cc 04000000 		.4byte	.LVL19
 16030 01d0 12000000 		.4byte	.LFE4
 16031 01d4 0400     		.2byte	0x4
 16032 01d6 F3       		.byte	0xf3
 16033 01d7 01       		.uleb128 0x1
 16034 01d8 51       		.byte	0x51
 16035 01d9 9F       		.byte	0x9f
 16036 01da 00000000 		.4byte	0
 16037 01de 00000000 		.4byte	0
 16038              	.LLST10:
 16039 01e2 00000000 		.4byte	.LVL18
 16040 01e6 04000000 		.4byte	.LVL19
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 423


 16041 01ea 0100     		.2byte	0x1
 16042 01ec 52       		.byte	0x52
 16043 01ed 04000000 		.4byte	.LVL19
 16044 01f1 08000000 		.4byte	.LVL20
 16045 01f5 0100     		.2byte	0x1
 16046 01f7 53       		.byte	0x53
 16047 01f8 08000000 		.4byte	.LVL20
 16048 01fc 0E000000 		.4byte	.LVL23
 16049 0200 0300     		.2byte	0x3
 16050 0202 73       		.byte	0x73
 16051 0203 7F       		.sleb128 -1
 16052 0204 9F       		.byte	0x9f
 16053 0205 0E000000 		.4byte	.LVL23
 16054 0209 12000000 		.4byte	.LFE4
 16055 020d 0100     		.2byte	0x1
 16056 020f 53       		.byte	0x53
 16057 0210 00000000 		.4byte	0
 16058 0214 00000000 		.4byte	0
 16059              	.LLST11:
 16060 0218 00000000 		.4byte	.LVL18
 16061 021c 04000000 		.4byte	.LVL19
 16062 0220 0100     		.2byte	0x1
 16063 0222 50       		.byte	0x50
 16064 0223 04000000 		.4byte	.LVL19
 16065 0227 0A000000 		.4byte	.LVL21
 16066 022b 0300     		.2byte	0x3
 16067 022d 70       		.byte	0x70
 16068 022e 01       		.sleb128 1
 16069 022f 9F       		.byte	0x9f
 16070 0230 0A000000 		.4byte	.LVL21
 16071 0234 12000000 		.4byte	.LFE4
 16072 0238 0100     		.2byte	0x1
 16073 023a 50       		.byte	0x50
 16074 023b 00000000 		.4byte	0
 16075 023f 00000000 		.4byte	0
 16076              	.LLST12:
 16077 0243 00000000 		.4byte	.LVL18
 16078 0247 04000000 		.4byte	.LVL19
 16079 024b 0100     		.2byte	0x1
 16080 024d 51       		.byte	0x51
 16081 024e 04000000 		.4byte	.LVL19
 16082 0252 0C000000 		.4byte	.LVL22
 16083 0256 0300     		.2byte	0x3
 16084 0258 71       		.byte	0x71
 16085 0259 01       		.sleb128 1
 16086 025a 9F       		.byte	0x9f
 16087 025b 0C000000 		.4byte	.LVL22
 16088 025f 12000000 		.4byte	.LFE4
 16089 0263 0100     		.2byte	0x1
 16090 0265 51       		.byte	0x51
 16091 0266 00000000 		.4byte	0
 16092 026a 00000000 		.4byte	0
 16093              	.LLST13:
 16094 026e 00000000 		.4byte	.LVL24
 16095 0272 00000000 		.4byte	.LVL24
 16096 0276 0100     		.2byte	0x1
 16097 0278 52       		.byte	0x52
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 424


 16098 0279 00000000 		.4byte	.LVL24
 16099 027d 02000000 		.4byte	.LVL25
 16100 0281 0400     		.2byte	0x4
 16101 0283 F3       		.byte	0xf3
 16102 0284 01       		.uleb128 0x1
 16103 0285 52       		.byte	0x52
 16104 0286 9F       		.byte	0x9f
 16105 0287 02000000 		.4byte	.LVL25
 16106 028b 06000000 		.4byte	.LVL27
 16107 028f 0600     		.2byte	0x6
 16108 0291 F3       		.byte	0xf3
 16109 0292 01       		.uleb128 0x1
 16110 0293 52       		.byte	0x52
 16111 0294 31       		.byte	0x31
 16112 0295 1C       		.byte	0x1c
 16113 0296 9F       		.byte	0x9f
 16114 0297 06000000 		.4byte	.LVL27
 16115 029b 0A000000 		.4byte	.LFE5
 16116 029f 0100     		.2byte	0x1
 16117 02a1 52       		.byte	0x52
 16118 02a2 00000000 		.4byte	0
 16119 02a6 00000000 		.4byte	0
 16120              	.LLST14:
 16121 02aa 00000000 		.4byte	.LVL24
 16122 02ae 04000000 		.4byte	.LVL26
 16123 02b2 0600     		.2byte	0x6
 16124 02b4 F3       		.byte	0xf3
 16125 02b5 01       		.uleb128 0x1
 16126 02b6 50       		.byte	0x50
 16127 02b7 23       		.byte	0x23
 16128 02b8 01       		.uleb128 0x1
 16129 02b9 9F       		.byte	0x9f
 16130 02ba 04000000 		.4byte	.LVL26
 16131 02be 0A000000 		.4byte	.LFE5
 16132 02c2 0100     		.2byte	0x1
 16133 02c4 50       		.byte	0x50
 16134 02c5 00000000 		.4byte	0
 16135 02c9 00000000 		.4byte	0
 16136              	.LLST15:
 16137 02cd 00000000 		.4byte	.LVL28
 16138 02d1 02000000 		.4byte	.LVL29
 16139 02d5 0100     		.2byte	0x1
 16140 02d7 50       		.byte	0x50
 16141 02d8 02000000 		.4byte	.LVL29
 16142 02dc 1E000000 		.4byte	.LFE6
 16143 02e0 0400     		.2byte	0x4
 16144 02e2 F3       		.byte	0xf3
 16145 02e3 01       		.uleb128 0x1
 16146 02e4 50       		.byte	0x50
 16147 02e5 9F       		.byte	0x9f
 16148 02e6 00000000 		.4byte	0
 16149 02ea 00000000 		.4byte	0
 16150              	.LLST16:
 16151 02ee 00000000 		.4byte	.LVL28
 16152 02f2 02000000 		.4byte	.LVL29
 16153 02f6 0100     		.2byte	0x1
 16154 02f8 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 425


 16155 02f9 02000000 		.4byte	.LVL29
 16156 02fd 1E000000 		.4byte	.LFE6
 16157 0301 0400     		.2byte	0x4
 16158 0303 F3       		.byte	0xf3
 16159 0304 01       		.uleb128 0x1
 16160 0305 51       		.byte	0x51
 16161 0306 9F       		.byte	0x9f
 16162 0307 00000000 		.4byte	0
 16163 030b 00000000 		.4byte	0
 16164              	.LLST17:
 16165 030f 00000000 		.4byte	.LVL28
 16166 0313 0A000000 		.4byte	.LVL32
 16167 0317 0100     		.2byte	0x1
 16168 0319 52       		.byte	0x52
 16169 031a 0A000000 		.4byte	.LVL32
 16170 031e 0C000000 		.4byte	.LVL33
 16171 0322 0300     		.2byte	0x3
 16172 0324 72       		.byte	0x72
 16173 0325 7F       		.sleb128 -1
 16174 0326 9F       		.byte	0x9f
 16175 0327 0C000000 		.4byte	.LVL33
 16176 032b 1E000000 		.4byte	.LFE6
 16177 032f 0100     		.2byte	0x1
 16178 0331 52       		.byte	0x52
 16179 0332 00000000 		.4byte	0
 16180 0336 00000000 		.4byte	0
 16181              	.LLST18:
 16182 033a 02000000 		.4byte	.LVL29
 16183 033e 04000000 		.4byte	.LVL30
 16184 0342 0100     		.2byte	0x1
 16185 0344 50       		.byte	0x50
 16186 0345 04000000 		.4byte	.LVL30
 16187 0349 1C000000 		.4byte	.LVL36
 16188 034d 0100     		.2byte	0x1
 16189 034f 55       		.byte	0x55
 16190 0350 00000000 		.4byte	0
 16191 0354 00000000 		.4byte	0
 16192              	.LLST19:
 16193 0358 02000000 		.4byte	.LVL29
 16194 035c 06000000 		.4byte	.LVL31
 16195 0360 0100     		.2byte	0x1
 16196 0362 51       		.byte	0x51
 16197 0363 06000000 		.4byte	.LVL31
 16198 0367 10000000 		.4byte	.LVL34
 16199 036b 0300     		.2byte	0x3
 16200 036d 71       		.byte	0x71
 16201 036e 01       		.sleb128 1
 16202 036f 9F       		.byte	0x9f
 16203 0370 10000000 		.4byte	.LVL34
 16204 0374 18000000 		.4byte	.LVL35
 16205 0378 0100     		.2byte	0x1
 16206 037a 54       		.byte	0x54
 16207 037b 00000000 		.4byte	0
 16208 037f 00000000 		.4byte	0
 16209              	.LLST20:
 16210 0383 00000000 		.4byte	.LVL37
 16211 0387 04000000 		.4byte	.LVL38
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 426


 16212 038b 0100     		.2byte	0x1
 16213 038d 50       		.byte	0x50
 16214 038e 04000000 		.4byte	.LVL38
 16215 0392 0E000000 		.4byte	.LVL39
 16216 0396 0100     		.2byte	0x1
 16217 0398 50       		.byte	0x50
 16218 0399 00000000 		.4byte	0
 16219 039d 00000000 		.4byte	0
 16220              	.LLST21:
 16221 03a1 00000000 		.4byte	.LVL40
 16222 03a5 12000000 		.4byte	.LVL41
 16223 03a9 0100     		.2byte	0x1
 16224 03ab 50       		.byte	0x50
 16225 03ac 12000000 		.4byte	.LVL41
 16226 03b0 14000000 		.4byte	.LVL42
 16227 03b4 0400     		.2byte	0x4
 16228 03b6 F3       		.byte	0xf3
 16229 03b7 01       		.uleb128 0x1
 16230 03b8 50       		.byte	0x50
 16231 03b9 9F       		.byte	0x9f
 16232 03ba 14000000 		.4byte	.LVL42
 16233 03be 16000000 		.4byte	.LVL43
 16234 03c2 0100     		.2byte	0x1
 16235 03c4 50       		.byte	0x50
 16236 03c5 16000000 		.4byte	.LVL43
 16237 03c9 18000000 		.4byte	.LVL44
 16238 03cd 0400     		.2byte	0x4
 16239 03cf F3       		.byte	0xf3
 16240 03d0 01       		.uleb128 0x1
 16241 03d1 50       		.byte	0x50
 16242 03d2 9F       		.byte	0x9f
 16243 03d3 18000000 		.4byte	.LVL44
 16244 03d7 1A000000 		.4byte	.LVL45
 16245 03db 0100     		.2byte	0x1
 16246 03dd 50       		.byte	0x50
 16247 03de 1A000000 		.4byte	.LVL45
 16248 03e2 1C000000 		.4byte	.LVL46
 16249 03e6 0400     		.2byte	0x4
 16250 03e8 F3       		.byte	0xf3
 16251 03e9 01       		.uleb128 0x1
 16252 03ea 50       		.byte	0x50
 16253 03eb 9F       		.byte	0x9f
 16254 03ec 1C000000 		.4byte	.LVL46
 16255 03f0 1E000000 		.4byte	.LVL47
 16256 03f4 0100     		.2byte	0x1
 16257 03f6 50       		.byte	0x50
 16258 03f7 1E000000 		.4byte	.LVL47
 16259 03fb 20000000 		.4byte	.LVL48
 16260 03ff 0400     		.2byte	0x4
 16261 0401 F3       		.byte	0xf3
 16262 0402 01       		.uleb128 0x1
 16263 0403 50       		.byte	0x50
 16264 0404 9F       		.byte	0x9f
 16265 0405 20000000 		.4byte	.LVL48
 16266 0409 22000000 		.4byte	.LVL49
 16267 040d 0100     		.2byte	0x1
 16268 040f 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 427


 16269 0410 22000000 		.4byte	.LVL49
 16270 0414 24000000 		.4byte	.LFE8
 16271 0418 0400     		.2byte	0x4
 16272 041a F3       		.byte	0xf3
 16273 041b 01       		.uleb128 0x1
 16274 041c 50       		.byte	0x50
 16275 041d 9F       		.byte	0x9f
 16276 041e 00000000 		.4byte	0
 16277 0422 00000000 		.4byte	0
 16278              	.LLST22:
 16279 0426 00000000 		.4byte	.LVL50
 16280 042a 14000000 		.4byte	.LVL51
 16281 042e 0100     		.2byte	0x1
 16282 0430 50       		.byte	0x50
 16283 0431 14000000 		.4byte	.LVL51
 16284 0435 16000000 		.4byte	.LVL52
 16285 0439 0400     		.2byte	0x4
 16286 043b F3       		.byte	0xf3
 16287 043c 01       		.uleb128 0x1
 16288 043d 50       		.byte	0x50
 16289 043e 9F       		.byte	0x9f
 16290 043f 16000000 		.4byte	.LVL52
 16291 0443 18000000 		.4byte	.LVL53
 16292 0447 0100     		.2byte	0x1
 16293 0449 50       		.byte	0x50
 16294 044a 18000000 		.4byte	.LVL53
 16295 044e 1A000000 		.4byte	.LVL54
 16296 0452 0400     		.2byte	0x4
 16297 0454 F3       		.byte	0xf3
 16298 0455 01       		.uleb128 0x1
 16299 0456 50       		.byte	0x50
 16300 0457 9F       		.byte	0x9f
 16301 0458 1A000000 		.4byte	.LVL54
 16302 045c 1C000000 		.4byte	.LVL55
 16303 0460 0100     		.2byte	0x1
 16304 0462 50       		.byte	0x50
 16305 0463 1C000000 		.4byte	.LVL55
 16306 0467 1E000000 		.4byte	.LVL56
 16307 046b 0400     		.2byte	0x4
 16308 046d F3       		.byte	0xf3
 16309 046e 01       		.uleb128 0x1
 16310 046f 50       		.byte	0x50
 16311 0470 9F       		.byte	0x9f
 16312 0471 1E000000 		.4byte	.LVL56
 16313 0475 20000000 		.4byte	.LVL57
 16314 0479 0100     		.2byte	0x1
 16315 047b 50       		.byte	0x50
 16316 047c 20000000 		.4byte	.LVL57
 16317 0480 22000000 		.4byte	.LVL58
 16318 0484 0400     		.2byte	0x4
 16319 0486 F3       		.byte	0xf3
 16320 0487 01       		.uleb128 0x1
 16321 0488 50       		.byte	0x50
 16322 0489 9F       		.byte	0x9f
 16323 048a 22000000 		.4byte	.LVL58
 16324 048e 24000000 		.4byte	.LVL59
 16325 0492 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 428


 16326 0494 50       		.byte	0x50
 16327 0495 24000000 		.4byte	.LVL59
 16328 0499 26000000 		.4byte	.LFE9
 16329 049d 0400     		.2byte	0x4
 16330 049f F3       		.byte	0xf3
 16331 04a0 01       		.uleb128 0x1
 16332 04a1 50       		.byte	0x50
 16333 04a2 9F       		.byte	0x9f
 16334 04a3 00000000 		.4byte	0
 16335 04a7 00000000 		.4byte	0
 16336              	.LLST23:
 16337 04ab 00000000 		.4byte	.LVL60
 16338 04af 0E000000 		.4byte	.LVL62
 16339 04b3 0100     		.2byte	0x1
 16340 04b5 50       		.byte	0x50
 16341 04b6 0E000000 		.4byte	.LVL62
 16342 04ba 14000000 		.4byte	.LVL63
 16343 04be 0400     		.2byte	0x4
 16344 04c0 F3       		.byte	0xf3
 16345 04c1 01       		.uleb128 0x1
 16346 04c2 50       		.byte	0x50
 16347 04c3 9F       		.byte	0x9f
 16348 04c4 14000000 		.4byte	.LVL63
 16349 04c8 16000000 		.4byte	.LVL64
 16350 04cc 0100     		.2byte	0x1
 16351 04ce 50       		.byte	0x50
 16352 04cf 16000000 		.4byte	.LVL64
 16353 04d3 18000000 		.4byte	.LFE13
 16354 04d7 0400     		.2byte	0x4
 16355 04d9 F3       		.byte	0xf3
 16356 04da 01       		.uleb128 0x1
 16357 04db 50       		.byte	0x50
 16358 04dc 9F       		.byte	0x9f
 16359 04dd 00000000 		.4byte	0
 16360 04e1 00000000 		.4byte	0
 16361              	.LLST24:
 16362 04e5 00000000 		.4byte	.LVL60
 16363 04e9 02000000 		.4byte	.LVL61
 16364 04ed 0100     		.2byte	0x1
 16365 04ef 51       		.byte	0x51
 16366 04f0 02000000 		.4byte	.LVL61
 16367 04f4 18000000 		.4byte	.LFE13
 16368 04f8 0100     		.2byte	0x1
 16369 04fa 51       		.byte	0x51
 16370 04fb 00000000 		.4byte	0
 16371 04ff 00000000 		.4byte	0
 16372              	.LLST25:
 16373 0503 00000000 		.4byte	.LVL65
 16374 0507 0A000000 		.4byte	.LVL66
 16375 050b 0100     		.2byte	0x1
 16376 050d 50       		.byte	0x50
 16377 050e 0A000000 		.4byte	.LVL66
 16378 0512 24000000 		.4byte	.LFE22
 16379 0516 0100     		.2byte	0x1
 16380 0518 56       		.byte	0x56
 16381 0519 00000000 		.4byte	0
 16382 051d 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 429


 16383              	.LLST26:
 16384 0521 00000000 		.4byte	.LVL65
 16385 0525 0D000000 		.4byte	.LVL67-1
 16386 0529 0100     		.2byte	0x1
 16387 052b 51       		.byte	0x51
 16388 052c 0D000000 		.4byte	.LVL67-1
 16389 0530 24000000 		.4byte	.LFE22
 16390 0534 0100     		.2byte	0x1
 16391 0536 55       		.byte	0x55
 16392 0537 00000000 		.4byte	0
 16393 053b 00000000 		.4byte	0
 16394              	.LLST27:
 16395 053f 10000000 		.4byte	.LVL68
 16396 0543 1A000000 		.4byte	.LVL69
 16397 0547 0100     		.2byte	0x1
 16398 0549 50       		.byte	0x50
 16399 054a 1A000000 		.4byte	.LVL69
 16400 054e 22000000 		.4byte	.LVL71
 16401 0552 0100     		.2byte	0x1
 16402 0554 54       		.byte	0x54
 16403 0555 22000000 		.4byte	.LVL71
 16404 0559 24000000 		.4byte	.LFE22
 16405 055d 0100     		.2byte	0x1
 16406 055f 50       		.byte	0x50
 16407 0560 00000000 		.4byte	0
 16408 0564 00000000 		.4byte	0
 16409              	.LLST28:
 16410 0568 00000000 		.4byte	.LVL72
 16411 056c 0E000000 		.4byte	.LVL74
 16412 0570 0100     		.2byte	0x1
 16413 0572 50       		.byte	0x50
 16414 0573 0E000000 		.4byte	.LVL74
 16415 0577 24000000 		.4byte	.LFE23
 16416 057b 0100     		.2byte	0x1
 16417 057d 56       		.byte	0x56
 16418 057e 00000000 		.4byte	0
 16419 0582 00000000 		.4byte	0
 16420              	.LLST29:
 16421 0586 00000000 		.4byte	.LVL72
 16422 058a 0A000000 		.4byte	.LVL73
 16423 058e 0100     		.2byte	0x1
 16424 0590 51       		.byte	0x51
 16425 0591 0A000000 		.4byte	.LVL73
 16426 0595 24000000 		.4byte	.LFE23
 16427 0599 0100     		.2byte	0x1
 16428 059b 54       		.byte	0x54
 16429 059c 00000000 		.4byte	0
 16430 05a0 00000000 		.4byte	0
 16431              	.LLST30:
 16432 05a4 00000000 		.4byte	.LVL72
 16433 05a8 11000000 		.4byte	.LVL75-1
 16434 05ac 0100     		.2byte	0x1
 16435 05ae 52       		.byte	0x52
 16436 05af 11000000 		.4byte	.LVL75-1
 16437 05b3 24000000 		.4byte	.LFE23
 16438 05b7 0100     		.2byte	0x1
 16439 05b9 55       		.byte	0x55
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 430


 16440 05ba 00000000 		.4byte	0
 16441 05be 00000000 		.4byte	0
 16442              	.LLST31:
 16443 05c2 00000000 		.4byte	.LVL77
 16444 05c6 4A000000 		.4byte	.LVL88
 16445 05ca 0100     		.2byte	0x1
 16446 05cc 50       		.byte	0x50
 16447 05cd 4A000000 		.4byte	.LVL88
 16448 05d1 68000000 		.4byte	.LVL92
 16449 05d5 0100     		.2byte	0x1
 16450 05d7 55       		.byte	0x55
 16451 05d8 68000000 		.4byte	.LVL92
 16452 05dc 6A000000 		.4byte	.LFE28
 16453 05e0 0100     		.2byte	0x1
 16454 05e2 50       		.byte	0x50
 16455 05e3 00000000 		.4byte	0
 16456 05e7 00000000 		.4byte	0
 16457              	.LLST32:
 16458 05eb 00000000 		.4byte	.LVL77
 16459 05ef 4F000000 		.4byte	.LVL89-1
 16460 05f3 0100     		.2byte	0x1
 16461 05f5 51       		.byte	0x51
 16462 05f6 4F000000 		.4byte	.LVL89-1
 16463 05fa 68000000 		.4byte	.LVL92
 16464 05fe 0100     		.2byte	0x1
 16465 0600 56       		.byte	0x56
 16466 0601 68000000 		.4byte	.LVL92
 16467 0605 6A000000 		.4byte	.LFE28
 16468 0609 0100     		.2byte	0x1
 16469 060b 51       		.byte	0x51
 16470 060c 00000000 		.4byte	0
 16471 0610 00000000 		.4byte	0
 16472              	.LLST33:
 16473 0614 10000000 		.4byte	.LVL78
 16474 0618 14000000 		.4byte	.LVL79
 16475 061c 0100     		.2byte	0x1
 16476 061e 53       		.byte	0x53
 16477 061f 14000000 		.4byte	.LVL79
 16478 0623 34000000 		.4byte	.LVL85
 16479 0627 0100     		.2byte	0x1
 16480 0629 52       		.byte	0x52
 16481 062a 34000000 		.4byte	.LVL85
 16482 062e 40000000 		.4byte	.LVL87
 16483 0632 0100     		.2byte	0x1
 16484 0634 53       		.byte	0x53
 16485 0635 00000000 		.4byte	0
 16486 0639 00000000 		.4byte	0
 16487              	.LLST34:
 16488 063d 10000000 		.4byte	.LVL78
 16489 0641 24000000 		.4byte	.LVL82
 16490 0645 0100     		.2byte	0x1
 16491 0647 54       		.byte	0x54
 16492 0648 24000000 		.4byte	.LVL82
 16493 064c 32000000 		.4byte	.LVL84
 16494 0650 0300     		.2byte	0x3
 16495 0652 74       		.byte	0x74
 16496 0653 01       		.sleb128 1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 431


 16497 0654 9F       		.byte	0x9f
 16498 0655 32000000 		.4byte	.LVL84
 16499 0659 3E000000 		.4byte	.LVL86
 16500 065d 0100     		.2byte	0x1
 16501 065f 54       		.byte	0x54
 16502 0660 00000000 		.4byte	0
 16503 0664 00000000 		.4byte	0
 16504              	.LLST35:
 16505 0668 16000000 		.4byte	.LVL80
 16506 066c 34000000 		.4byte	.LVL85
 16507 0670 0100     		.2byte	0x1
 16508 0672 53       		.byte	0x53
 16509 0673 00000000 		.4byte	0
 16510 0677 00000000 		.4byte	0
 16511              	.LLST36:
 16512 067b 00000000 		.4byte	.LVL93
 16513 067f 16000000 		.4byte	.LVL97
 16514 0683 0100     		.2byte	0x1
 16515 0685 50       		.byte	0x50
 16516 0686 16000000 		.4byte	.LVL97
 16517 068a 44010000 		.4byte	.LVL138
 16518 068e 0200     		.2byte	0x2
 16519 0690 91       		.byte	0x91
 16520 0691 54       		.sleb128 -44
 16521 0692 44010000 		.4byte	.LVL138
 16522 0696 48010000 		.4byte	.LFE29
 16523 069a 0200     		.2byte	0x2
 16524 069c 7D       		.byte	0x7d
 16525 069d 54       		.sleb128 -44
 16526 069e 00000000 		.4byte	0
 16527 06a2 00000000 		.4byte	0
 16528              	.LLST37:
 16529 06a6 00000000 		.4byte	.LVL93
 16530 06aa 14000000 		.4byte	.LVL96
 16531 06ae 0100     		.2byte	0x1
 16532 06b0 51       		.byte	0x51
 16533 06b1 14000000 		.4byte	.LVL96
 16534 06b5 44010000 		.4byte	.LVL138
 16535 06b9 0100     		.2byte	0x1
 16536 06bb 5B       		.byte	0x5b
 16537 06bc 44010000 		.4byte	.LVL138
 16538 06c0 48010000 		.4byte	.LFE29
 16539 06c4 0400     		.2byte	0x4
 16540 06c6 F3       		.byte	0xf3
 16541 06c7 01       		.uleb128 0x1
 16542 06c8 51       		.byte	0x51
 16543 06c9 9F       		.byte	0x9f
 16544 06ca 00000000 		.4byte	0
 16545 06ce 00000000 		.4byte	0
 16546              	.LLST38:
 16547 06d2 28000000 		.4byte	.LVL101
 16548 06d6 36000000 		.4byte	.LVL103
 16549 06da 0100     		.2byte	0x1
 16550 06dc 53       		.byte	0x53
 16551 06dd 36000000 		.4byte	.LVL103
 16552 06e1 38000000 		.4byte	.LVL104
 16553 06e5 0500     		.2byte	0x5
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 432


 16554 06e7 79       		.byte	0x79
 16555 06e8 00       		.sleb128 0
 16556 06e9 71       		.byte	0x71
 16557 06ea 00       		.sleb128 0
 16558 06eb 22       		.byte	0x22
 16559 06ec 38000000 		.4byte	.LVL104
 16560 06f0 3A000000 		.4byte	.LVL105
 16561 06f4 0700     		.2byte	0x7
 16562 06f6 79       		.byte	0x79
 16563 06f7 00       		.sleb128 0
 16564 06f8 71       		.byte	0x71
 16565 06f9 00       		.sleb128 0
 16566 06fa 22       		.byte	0x22
 16567 06fb 31       		.byte	0x31
 16568 06fc 1C       		.byte	0x1c
 16569 06fd 3A000000 		.4byte	.LVL105
 16570 0701 52000000 		.4byte	.LVL107
 16571 0705 0100     		.2byte	0x1
 16572 0707 53       		.byte	0x53
 16573 0708 54000000 		.4byte	.LVL108
 16574 070c 56000000 		.4byte	.LVL109
 16575 0710 0100     		.2byte	0x1
 16576 0712 53       		.byte	0x53
 16577 0713 70000000 		.4byte	.LVL114
 16578 0717 EA000000 		.4byte	.LVL128
 16579 071b 0100     		.2byte	0x1
 16580 071d 54       		.byte	0x54
 16581 071e EA000000 		.4byte	.LVL128
 16582 0722 EC000000 		.4byte	.LVL129
 16583 0726 0300     		.2byte	0x3
 16584 0728 74       		.byte	0x74
 16585 0729 20       		.sleb128 32
 16586 072a 9F       		.byte	0x9f
 16587 072b EC000000 		.4byte	.LVL129
 16588 072f 24010000 		.4byte	.LVL132
 16589 0733 0100     		.2byte	0x1
 16590 0735 54       		.byte	0x54
 16591 0736 24010000 		.4byte	.LVL132
 16592 073a 28010000 		.4byte	.LVL133
 16593 073e 0100     		.2byte	0x1
 16594 0740 53       		.byte	0x53
 16595 0741 28010000 		.4byte	.LVL133
 16596 0745 3E010000 		.4byte	.LVL137
 16597 0749 0100     		.2byte	0x1
 16598 074b 54       		.byte	0x54
 16599 074c 00000000 		.4byte	0
 16600 0750 00000000 		.4byte	0
 16601              	.LLST39:
 16602 0754 B6000000 		.4byte	.LVL121
 16603 0758 D4000000 		.4byte	.LVL126
 16604 075c 0100     		.2byte	0x1
 16605 075e 57       		.byte	0x57
 16606 075f 30010000 		.4byte	.LVL134
 16607 0763 38010000 		.4byte	.LVL135
 16608 0767 0100     		.2byte	0x1
 16609 0769 57       		.byte	0x57
 16610 076a 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 433


 16611 076e 00000000 		.4byte	0
 16612              	.LLST40:
 16613 0772 10000000 		.4byte	.LVL95
 16614 0776 44010000 		.4byte	.LVL138
 16615 077a 0100     		.2byte	0x1
 16616 077c 59       		.byte	0x59
 16617 077d 44010000 		.4byte	.LVL138
 16618 0781 48010000 		.4byte	.LFE29
 16619 0785 0600     		.2byte	0x6
 16620 0787 7D       		.byte	0x7d
 16621 0788 54       		.sleb128 -44
 16622 0789 06       		.byte	0x6
 16623 078a 23       		.byte	0x23
 16624 078b 20       		.uleb128 0x20
 16625 078c 9F       		.byte	0x9f
 16626 078d 00000000 		.4byte	0
 16627 0791 00000000 		.4byte	0
 16628              	.LLST41:
 16629 0795 1A000000 		.4byte	.LVL98
 16630 0799 68000000 		.4byte	.LVL112
 16631 079d 0200     		.2byte	0x2
 16632 079f 38       		.byte	0x38
 16633 07a0 9F       		.byte	0x9f
 16634 07a1 68000000 		.4byte	.LVL112
 16635 07a5 A6000000 		.4byte	.LVL117
 16636 07a9 0100     		.2byte	0x1
 16637 07ab 5A       		.byte	0x5a
 16638 07ac A8000000 		.4byte	.LVL118
 16639 07b0 24010000 		.4byte	.LVL132
 16640 07b4 0100     		.2byte	0x1
 16641 07b6 5A       		.byte	0x5a
 16642 07b7 24010000 		.4byte	.LVL132
 16643 07bb 28010000 		.4byte	.LVL133
 16644 07bf 0200     		.2byte	0x2
 16645 07c1 38       		.byte	0x38
 16646 07c2 9F       		.byte	0x9f
 16647 07c3 28010000 		.4byte	.LVL133
 16648 07c7 3E010000 		.4byte	.LVL137
 16649 07cb 0100     		.2byte	0x1
 16650 07cd 5A       		.byte	0x5a
 16651 07ce 00000000 		.4byte	0
 16652 07d2 00000000 		.4byte	0
 16653              	.LLST42:
 16654 07d6 1A000000 		.4byte	.LVL98
 16655 07da 24000000 		.4byte	.LVL99
 16656 07de 0200     		.2byte	0x2
 16657 07e0 30       		.byte	0x30
 16658 07e1 9F       		.byte	0x9f
 16659 07e2 24000000 		.4byte	.LVL99
 16660 07e6 26000000 		.4byte	.LVL100
 16661 07ea 0100     		.2byte	0x1
 16662 07ec 53       		.byte	0x53
 16663 07ed 26000000 		.4byte	.LVL100
 16664 07f1 58000000 		.4byte	.LVL110
 16665 07f5 0100     		.2byte	0x1
 16666 07f7 52       		.byte	0x52
 16667 07f8 60000000 		.4byte	.LVL111
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 434


 16668 07fc 68000000 		.4byte	.LVL112
 16669 0800 0200     		.2byte	0x2
 16670 0802 30       		.byte	0x30
 16671 0803 9F       		.byte	0x9f
 16672 0804 68000000 		.4byte	.LVL112
 16673 0808 6C000000 		.4byte	.LVL113
 16674 080c 0100     		.2byte	0x1
 16675 080e 58       		.byte	0x58
 16676 080f 6C000000 		.4byte	.LVL113
 16677 0813 B4000000 		.4byte	.LVL120
 16678 0817 0100     		.2byte	0x1
 16679 0819 57       		.byte	0x57
 16680 081a B4000000 		.4byte	.LVL120
 16681 081e D4000000 		.4byte	.LVL126
 16682 0822 0100     		.2byte	0x1
 16683 0824 58       		.byte	0x58
 16684 0825 D4000000 		.4byte	.LVL126
 16685 0829 24010000 		.4byte	.LVL132
 16686 082d 0100     		.2byte	0x1
 16687 082f 57       		.byte	0x57
 16688 0830 24010000 		.4byte	.LVL132
 16689 0834 28010000 		.4byte	.LVL133
 16690 0838 0100     		.2byte	0x1
 16691 083a 52       		.byte	0x52
 16692 083b 28010000 		.4byte	.LVL133
 16693 083f 30010000 		.4byte	.LVL134
 16694 0843 0100     		.2byte	0x1
 16695 0845 57       		.byte	0x57
 16696 0846 30010000 		.4byte	.LVL134
 16697 084a 38010000 		.4byte	.LVL135
 16698 084e 0100     		.2byte	0x1
 16699 0850 58       		.byte	0x58
 16700 0851 38010000 		.4byte	.LVL135
 16701 0855 3E010000 		.4byte	.LVL137
 16702 0859 0100     		.2byte	0x1
 16703 085b 57       		.byte	0x57
 16704 085c 00000000 		.4byte	0
 16705 0860 00000000 		.4byte	0
 16706              	.LLST43:
 16707 0864 1A000000 		.4byte	.LVL98
 16708 0868 24000000 		.4byte	.LVL99
 16709 086c 0200     		.2byte	0x2
 16710 086e 30       		.byte	0x30
 16711 086f 9F       		.byte	0x9f
 16712 0870 24000000 		.4byte	.LVL99
 16713 0874 30000000 		.4byte	.LVL102
 16714 0878 0100     		.2byte	0x1
 16715 087a 51       		.byte	0x51
 16716 087b 30000000 		.4byte	.LVL102
 16717 087f 38000000 		.4byte	.LVL104
 16718 0883 0300     		.2byte	0x3
 16719 0885 71       		.byte	0x71
 16720 0886 01       		.sleb128 1
 16721 0887 9F       		.byte	0x9f
 16722 0888 38000000 		.4byte	.LVL104
 16723 088c 60000000 		.4byte	.LVL111
 16724 0890 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 435


 16725 0892 51       		.byte	0x51
 16726 0893 60000000 		.4byte	.LVL111
 16727 0897 68000000 		.4byte	.LVL112
 16728 089b 0200     		.2byte	0x2
 16729 089d 30       		.byte	0x30
 16730 089e 9F       		.byte	0x9f
 16731 089f 68000000 		.4byte	.LVL112
 16732 08a3 A2000000 		.4byte	.LVL116
 16733 08a7 0100     		.2byte	0x1
 16734 08a9 56       		.byte	0x56
 16735 08aa A8000000 		.4byte	.LVL118
 16736 08ae C8000000 		.4byte	.LVL123
 16737 08b2 0100     		.2byte	0x1
 16738 08b4 56       		.byte	0x56
 16739 08b5 CC000000 		.4byte	.LVL124
 16740 08b9 D2000000 		.4byte	.LVL125
 16741 08bd 0100     		.2byte	0x1
 16742 08bf 56       		.byte	0x56
 16743 08c0 D2000000 		.4byte	.LVL125
 16744 08c4 D4000000 		.4byte	.LVL126
 16745 08c8 0300     		.2byte	0x3
 16746 08ca 76       		.byte	0x76
 16747 08cb 7E       		.sleb128 -2
 16748 08cc 9F       		.byte	0x9f
 16749 08cd D4000000 		.4byte	.LVL126
 16750 08d1 EC000000 		.4byte	.LVL129
 16751 08d5 0100     		.2byte	0x1
 16752 08d7 56       		.byte	0x56
 16753 08d8 EC000000 		.4byte	.LVL129
 16754 08dc F2000000 		.4byte	.LVL130
 16755 08e0 0300     		.2byte	0x3
 16756 08e2 76       		.byte	0x76
 16757 08e3 01       		.sleb128 1
 16758 08e4 9F       		.byte	0x9f
 16759 08e5 F2000000 		.4byte	.LVL130
 16760 08e9 24010000 		.4byte	.LVL132
 16761 08ed 0100     		.2byte	0x1
 16762 08ef 56       		.byte	0x56
 16763 08f0 24010000 		.4byte	.LVL132
 16764 08f4 28010000 		.4byte	.LVL133
 16765 08f8 0100     		.2byte	0x1
 16766 08fa 51       		.byte	0x51
 16767 08fb 28010000 		.4byte	.LVL133
 16768 08ff 3E010000 		.4byte	.LVL137
 16769 0903 0100     		.2byte	0x1
 16770 0905 56       		.byte	0x56
 16771 0906 00000000 		.4byte	0
 16772 090a 00000000 		.4byte	0
 16773              	.LLST44:
 16774 090e 0C000000 		.4byte	.LVL94
 16775 0912 48000000 		.4byte	.LVL106
 16776 0916 0100     		.2byte	0x1
 16777 0918 55       		.byte	0x55
 16778 0919 60000000 		.4byte	.LVL111
 16779 091d F8000000 		.4byte	.LVL131
 16780 0921 0100     		.2byte	0x1
 16781 0923 55       		.byte	0x55
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 436


 16782 0924 24010000 		.4byte	.LVL132
 16783 0928 3C010000 		.4byte	.LVL136
 16784 092c 0100     		.2byte	0x1
 16785 092e 55       		.byte	0x55
 16786 092f 00000000 		.4byte	0
 16787 0933 00000000 		.4byte	0
 16788              	.LLST45:
 16789 0937 00000000 		.4byte	.LVL139
 16790 093b 3E000000 		.4byte	.LVL154
 16791 093f 0100     		.2byte	0x1
 16792 0941 50       		.byte	0x50
 16793 0942 3E000000 		.4byte	.LVL154
 16794 0946 40000000 		.4byte	.LVL155
 16795 094a 0400     		.2byte	0x4
 16796 094c F3       		.byte	0xf3
 16797 094d 01       		.uleb128 0x1
 16798 094e 50       		.byte	0x50
 16799 094f 9F       		.byte	0x9f
 16800 0950 40000000 		.4byte	.LVL155
 16801 0954 44000000 		.4byte	.LVL157
 16802 0958 0100     		.2byte	0x1
 16803 095a 50       		.byte	0x50
 16804 095b 44000000 		.4byte	.LVL157
 16805 095f 46000000 		.4byte	.LVL158
 16806 0963 0400     		.2byte	0x4
 16807 0965 F3       		.byte	0xf3
 16808 0966 01       		.uleb128 0x1
 16809 0967 50       		.byte	0x50
 16810 0968 9F       		.byte	0x9f
 16811 0969 46000000 		.4byte	.LVL158
 16812 096d 4A000000 		.4byte	.LVL159
 16813 0971 0100     		.2byte	0x1
 16814 0973 50       		.byte	0x50
 16815 0974 4A000000 		.4byte	.LVL159
 16816 0978 4C000000 		.4byte	.LVL160
 16817 097c 0400     		.2byte	0x4
 16818 097e F3       		.byte	0xf3
 16819 097f 01       		.uleb128 0x1
 16820 0980 50       		.byte	0x50
 16821 0981 9F       		.byte	0x9f
 16822 0982 4C000000 		.4byte	.LVL160
 16823 0986 50000000 		.4byte	.LVL161
 16824 098a 0100     		.2byte	0x1
 16825 098c 50       		.byte	0x50
 16826 098d 50000000 		.4byte	.LVL161
 16827 0991 58000000 		.4byte	.LFE31
 16828 0995 0400     		.2byte	0x4
 16829 0997 F3       		.byte	0xf3
 16830 0998 01       		.uleb128 0x1
 16831 0999 50       		.byte	0x50
 16832 099a 9F       		.byte	0x9f
 16833 099b 00000000 		.4byte	0
 16834 099f 00000000 		.4byte	0
 16835              	.LLST46:
 16836 09a3 04000000 		.4byte	.LVL141
 16837 09a7 28000000 		.4byte	.LVL147
 16838 09ab 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 437


 16839 09ad 54       		.byte	0x54
 16840 09ae 28000000 		.4byte	.LVL147
 16841 09b2 30000000 		.4byte	.LVL149
 16842 09b6 0200     		.2byte	0x2
 16843 09b8 70       		.byte	0x70
 16844 09b9 00       		.sleb128 0
 16845 09ba 30000000 		.4byte	.LVL149
 16846 09be 34000000 		.4byte	.LVL150
 16847 09c2 0100     		.2byte	0x1
 16848 09c4 54       		.byte	0x54
 16849 09c5 34000000 		.4byte	.LVL150
 16850 09c9 3C000000 		.4byte	.LVL153
 16851 09cd 0200     		.2byte	0x2
 16852 09cf 70       		.byte	0x70
 16853 09d0 00       		.sleb128 0
 16854 09d1 40000000 		.4byte	.LVL155
 16855 09d5 4C000000 		.4byte	.LVL160
 16856 09d9 0100     		.2byte	0x1
 16857 09db 54       		.byte	0x54
 16858 09dc 4C000000 		.4byte	.LVL160
 16859 09e0 50000000 		.4byte	.LVL161
 16860 09e4 0200     		.2byte	0x2
 16861 09e6 70       		.byte	0x70
 16862 09e7 00       		.sleb128 0
 16863 09e8 00000000 		.4byte	0
 16864 09ec 00000000 		.4byte	0
 16865              	.LLST47:
 16866 09f0 04000000 		.4byte	.LVL141
 16867 09f4 08000000 		.4byte	.LVL142
 16868 09f8 0100     		.2byte	0x1
 16869 09fa 54       		.byte	0x54
 16870 09fb 08000000 		.4byte	.LVL142
 16871 09ff 0A000000 		.4byte	.LVL143
 16872 0a03 0100     		.2byte	0x1
 16873 0a05 52       		.byte	0x52
 16874 0a06 0A000000 		.4byte	.LVL143
 16875 0a0a 46000000 		.4byte	.LVL158
 16876 0a0e 0100     		.2byte	0x1
 16877 0a10 51       		.byte	0x51
 16878 0a11 46000000 		.4byte	.LVL158
 16879 0a15 4C000000 		.4byte	.LVL160
 16880 0a19 0100     		.2byte	0x1
 16881 0a1b 54       		.byte	0x54
 16882 0a1c 4C000000 		.4byte	.LVL160
 16883 0a20 50000000 		.4byte	.LVL161
 16884 0a24 0100     		.2byte	0x1
 16885 0a26 51       		.byte	0x51
 16886 0a27 00000000 		.4byte	0
 16887 0a2b 00000000 		.4byte	0
 16888              	.LLST48:
 16889 0a2f 0C000000 		.4byte	.LVL144
 16890 0a33 1C000000 		.4byte	.LVL146
 16891 0a37 0100     		.2byte	0x1
 16892 0a39 53       		.byte	0x53
 16893 0a3a 1C000000 		.4byte	.LVL146
 16894 0a3e 3C000000 		.4byte	.LVL153
 16895 0a42 0200     		.2byte	0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 438


 16896 0a44 71       		.byte	0x71
 16897 0a45 7F       		.sleb128 -1
 16898 0a46 40000000 		.4byte	.LVL155
 16899 0a4a 42000000 		.4byte	.LVL156
 16900 0a4e 0100     		.2byte	0x1
 16901 0a50 53       		.byte	0x53
 16902 0a51 42000000 		.4byte	.LVL156
 16903 0a55 46000000 		.4byte	.LVL158
 16904 0a59 0200     		.2byte	0x2
 16905 0a5b 71       		.byte	0x71
 16906 0a5c 7F       		.sleb128 -1
 16907 0a5d 4C000000 		.4byte	.LVL160
 16908 0a61 50000000 		.4byte	.LVL161
 16909 0a65 0200     		.2byte	0x2
 16910 0a67 71       		.byte	0x71
 16911 0a68 7F       		.sleb128 -1
 16912 0a69 00000000 		.4byte	0
 16913 0a6d 00000000 		.4byte	0
 16914              	.LLST49:
 16915 0a71 1A000000 		.4byte	.LVL145
 16916 0a75 2E000000 		.4byte	.LVL148
 16917 0a79 0200     		.2byte	0x2
 16918 0a7b 31       		.byte	0x31
 16919 0a7c 9F       		.byte	0x9f
 16920 0a7d 2E000000 		.4byte	.LVL148
 16921 0a81 30000000 		.4byte	.LVL149
 16922 0a85 0100     		.2byte	0x1
 16923 0a87 53       		.byte	0x53
 16924 0a88 30000000 		.4byte	.LVL149
 16925 0a8c 36000000 		.4byte	.LVL151
 16926 0a90 0200     		.2byte	0x2
 16927 0a92 31       		.byte	0x31
 16928 0a93 9F       		.byte	0x9f
 16929 0a94 36000000 		.4byte	.LVL151
 16930 0a98 40000000 		.4byte	.LVL155
 16931 0a9c 0100     		.2byte	0x1
 16932 0a9e 53       		.byte	0x53
 16933 0a9f 4C000000 		.4byte	.LVL160
 16934 0aa3 50000000 		.4byte	.LVL161
 16935 0aa7 0100     		.2byte	0x1
 16936 0aa9 53       		.byte	0x53
 16937 0aaa 00000000 		.4byte	0
 16938 0aae 00000000 		.4byte	0
 16939              	.LLST50:
 16940 0ab2 02000000 		.4byte	.LVL140
 16941 0ab6 3A000000 		.4byte	.LVL152
 16942 0aba 0300     		.2byte	0x3
 16943 0abc 09       		.byte	0x9
 16944 0abd FF       		.byte	0xff
 16945 0abe 9F       		.byte	0x9f
 16946 0abf 3A000000 		.4byte	.LVL152
 16947 0ac3 40000000 		.4byte	.LVL155
 16948 0ac7 0100     		.2byte	0x1
 16949 0ac9 53       		.byte	0x53
 16950 0aca 40000000 		.4byte	.LVL155
 16951 0ace 44000000 		.4byte	.LVL157
 16952 0ad2 0300     		.2byte	0x3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 439


 16953 0ad4 09       		.byte	0x9
 16954 0ad5 FF       		.byte	0xff
 16955 0ad6 9F       		.byte	0x9f
 16956 0ad7 46000000 		.4byte	.LVL158
 16957 0adb 50000000 		.4byte	.LVL161
 16958 0adf 0300     		.2byte	0x3
 16959 0ae1 09       		.byte	0x9
 16960 0ae2 FF       		.byte	0xff
 16961 0ae3 9F       		.byte	0x9f
 16962 0ae4 00000000 		.4byte	0
 16963 0ae8 00000000 		.4byte	0
 16964              	.LLST51:
 16965 0aec 00000000 		.4byte	.LVL162
 16966 0af0 0D000000 		.4byte	.LVL164-1
 16967 0af4 0100     		.2byte	0x1
 16968 0af6 50       		.byte	0x50
 16969 0af7 0D000000 		.4byte	.LVL164-1
 16970 0afb 12000000 		.4byte	.LFE59
 16971 0aff 0100     		.2byte	0x1
 16972 0b01 54       		.byte	0x54
 16973 0b02 00000000 		.4byte	0
 16974 0b06 00000000 		.4byte	0
 16975              	.LLST52:
 16976 0b0a 00000000 		.4byte	.LVL162
 16977 0b0e 0A000000 		.4byte	.LVL163
 16978 0b12 0100     		.2byte	0x1
 16979 0b14 51       		.byte	0x51
 16980 0b15 0A000000 		.4byte	.LVL163
 16981 0b19 12000000 		.4byte	.LFE59
 16982 0b1d 0100     		.2byte	0x1
 16983 0b1f 55       		.byte	0x55
 16984 0b20 00000000 		.4byte	0
 16985 0b24 00000000 		.4byte	0
 16986              	.LLST53:
 16987 0b28 00000000 		.4byte	.LVL165
 16988 0b2c 1A000000 		.4byte	.LVL168
 16989 0b30 0100     		.2byte	0x1
 16990 0b32 50       		.byte	0x50
 16991 0b33 1A000000 		.4byte	.LVL168
 16992 0b37 28000000 		.4byte	.LVL170
 16993 0b3b 0100     		.2byte	0x1
 16994 0b3d 54       		.byte	0x54
 16995 0b3e 28000000 		.4byte	.LVL170
 16996 0b42 2A000000 		.4byte	.LVL171
 16997 0b46 0100     		.2byte	0x1
 16998 0b48 50       		.byte	0x50
 16999 0b49 2A000000 		.4byte	.LVL171
 17000 0b4d 2C000000 		.4byte	.LVL172
 17001 0b51 0100     		.2byte	0x1
 17002 0b53 54       		.byte	0x54
 17003 0b54 2C000000 		.4byte	.LVL172
 17004 0b58 2E000000 		.4byte	.LVL173
 17005 0b5c 0100     		.2byte	0x1
 17006 0b5e 50       		.byte	0x50
 17007 0b5f 2E000000 		.4byte	.LVL173
 17008 0b63 30000000 		.4byte	.LVL174
 17009 0b67 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 440


 17010 0b69 54       		.byte	0x54
 17011 0b6a 30000000 		.4byte	.LVL174
 17012 0b6e 32000000 		.4byte	.LVL175
 17013 0b72 0100     		.2byte	0x1
 17014 0b74 50       		.byte	0x50
 17015 0b75 32000000 		.4byte	.LVL175
 17016 0b79 34000000 		.4byte	.LVL176
 17017 0b7d 0100     		.2byte	0x1
 17018 0b7f 54       		.byte	0x54
 17019 0b80 34000000 		.4byte	.LVL176
 17020 0b84 36000000 		.4byte	.LVL177
 17021 0b88 0100     		.2byte	0x1
 17022 0b8a 50       		.byte	0x50
 17023 0b8b 36000000 		.4byte	.LVL177
 17024 0b8f 46000000 		.4byte	.LFE35
 17025 0b93 0100     		.2byte	0x1
 17026 0b95 54       		.byte	0x54
 17027 0b96 00000000 		.4byte	0
 17028 0b9a 00000000 		.4byte	0
 17029              	.LLST54:
 17030 0b9e 00000000 		.4byte	.LVL165
 17031 0ba2 12000000 		.4byte	.LVL167
 17032 0ba6 0100     		.2byte	0x1
 17033 0ba8 51       		.byte	0x51
 17034 0ba9 12000000 		.4byte	.LVL167
 17035 0bad 28000000 		.4byte	.LVL170
 17036 0bb1 0100     		.2byte	0x1
 17037 0bb3 55       		.byte	0x55
 17038 0bb4 28000000 		.4byte	.LVL170
 17039 0bb8 34000000 		.4byte	.LVL176
 17040 0bbc 0100     		.2byte	0x1
 17041 0bbe 51       		.byte	0x51
 17042 0bbf 34000000 		.4byte	.LVL176
 17043 0bc3 46000000 		.4byte	.LFE35
 17044 0bc7 0100     		.2byte	0x1
 17045 0bc9 55       		.byte	0x55
 17046 0bca 00000000 		.4byte	0
 17047 0bce 00000000 		.4byte	0
 17048              	.LLST55:
 17049 0bd2 04000000 		.4byte	.LVL166
 17050 0bd6 3A000000 		.4byte	.LVL178
 17051 0bda 0200     		.2byte	0x2
 17052 0bdc 39       		.byte	0x39
 17053 0bdd 9F       		.byte	0x9f
 17054 0bde 3A000000 		.4byte	.LVL178
 17055 0be2 46000000 		.4byte	.LFE35
 17056 0be6 0100     		.2byte	0x1
 17057 0be8 50       		.byte	0x50
 17058 0be9 00000000 		.4byte	0
 17059 0bed 00000000 		.4byte	0
 17060              	.LLST56:
 17061 0bf1 00000000 		.4byte	.LVL179
 17062 0bf5 14000000 		.4byte	.LVL181
 17063 0bf9 0100     		.2byte	0x1
 17064 0bfb 50       		.byte	0x50
 17065 0bfc 14000000 		.4byte	.LVL181
 17066 0c00 40000000 		.4byte	.LVL184
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 441


 17067 0c04 0100     		.2byte	0x1
 17068 0c06 54       		.byte	0x54
 17069 0c07 40000000 		.4byte	.LVL184
 17070 0c0b 42000000 		.4byte	.LVL185
 17071 0c0f 0100     		.2byte	0x1
 17072 0c11 50       		.byte	0x50
 17073 0c12 42000000 		.4byte	.LVL185
 17074 0c16 44000000 		.4byte	.LVL186
 17075 0c1a 0400     		.2byte	0x4
 17076 0c1c F3       		.byte	0xf3
 17077 0c1d 01       		.uleb128 0x1
 17078 0c1e 50       		.byte	0x50
 17079 0c1f 9F       		.byte	0x9f
 17080 0c20 44000000 		.4byte	.LVL186
 17081 0c24 50000000 		.4byte	.LFE10
 17082 0c28 0100     		.2byte	0x1
 17083 0c2a 54       		.byte	0x54
 17084 0c2b 00000000 		.4byte	0
 17085 0c2f 00000000 		.4byte	0
 17086              	.LLST57:
 17087 0c33 02000000 		.4byte	.LVL180
 17088 0c37 4E000000 		.4byte	.LVL189
 17089 0c3b 0200     		.2byte	0x2
 17090 0c3d 30       		.byte	0x30
 17091 0c3e 9F       		.byte	0x9f
 17092 0c3f 4E000000 		.4byte	.LVL189
 17093 0c43 50000000 		.4byte	.LFE10
 17094 0c47 0100     		.2byte	0x1
 17095 0c49 50       		.byte	0x50
 17096 0c4a 00000000 		.4byte	0
 17097 0c4e 00000000 		.4byte	0
 17098              	.LLST58:
 17099 0c52 00000000 		.4byte	.LVL190
 17100 0c56 0F000000 		.4byte	.LVL192-1
 17101 0c5a 0100     		.2byte	0x1
 17102 0c5c 50       		.byte	0x50
 17103 0c5d 0F000000 		.4byte	.LVL192-1
 17104 0c61 2E000000 		.4byte	.LVL196
 17105 0c65 0100     		.2byte	0x1
 17106 0c67 54       		.byte	0x54
 17107 0c68 2E000000 		.4byte	.LVL196
 17108 0c6c 30000000 		.4byte	.LVL197
 17109 0c70 0100     		.2byte	0x1
 17110 0c72 50       		.byte	0x50
 17111 0c73 30000000 		.4byte	.LVL197
 17112 0c77 34000000 		.4byte	.LFE11
 17113 0c7b 0400     		.2byte	0x4
 17114 0c7d F3       		.byte	0xf3
 17115 0c7e 01       		.uleb128 0x1
 17116 0c7f 50       		.byte	0x50
 17117 0c80 9F       		.byte	0x9f
 17118 0c81 00000000 		.4byte	0
 17119 0c85 00000000 		.4byte	0
 17120              	.LLST59:
 17121 0c89 00000000 		.4byte	.LVL190
 17122 0c8d 0F000000 		.4byte	.LVL192-1
 17123 0c91 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 442


 17124 0c93 51       		.byte	0x51
 17125 0c94 0F000000 		.4byte	.LVL192-1
 17126 0c98 2E000000 		.4byte	.LVL196
 17127 0c9c 0100     		.2byte	0x1
 17128 0c9e 55       		.byte	0x55
 17129 0c9f 2E000000 		.4byte	.LVL196
 17130 0ca3 30000000 		.4byte	.LVL197
 17131 0ca7 0100     		.2byte	0x1
 17132 0ca9 51       		.byte	0x51
 17133 0caa 00000000 		.4byte	0
 17134 0cae 00000000 		.4byte	0
 17135              	.LLST60:
 17136 0cb2 02000000 		.4byte	.LVL191
 17137 0cb6 10000000 		.4byte	.LVL192
 17138 0cba 0200     		.2byte	0x2
 17139 0cbc 30       		.byte	0x30
 17140 0cbd 9F       		.byte	0x9f
 17141 0cbe 10000000 		.4byte	.LVL192
 17142 0cc2 1E000000 		.4byte	.LVL193
 17143 0cc6 0100     		.2byte	0x1
 17144 0cc8 50       		.byte	0x50
 17145 0cc9 2A000000 		.4byte	.LVL195
 17146 0ccd 2E000000 		.4byte	.LVL196
 17147 0cd1 0100     		.2byte	0x1
 17148 0cd3 56       		.byte	0x56
 17149 0cd4 2E000000 		.4byte	.LVL196
 17150 0cd8 30000000 		.4byte	.LVL197
 17151 0cdc 0200     		.2byte	0x2
 17152 0cde 30       		.byte	0x30
 17153 0cdf 9F       		.byte	0x9f
 17154 0ce0 30000000 		.4byte	.LVL197
 17155 0ce4 34000000 		.4byte	.LFE11
 17156 0ce8 0100     		.2byte	0x1
 17157 0cea 56       		.byte	0x56
 17158 0ceb 00000000 		.4byte	0
 17159 0cef 00000000 		.4byte	0
 17160              	.LLST61:
 17161 0cf3 00000000 		.4byte	.LVL198
 17162 0cf7 11000000 		.4byte	.LVL199-1
 17163 0cfb 0100     		.2byte	0x1
 17164 0cfd 50       		.byte	0x50
 17165 0cfe 11000000 		.4byte	.LVL199-1
 17166 0d02 66000000 		.4byte	.LVL208
 17167 0d06 0100     		.2byte	0x1
 17168 0d08 54       		.byte	0x54
 17169 0d09 66000000 		.4byte	.LVL208
 17170 0d0d 70000000 		.4byte	.LFE32
 17171 0d11 0400     		.2byte	0x4
 17172 0d13 F3       		.byte	0xf3
 17173 0d14 01       		.uleb128 0x1
 17174 0d15 50       		.byte	0x50
 17175 0d16 9F       		.byte	0x9f
 17176 0d17 00000000 		.4byte	0
 17177 0d1b 00000000 		.4byte	0
 17178              	.LLST62:
 17179 0d1f 00000000 		.4byte	.LVL198
 17180 0d23 11000000 		.4byte	.LVL199-1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 443


 17181 0d27 0100     		.2byte	0x1
 17182 0d29 51       		.byte	0x51
 17183 0d2a 11000000 		.4byte	.LVL199-1
 17184 0d2e 70000000 		.4byte	.LFE32
 17185 0d32 0400     		.2byte	0x4
 17186 0d34 F3       		.byte	0xf3
 17187 0d35 01       		.uleb128 0x1
 17188 0d36 51       		.byte	0x51
 17189 0d37 9F       		.byte	0x9f
 17190 0d38 00000000 		.4byte	0
 17191 0d3c 00000000 		.4byte	0
 17192              	.LLST63:
 17193 0d40 00000000 		.4byte	.LVL209
 17194 0d44 0D000000 		.4byte	.LVL211-1
 17195 0d48 0100     		.2byte	0x1
 17196 0d4a 50       		.byte	0x50
 17197 0d4b 0D000000 		.4byte	.LVL211-1
 17198 0d4f 6C000000 		.4byte	.LFE33
 17199 0d53 0100     		.2byte	0x1
 17200 0d55 56       		.byte	0x56
 17201 0d56 00000000 		.4byte	0
 17202 0d5a 00000000 		.4byte	0
 17203              	.LLST64:
 17204 0d5e 00000000 		.4byte	.LVL209
 17205 0d62 0A000000 		.4byte	.LVL210
 17206 0d66 0100     		.2byte	0x1
 17207 0d68 51       		.byte	0x51
 17208 0d69 0A000000 		.4byte	.LVL210
 17209 0d6d 6C000000 		.4byte	.LFE33
 17210 0d71 0100     		.2byte	0x1
 17211 0d73 55       		.byte	0x55
 17212 0d74 00000000 		.4byte	0
 17213 0d78 00000000 		.4byte	0
 17214              	.LLST65:
 17215 0d7c 0E000000 		.4byte	.LVL211
 17216 0d80 1A000000 		.4byte	.LVL212
 17217 0d84 0100     		.2byte	0x1
 17218 0d86 50       		.byte	0x50
 17219 0d87 38000000 		.4byte	.LVL215
 17220 0d8b 3A000000 		.4byte	.LVL216
 17221 0d8f 0100     		.2byte	0x1
 17222 0d91 50       		.byte	0x50
 17223 0d92 5C000000 		.4byte	.LVL221
 17224 0d96 6C000000 		.4byte	.LFE33
 17225 0d9a 0100     		.2byte	0x1
 17226 0d9c 50       		.byte	0x50
 17227 0d9d 00000000 		.4byte	0
 17228 0da1 00000000 		.4byte	0
 17229              	.LLST66:
 17230 0da5 1A000000 		.4byte	.LVL212
 17231 0da9 38000000 		.4byte	.LVL215
 17232 0dad 0100     		.2byte	0x1
 17233 0daf 54       		.byte	0x54
 17234 0db0 3A000000 		.4byte	.LVL216
 17235 0db4 42000000 		.4byte	.LVL217
 17236 0db8 0100     		.2byte	0x1
 17237 0dba 54       		.byte	0x54
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 444


 17238 0dbb 44000000 		.4byte	.LVL218
 17239 0dbf 68000000 		.4byte	.LVL223
 17240 0dc3 0100     		.2byte	0x1
 17241 0dc5 54       		.byte	0x54
 17242 0dc6 00000000 		.4byte	0
 17243 0dca 00000000 		.4byte	0
 17244              	.LLST67:
 17245 0dce 00000000 		.4byte	.LVL224
 17246 0dd2 0F000000 		.4byte	.LVL225-1
 17247 0dd6 0100     		.2byte	0x1
 17248 0dd8 50       		.byte	0x50
 17249 0dd9 0F000000 		.4byte	.LVL225-1
 17250 0ddd C0020000 		.4byte	.LFE34
 17251 0de1 0400     		.2byte	0x4
 17252 0de3 F3       		.byte	0xf3
 17253 0de4 01       		.uleb128 0x1
 17254 0de5 50       		.byte	0x50
 17255 0de6 9F       		.byte	0x9f
 17256 0de7 00000000 		.4byte	0
 17257 0deb 00000000 		.4byte	0
 17258              	.LLST68:
 17259 0def 00000000 		.4byte	.LVL224
 17260 0df3 0F000000 		.4byte	.LVL225-1
 17261 0df7 0100     		.2byte	0x1
 17262 0df9 51       		.byte	0x51
 17263 0dfa 0F000000 		.4byte	.LVL225-1
 17264 0dfe 82000000 		.4byte	.LVL235
 17265 0e02 0100     		.2byte	0x1
 17266 0e04 56       		.byte	0x56
 17267 0e05 82000000 		.4byte	.LVL235
 17268 0e09 32020000 		.4byte	.LVL279
 17269 0e0d 0400     		.2byte	0x4
 17270 0e0f F3       		.byte	0xf3
 17271 0e10 01       		.uleb128 0x1
 17272 0e11 51       		.byte	0x51
 17273 0e12 9F       		.byte	0x9f
 17274 0e13 32020000 		.4byte	.LVL279
 17275 0e17 62020000 		.4byte	.LVL295
 17276 0e1b 0100     		.2byte	0x1
 17277 0e1d 56       		.byte	0x56
 17278 0e1e 62020000 		.4byte	.LVL295
 17279 0e22 C0020000 		.4byte	.LFE34
 17280 0e26 0400     		.2byte	0x4
 17281 0e28 F3       		.byte	0xf3
 17282 0e29 01       		.uleb128 0x1
 17283 0e2a 51       		.byte	0x51
 17284 0e2b 9F       		.byte	0x9f
 17285 0e2c 00000000 		.4byte	0
 17286 0e30 00000000 		.4byte	0
 17287              	.LLST69:
 17288 0e34 00000000 		.4byte	.LVL224
 17289 0e38 0F000000 		.4byte	.LVL225-1
 17290 0e3c 0100     		.2byte	0x1
 17291 0e3e 52       		.byte	0x52
 17292 0e3f 0F000000 		.4byte	.LVL225-1
 17293 0e43 2A000000 		.4byte	.LVL227
 17294 0e47 0400     		.2byte	0x4
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 445


 17295 0e49 F3       		.byte	0xf3
 17296 0e4a 01       		.uleb128 0x1
 17297 0e4b 52       		.byte	0x52
 17298 0e4c 9F       		.byte	0x9f
 17299 0e4d 2A000000 		.4byte	.LVL227
 17300 0e51 F6000000 		.4byte	.LVL247
 17301 0e55 0100     		.2byte	0x1
 17302 0e57 57       		.byte	0x57
 17303 0e58 32020000 		.4byte	.LVL279
 17304 0e5c 3E020000 		.4byte	.LVL283
 17305 0e60 0400     		.2byte	0x4
 17306 0e62 F3       		.byte	0xf3
 17307 0e63 01       		.uleb128 0x1
 17308 0e64 52       		.byte	0x52
 17309 0e65 9F       		.byte	0x9f
 17310 0e66 3E020000 		.4byte	.LVL283
 17311 0e6a 80020000 		.4byte	.LVL301
 17312 0e6e 0100     		.2byte	0x1
 17313 0e70 57       		.byte	0x57
 17314 0e71 00000000 		.4byte	0
 17315 0e75 00000000 		.4byte	0
 17316              	.LLST70:
 17317 0e79 10000000 		.4byte	.LVL225
 17318 0e7d 30000000 		.4byte	.LVL228
 17319 0e81 0100     		.2byte	0x1
 17320 0e83 50       		.byte	0x50
 17321 0e84 30000000 		.4byte	.LVL228
 17322 0e88 C8000000 		.4byte	.LVL244
 17323 0e8c 0100     		.2byte	0x1
 17324 0e8e 55       		.byte	0x55
 17325 0e8f 32020000 		.4byte	.LVL279
 17326 0e93 34020000 		.4byte	.LVL280
 17327 0e97 0100     		.2byte	0x1
 17328 0e99 50       		.byte	0x50
 17329 0e9a 34020000 		.4byte	.LVL280
 17330 0e9e 38020000 		.4byte	.LVL281
 17331 0ea2 0100     		.2byte	0x1
 17332 0ea4 55       		.byte	0x55
 17333 0ea5 38020000 		.4byte	.LVL281
 17334 0ea9 3A020000 		.4byte	.LVL282
 17335 0ead 0100     		.2byte	0x1
 17336 0eaf 50       		.byte	0x50
 17337 0eb0 3A020000 		.4byte	.LVL282
 17338 0eb4 6E020000 		.4byte	.LVL298
 17339 0eb8 0100     		.2byte	0x1
 17340 0eba 55       		.byte	0x55
 17341 0ebb 00000000 		.4byte	0
 17342 0ebf 00000000 		.4byte	0
 17343              	.LLST71:
 17344 0ec3 34000000 		.4byte	.LVL229
 17345 0ec7 4A000000 		.4byte	.LVL230
 17346 0ecb 0100     		.2byte	0x1
 17347 0ecd 50       		.byte	0x50
 17348 0ece 5A000000 		.4byte	.LVL232
 17349 0ed2 70000000 		.4byte	.LVL233
 17350 0ed6 0100     		.2byte	0x1
 17351 0ed8 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 446


 17352 0ed9 3E020000 		.4byte	.LVL283
 17353 0edd 40020000 		.4byte	.LVL284
 17354 0ee1 0100     		.2byte	0x1
 17355 0ee3 50       		.byte	0x50
 17356 0ee4 44020000 		.4byte	.LVL285
 17357 0ee8 46020000 		.4byte	.LVL286
 17358 0eec 0100     		.2byte	0x1
 17359 0eee 50       		.byte	0x50
 17360 0eef 4A020000 		.4byte	.LVL287
 17361 0ef3 4C020000 		.4byte	.LVL288
 17362 0ef7 0100     		.2byte	0x1
 17363 0ef9 50       		.byte	0x50
 17364 0efa 50020000 		.4byte	.LVL289
 17365 0efe 52020000 		.4byte	.LVL290
 17366 0f02 0100     		.2byte	0x1
 17367 0f04 50       		.byte	0x50
 17368 0f05 00000000 		.4byte	0
 17369 0f09 00000000 		.4byte	0
 17370              	.LLST72:
 17371 0f0d 82000000 		.4byte	.LVL235
 17372 0f11 32020000 		.4byte	.LVL279
 17373 0f15 0100     		.2byte	0x1
 17374 0f17 56       		.byte	0x56
 17375 0f18 62020000 		.4byte	.LVL295
 17376 0f1c B0020000 		.4byte	.LVL314
 17377 0f20 0100     		.2byte	0x1
 17378 0f22 56       		.byte	0x56
 17379 0f23 00000000 		.4byte	0
 17380 0f27 00000000 		.4byte	0
 17381              	.LLST73:
 17382 0f2b F6000000 		.4byte	.LVL247
 17383 0f2f FC000000 		.4byte	.LVL248
 17384 0f33 0100     		.2byte	0x1
 17385 0f35 50       		.byte	0x50
 17386 0f36 FC000000 		.4byte	.LVL248
 17387 0f3a 02010000 		.4byte	.LVL250
 17388 0f3e 0100     		.2byte	0x1
 17389 0f40 57       		.byte	0x57
 17390 0f41 02010000 		.4byte	.LVL250
 17391 0f45 06010000 		.4byte	.LVL251
 17392 0f49 0100     		.2byte	0x1
 17393 0f4b 50       		.byte	0x50
 17394 0f4c 06010000 		.4byte	.LVL251
 17395 0f50 22010000 		.4byte	.LVL254
 17396 0f54 0100     		.2byte	0x1
 17397 0f56 57       		.byte	0x57
 17398 0f57 80020000 		.4byte	.LVL301
 17399 0f5b 8C020000 		.4byte	.LVL305
 17400 0f5f 0100     		.2byte	0x1
 17401 0f61 57       		.byte	0x57
 17402 0f62 00000000 		.4byte	0
 17403 0f66 00000000 		.4byte	0
 17404              	.LLST74:
 17405 0f6a 1A010000 		.4byte	.LVL253
 17406 0f6e 5E010000 		.4byte	.LVL261
 17407 0f72 0100     		.2byte	0x1
 17408 0f74 52       		.byte	0x52
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 447


 17409 0f75 5E010000 		.4byte	.LVL261
 17410 0f79 68010000 		.4byte	.LVL262
 17411 0f7d 0B00     		.2byte	0xb
 17412 0f7f 7A       		.byte	0x7a
 17413 0f80 00       		.sleb128 0
 17414 0f81 34       		.byte	0x34
 17415 0f82 25       		.byte	0x25
 17416 0f83 70       		.byte	0x70
 17417 0f84 00       		.sleb128 0
 17418 0f85 22       		.byte	0x22
 17419 0f86 79       		.byte	0x79
 17420 0f87 00       		.sleb128 0
 17421 0f88 22       		.byte	0x22
 17422 0f89 9F       		.byte	0x9f
 17423 0f8a 88010000 		.4byte	.LVL266
 17424 0f8e A8010000 		.4byte	.LVL270
 17425 0f92 0B00     		.2byte	0xb
 17426 0f94 7A       		.byte	0x7a
 17427 0f95 00       		.sleb128 0
 17428 0f96 34       		.byte	0x34
 17429 0f97 25       		.byte	0x25
 17430 0f98 70       		.byte	0x70
 17431 0f99 00       		.sleb128 0
 17432 0f9a 22       		.byte	0x22
 17433 0f9b 79       		.byte	0x79
 17434 0f9c 00       		.sleb128 0
 17435 0f9d 22       		.byte	0x22
 17436 0f9e 9F       		.byte	0x9f
 17437 0f9f 86020000 		.4byte	.LVL303
 17438 0fa3 98020000 		.4byte	.LVL309
 17439 0fa7 0100     		.2byte	0x1
 17440 0fa9 52       		.byte	0x52
 17441 0faa A4020000 		.4byte	.LVL311
 17442 0fae A6020000 		.4byte	.LVL312
 17443 0fb2 0B00     		.2byte	0xb
 17444 0fb4 7A       		.byte	0x7a
 17445 0fb5 00       		.sleb128 0
 17446 0fb6 34       		.byte	0x34
 17447 0fb7 25       		.byte	0x25
 17448 0fb8 70       		.byte	0x70
 17449 0fb9 00       		.sleb128 0
 17450 0fba 22       		.byte	0x22
 17451 0fbb 79       		.byte	0x79
 17452 0fbc 00       		.sleb128 0
 17453 0fbd 22       		.byte	0x22
 17454 0fbe 9F       		.byte	0x9f
 17455 0fbf 00000000 		.4byte	0
 17456 0fc3 00000000 		.4byte	0
 17457              	.LLST75:
 17458 0fc7 9C000000 		.4byte	.LVL239
 17459 0fcb A2000000 		.4byte	.LVL240
 17460 0fcf 0100     		.2byte	0x1
 17461 0fd1 50       		.byte	0x50
 17462 0fd2 A2000000 		.4byte	.LVL240
 17463 0fd6 A8000000 		.4byte	.LVL242
 17464 0fda 0100     		.2byte	0x1
 17465 0fdc 58       		.byte	0x58
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 448


 17466 0fdd A8000000 		.4byte	.LVL242
 17467 0fe1 C4000000 		.4byte	.LVL243
 17468 0fe5 0100     		.2byte	0x1
 17469 0fe7 50       		.byte	0x50
 17470 0fe8 C4000000 		.4byte	.LVL243
 17471 0fec 32020000 		.4byte	.LVL279
 17472 0ff0 0100     		.2byte	0x1
 17473 0ff2 59       		.byte	0x59
 17474 0ff3 68020000 		.4byte	.LVL296
 17475 0ff7 6A020000 		.4byte	.LVL297
 17476 0ffb 0100     		.2byte	0x1
 17477 0ffd 50       		.byte	0x50
 17478 0ffe 6A020000 		.4byte	.LVL297
 17479 1002 6E020000 		.4byte	.LVL298
 17480 1006 0100     		.2byte	0x1
 17481 1008 58       		.byte	0x58
 17482 1009 6E020000 		.4byte	.LVL298
 17483 100d B0020000 		.4byte	.LVL314
 17484 1011 0100     		.2byte	0x1
 17485 1013 59       		.byte	0x59
 17486 1014 00000000 		.4byte	0
 17487 1018 00000000 		.4byte	0
 17488              	.LLST76:
 17489 101c 26010000 		.4byte	.LVL255
 17490 1020 54010000 		.4byte	.LVL260
 17491 1024 0100     		.2byte	0x1
 17492 1026 55       		.byte	0x55
 17493 1027 54010000 		.4byte	.LVL260
 17494 102b 86010000 		.4byte	.LVL265
 17495 102f 0300     		.2byte	0x3
 17496 1031 75       		.byte	0x75
 17497 1032 7E       		.sleb128 -2
 17498 1033 9F       		.byte	0x9f
 17499 1034 88010000 		.4byte	.LVL266
 17500 1038 9A010000 		.4byte	.LVL267
 17501 103c 0300     		.2byte	0x3
 17502 103e 75       		.byte	0x75
 17503 103f 7E       		.sleb128 -2
 17504 1040 9F       		.byte	0x9f
 17505 1041 9A010000 		.4byte	.LVL267
 17506 1045 9C010000 		.4byte	.LVL268
 17507 1049 0600     		.2byte	0x6
 17508 104b 74       		.byte	0x74
 17509 104c 18       		.sleb128 24
 17510 104d 06       		.byte	0x6
 17511 104e 32       		.byte	0x32
 17512 104f 1C       		.byte	0x1c
 17513 1050 9F       		.byte	0x9f
 17514 1051 9C010000 		.4byte	.LVL268
 17515 1055 A4010000 		.4byte	.LVL269
 17516 1059 0300     		.2byte	0x3
 17517 105b 75       		.byte	0x75
 17518 105c 7E       		.sleb128 -2
 17519 105d 9F       		.byte	0x9f
 17520 105e A4010000 		.4byte	.LVL269
 17521 1062 A8010000 		.4byte	.LVL270
 17522 1066 0600     		.2byte	0x6
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 449


 17523 1068 74       		.byte	0x74
 17524 1069 18       		.sleb128 24
 17525 106a 06       		.byte	0x6
 17526 106b 32       		.byte	0x32
 17527 106c 1C       		.byte	0x1c
 17528 106d 9F       		.byte	0x9f
 17529 106e 8C020000 		.4byte	.LVL305
 17530 1072 98020000 		.4byte	.LVL309
 17531 1076 0100     		.2byte	0x1
 17532 1078 55       		.byte	0x55
 17533 1079 98020000 		.4byte	.LVL309
 17534 107d AA020000 		.4byte	.LVL313
 17535 1081 0300     		.2byte	0x3
 17536 1083 75       		.byte	0x75
 17537 1084 7E       		.sleb128 -2
 17538 1085 9F       		.byte	0x9f
 17539 1086 00000000 		.4byte	0
 17540 108a 00000000 		.4byte	0
 17541              	.LLST77:
 17542 108e 86010000 		.4byte	.LVL265
 17543 1092 88010000 		.4byte	.LVL266
 17544 1096 0100     		.2byte	0x1
 17545 1098 55       		.byte	0x55
 17546 1099 A8010000 		.4byte	.LVL270
 17547 109d AC010000 		.4byte	.LVL271
 17548 10a1 0100     		.2byte	0x1
 17549 10a3 55       		.byte	0x55
 17550 10a4 AC010000 		.4byte	.LVL271
 17551 10a8 32020000 		.4byte	.LVL279
 17552 10ac 0400     		.2byte	0x4
 17553 10ae 75       		.byte	0x75
 17554 10af 817C     		.sleb128 -511
 17555 10b1 9F       		.byte	0x9f
 17556 10b2 AA020000 		.4byte	.LVL313
 17557 10b6 B0020000 		.4byte	.LVL314
 17558 10ba 0400     		.2byte	0x4
 17559 10bc 75       		.byte	0x75
 17560 10bd 817C     		.sleb128 -511
 17561 10bf 9F       		.byte	0x9f
 17562 10c0 00000000 		.4byte	0
 17563 10c4 00000000 		.4byte	0
 17564              	.LLST78:
 17565 10c8 0A010000 		.4byte	.LVL252
 17566 10cc 68010000 		.4byte	.LVL262
 17567 10d0 0100     		.2byte	0x1
 17568 10d2 50       		.byte	0x50
 17569 10d3 88010000 		.4byte	.LVL266
 17570 10d7 A8010000 		.4byte	.LVL270
 17571 10db 0100     		.2byte	0x1
 17572 10dd 50       		.byte	0x50
 17573 10de 80020000 		.4byte	.LVL301
 17574 10e2 82020000 		.4byte	.LVL302
 17575 10e6 0100     		.2byte	0x1
 17576 10e8 50       		.byte	0x50
 17577 10e9 86020000 		.4byte	.LVL303
 17578 10ed 88020000 		.4byte	.LVL304
 17579 10f1 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 450


 17580 10f3 50       		.byte	0x50
 17581 10f4 8C020000 		.4byte	.LVL305
 17582 10f8 8E020000 		.4byte	.LVL306
 17583 10fc 0100     		.2byte	0x1
 17584 10fe 50       		.byte	0x50
 17585 10ff 92020000 		.4byte	.LVL307
 17586 1103 94020000 		.4byte	.LVL308
 17587 1107 0100     		.2byte	0x1
 17588 1109 50       		.byte	0x50
 17589 110a A4020000 		.4byte	.LVL311
 17590 110e A6020000 		.4byte	.LVL312
 17591 1112 0100     		.2byte	0x1
 17592 1114 50       		.byte	0x50
 17593 1115 00000000 		.4byte	0
 17594 1119 00000000 		.4byte	0
 17595              	.LLST79:
 17596 111d 1E000000 		.4byte	.LVL226
 17597 1121 32020000 		.4byte	.LVL279
 17598 1125 0100     		.2byte	0x1
 17599 1127 54       		.byte	0x54
 17600 1128 38020000 		.4byte	.LVL281
 17601 112c B0020000 		.4byte	.LVL314
 17602 1130 0100     		.2byte	0x1
 17603 1132 54       		.byte	0x54
 17604 1133 00000000 		.4byte	0
 17605 1137 00000000 		.4byte	0
 17606              	.LLST80:
 17607 113b 74000000 		.4byte	.LVL234
 17608 113f 86000000 		.4byte	.LVL236
 17609 1143 0100     		.2byte	0x1
 17610 1145 50       		.byte	0x50
 17611 1146 2C010000 		.4byte	.LVL256
 17612 114a 38010000 		.4byte	.LVL257
 17613 114e 0200     		.2byte	0x2
 17614 1150 30       		.byte	0x30
 17615 1151 9F       		.byte	0x9f
 17616 1152 38010000 		.4byte	.LVL257
 17617 1156 32020000 		.4byte	.LVL279
 17618 115a 0100     		.2byte	0x1
 17619 115c 57       		.byte	0x57
 17620 115d 56020000 		.4byte	.LVL291
 17621 1161 58020000 		.4byte	.LVL292
 17622 1165 0100     		.2byte	0x1
 17623 1167 50       		.byte	0x50
 17624 1168 5C020000 		.4byte	.LVL293
 17625 116c 5E020000 		.4byte	.LVL294
 17626 1170 0100     		.2byte	0x1
 17627 1172 50       		.byte	0x50
 17628 1173 92020000 		.4byte	.LVL307
 17629 1177 B0020000 		.4byte	.LVL314
 17630 117b 0100     		.2byte	0x1
 17631 117d 57       		.byte	0x57
 17632 117e 00000000 		.4byte	0
 17633 1182 00000000 		.4byte	0
 17634              	.LLST81:
 17635 1186 00000000 		.4byte	.LVL315
 17636 118a 2F000000 		.4byte	.LVL320-1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 451


 17637 118e 0100     		.2byte	0x1
 17638 1190 50       		.byte	0x50
 17639 1191 2F000000 		.4byte	.LVL320-1
 17640 1195 98000000 		.4byte	.LVL327
 17641 1199 0100     		.2byte	0x1
 17642 119b 56       		.byte	0x56
 17643 119c 98000000 		.4byte	.LVL327
 17644 11a0 A1000000 		.4byte	.LVL329-1
 17645 11a4 0100     		.2byte	0x1
 17646 11a6 50       		.byte	0x50
 17647 11a7 A1000000 		.4byte	.LVL329-1
 17648 11ab BE000000 		.4byte	.LVL332
 17649 11af 0100     		.2byte	0x1
 17650 11b1 56       		.byte	0x56
 17651 11b2 BE000000 		.4byte	.LVL332
 17652 11b6 C7000000 		.4byte	.LVL334-1
 17653 11ba 0100     		.2byte	0x1
 17654 11bc 50       		.byte	0x50
 17655 11bd C7000000 		.4byte	.LVL334-1
 17656 11c1 F4000000 		.4byte	.LVL342
 17657 11c5 0100     		.2byte	0x1
 17658 11c7 56       		.byte	0x56
 17659 11c8 F4000000 		.4byte	.LVL342
 17660 11cc FE000000 		.4byte	.LVL343
 17661 11d0 0100     		.2byte	0x1
 17662 11d2 50       		.byte	0x50
 17663 11d3 FE000000 		.4byte	.LVL343
 17664 11d7 04010000 		.4byte	.LFE15
 17665 11db 0400     		.2byte	0x4
 17666 11dd F3       		.byte	0xf3
 17667 11de 01       		.uleb128 0x1
 17668 11df 50       		.byte	0x50
 17669 11e0 9F       		.byte	0x9f
 17670 11e1 00000000 		.4byte	0
 17671 11e5 00000000 		.4byte	0
 17672              	.LLST82:
 17673 11e9 00000000 		.4byte	.LVL315
 17674 11ed 28000000 		.4byte	.LVL319
 17675 11f1 0100     		.2byte	0x1
 17676 11f3 51       		.byte	0x51
 17677 11f4 28000000 		.4byte	.LVL319
 17678 11f8 46000000 		.4byte	.LVL323
 17679 11fc 0100     		.2byte	0x1
 17680 11fe 54       		.byte	0x54
 17681 11ff 46000000 		.4byte	.LVL323
 17682 1203 98000000 		.4byte	.LVL327
 17683 1207 0400     		.2byte	0x4
 17684 1209 F3       		.byte	0xf3
 17685 120a 01       		.uleb128 0x1
 17686 120b 51       		.byte	0x51
 17687 120c 9F       		.byte	0x9f
 17688 120d 98000000 		.4byte	.LVL327
 17689 1211 9A000000 		.4byte	.LVL328
 17690 1215 0100     		.2byte	0x1
 17691 1217 51       		.byte	0x51
 17692 1218 9A000000 		.4byte	.LVL328
 17693 121c BE000000 		.4byte	.LVL332
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 452


 17694 1220 0100     		.2byte	0x1
 17695 1222 54       		.byte	0x54
 17696 1223 BE000000 		.4byte	.LVL332
 17697 1227 C0000000 		.4byte	.LVL333
 17698 122b 0100     		.2byte	0x1
 17699 122d 51       		.byte	0x51
 17700 122e C0000000 		.4byte	.LVL333
 17701 1232 DC000000 		.4byte	.LVL336
 17702 1236 0100     		.2byte	0x1
 17703 1238 54       		.byte	0x54
 17704 1239 DC000000 		.4byte	.LVL336
 17705 123d F4000000 		.4byte	.LVL342
 17706 1241 0400     		.2byte	0x4
 17707 1243 F3       		.byte	0xf3
 17708 1244 01       		.uleb128 0x1
 17709 1245 51       		.byte	0x51
 17710 1246 9F       		.byte	0x9f
 17711 1247 F4000000 		.4byte	.LVL342
 17712 124b FE000000 		.4byte	.LVL343
 17713 124f 0100     		.2byte	0x1
 17714 1251 51       		.byte	0x51
 17715 1252 FE000000 		.4byte	.LVL343
 17716 1256 04010000 		.4byte	.LFE15
 17717 125a 0400     		.2byte	0x4
 17718 125c F3       		.byte	0xf3
 17719 125d 01       		.uleb128 0x1
 17720 125e 51       		.byte	0x51
 17721 125f 9F       		.byte	0x9f
 17722 1260 00000000 		.4byte	0
 17723 1264 00000000 		.4byte	0
 17724              	.LLST83:
 17725 1268 00000000 		.4byte	.LVL315
 17726 126c 2F000000 		.4byte	.LVL320-1
 17727 1270 0100     		.2byte	0x1
 17728 1272 52       		.byte	0x52
 17729 1273 2F000000 		.4byte	.LVL320-1
 17730 1277 98000000 		.4byte	.LVL327
 17731 127b 0100     		.2byte	0x1
 17732 127d 57       		.byte	0x57
 17733 127e 98000000 		.4byte	.LVL327
 17734 1282 A1000000 		.4byte	.LVL329-1
 17735 1286 0100     		.2byte	0x1
 17736 1288 52       		.byte	0x52
 17737 1289 A1000000 		.4byte	.LVL329-1
 17738 128d BE000000 		.4byte	.LVL332
 17739 1291 0100     		.2byte	0x1
 17740 1293 57       		.byte	0x57
 17741 1294 BE000000 		.4byte	.LVL332
 17742 1298 C7000000 		.4byte	.LVL334-1
 17743 129c 0100     		.2byte	0x1
 17744 129e 52       		.byte	0x52
 17745 129f C7000000 		.4byte	.LVL334-1
 17746 12a3 D0000000 		.4byte	.LVL335
 17747 12a7 0100     		.2byte	0x1
 17748 12a9 57       		.byte	0x57
 17749 12aa D0000000 		.4byte	.LVL335
 17750 12ae E6000000 		.4byte	.LVL339
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 453


 17751 12b2 0400     		.2byte	0x4
 17752 12b4 F3       		.byte	0xf3
 17753 12b5 01       		.uleb128 0x1
 17754 12b6 52       		.byte	0x52
 17755 12b7 9F       		.byte	0x9f
 17756 12b8 E6000000 		.4byte	.LVL339
 17757 12bc E8000000 		.4byte	.LVL340
 17758 12c0 0600     		.2byte	0x6
 17759 12c2 77       		.byte	0x77
 17760 12c3 00       		.sleb128 0
 17761 12c4 71       		.byte	0x71
 17762 12c5 00       		.sleb128 0
 17763 12c6 21       		.byte	0x21
 17764 12c7 9F       		.byte	0x9f
 17765 12c8 E8000000 		.4byte	.LVL340
 17766 12cc ED000000 		.4byte	.LVL341-1
 17767 12d0 0100     		.2byte	0x1
 17768 12d2 51       		.byte	0x51
 17769 12d3 F4000000 		.4byte	.LVL342
 17770 12d7 FE000000 		.4byte	.LVL343
 17771 12db 0100     		.2byte	0x1
 17772 12dd 52       		.byte	0x52
 17773 12de 00000000 		.4byte	0
 17774 12e2 00000000 		.4byte	0
 17775              	.LLST84:
 17776 12e6 22000000 		.4byte	.LVL317
 17777 12ea 26000000 		.4byte	.LVL318
 17778 12ee 0100     		.2byte	0x1
 17779 12f0 51       		.byte	0x51
 17780 12f1 26000000 		.4byte	.LVL318
 17781 12f5 3E000000 		.4byte	.LVL321
 17782 12f9 0100     		.2byte	0x1
 17783 12fb 58       		.byte	0x58
 17784 12fc 3E000000 		.4byte	.LVL321
 17785 1300 78000000 		.4byte	.LVL326
 17786 1304 0100     		.2byte	0x1
 17787 1306 59       		.byte	0x59
 17788 1307 78000000 		.4byte	.LVL326
 17789 130b 98000000 		.4byte	.LVL327
 17790 130f 0C00     		.2byte	0xc
 17791 1311 F3       		.byte	0xf3
 17792 1312 01       		.uleb128 0x1
 17793 1313 51       		.byte	0x51
 17794 1314 31       		.byte	0x31
 17795 1315 25       		.byte	0x25
 17796 1316 F3       		.byte	0xf3
 17797 1317 01       		.uleb128 0x1
 17798 1318 51       		.byte	0x51
 17799 1319 22       		.byte	0x22
 17800 131a 23       		.byte	0x23
 17801 131b 01       		.uleb128 0x1
 17802 131c 9F       		.byte	0x9f
 17803 131d 00000000 		.4byte	0
 17804 1321 00000000 		.4byte	0
 17805              	.LLST85:
 17806 1325 42000000 		.4byte	.LVL322
 17807 1329 78000000 		.4byte	.LVL326
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 454


 17808 132d 0600     		.2byte	0x6
 17809 132f 7A       		.byte	0x7a
 17810 1330 00       		.sleb128 0
 17811 1331 78       		.byte	0x78
 17812 1332 00       		.sleb128 0
 17813 1333 22       		.byte	0x22
 17814 1334 9F       		.byte	0x9f
 17815 1335 78000000 		.4byte	.LVL326
 17816 1339 98000000 		.4byte	.LVL327
 17817 133d 0600     		.2byte	0x6
 17818 133f 7A       		.byte	0x7a
 17819 1340 00       		.sleb128 0
 17820 1341 79       		.byte	0x79
 17821 1342 00       		.sleb128 0
 17822 1343 22       		.byte	0x22
 17823 1344 9F       		.byte	0x9f
 17824 1345 00000000 		.4byte	0
 17825 1349 00000000 		.4byte	0
 17826              	.LLST86:
 17827 134d 04000000 		.4byte	.LVL316
 17828 1351 30000000 		.4byte	.LVL320
 17829 1355 0200     		.2byte	0x2
 17830 1357 32       		.byte	0x32
 17831 1358 9F       		.byte	0x9f
 17832 1359 30000000 		.4byte	.LVL320
 17833 135d 6A000000 		.4byte	.LVL324
 17834 1361 0100     		.2byte	0x1
 17835 1363 50       		.byte	0x50
 17836 1364 6E000000 		.4byte	.LVL325
 17837 1368 98000000 		.4byte	.LVL327
 17838 136c 0100     		.2byte	0x1
 17839 136e 50       		.byte	0x50
 17840 136f 98000000 		.4byte	.LVL327
 17841 1373 A2000000 		.4byte	.LVL329
 17842 1377 0200     		.2byte	0x2
 17843 1379 32       		.byte	0x32
 17844 137a 9F       		.byte	0x9f
 17845 137b A2000000 		.4byte	.LVL329
 17846 137f AA000000 		.4byte	.LVL330
 17847 1383 0100     		.2byte	0x1
 17848 1385 50       		.byte	0x50
 17849 1386 BE000000 		.4byte	.LVL332
 17850 138a C8000000 		.4byte	.LVL334
 17851 138e 0200     		.2byte	0x2
 17852 1390 32       		.byte	0x32
 17853 1391 9F       		.byte	0x9f
 17854 1392 C8000000 		.4byte	.LVL334
 17855 1396 DE000000 		.4byte	.LVL337
 17856 139a 0100     		.2byte	0x1
 17857 139c 50       		.byte	0x50
 17858 139d F4000000 		.4byte	.LVL342
 17859 13a1 FE000000 		.4byte	.LVL343
 17860 13a5 0200     		.2byte	0x2
 17861 13a7 32       		.byte	0x32
 17862 13a8 9F       		.byte	0x9f
 17863 13a9 FE000000 		.4byte	.LVL343
 17864 13ad 04010000 		.4byte	.LFE15
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 455


 17865 13b1 0100     		.2byte	0x1
 17866 13b3 55       		.byte	0x55
 17867 13b4 00000000 		.4byte	0
 17868 13b8 00000000 		.4byte	0
 17869              	.LLST87:
 17870 13bc 00000000 		.4byte	.LVL344
 17871 13c0 2A000000 		.4byte	.LVL350
 17872 13c4 0100     		.2byte	0x1
 17873 13c6 50       		.byte	0x50
 17874 13c7 2A000000 		.4byte	.LVL350
 17875 13cb 6C000000 		.4byte	.LVL359
 17876 13cf 0400     		.2byte	0x4
 17877 13d1 F3       		.byte	0xf3
 17878 13d2 01       		.uleb128 0x1
 17879 13d3 50       		.byte	0x50
 17880 13d4 9F       		.byte	0x9f
 17881 13d5 6C000000 		.4byte	.LVL359
 17882 13d9 74000000 		.4byte	.LVL361
 17883 13dd 0100     		.2byte	0x1
 17884 13df 50       		.byte	0x50
 17885 13e0 74000000 		.4byte	.LVL361
 17886 13e4 8C000000 		.4byte	.LVL364
 17887 13e8 0400     		.2byte	0x4
 17888 13ea F3       		.byte	0xf3
 17889 13eb 01       		.uleb128 0x1
 17890 13ec 50       		.byte	0x50
 17891 13ed 9F       		.byte	0x9f
 17892 13ee 8C000000 		.4byte	.LVL364
 17893 13f2 94000000 		.4byte	.LVL366
 17894 13f6 0100     		.2byte	0x1
 17895 13f8 50       		.byte	0x50
 17896 13f9 94000000 		.4byte	.LVL366
 17897 13fd B0000000 		.4byte	.LVL370
 17898 1401 0400     		.2byte	0x4
 17899 1403 F3       		.byte	0xf3
 17900 1404 01       		.uleb128 0x1
 17901 1405 50       		.byte	0x50
 17902 1406 9F       		.byte	0x9f
 17903 1407 B0000000 		.4byte	.LVL370
 17904 140b B2000000 		.4byte	.LVL371
 17905 140f 0100     		.2byte	0x1
 17906 1411 50       		.byte	0x50
 17907 1412 B2000000 		.4byte	.LVL371
 17908 1416 B4000000 		.4byte	.LVL372
 17909 141a 0400     		.2byte	0x4
 17910 141c F3       		.byte	0xf3
 17911 141d 01       		.uleb128 0x1
 17912 141e 50       		.byte	0x50
 17913 141f 9F       		.byte	0x9f
 17914 1420 B4000000 		.4byte	.LVL372
 17915 1424 B6000000 		.4byte	.LVL373
 17916 1428 0100     		.2byte	0x1
 17917 142a 50       		.byte	0x50
 17918 142b B6000000 		.4byte	.LVL373
 17919 142f B8000000 		.4byte	.LVL374
 17920 1433 0400     		.2byte	0x4
 17921 1435 F3       		.byte	0xf3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 456


 17922 1436 01       		.uleb128 0x1
 17923 1437 50       		.byte	0x50
 17924 1438 9F       		.byte	0x9f
 17925 1439 B8000000 		.4byte	.LVL374
 17926 143d BA000000 		.4byte	.LVL375
 17927 1441 0100     		.2byte	0x1
 17928 1443 50       		.byte	0x50
 17929 1444 BA000000 		.4byte	.LVL375
 17930 1448 D4000000 		.4byte	.LFE14
 17931 144c 0400     		.2byte	0x4
 17932 144e F3       		.byte	0xf3
 17933 144f 01       		.uleb128 0x1
 17934 1450 50       		.byte	0x50
 17935 1451 9F       		.byte	0x9f
 17936 1452 00000000 		.4byte	0
 17937 1456 00000000 		.4byte	0
 17938              	.LLST88:
 17939 145a 00000000 		.4byte	.LVL344
 17940 145e 24000000 		.4byte	.LVL349
 17941 1462 0100     		.2byte	0x1
 17942 1464 51       		.byte	0x51
 17943 1465 24000000 		.4byte	.LVL349
 17944 1469 6C000000 		.4byte	.LVL359
 17945 146d 0100     		.2byte	0x1
 17946 146f 54       		.byte	0x54
 17947 1470 6C000000 		.4byte	.LVL359
 17948 1474 6E000000 		.4byte	.LVL360
 17949 1478 0100     		.2byte	0x1
 17950 147a 51       		.byte	0x51
 17951 147b 6E000000 		.4byte	.LVL360
 17952 147f 8C000000 		.4byte	.LVL364
 17953 1483 0100     		.2byte	0x1
 17954 1485 54       		.byte	0x54
 17955 1486 8C000000 		.4byte	.LVL364
 17956 148a 8E000000 		.4byte	.LVL365
 17957 148e 0100     		.2byte	0x1
 17958 1490 51       		.byte	0x51
 17959 1491 8E000000 		.4byte	.LVL365
 17960 1495 B0000000 		.4byte	.LVL370
 17961 1499 0100     		.2byte	0x1
 17962 149b 54       		.byte	0x54
 17963 149c B0000000 		.4byte	.LVL370
 17964 14a0 BC000000 		.4byte	.LVL376
 17965 14a4 0100     		.2byte	0x1
 17966 14a6 51       		.byte	0x51
 17967 14a7 BC000000 		.4byte	.LVL376
 17968 14ab D4000000 		.4byte	.LFE14
 17969 14af 0100     		.2byte	0x1
 17970 14b1 54       		.byte	0x54
 17971 14b2 00000000 		.4byte	0
 17972 14b6 00000000 		.4byte	0
 17973              	.LLST89:
 17974 14ba 3E000000 		.4byte	.LVL353
 17975 14be 5C000000 		.4byte	.LVL355
 17976 14c2 0100     		.2byte	0x1
 17977 14c4 55       		.byte	0x55
 17978 14c5 5C000000 		.4byte	.LVL355
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 457


 17979 14c9 64000000 		.4byte	.LVL356
 17980 14cd 0100     		.2byte	0x1
 17981 14cf 50       		.byte	0x50
 17982 14d0 64000000 		.4byte	.LVL356
 17983 14d4 66000000 		.4byte	.LVL357
 17984 14d8 0D00     		.2byte	0xd
 17985 14da 73       		.byte	0x73
 17986 14db 34       		.sleb128 52
 17987 14dc 94       		.byte	0x94
 17988 14dd 01       		.byte	0x1
 17989 14de 08       		.byte	0x8
 17990 14df FF       		.byte	0xff
 17991 14e0 1A       		.byte	0x1a
 17992 14e1 38       		.byte	0x38
 17993 14e2 24       		.byte	0x24
 17994 14e3 75       		.byte	0x75
 17995 14e4 00       		.sleb128 0
 17996 14e5 21       		.byte	0x21
 17997 14e6 9F       		.byte	0x9f
 17998 14e7 66000000 		.4byte	.LVL357
 17999 14eb 6A000000 		.4byte	.LVL358
 18000 14ef 0100     		.2byte	0x1
 18001 14f1 50       		.byte	0x50
 18002 14f2 6A000000 		.4byte	.LVL358
 18003 14f6 6C000000 		.4byte	.LVL359
 18004 14fa 0D00     		.2byte	0xd
 18005 14fc 73       		.byte	0x73
 18006 14fd 34       		.sleb128 52
 18007 14fe 94       		.byte	0x94
 18008 14ff 01       		.byte	0x1
 18009 1500 08       		.byte	0x8
 18010 1501 FF       		.byte	0xff
 18011 1502 1A       		.byte	0x1a
 18012 1503 38       		.byte	0x38
 18013 1504 24       		.byte	0x24
 18014 1505 75       		.byte	0x75
 18015 1506 00       		.sleb128 0
 18016 1507 21       		.byte	0x21
 18017 1508 9F       		.byte	0x9f
 18018 1509 C2000000 		.4byte	.LVL377
 18019 150d C8000000 		.4byte	.LVL378
 18020 1511 0100     		.2byte	0x1
 18021 1513 55       		.byte	0x55
 18022 1514 00000000 		.4byte	0
 18023 1518 00000000 		.4byte	0
 18024              	.LLST90:
 18025 151c 1E000000 		.4byte	.LVL347
 18026 1520 22000000 		.4byte	.LVL348
 18027 1524 0100     		.2byte	0x1
 18028 1526 51       		.byte	0x51
 18029 1527 22000000 		.4byte	.LVL348
 18030 152b 34000000 		.4byte	.LVL352
 18031 152f 0100     		.2byte	0x1
 18032 1531 55       		.byte	0x55
 18033 1532 34000000 		.4byte	.LVL352
 18034 1536 6C000000 		.4byte	.LVL359
 18035 153a 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 458


 18036 153c 57       		.byte	0x57
 18037 153d BC000000 		.4byte	.LVL376
 18038 1541 C2000000 		.4byte	.LVL377
 18039 1545 0100     		.2byte	0x1
 18040 1547 55       		.byte	0x55
 18041 1548 C2000000 		.4byte	.LVL377
 18042 154c C8000000 		.4byte	.LVL378
 18043 1550 0100     		.2byte	0x1
 18044 1552 57       		.byte	0x57
 18045 1553 00000000 		.4byte	0
 18046 1557 00000000 		.4byte	0
 18047              	.LLST91:
 18048 155b 10000000 		.4byte	.LVL346
 18049 155f 8A000000 		.4byte	.LVL363
 18050 1563 0300     		.2byte	0x3
 18051 1565 09       		.byte	0x9
 18052 1566 FF       		.byte	0xff
 18053 1567 9F       		.byte	0x9f
 18054 1568 8A000000 		.4byte	.LVL363
 18055 156c 8C000000 		.4byte	.LVL364
 18056 1570 0100     		.2byte	0x1
 18057 1572 50       		.byte	0x50
 18058 1573 8C000000 		.4byte	.LVL364
 18059 1577 AE000000 		.4byte	.LVL369
 18060 157b 0300     		.2byte	0x3
 18061 157d 09       		.byte	0x9
 18062 157e FF       		.byte	0xff
 18063 157f 9F       		.byte	0x9f
 18064 1580 AE000000 		.4byte	.LVL369
 18065 1584 B0000000 		.4byte	.LVL370
 18066 1588 0100     		.2byte	0x1
 18067 158a 50       		.byte	0x50
 18068 158b B8000000 		.4byte	.LVL374
 18069 158f D2000000 		.4byte	.LVL380
 18070 1593 0300     		.2byte	0x3
 18071 1595 09       		.byte	0x9
 18072 1596 FF       		.byte	0xff
 18073 1597 9F       		.byte	0x9f
 18074 1598 D2000000 		.4byte	.LVL380
 18075 159c D4000000 		.4byte	.LFE14
 18076 15a0 0100     		.2byte	0x1
 18077 15a2 50       		.byte	0x50
 18078 15a3 00000000 		.4byte	0
 18079 15a7 00000000 		.4byte	0
 18080              	.LLST92:
 18081 15ab 00000000 		.4byte	.LVL381
 18082 15af 3E000000 		.4byte	.LVL386
 18083 15b3 0100     		.2byte	0x1
 18084 15b5 50       		.byte	0x50
 18085 15b6 3E000000 		.4byte	.LVL386
 18086 15ba 88000000 		.4byte	.LVL393
 18087 15be 0100     		.2byte	0x1
 18088 15c0 56       		.byte	0x56
 18089 15c1 88000000 		.4byte	.LVL393
 18090 15c5 8A000000 		.4byte	.LVL394
 18091 15c9 0100     		.2byte	0x1
 18092 15cb 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 459


 18093 15cc 8A000000 		.4byte	.LVL394
 18094 15d0 8E000000 		.4byte	.LVL395
 18095 15d4 0400     		.2byte	0x4
 18096 15d6 F3       		.byte	0xf3
 18097 15d7 01       		.uleb128 0x1
 18098 15d8 50       		.byte	0x50
 18099 15d9 9F       		.byte	0x9f
 18100 15da 8E000000 		.4byte	.LVL395
 18101 15de 90000000 		.4byte	.LVL396
 18102 15e2 0100     		.2byte	0x1
 18103 15e4 50       		.byte	0x50
 18104 15e5 90000000 		.4byte	.LVL396
 18105 15e9 94000000 		.4byte	.LVL397
 18106 15ed 0100     		.2byte	0x1
 18107 15ef 56       		.byte	0x56
 18108 15f0 94000000 		.4byte	.LVL397
 18109 15f4 96000000 		.4byte	.LVL398
 18110 15f8 0100     		.2byte	0x1
 18111 15fa 50       		.byte	0x50
 18112 15fb 96000000 		.4byte	.LVL398
 18113 15ff B2000000 		.4byte	.LFE19
 18114 1603 0100     		.2byte	0x1
 18115 1605 56       		.byte	0x56
 18116 1606 00000000 		.4byte	0
 18117 160a 00000000 		.4byte	0
 18118              	.LLST93:
 18119 160e 00000000 		.4byte	.LVL381
 18120 1612 3E000000 		.4byte	.LVL386
 18121 1616 0100     		.2byte	0x1
 18122 1618 51       		.byte	0x51
 18123 1619 3E000000 		.4byte	.LVL386
 18124 161d 7E000000 		.4byte	.LVL392
 18125 1621 0100     		.2byte	0x1
 18126 1623 54       		.byte	0x54
 18127 1624 88000000 		.4byte	.LVL393
 18128 1628 9A000000 		.4byte	.LVL399
 18129 162c 0100     		.2byte	0x1
 18130 162e 51       		.byte	0x51
 18131 162f 9A000000 		.4byte	.LVL399
 18132 1633 B2000000 		.4byte	.LFE19
 18133 1637 0100     		.2byte	0x1
 18134 1639 54       		.byte	0x54
 18135 163a 00000000 		.4byte	0
 18136 163e 00000000 		.4byte	0
 18137              	.LLST94:
 18138 1642 3C000000 		.4byte	.LVL385
 18139 1646 6A000000 		.4byte	.LVL391
 18140 164a 0100     		.2byte	0x1
 18141 164c 58       		.byte	0x58
 18142 164d 9A000000 		.4byte	.LVL399
 18143 1651 AC000000 		.4byte	.LVL405
 18144 1655 0100     		.2byte	0x1
 18145 1657 58       		.byte	0x58
 18146 1658 00000000 		.4byte	0
 18147 165c 00000000 		.4byte	0
 18148              	.LLST95:
 18149 1660 1A000000 		.4byte	.LVL383
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 460


 18150 1664 48000000 		.4byte	.LVL388
 18151 1668 0100     		.2byte	0x1
 18152 166a 55       		.byte	0x55
 18153 166b 48000000 		.4byte	.LVL388
 18154 166f 5C000000 		.4byte	.LVL389
 18155 1673 0100     		.2byte	0x1
 18156 1675 50       		.byte	0x50
 18157 1676 5C000000 		.4byte	.LVL389
 18158 167a 88000000 		.4byte	.LVL393
 18159 167e 0100     		.2byte	0x1
 18160 1680 55       		.byte	0x55
 18161 1681 94000000 		.4byte	.LVL397
 18162 1685 9A000000 		.4byte	.LVL399
 18163 1689 0100     		.2byte	0x1
 18164 168b 55       		.byte	0x55
 18165 168c 9A000000 		.4byte	.LVL399
 18166 1690 9C000000 		.4byte	.LVL400
 18167 1694 0100     		.2byte	0x1
 18168 1696 50       		.byte	0x50
 18169 1697 9C000000 		.4byte	.LVL400
 18170 169b A0000000 		.4byte	.LVL401
 18171 169f 0100     		.2byte	0x1
 18172 16a1 55       		.byte	0x55
 18173 16a2 A0000000 		.4byte	.LVL401
 18174 16a6 A2000000 		.4byte	.LVL402
 18175 16aa 0100     		.2byte	0x1
 18176 16ac 50       		.byte	0x50
 18177 16ad A2000000 		.4byte	.LVL402
 18178 16b1 A6000000 		.4byte	.LVL403
 18179 16b5 0100     		.2byte	0x1
 18180 16b7 55       		.byte	0x55
 18181 16b8 A6000000 		.4byte	.LVL403
 18182 16bc A8000000 		.4byte	.LVL404
 18183 16c0 0100     		.2byte	0x1
 18184 16c2 50       		.byte	0x50
 18185 16c3 A8000000 		.4byte	.LVL404
 18186 16c7 B2000000 		.4byte	.LFE19
 18187 16cb 0100     		.2byte	0x1
 18188 16cd 55       		.byte	0x55
 18189 16ce 00000000 		.4byte	0
 18190 16d2 00000000 		.4byte	0
 18191              	.LLST96:
 18192 16d6 00000000 		.4byte	.LVL406
 18193 16da 1B000000 		.4byte	.LVL410-1
 18194 16de 0100     		.2byte	0x1
 18195 16e0 50       		.byte	0x50
 18196 16e1 1B000000 		.4byte	.LVL410-1
 18197 16e5 30000000 		.4byte	.LVL411
 18198 16e9 0100     		.2byte	0x1
 18199 16eb 57       		.byte	0x57
 18200 16ec 30000000 		.4byte	.LVL411
 18201 16f0 36000000 		.4byte	.LVL414
 18202 16f4 0100     		.2byte	0x1
 18203 16f6 50       		.byte	0x50
 18204 16f7 36000000 		.4byte	.LVL414
 18205 16fb 14010000 		.4byte	.LFE17
 18206 16ff 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 461


 18207 1701 57       		.byte	0x57
 18208 1702 00000000 		.4byte	0
 18209 1706 00000000 		.4byte	0
 18210              	.LLST97:
 18211 170a 00000000 		.4byte	.LVL406
 18212 170e 1B000000 		.4byte	.LVL410-1
 18213 1712 0100     		.2byte	0x1
 18214 1714 51       		.byte	0x51
 18215 1715 1B000000 		.4byte	.LVL410-1
 18216 1719 30000000 		.4byte	.LVL411
 18217 171d 0100     		.2byte	0x1
 18218 171f 58       		.byte	0x58
 18219 1720 30000000 		.4byte	.LVL411
 18220 1724 36000000 		.4byte	.LVL414
 18221 1728 0100     		.2byte	0x1
 18222 172a 51       		.byte	0x51
 18223 172b 36000000 		.4byte	.LVL414
 18224 172f 14010000 		.4byte	.LFE17
 18225 1733 0100     		.2byte	0x1
 18226 1735 58       		.byte	0x58
 18227 1736 00000000 		.4byte	0
 18228 173a 00000000 		.4byte	0
 18229              	.LLST98:
 18230 173e 1C000000 		.4byte	.LVL410
 18231 1742 30000000 		.4byte	.LVL411
 18232 1746 0100     		.2byte	0x1
 18233 1748 50       		.byte	0x50
 18234 1749 52000000 		.4byte	.LVL418
 18235 174d 60000000 		.4byte	.LVL419
 18236 1751 0100     		.2byte	0x1
 18237 1753 50       		.byte	0x50
 18238 1754 60000000 		.4byte	.LVL419
 18239 1758 6E000000 		.4byte	.LVL421
 18240 175c 0100     		.2byte	0x1
 18241 175e 53       		.byte	0x53
 18242 175f 72000000 		.4byte	.LVL422
 18243 1763 7A000000 		.4byte	.LVL426
 18244 1767 0100     		.2byte	0x1
 18245 1769 53       		.byte	0x53
 18246 176a 94000000 		.4byte	.LVL431
 18247 176e A6000000 		.4byte	.LVL432
 18248 1772 0100     		.2byte	0x1
 18249 1774 50       		.byte	0x50
 18250 1775 F4000000 		.4byte	.LVL439
 18251 1779 F6000000 		.4byte	.LVL440
 18252 177d 0100     		.2byte	0x1
 18253 177f 50       		.byte	0x50
 18254 1780 00010000 		.4byte	.LVL442
 18255 1784 0A010000 		.4byte	.LVL445
 18256 1788 0100     		.2byte	0x1
 18257 178a 50       		.byte	0x50
 18258 178b 00000000 		.4byte	0
 18259 178f 00000000 		.4byte	0
 18260              	.LLST99:
 18261 1793 3C000000 		.4byte	.LVL415
 18262 1797 42000000 		.4byte	.LVL416
 18263 179b 0200     		.2byte	0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 462


 18264 179d 30       		.byte	0x30
 18265 179e 9F       		.byte	0x9f
 18266 179f 42000000 		.4byte	.LVL416
 18267 17a3 6C000000 		.4byte	.LVL420
 18268 17a7 0100     		.2byte	0x1
 18269 17a9 54       		.byte	0x54
 18270 17aa 6E000000 		.4byte	.LVL421
 18271 17ae 72000000 		.4byte	.LVL422
 18272 17b2 0200     		.2byte	0x2
 18273 17b4 30       		.byte	0x30
 18274 17b5 9F       		.byte	0x9f
 18275 17b6 72000000 		.4byte	.LVL422
 18276 17ba 74000000 		.4byte	.LVL423
 18277 17be 0100     		.2byte	0x1
 18278 17c0 54       		.byte	0x54
 18279 17c1 76000000 		.4byte	.LVL424
 18280 17c5 86000000 		.4byte	.LVL429
 18281 17c9 0100     		.2byte	0x1
 18282 17cb 54       		.byte	0x54
 18283 17cc 86000000 		.4byte	.LVL429
 18284 17d0 8C000000 		.4byte	.LVL430
 18285 17d4 0200     		.2byte	0x2
 18286 17d6 32       		.byte	0x32
 18287 17d7 9F       		.byte	0x9f
 18288 17d8 8C000000 		.4byte	.LVL430
 18289 17dc F4000000 		.4byte	.LVL439
 18290 17e0 0100     		.2byte	0x1
 18291 17e2 54       		.byte	0x54
 18292 17e3 FA000000 		.4byte	.LVL441
 18293 17e7 00010000 		.4byte	.LVL442
 18294 17eb 0200     		.2byte	0x2
 18295 17ed 32       		.byte	0x32
 18296 17ee 9F       		.byte	0x9f
 18297 17ef 00010000 		.4byte	.LVL442
 18298 17f3 10010000 		.4byte	.LVL447
 18299 17f7 0100     		.2byte	0x1
 18300 17f9 54       		.byte	0x54
 18301 17fa 00000000 		.4byte	0
 18302 17fe 00000000 		.4byte	0
 18303              	.LLST100:
 18304 1802 0E000000 		.4byte	.LVL408
 18305 1806 18000000 		.4byte	.LVL409
 18306 180a 0100     		.2byte	0x1
 18307 180c 55       		.byte	0x55
 18308 180d 30000000 		.4byte	.LVL411
 18309 1811 32000000 		.4byte	.LVL412
 18310 1815 0100     		.2byte	0x1
 18311 1817 55       		.byte	0x55
 18312 1818 32000000 		.4byte	.LVL412
 18313 181c 34000000 		.4byte	.LVL413
 18314 1820 0200     		.2byte	0x2
 18315 1822 76       		.byte	0x76
 18316 1823 0C       		.sleb128 12
 18317 1824 34000000 		.4byte	.LVL413
 18318 1828 78000000 		.4byte	.LVL425
 18319 182c 0100     		.2byte	0x1
 18320 182e 55       		.byte	0x55
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 463


 18321 182f 7A000000 		.4byte	.LVL426
 18322 1833 F4000000 		.4byte	.LVL439
 18323 1837 0100     		.2byte	0x1
 18324 1839 55       		.byte	0x55
 18325 183a FA000000 		.4byte	.LVL441
 18326 183e 10010000 		.4byte	.LVL447
 18327 1842 0100     		.2byte	0x1
 18328 1844 55       		.byte	0x55
 18329 1845 00000000 		.4byte	0
 18330 1849 00000000 		.4byte	0
 18331              	.LLST101:
 18332 184d B2000000 		.4byte	.LVL433
 18333 1851 C2000000 		.4byte	.LVL434
 18334 1855 0100     		.2byte	0x1
 18335 1857 50       		.byte	0x50
 18336 1858 C8000000 		.4byte	.LVL436
 18337 185c D0000000 		.4byte	.LVL437
 18338 1860 0100     		.2byte	0x1
 18339 1862 53       		.byte	0x53
 18340 1863 E8000000 		.4byte	.LVL438
 18341 1867 F4000000 		.4byte	.LVL439
 18342 186b 0100     		.2byte	0x1
 18343 186d 53       		.byte	0x53
 18344 186e 0E010000 		.4byte	.LVL446
 18345 1872 10010000 		.4byte	.LVL447
 18346 1876 0100     		.2byte	0x1
 18347 1878 53       		.byte	0x53
 18348 1879 00000000 		.4byte	0
 18349 187d 00000000 		.4byte	0
 18350              	.LLST102:
 18351 1881 00000000 		.4byte	.LVL448
 18352 1885 1C000000 		.4byte	.LVL453
 18353 1889 0100     		.2byte	0x1
 18354 188b 50       		.byte	0x50
 18355 188c 1C000000 		.4byte	.LVL453
 18356 1890 64000000 		.4byte	.LVL461
 18357 1894 0100     		.2byte	0x1
 18358 1896 57       		.byte	0x57
 18359 1897 64000000 		.4byte	.LVL461
 18360 189b 66000000 		.4byte	.LVL462
 18361 189f 0100     		.2byte	0x1
 18362 18a1 50       		.byte	0x50
 18363 18a2 66000000 		.4byte	.LVL462
 18364 18a6 68000000 		.4byte	.LVL463
 18365 18aa 0400     		.2byte	0x4
 18366 18ac F3       		.byte	0xf3
 18367 18ad 01       		.uleb128 0x1
 18368 18ae 50       		.byte	0x50
 18369 18af 9F       		.byte	0x9f
 18370 18b0 68000000 		.4byte	.LVL463
 18371 18b4 6A000000 		.4byte	.LVL464
 18372 18b8 0100     		.2byte	0x1
 18373 18ba 50       		.byte	0x50
 18374 18bb 6A000000 		.4byte	.LVL464
 18375 18bf 7C000000 		.4byte	.LFE16
 18376 18c3 0100     		.2byte	0x1
 18377 18c5 57       		.byte	0x57
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 464


 18378 18c6 00000000 		.4byte	0
 18379 18ca 00000000 		.4byte	0
 18380              	.LLST103:
 18381 18ce 00000000 		.4byte	.LVL448
 18382 18d2 0E000000 		.4byte	.LVL451
 18383 18d6 0100     		.2byte	0x1
 18384 18d8 51       		.byte	0x51
 18385 18d9 0E000000 		.4byte	.LVL451
 18386 18dd 5A000000 		.4byte	.LVL459
 18387 18e1 0100     		.2byte	0x1
 18388 18e3 56       		.byte	0x56
 18389 18e4 5A000000 		.4byte	.LVL459
 18390 18e8 64000000 		.4byte	.LVL461
 18391 18ec 0100     		.2byte	0x1
 18392 18ee 55       		.byte	0x55
 18393 18ef 64000000 		.4byte	.LVL461
 18394 18f3 68000000 		.4byte	.LVL463
 18395 18f7 0100     		.2byte	0x1
 18396 18f9 51       		.byte	0x51
 18397 18fa 68000000 		.4byte	.LVL463
 18398 18fe 7C000000 		.4byte	.LFE16
 18399 1902 0100     		.2byte	0x1
 18400 1904 56       		.byte	0x56
 18401 1905 00000000 		.4byte	0
 18402 1909 00000000 		.4byte	0
 18403              	.LLST104:
 18404 190d 00000000 		.4byte	.LVL448
 18405 1911 1A000000 		.4byte	.LVL452
 18406 1915 0100     		.2byte	0x1
 18407 1917 52       		.byte	0x52
 18408 1918 1A000000 		.4byte	.LVL452
 18409 191c 1F000000 		.4byte	.LVL454-1
 18410 1920 0100     		.2byte	0x1
 18411 1922 51       		.byte	0x51
 18412 1923 1F000000 		.4byte	.LVL454-1
 18413 1927 64000000 		.4byte	.LVL461
 18414 192b 0400     		.2byte	0x4
 18415 192d F3       		.byte	0xf3
 18416 192e 01       		.uleb128 0x1
 18417 192f 52       		.byte	0x52
 18418 1930 9F       		.byte	0x9f
 18419 1931 64000000 		.4byte	.LVL461
 18420 1935 68000000 		.4byte	.LVL463
 18421 1939 0100     		.2byte	0x1
 18422 193b 52       		.byte	0x52
 18423 193c 68000000 		.4byte	.LVL463
 18424 1940 6C000000 		.4byte	.LVL465
 18425 1944 0100     		.2byte	0x1
 18426 1946 51       		.byte	0x51
 18427 1947 6C000000 		.4byte	.LVL465
 18428 194b 7C000000 		.4byte	.LFE16
 18429 194f 0400     		.2byte	0x4
 18430 1951 F3       		.byte	0xf3
 18431 1952 01       		.uleb128 0x1
 18432 1953 52       		.byte	0x52
 18433 1954 9F       		.byte	0x9f
 18434 1955 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 465


 18435 1959 00000000 		.4byte	0
 18436              	.LLST105:
 18437 195d 04000000 		.4byte	.LVL449
 18438 1961 20000000 		.4byte	.LVL454
 18439 1965 0200     		.2byte	0x2
 18440 1967 30       		.byte	0x30
 18441 1968 9F       		.byte	0x9f
 18442 1969 20000000 		.4byte	.LVL454
 18443 196d 22000000 		.4byte	.LVL455
 18444 1971 0100     		.2byte	0x1
 18445 1973 50       		.byte	0x50
 18446 1974 42000000 		.4byte	.LVL458
 18447 1978 62000000 		.4byte	.LVL460
 18448 197c 0100     		.2byte	0x1
 18449 197e 50       		.byte	0x50
 18450 197f 64000000 		.4byte	.LVL461
 18451 1983 6C000000 		.4byte	.LVL465
 18452 1987 0200     		.2byte	0x2
 18453 1989 30       		.byte	0x30
 18454 198a 9F       		.byte	0x9f
 18455 198b 6C000000 		.4byte	.LVL465
 18456 198f 6E000000 		.4byte	.LVL466
 18457 1993 0100     		.2byte	0x1
 18458 1995 50       		.byte	0x50
 18459 1996 7A000000 		.4byte	.LVL472
 18460 199a 7C000000 		.4byte	.LFE16
 18461 199e 0100     		.2byte	0x1
 18462 19a0 50       		.byte	0x50
 18463 19a1 00000000 		.4byte	0
 18464 19a5 00000000 		.4byte	0
 18465              	.LLST106:
 18466 19a9 2A000000 		.4byte	.LVL456
 18467 19ad 3E000000 		.4byte	.LVL457
 18468 19b1 0100     		.2byte	0x1
 18469 19b3 50       		.byte	0x50
 18470 19b4 3E000000 		.4byte	.LVL457
 18471 19b8 64000000 		.4byte	.LVL461
 18472 19bc 0100     		.2byte	0x1
 18473 19be 55       		.byte	0x55
 18474 19bf 6E000000 		.4byte	.LVL466
 18475 19c3 70000000 		.4byte	.LVL467
 18476 19c7 0100     		.2byte	0x1
 18477 19c9 50       		.byte	0x50
 18478 19ca 70000000 		.4byte	.LVL467
 18479 19ce 72000000 		.4byte	.LVL468
 18480 19d2 0100     		.2byte	0x1
 18481 19d4 55       		.byte	0x55
 18482 19d5 72000000 		.4byte	.LVL468
 18483 19d9 74000000 		.4byte	.LVL469
 18484 19dd 0100     		.2byte	0x1
 18485 19df 50       		.byte	0x50
 18486 19e0 74000000 		.4byte	.LVL469
 18487 19e4 76000000 		.4byte	.LVL470
 18488 19e8 0100     		.2byte	0x1
 18489 19ea 55       		.byte	0x55
 18490 19eb 76000000 		.4byte	.LVL470
 18491 19ef 78000000 		.4byte	.LVL471
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 466


 18492 19f3 0100     		.2byte	0x1
 18493 19f5 50       		.byte	0x50
 18494 19f6 78000000 		.4byte	.LVL471
 18495 19fa 7C000000 		.4byte	.LFE16
 18496 19fe 0100     		.2byte	0x1
 18497 1a00 55       		.byte	0x55
 18498 1a01 00000000 		.4byte	0
 18499 1a05 00000000 		.4byte	0
 18500              	.LLST107:
 18501 1a09 00000000 		.4byte	.LVL473
 18502 1a0d 0A000000 		.4byte	.LVL475
 18503 1a11 0100     		.2byte	0x1
 18504 1a13 50       		.byte	0x50
 18505 1a14 0A000000 		.4byte	.LVL475
 18506 1a18 20000000 		.4byte	.LFE27
 18507 1a1c 0100     		.2byte	0x1
 18508 1a1e 54       		.byte	0x54
 18509 1a1f 00000000 		.4byte	0
 18510 1a23 00000000 		.4byte	0
 18511              	.LLST108:
 18512 1a27 0E000000 		.4byte	.LVL476
 18513 1a2b 1E000000 		.4byte	.LVL477
 18514 1a2f 0100     		.2byte	0x1
 18515 1a31 50       		.byte	0x50
 18516 1a32 00000000 		.4byte	0
 18517 1a36 00000000 		.4byte	0
 18518              	.LLST109:
 18519 1a3a 00000000 		.4byte	.LVL478
 18520 1a3e 09000000 		.4byte	.LVL479-1
 18521 1a42 0100     		.2byte	0x1
 18522 1a44 50       		.byte	0x50
 18523 1a45 09000000 		.4byte	.LVL479-1
 18524 1a49 52000000 		.4byte	.LFE18
 18525 1a4d 0100     		.2byte	0x1
 18526 1a4f 55       		.byte	0x55
 18527 1a50 00000000 		.4byte	0
 18528 1a54 00000000 		.4byte	0
 18529              	.LLST110:
 18530 1a58 00000000 		.4byte	.LVL478
 18531 1a5c 09000000 		.4byte	.LVL479-1
 18532 1a60 0100     		.2byte	0x1
 18533 1a62 51       		.byte	0x51
 18534 1a63 09000000 		.4byte	.LVL479-1
 18535 1a67 2A000000 		.4byte	.LVL484
 18536 1a6b 0100     		.2byte	0x1
 18537 1a6d 54       		.byte	0x54
 18538 1a6e 2A000000 		.4byte	.LVL484
 18539 1a72 4E000000 		.4byte	.LVL488
 18540 1a76 0400     		.2byte	0x4
 18541 1a78 F3       		.byte	0xf3
 18542 1a79 01       		.uleb128 0x1
 18543 1a7a 51       		.byte	0x51
 18544 1a7b 9F       		.byte	0x9f
 18545 1a7c 4E000000 		.4byte	.LVL488
 18546 1a80 52000000 		.4byte	.LFE18
 18547 1a84 0100     		.2byte	0x1
 18548 1a86 54       		.byte	0x54
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 467


 18549 1a87 00000000 		.4byte	0
 18550 1a8b 00000000 		.4byte	0
 18551              	.LLST111:
 18552 1a8f 16000000 		.4byte	.LVL481
 18553 1a93 24000000 		.4byte	.LVL482
 18554 1a97 0100     		.2byte	0x1
 18555 1a99 50       		.byte	0x50
 18556 1a9a 24000000 		.4byte	.LVL482
 18557 1a9e 4E000000 		.4byte	.LVL488
 18558 1aa2 0100     		.2byte	0x1
 18559 1aa4 57       		.byte	0x57
 18560 1aa5 00000000 		.4byte	0
 18561 1aa9 00000000 		.4byte	0
 18562              	.LLST112:
 18563 1aad 28000000 		.4byte	.LVL483
 18564 1ab1 2C000000 		.4byte	.LVL485
 18565 1ab5 0200     		.2byte	0x2
 18566 1ab7 30       		.byte	0x30
 18567 1ab8 9F       		.byte	0x9f
 18568 1ab9 2C000000 		.4byte	.LVL485
 18569 1abd 4E000000 		.4byte	.LVL488
 18570 1ac1 0100     		.2byte	0x1
 18571 1ac3 54       		.byte	0x54
 18572 1ac4 00000000 		.4byte	0
 18573 1ac8 00000000 		.4byte	0
 18574              	.LLST113:
 18575 1acc 28000000 		.4byte	.LVL483
 18576 1ad0 4E000000 		.4byte	.LVL488
 18577 1ad4 0200     		.2byte	0x2
 18578 1ad6 31       		.byte	0x31
 18579 1ad7 9F       		.byte	0x9f
 18580 1ad8 00000000 		.4byte	0
 18581 1adc 00000000 		.4byte	0
 18582              	.LLST114:
 18583 1ae0 28000000 		.4byte	.LVL483
 18584 1ae4 4E000000 		.4byte	.LVL488
 18585 1ae8 0100     		.2byte	0x1
 18586 1aea 56       		.byte	0x56
 18587 1aeb 00000000 		.4byte	0
 18588 1aef 00000000 		.4byte	0
 18589              	.LLST115:
 18590 1af3 00000000 		.4byte	.LVL489
 18591 1af7 3C000000 		.4byte	.LVL493
 18592 1afb 0100     		.2byte	0x1
 18593 1afd 50       		.byte	0x50
 18594 1afe 3C000000 		.4byte	.LVL493
 18595 1b02 40000000 		.4byte	.LVL494
 18596 1b06 0100     		.2byte	0x1
 18597 1b08 54       		.byte	0x54
 18598 1b09 40000000 		.4byte	.LVL494
 18599 1b0d 4D000000 		.4byte	.LVL495-1
 18600 1b11 0100     		.2byte	0x1
 18601 1b13 50       		.byte	0x50
 18602 1b14 4D000000 		.4byte	.LVL495-1
 18603 1b18 AC000000 		.4byte	.LVL507
 18604 1b1c 0100     		.2byte	0x1
 18605 1b1e 54       		.byte	0x54
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 468


 18606 1b1f AC000000 		.4byte	.LVL507
 18607 1b23 AE000000 		.4byte	.LVL508
 18608 1b27 0100     		.2byte	0x1
 18609 1b29 50       		.byte	0x50
 18610 1b2a AE000000 		.4byte	.LVL508
 18611 1b2e B2000000 		.4byte	.LVL509
 18612 1b32 0400     		.2byte	0x4
 18613 1b34 F3       		.byte	0xf3
 18614 1b35 01       		.uleb128 0x1
 18615 1b36 50       		.byte	0x50
 18616 1b37 9F       		.byte	0x9f
 18617 1b38 B2000000 		.4byte	.LVL509
 18618 1b3c D6000000 		.4byte	.LFE20
 18619 1b40 0100     		.2byte	0x1
 18620 1b42 54       		.byte	0x54
 18621 1b43 00000000 		.4byte	0
 18622 1b47 00000000 		.4byte	0
 18623              	.LLST116:
 18624 1b4b 00000000 		.4byte	.LVL489
 18625 1b4f 2C000000 		.4byte	.LVL492
 18626 1b53 0100     		.2byte	0x1
 18627 1b55 51       		.byte	0x51
 18628 1b56 2C000000 		.4byte	.LVL492
 18629 1b5a AC000000 		.4byte	.LVL507
 18630 1b5e 0100     		.2byte	0x1
 18631 1b60 58       		.byte	0x58
 18632 1b61 AC000000 		.4byte	.LVL507
 18633 1b65 B2000000 		.4byte	.LVL509
 18634 1b69 0100     		.2byte	0x1
 18635 1b6b 51       		.byte	0x51
 18636 1b6c B2000000 		.4byte	.LVL509
 18637 1b70 D6000000 		.4byte	.LFE20
 18638 1b74 0100     		.2byte	0x1
 18639 1b76 58       		.byte	0x58
 18640 1b77 00000000 		.4byte	0
 18641 1b7b 00000000 		.4byte	0
 18642              	.LLST117:
 18643 1b7f 50000000 		.4byte	.LVL496
 18644 1b83 6C000000 		.4byte	.LVL497
 18645 1b87 0100     		.2byte	0x1
 18646 1b89 50       		.byte	0x50
 18647 1b8a 6C000000 		.4byte	.LVL497
 18648 1b8e 70000000 		.4byte	.LVL498
 18649 1b92 0100     		.2byte	0x1
 18650 1b94 59       		.byte	0x59
 18651 1b95 70000000 		.4byte	.LVL498
 18652 1b99 74000000 		.4byte	.LVL499
 18653 1b9d 0100     		.2byte	0x1
 18654 1b9f 50       		.byte	0x50
 18655 1ba0 74000000 		.4byte	.LVL499
 18656 1ba4 78000000 		.4byte	.LVL500
 18657 1ba8 0100     		.2byte	0x1
 18658 1baa 59       		.byte	0x59
 18659 1bab 78000000 		.4byte	.LVL500
 18660 1baf 8A000000 		.4byte	.LVL501
 18661 1bb3 0100     		.2byte	0x1
 18662 1bb5 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 469


 18663 1bb6 8A000000 		.4byte	.LVL501
 18664 1bba 8D000000 		.4byte	.LVL502-1
 18665 1bbe 0100     		.2byte	0x1
 18666 1bc0 51       		.byte	0x51
 18667 1bc1 8D000000 		.4byte	.LVL502-1
 18668 1bc5 9E000000 		.4byte	.LVL504
 18669 1bc9 0100     		.2byte	0x1
 18670 1bcb 59       		.byte	0x59
 18671 1bcc B2000000 		.4byte	.LVL509
 18672 1bd0 B4000000 		.4byte	.LVL510
 18673 1bd4 0100     		.2byte	0x1
 18674 1bd6 50       		.byte	0x50
 18675 1bd7 B4000000 		.4byte	.LVL510
 18676 1bdb B8000000 		.4byte	.LVL511
 18677 1bdf 0100     		.2byte	0x1
 18678 1be1 59       		.byte	0x59
 18679 1be2 B8000000 		.4byte	.LVL511
 18680 1be6 BA000000 		.4byte	.LVL512
 18681 1bea 0100     		.2byte	0x1
 18682 1bec 50       		.byte	0x50
 18683 1bed BA000000 		.4byte	.LVL512
 18684 1bf1 BE000000 		.4byte	.LVL513
 18685 1bf5 0100     		.2byte	0x1
 18686 1bf7 59       		.byte	0x59
 18687 1bf8 BE000000 		.4byte	.LVL513
 18688 1bfc C0000000 		.4byte	.LVL514
 18689 1c00 0100     		.2byte	0x1
 18690 1c02 50       		.byte	0x50
 18691 1c03 C0000000 		.4byte	.LVL514
 18692 1c07 C4000000 		.4byte	.LVL515
 18693 1c0b 0100     		.2byte	0x1
 18694 1c0d 59       		.byte	0x59
 18695 1c0e C4000000 		.4byte	.LVL515
 18696 1c12 C6000000 		.4byte	.LVL516
 18697 1c16 0100     		.2byte	0x1
 18698 1c18 50       		.byte	0x50
 18699 1c19 C6000000 		.4byte	.LVL516
 18700 1c1d CA000000 		.4byte	.LVL517
 18701 1c21 0100     		.2byte	0x1
 18702 1c23 59       		.byte	0x59
 18703 1c24 CA000000 		.4byte	.LVL517
 18704 1c28 CC000000 		.4byte	.LVL518
 18705 1c2c 0100     		.2byte	0x1
 18706 1c2e 50       		.byte	0x50
 18707 1c2f CC000000 		.4byte	.LVL518
 18708 1c33 D6000000 		.4byte	.LFE20
 18709 1c37 0100     		.2byte	0x1
 18710 1c39 59       		.byte	0x59
 18711 1c3a 00000000 		.4byte	0
 18712 1c3e 00000000 		.4byte	0
 18713              	.LLST118:
 18714 1c42 06000000 		.4byte	.LVL490
 18715 1c46 A2000000 		.4byte	.LVL505
 18716 1c4a 0100     		.2byte	0x1
 18717 1c4c 56       		.byte	0x56
 18718 1c4d A2000000 		.4byte	.LVL505
 18719 1c51 A4000000 		.4byte	.LVL506
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 470


 18720 1c55 0300     		.2byte	0x3
 18721 1c57 76       		.byte	0x76
 18722 1c58 4C       		.sleb128 -52
 18723 1c59 9F       		.byte	0x9f
 18724 1c5a AC000000 		.4byte	.LVL507
 18725 1c5e D6000000 		.4byte	.LFE20
 18726 1c62 0100     		.2byte	0x1
 18727 1c64 56       		.byte	0x56
 18728 1c65 00000000 		.4byte	0
 18729 1c69 00000000 		.4byte	0
 18730              	.LLST119:
 18731 1c6d 00000000 		.4byte	.LVL520
 18732 1c71 0B000000 		.4byte	.LVL522-1
 18733 1c75 0100     		.2byte	0x1
 18734 1c77 50       		.byte	0x50
 18735 1c78 0B000000 		.4byte	.LVL522-1
 18736 1c7c 56000000 		.4byte	.LFE25
 18737 1c80 0100     		.2byte	0x1
 18738 1c82 54       		.byte	0x54
 18739 1c83 00000000 		.4byte	0
 18740 1c87 00000000 		.4byte	0
 18741              	.LLST120:
 18742 1c8b 0C000000 		.4byte	.LVL522
 18743 1c8f 12000000 		.4byte	.LVL523
 18744 1c93 0100     		.2byte	0x1
 18745 1c95 50       		.byte	0x50
 18746 1c96 16000000 		.4byte	.LVL524
 18747 1c9a 1C000000 		.4byte	.LVL525
 18748 1c9e 0100     		.2byte	0x1
 18749 1ca0 50       		.byte	0x50
 18750 1ca1 44000000 		.4byte	.LVL530
 18751 1ca5 4E000000 		.4byte	.LVL533
 18752 1ca9 0100     		.2byte	0x1
 18753 1cab 50       		.byte	0x50
 18754 1cac 00000000 		.4byte	0
 18755 1cb0 00000000 		.4byte	0
 18756              	.LLST121:
 18757 1cb4 1E000000 		.4byte	.LVL526
 18758 1cb8 22000000 		.4byte	.LVL527
 18759 1cbc 0100     		.2byte	0x1
 18760 1cbe 53       		.byte	0x53
 18761 1cbf 22000000 		.4byte	.LVL527
 18762 1cc3 28000000 		.4byte	.LVL528
 18763 1cc7 0200     		.2byte	0x2
 18764 1cc9 70       		.byte	0x70
 18765 1cca 00       		.sleb128 0
 18766 1ccb 4E000000 		.4byte	.LVL533
 18767 1ccf 52000000 		.4byte	.LVL534
 18768 1cd3 0100     		.2byte	0x1
 18769 1cd5 53       		.byte	0x53
 18770 1cd6 00000000 		.4byte	0
 18771 1cda 00000000 		.4byte	0
 18772              	.LLST122:
 18773 1cde 00000000 		.4byte	.LVL535
 18774 1ce2 40000000 		.4byte	.LVL538
 18775 1ce6 0100     		.2byte	0x1
 18776 1ce8 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 471


 18777 1ce9 40000000 		.4byte	.LVL538
 18778 1ced BA000000 		.4byte	.LFE30
 18779 1cf1 0100     		.2byte	0x1
 18780 1cf3 54       		.byte	0x54
 18781 1cf4 00000000 		.4byte	0
 18782 1cf8 00000000 		.4byte	0
 18783              	.LLST123:
 18784 1cfc 00000000 		.4byte	.LVL535
 18785 1d00 3E000000 		.4byte	.LVL537
 18786 1d04 0100     		.2byte	0x1
 18787 1d06 51       		.byte	0x51
 18788 1d07 3E000000 		.4byte	.LVL537
 18789 1d0b 48000000 		.4byte	.LVL541
 18790 1d0f 0400     		.2byte	0x4
 18791 1d11 F3       		.byte	0xf3
 18792 1d12 01       		.uleb128 0x1
 18793 1d13 51       		.byte	0x51
 18794 1d14 9F       		.byte	0x9f
 18795 1d15 00000000 		.4byte	0
 18796 1d19 00000000 		.4byte	0
 18797              	.LLST124:
 18798 1d1d 46000000 		.4byte	.LVL540
 18799 1d21 48000000 		.4byte	.LVL541
 18800 1d25 0100     		.2byte	0x1
 18801 1d27 56       		.byte	0x56
 18802 1d28 50000000 		.4byte	.LVL542
 18803 1d2c 56000000 		.4byte	.LVL543
 18804 1d30 0100     		.2byte	0x1
 18805 1d32 50       		.byte	0x50
 18806 1d33 5A000000 		.4byte	.LVL544
 18807 1d37 76000000 		.4byte	.LVL547
 18808 1d3b 0100     		.2byte	0x1
 18809 1d3d 50       		.byte	0x50
 18810 1d3e 76000000 		.4byte	.LVL547
 18811 1d42 78000000 		.4byte	.LVL548
 18812 1d46 0200     		.2byte	0x2
 18813 1d48 30       		.byte	0x30
 18814 1d49 9F       		.byte	0x9f
 18815 1d4a 78000000 		.4byte	.LVL548
 18816 1d4e 9E000000 		.4byte	.LVL550
 18817 1d52 0100     		.2byte	0x1
 18818 1d54 50       		.byte	0x50
 18819 1d55 A6000000 		.4byte	.LVL552
 18820 1d59 B4000000 		.4byte	.LVL554
 18821 1d5d 0100     		.2byte	0x1
 18822 1d5f 50       		.byte	0x50
 18823 1d60 B4000000 		.4byte	.LVL554
 18824 1d64 BA000000 		.4byte	.LFE30
 18825 1d68 0100     		.2byte	0x1
 18826 1d6a 56       		.byte	0x56
 18827 1d6b 00000000 		.4byte	0
 18828 1d6f 00000000 		.4byte	0
 18829              	.LLST125:
 18830 1d73 5E000000 		.4byte	.LVL545
 18831 1d77 72000000 		.4byte	.LVL546
 18832 1d7b 0100     		.2byte	0x1
 18833 1d7d 53       		.byte	0x53
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 472


 18834 1d7e 72000000 		.4byte	.LVL546
 18835 1d82 76000000 		.4byte	.LVL547
 18836 1d86 0200     		.2byte	0x2
 18837 1d88 74       		.byte	0x74
 18838 1d89 2B       		.sleb128 43
 18839 1d8a 78000000 		.4byte	.LVL548
 18840 1d8e 8A000000 		.4byte	.LVL549
 18841 1d92 0100     		.2byte	0x1
 18842 1d94 53       		.byte	0x53
 18843 1d95 8A000000 		.4byte	.LVL549
 18844 1d99 A1000000 		.4byte	.LVL551-1
 18845 1d9d 0200     		.2byte	0x2
 18846 1d9f 74       		.byte	0x74
 18847 1da0 2B       		.sleb128 43
 18848 1da1 A6000000 		.4byte	.LVL552
 18849 1da5 B2000000 		.4byte	.LVL553
 18850 1da9 0100     		.2byte	0x1
 18851 1dab 53       		.byte	0x53
 18852 1dac B2000000 		.4byte	.LVL553
 18853 1db0 B4000000 		.4byte	.LVL554
 18854 1db4 0200     		.2byte	0x2
 18855 1db6 74       		.byte	0x74
 18856 1db7 2B       		.sleb128 43
 18857 1db8 00000000 		.4byte	0
 18858 1dbc 00000000 		.4byte	0
 18859              	.LLST126:
 18860 1dc0 00000000 		.4byte	.LVL555
 18861 1dc4 0D000000 		.4byte	.LVL558-1
 18862 1dc8 0100     		.2byte	0x1
 18863 1dca 50       		.byte	0x50
 18864 1dcb 0D000000 		.4byte	.LVL558-1
 18865 1dcf 4C000000 		.4byte	.LFE21
 18866 1dd3 0100     		.2byte	0x1
 18867 1dd5 54       		.byte	0x54
 18868 1dd6 00000000 		.4byte	0
 18869 1dda 00000000 		.4byte	0
 18870              	.LLST127:
 18871 1dde 00000000 		.4byte	.LVL555
 18872 1de2 0A000000 		.4byte	.LVL557
 18873 1de6 0100     		.2byte	0x1
 18874 1de8 51       		.byte	0x51
 18875 1de9 0A000000 		.4byte	.LVL557
 18876 1ded 4C000000 		.4byte	.LFE21
 18877 1df1 0100     		.2byte	0x1
 18878 1df3 57       		.byte	0x57
 18879 1df4 00000000 		.4byte	0
 18880 1df8 00000000 		.4byte	0
 18881              	.LLST128:
 18882 1dfc 0E000000 		.4byte	.LVL558
 18883 1e00 18000000 		.4byte	.LVL560
 18884 1e04 0100     		.2byte	0x1
 18885 1e06 50       		.byte	0x50
 18886 1e07 1C000000 		.4byte	.LVL561
 18887 1e0b 38000000 		.4byte	.LVL564
 18888 1e0f 0100     		.2byte	0x1
 18889 1e11 50       		.byte	0x50
 18890 1e12 3C000000 		.4byte	.LVL565
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 473


 18891 1e16 42000000 		.4byte	.LVL566
 18892 1e1a 0100     		.2byte	0x1
 18893 1e1c 50       		.byte	0x50
 18894 1e1d 42000000 		.4byte	.LVL566
 18895 1e21 4C000000 		.4byte	.LFE21
 18896 1e25 0100     		.2byte	0x1
 18897 1e27 52       		.byte	0x52
 18898 1e28 00000000 		.4byte	0
 18899 1e2c 00000000 		.4byte	0
 18900              	.LLST129:
 18901 1e30 14000000 		.4byte	.LVL559
 18902 1e34 42000000 		.4byte	.LVL566
 18903 1e38 0100     		.2byte	0x1
 18904 1e3a 55       		.byte	0x55
 18905 1e3b 00000000 		.4byte	0
 18906 1e3f 00000000 		.4byte	0
 18907              	.LLST130:
 18908 1e43 00000000 		.4byte	.LVL568
 18909 1e47 0B000000 		.4byte	.LVL570-1
 18910 1e4b 0100     		.2byte	0x1
 18911 1e4d 50       		.byte	0x50
 18912 1e4e 0B000000 		.4byte	.LVL570-1
 18913 1e52 3A000000 		.4byte	.LFE26
 18914 1e56 0100     		.2byte	0x1
 18915 1e58 54       		.byte	0x54
 18916 1e59 00000000 		.4byte	0
 18917 1e5d 00000000 		.4byte	0
 18918              	.LLST131:
 18919 1e61 0C000000 		.4byte	.LVL570
 18920 1e65 14000000 		.4byte	.LVL571
 18921 1e69 0100     		.2byte	0x1
 18922 1e6b 50       		.byte	0x50
 18923 1e6c 18000000 		.4byte	.LVL572
 18924 1e70 22000000 		.4byte	.LVL573
 18925 1e74 0100     		.2byte	0x1
 18926 1e76 50       		.byte	0x50
 18927 1e77 36000000 		.4byte	.LVL576
 18928 1e7b 3A000000 		.4byte	.LFE26
 18929 1e7f 0100     		.2byte	0x1
 18930 1e81 55       		.byte	0x55
 18931 1e82 00000000 		.4byte	0
 18932 1e86 00000000 		.4byte	0
 18933              	.LLST132:
 18934 1e8a 00000000 		.4byte	.LVL577
 18935 1e8e 0C000000 		.4byte	.LVL580
 18936 1e92 0100     		.2byte	0x1
 18937 1e94 50       		.byte	0x50
 18938 1e95 0C000000 		.4byte	.LVL580
 18939 1e99 60000000 		.4byte	.LFE24
 18940 1e9d 0100     		.2byte	0x1
 18941 1e9f 54       		.byte	0x54
 18942 1ea0 00000000 		.4byte	0
 18943 1ea4 00000000 		.4byte	0
 18944              	.LLST133:
 18945 1ea8 00000000 		.4byte	.LVL577
 18946 1eac 0C000000 		.4byte	.LVL580
 18947 1eb0 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 474


 18948 1eb2 51       		.byte	0x51
 18949 1eb3 0C000000 		.4byte	.LVL580
 18950 1eb7 60000000 		.4byte	.LFE24
 18951 1ebb 0100     		.2byte	0x1
 18952 1ebd 56       		.byte	0x56
 18953 1ebe 00000000 		.4byte	0
 18954 1ec2 00000000 		.4byte	0
 18955              	.LLST134:
 18956 1ec6 06000000 		.4byte	.LVL578
 18957 1eca 0C000000 		.4byte	.LVL580
 18958 1ece 0200     		.2byte	0x2
 18959 1ed0 34       		.byte	0x34
 18960 1ed1 9F       		.byte	0x9f
 18961 1ed2 0C000000 		.4byte	.LVL580
 18962 1ed6 12000000 		.4byte	.LVL581
 18963 1eda 0100     		.2byte	0x1
 18964 1edc 57       		.byte	0x57
 18965 1edd 12000000 		.4byte	.LVL581
 18966 1ee1 44000000 		.4byte	.LVL585
 18967 1ee5 0100     		.2byte	0x1
 18968 1ee7 50       		.byte	0x50
 18969 1ee8 48000000 		.4byte	.LVL586
 18970 1eec 4C000000 		.4byte	.LVL587
 18971 1ef0 0100     		.2byte	0x1
 18972 1ef2 50       		.byte	0x50
 18973 1ef3 4C000000 		.4byte	.LVL587
 18974 1ef7 54000000 		.4byte	.LVL588
 18975 1efb 0100     		.2byte	0x1
 18976 1efd 57       		.byte	0x57
 18977 1efe 54000000 		.4byte	.LVL588
 18978 1f02 56000000 		.4byte	.LVL589
 18979 1f06 0100     		.2byte	0x1
 18980 1f08 50       		.byte	0x50
 18981 1f09 56000000 		.4byte	.LVL589
 18982 1f0d 60000000 		.4byte	.LFE24
 18983 1f11 0100     		.2byte	0x1
 18984 1f13 57       		.byte	0x57
 18985 1f14 00000000 		.4byte	0
 18986 1f18 00000000 		.4byte	0
 18987              	.LLST135:
 18988 1f1c 22000000 		.4byte	.LVL583
 18989 1f20 34000000 		.4byte	.LVL584
 18990 1f24 0100     		.2byte	0x1
 18991 1f26 53       		.byte	0x53
 18992 1f27 34000000 		.4byte	.LVL584
 18993 1f2b 47000000 		.4byte	.LVL586-1
 18994 1f2f 0200     		.2byte	0x2
 18995 1f31 74       		.byte	0x74
 18996 1f32 06       		.sleb128 6
 18997 1f33 00000000 		.4byte	0
 18998 1f37 00000000 		.4byte	0
 18999              	.LLST136:
 19000 1f3b 1A000000 		.4byte	.LVL582
 19001 1f3f 47000000 		.4byte	.LVL586-1
 19002 1f43 0100     		.2byte	0x1
 19003 1f45 52       		.byte	0x52
 19004 1f46 54000000 		.4byte	.LVL588
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 475


 19005 1f4a 56000000 		.4byte	.LVL589
 19006 1f4e 0100     		.2byte	0x1
 19007 1f50 52       		.byte	0x52
 19008 1f51 00000000 		.4byte	0
 19009 1f55 00000000 		.4byte	0
 19010              	.LLST137:
 19011 1f59 00000000 		.4byte	.LVL590
 19012 1f5d 07000000 		.4byte	.LVL591-1
 19013 1f61 0100     		.2byte	0x1
 19014 1f63 50       		.byte	0x50
 19015 1f64 07000000 		.4byte	.LVL591-1
 19016 1f68 82000000 		.4byte	.LVL602
 19017 1f6c 0100     		.2byte	0x1
 19018 1f6e 54       		.byte	0x54
 19019 1f6f 82000000 		.4byte	.LVL602
 19020 1f73 8C000000 		.4byte	.LFE12
 19021 1f77 0400     		.2byte	0x4
 19022 1f79 F3       		.byte	0xf3
 19023 1f7a 01       		.uleb128 0x1
 19024 1f7b 50       		.byte	0x50
 19025 1f7c 9F       		.byte	0x9f
 19026 1f7d 00000000 		.4byte	0
 19027 1f81 00000000 		.4byte	0
 19028              	.LLST138:
 19029 1f85 08000000 		.4byte	.LVL591
 19030 1f89 26000000 		.4byte	.LVL592
 19031 1f8d 0100     		.2byte	0x1
 19032 1f8f 50       		.byte	0x50
 19033 1f90 7E000000 		.4byte	.LVL601
 19034 1f94 82000000 		.4byte	.LVL602
 19035 1f98 0100     		.2byte	0x1
 19036 1f9a 55       		.byte	0x55
 19037 1f9b 00000000 		.4byte	0
 19038 1f9f 00000000 		.4byte	0
 19039              	.LLST139:
 19040 1fa3 00000000 		.4byte	.LVL603
 19041 1fa7 0C000000 		.4byte	.LVL604
 19042 1fab 0100     		.2byte	0x1
 19043 1fad 50       		.byte	0x50
 19044 1fae 0C000000 		.4byte	.LVL604
 19045 1fb2 3E000000 		.4byte	.LVL609
 19046 1fb6 0200     		.2byte	0x2
 19047 1fb8 91       		.byte	0x91
 19048 1fb9 6C       		.sleb128 -20
 19049 1fba 3E000000 		.4byte	.LVL609
 19050 1fbe 43000000 		.4byte	.LVL610-1
 19051 1fc2 0200     		.2byte	0x2
 19052 1fc4 71       		.byte	0x71
 19053 1fc5 00       		.sleb128 0
 19054 1fc6 43000000 		.4byte	.LVL610-1
 19055 1fca 50000000 		.4byte	.LVL614
 19056 1fce 0200     		.2byte	0x2
 19057 1fd0 91       		.byte	0x91
 19058 1fd1 6C       		.sleb128 -20
 19059 1fd2 50000000 		.4byte	.LVL614
 19060 1fd6 54000000 		.4byte	.LFE36
 19061 1fda 0200     		.2byte	0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 476


 19062 1fdc 7D       		.byte	0x7d
 19063 1fdd 6C       		.sleb128 -20
 19064 1fde 00000000 		.4byte	0
 19065 1fe2 00000000 		.4byte	0
 19066              	.LLST140:
 19067 1fe6 00000000 		.4byte	.LVL603
 19068 1fea 13000000 		.4byte	.LVL605-1
 19069 1fee 0100     		.2byte	0x1
 19070 1ff0 51       		.byte	0x51
 19071 1ff1 13000000 		.4byte	.LVL605-1
 19072 1ff5 4E000000 		.4byte	.LVL613
 19073 1ff9 0200     		.2byte	0x2
 19074 1ffb 7D       		.byte	0x7d
 19075 1ffc 00       		.sleb128 0
 19076 1ffd 4E000000 		.4byte	.LVL613
 19077 2001 50000000 		.4byte	.LVL614
 19078 2005 0200     		.2byte	0x2
 19079 2007 91       		.byte	0x91
 19080 2008 68       		.sleb128 -24
 19081 2009 50000000 		.4byte	.LVL614
 19082 200d 54000000 		.4byte	.LFE36
 19083 2011 0200     		.2byte	0x2
 19084 2013 7D       		.byte	0x7d
 19085 2014 68       		.sleb128 -24
 19086 2015 00000000 		.4byte	0
 19087 2019 00000000 		.4byte	0
 19088              	.LLST141:
 19089 201d 00000000 		.4byte	.LVL603
 19090 2021 13000000 		.4byte	.LVL605-1
 19091 2025 0100     		.2byte	0x1
 19092 2027 52       		.byte	0x52
 19093 2028 13000000 		.4byte	.LVL605-1
 19094 202c 54000000 		.4byte	.LFE36
 19095 2030 0400     		.2byte	0x4
 19096 2032 F3       		.byte	0xf3
 19097 2033 01       		.uleb128 0x1
 19098 2034 52       		.byte	0x52
 19099 2035 9F       		.byte	0x9f
 19100 2036 00000000 		.4byte	0
 19101 203a 00000000 		.4byte	0
 19102              	.LLST142:
 19103 203e 20000000 		.4byte	.LVL606
 19104 2042 28000000 		.4byte	.LVL607
 19105 2046 0100     		.2byte	0x1
 19106 2048 53       		.byte	0x53
 19107 2049 00000000 		.4byte	0
 19108 204d 00000000 		.4byte	0
 19109              	.LLST143:
 19110 2051 14000000 		.4byte	.LVL605
 19111 2055 34000000 		.4byte	.LVL608
 19112 2059 0100     		.2byte	0x1
 19113 205b 50       		.byte	0x50
 19114 205c 46000000 		.4byte	.LVL611
 19115 2060 48000000 		.4byte	.LVL612
 19116 2064 0100     		.2byte	0x1
 19117 2066 50       		.byte	0x50
 19118 2067 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 477


 19119 206b 00000000 		.4byte	0
 19120              	.LLST144:
 19121 206f 44000000 		.4byte	.LVL610
 19122 2073 46000000 		.4byte	.LVL611
 19123 2077 0100     		.2byte	0x1
 19124 2079 50       		.byte	0x50
 19125 207a 00000000 		.4byte	0
 19126 207e 00000000 		.4byte	0
 19127              	.LLST145:
 19128 2082 00000000 		.4byte	.LVL615
 19129 2086 1C000000 		.4byte	.LVL618
 19130 208a 0100     		.2byte	0x1
 19131 208c 50       		.byte	0x50
 19132 208d 1C000000 		.4byte	.LVL618
 19133 2091 BE010000 		.4byte	.LVL664
 19134 2095 0100     		.2byte	0x1
 19135 2097 55       		.byte	0x55
 19136 2098 BE010000 		.4byte	.LVL664
 19137 209c C0010000 		.4byte	.LVL665
 19138 20a0 0100     		.2byte	0x1
 19139 20a2 50       		.byte	0x50
 19140 20a3 C0010000 		.4byte	.LVL665
 19141 20a7 C2010000 		.4byte	.LVL666
 19142 20ab 0400     		.2byte	0x4
 19143 20ad F3       		.byte	0xf3
 19144 20ae 01       		.uleb128 0x1
 19145 20af 50       		.byte	0x50
 19146 20b0 9F       		.byte	0x9f
 19147 20b1 C2010000 		.4byte	.LVL666
 19148 20b5 C4010000 		.4byte	.LVL667
 19149 20b9 0100     		.2byte	0x1
 19150 20bb 55       		.byte	0x55
 19151 20bc C4010000 		.4byte	.LVL667
 19152 20c0 D0010000 		.4byte	.LFE37
 19153 20c4 0400     		.2byte	0x4
 19154 20c6 F3       		.byte	0xf3
 19155 20c7 01       		.uleb128 0x1
 19156 20c8 50       		.byte	0x50
 19157 20c9 9F       		.byte	0x9f
 19158 20ca 00000000 		.4byte	0
 19159 20ce 00000000 		.4byte	0
 19160              	.LLST146:
 19161 20d2 00000000 		.4byte	.LVL615
 19162 20d6 1A000000 		.4byte	.LVL617
 19163 20da 0100     		.2byte	0x1
 19164 20dc 51       		.byte	0x51
 19165 20dd 1A000000 		.4byte	.LVL617
 19166 20e1 1C000000 		.4byte	.LVL618
 19167 20e5 0300     		.2byte	0x3
 19168 20e7 91       		.byte	0x91
 19169 20e8 B47F     		.sleb128 -76
 19170 20ea 1C000000 		.4byte	.LVL618
 19171 20ee 1F000000 		.4byte	.LVL619-1
 19172 20f2 0200     		.2byte	0x2
 19173 20f4 70       		.byte	0x70
 19174 20f5 00       		.sleb128 0
 19175 20f6 1F000000 		.4byte	.LVL619-1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 478


 19176 20fa BE010000 		.4byte	.LVL664
 19177 20fe 0300     		.2byte	0x3
 19178 2100 91       		.byte	0x91
 19179 2101 B47F     		.sleb128 -76
 19180 2103 BE010000 		.4byte	.LVL664
 19181 2107 C2010000 		.4byte	.LVL666
 19182 210b 0100     		.2byte	0x1
 19183 210d 51       		.byte	0x51
 19184 210e C2010000 		.4byte	.LVL666
 19185 2112 CA010000 		.4byte	.LVL668
 19186 2116 0300     		.2byte	0x3
 19187 2118 91       		.byte	0x91
 19188 2119 B47F     		.sleb128 -76
 19189 211b CA010000 		.4byte	.LVL668
 19190 211f D0010000 		.4byte	.LFE37
 19191 2123 0300     		.2byte	0x3
 19192 2125 7D       		.byte	0x7d
 19193 2126 B47F     		.sleb128 -76
 19194 2128 00000000 		.4byte	0
 19195 212c 00000000 		.4byte	0
 19196              	.LLST147:
 19197 2130 00000000 		.4byte	.LVL615
 19198 2134 16000000 		.4byte	.LVL616
 19199 2138 0100     		.2byte	0x1
 19200 213a 52       		.byte	0x52
 19201 213b 16000000 		.4byte	.LVL616
 19202 213f 62010000 		.4byte	.LVL648
 19203 2143 0100     		.2byte	0x1
 19204 2145 57       		.byte	0x57
 19205 2146 BE010000 		.4byte	.LVL664
 19206 214a C2010000 		.4byte	.LVL666
 19207 214e 0100     		.2byte	0x1
 19208 2150 52       		.byte	0x52
 19209 2151 00000000 		.4byte	0
 19210 2155 00000000 		.4byte	0
 19211              	.LLST148:
 19212 2159 20000000 		.4byte	.LVL619
 19213 215d 30000000 		.4byte	.LVL620
 19214 2161 0100     		.2byte	0x1
 19215 2163 50       		.byte	0x50
 19216 2164 34000000 		.4byte	.LVL621
 19217 2168 42000000 		.4byte	.LVL622
 19218 216c 0100     		.2byte	0x1
 19219 216e 50       		.byte	0x50
 19220 216f 42000000 		.4byte	.LVL622
 19221 2173 70000000 		.4byte	.LVL626
 19222 2177 0100     		.2byte	0x1
 19223 2179 54       		.byte	0x54
 19224 217a 72000000 		.4byte	.LVL627
 19225 217e C8000000 		.4byte	.LVL636
 19226 2182 0100     		.2byte	0x1
 19227 2184 54       		.byte	0x54
 19228 2185 C8000000 		.4byte	.LVL636
 19229 2189 D0000000 		.4byte	.LVL637
 19230 218d 0100     		.2byte	0x1
 19231 218f 50       		.byte	0x50
 19232 2190 D6000000 		.4byte	.LVL639
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 479


 19233 2194 FC000000 		.4byte	.LVL641
 19234 2198 0100     		.2byte	0x1
 19235 219a 54       		.byte	0x54
 19236 219b FE000000 		.4byte	.LVL642
 19237 219f B0010000 		.4byte	.LVL661
 19238 21a3 0100     		.2byte	0x1
 19239 21a5 54       		.byte	0x54
 19240 21a6 B2010000 		.4byte	.LVL662
 19241 21aa BE010000 		.4byte	.LVL664
 19242 21ae 0100     		.2byte	0x1
 19243 21b0 54       		.byte	0x54
 19244 21b1 C2010000 		.4byte	.LVL666
 19245 21b5 C4010000 		.4byte	.LVL667
 19246 21b9 0100     		.2byte	0x1
 19247 21bb 54       		.byte	0x54
 19248 21bc 00000000 		.4byte	0
 19249 21c0 00000000 		.4byte	0
 19250              	.LLST149:
 19251 21c4 8A000000 		.4byte	.LVL630
 19252 21c8 90000000 		.4byte	.LVL631
 19253 21cc 0100     		.2byte	0x1
 19254 21ce 50       		.byte	0x50
 19255 21cf 90000000 		.4byte	.LVL631
 19256 21d3 E0000000 		.4byte	.LVL640
 19257 21d7 0100     		.2byte	0x1
 19258 21d9 58       		.byte	0x58
 19259 21da 00000000 		.4byte	0
 19260 21de 00000000 		.4byte	0
 19261              	.LLST150:
 19262 21e2 64010000 		.4byte	.LVL649
 19263 21e6 92010000 		.4byte	.LVL656
 19264 21ea 0100     		.2byte	0x1
 19265 21ec 57       		.byte	0x57
 19266 21ed 00000000 		.4byte	0
 19267 21f1 00000000 		.4byte	0
 19268              	.LLST151:
 19269 21f5 66010000 		.4byte	.LVL650
 19270 21f9 6D010000 		.4byte	.LVL651-1
 19271 21fd 0100     		.2byte	0x1
 19272 21ff 51       		.byte	0x51
 19273 2200 70010000 		.4byte	.LVL652
 19274 2204 80010000 		.4byte	.LVL655
 19275 2208 0100     		.2byte	0x1
 19276 220a 50       		.byte	0x50
 19277 220b 80010000 		.4byte	.LVL655
 19278 220f 97010000 		.4byte	.LVL657-1
 19279 2213 0100     		.2byte	0x1
 19280 2215 51       		.byte	0x51
 19281 2216 00000000 		.4byte	0
 19282 221a 00000000 		.4byte	0
 19283              	.LLST152:
 19284 221e BE000000 		.4byte	.LVL635
 19285 2222 E0000000 		.4byte	.LVL640
 19286 2226 0100     		.2byte	0x1
 19287 2228 56       		.byte	0x56
 19288 2229 98010000 		.4byte	.LVL657
 19289 222d A6010000 		.4byte	.LVL658
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 480


 19290 2231 0100     		.2byte	0x1
 19291 2233 50       		.byte	0x50
 19292 2234 AE010000 		.4byte	.LVL660
 19293 2238 B2010000 		.4byte	.LVL662
 19294 223c 0100     		.2byte	0x1
 19295 223e 50       		.byte	0x50
 19296 223f 00000000 		.4byte	0
 19297 2243 00000000 		.4byte	0
 19298              	.LLST153:
 19299 2247 66010000 		.4byte	.LVL650
 19300 224b B4010000 		.4byte	.LVL663
 19301 224f 0100     		.2byte	0x1
 19302 2251 56       		.byte	0x56
 19303 2252 00000000 		.4byte	0
 19304 2256 00000000 		.4byte	0
 19305              	.LLST154:
 19306 225a 00000000 		.4byte	.LVL669
 19307 225e 19000000 		.4byte	.LVL673-1
 19308 2262 0100     		.2byte	0x1
 19309 2264 50       		.byte	0x50
 19310 2265 19000000 		.4byte	.LVL673-1
 19311 2269 74010000 		.4byte	.LFE38
 19312 226d 0100     		.2byte	0x1
 19313 226f 54       		.byte	0x54
 19314 2270 00000000 		.4byte	0
 19315 2274 00000000 		.4byte	0
 19316              	.LLST155:
 19317 2278 00000000 		.4byte	.LVL669
 19318 227c 16000000 		.4byte	.LVL672
 19319 2280 0100     		.2byte	0x1
 19320 2282 51       		.byte	0x51
 19321 2283 16000000 		.4byte	.LVL672
 19322 2287 42000000 		.4byte	.LVL677
 19323 228b 0100     		.2byte	0x1
 19324 228d 58       		.byte	0x58
 19325 228e 42000000 		.4byte	.LVL677
 19326 2292 6A010000 		.4byte	.LVL708
 19327 2296 0400     		.2byte	0x4
 19328 2298 F3       		.byte	0xf3
 19329 2299 01       		.uleb128 0x1
 19330 229a 51       		.byte	0x51
 19331 229b 9F       		.byte	0x9f
 19332 229c 6A010000 		.4byte	.LVL708
 19333 22a0 6E010000 		.4byte	.LVL709
 19334 22a4 0100     		.2byte	0x1
 19335 22a6 58       		.byte	0x58
 19336 22a7 6E010000 		.4byte	.LVL709
 19337 22ab 74010000 		.4byte	.LFE38
 19338 22af 0400     		.2byte	0x4
 19339 22b1 F3       		.byte	0xf3
 19340 22b2 01       		.uleb128 0x1
 19341 22b3 51       		.byte	0x51
 19342 22b4 9F       		.byte	0x9f
 19343 22b5 00000000 		.4byte	0
 19344 22b9 00000000 		.4byte	0
 19345              	.LLST156:
 19346 22bd 00000000 		.4byte	.LVL669
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 481


 19347 22c1 19000000 		.4byte	.LVL673-1
 19348 22c5 0100     		.2byte	0x1
 19349 22c7 52       		.byte	0x52
 19350 22c8 19000000 		.4byte	.LVL673-1
 19351 22cc 42000000 		.4byte	.LVL677
 19352 22d0 0100     		.2byte	0x1
 19353 22d2 55       		.byte	0x55
 19354 22d3 42000000 		.4byte	.LVL677
 19355 22d7 6A010000 		.4byte	.LVL708
 19356 22db 0100     		.2byte	0x1
 19357 22dd 56       		.byte	0x56
 19358 22de 6A010000 		.4byte	.LVL708
 19359 22e2 6E010000 		.4byte	.LVL709
 19360 22e6 0100     		.2byte	0x1
 19361 22e8 55       		.byte	0x55
 19362 22e9 00000000 		.4byte	0
 19363 22ed 00000000 		.4byte	0
 19364              	.LLST157:
 19365 22f1 00000000 		.4byte	.LVL669
 19366 22f5 10000000 		.4byte	.LVL671
 19367 22f9 0100     		.2byte	0x1
 19368 22fb 53       		.byte	0x53
 19369 22fc 10000000 		.4byte	.LVL671
 19370 2300 74010000 		.4byte	.LFE38
 19371 2304 0100     		.2byte	0x1
 19372 2306 57       		.byte	0x57
 19373 2307 00000000 		.4byte	0
 19374 230b 00000000 		.4byte	0
 19375              	.LLST158:
 19376 230f 1A000000 		.4byte	.LVL673
 19377 2313 42000000 		.4byte	.LVL677
 19378 2317 0100     		.2byte	0x1
 19379 2319 50       		.byte	0x50
 19380 231a 6A010000 		.4byte	.LVL708
 19381 231e 6E010000 		.4byte	.LVL709
 19382 2322 0100     		.2byte	0x1
 19383 2324 50       		.byte	0x50
 19384 2325 00000000 		.4byte	0
 19385 2329 00000000 		.4byte	0
 19386              	.LLST159:
 19387 232d 60000000 		.4byte	.LVL680
 19388 2331 62000000 		.4byte	.LVL681
 19389 2335 0100     		.2byte	0x1
 19390 2337 50       		.byte	0x50
 19391 2338 6A000000 		.4byte	.LVL682
 19392 233c 70000000 		.4byte	.LVL683
 19393 2340 0100     		.2byte	0x1
 19394 2342 50       		.byte	0x50
 19395 2343 74000000 		.4byte	.LVL684
 19396 2347 7C000000 		.4byte	.LVL685
 19397 234b 0100     		.2byte	0x1
 19398 234d 50       		.byte	0x50
 19399 234e 80000000 		.4byte	.LVL686
 19400 2352 82000000 		.4byte	.LVL687
 19401 2356 0100     		.2byte	0x1
 19402 2358 50       		.byte	0x50
 19403 2359 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 482


 19404 235d 00000000 		.4byte	0
 19405              	.LLST160:
 19406 2361 8E000000 		.4byte	.LVL688
 19407 2365 94000000 		.4byte	.LVL689
 19408 2369 0100     		.2byte	0x1
 19409 236b 50       		.byte	0x50
 19410 236c 94000000 		.4byte	.LVL689
 19411 2370 98000000 		.4byte	.LVL690
 19412 2374 0100     		.2byte	0x1
 19413 2376 5A       		.byte	0x5a
 19414 2377 98000000 		.4byte	.LVL690
 19415 237b 9A000000 		.4byte	.LVL691
 19416 237f 0100     		.2byte	0x1
 19417 2381 50       		.byte	0x50
 19418 2382 9A000000 		.4byte	.LVL691
 19419 2386 32010000 		.4byte	.LVL700
 19420 238a 0100     		.2byte	0x1
 19421 238c 5A       		.byte	0x5a
 19422 238d 00000000 		.4byte	0
 19423 2391 00000000 		.4byte	0
 19424              	.LLST161:
 19425 2395 38000000 		.4byte	.LVL675
 19426 2399 40000000 		.4byte	.LVL676
 19427 239d 0100     		.2byte	0x1
 19428 239f 56       		.byte	0x56
 19429 23a0 40000000 		.4byte	.LVL676
 19430 23a4 42000000 		.4byte	.LVL677
 19431 23a8 0700     		.2byte	0x7
 19432 23aa 74       		.byte	0x74
 19433 23ab 0C       		.sleb128 12
 19434 23ac 06       		.byte	0x6
 19435 23ad 73       		.byte	0x73
 19436 23ae 00       		.sleb128 0
 19437 23af 1C       		.byte	0x1c
 19438 23b0 9F       		.byte	0x9f
 19439 23b1 00000000 		.4byte	0
 19440 23b5 00000000 		.4byte	0
 19441              	.LLST162:
 19442 23b9 E8000000 		.4byte	.LVL696
 19443 23bd EA000000 		.4byte	.LVL697
 19444 23c1 0100     		.2byte	0x1
 19445 23c3 55       		.byte	0x55
 19446 23c4 3C010000 		.4byte	.LVL701
 19447 23c8 5E010000 		.4byte	.LVL706
 19448 23cc 0100     		.2byte	0x1
 19449 23ce 55       		.byte	0x55
 19450 23cf 00000000 		.4byte	0
 19451 23d3 00000000 		.4byte	0
 19452              	.LLST163:
 19453 23d7 9A000000 		.4byte	.LVL691
 19454 23db 9C000000 		.4byte	.LVL692
 19455 23df 0500     		.2byte	0x5
 19456 23e1 76       		.byte	0x76
 19457 23e2 00       		.sleb128 0
 19458 23e3 39       		.byte	0x39
 19459 23e4 25       		.byte	0x25
 19460 23e5 9F       		.byte	0x9f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 483


 19461 23e6 9C000000 		.4byte	.LVL692
 19462 23ea E8000000 		.4byte	.LVL696
 19463 23ee 0100     		.2byte	0x1
 19464 23f0 55       		.byte	0x55
 19465 23f1 EA000000 		.4byte	.LVL697
 19466 23f5 32010000 		.4byte	.LVL700
 19467 23f9 0100     		.2byte	0x1
 19468 23fb 55       		.byte	0x55
 19469 23fc 00000000 		.4byte	0
 19470 2400 00000000 		.4byte	0
 19471              	.LLST164:
 19472 2404 56000000 		.4byte	.LVL678
 19473 2408 5A000000 		.4byte	.LVL679
 19474 240c 0800     		.2byte	0x8
 19475 240e 73       		.byte	0x73
 19476 240f 00       		.sleb128 0
 19477 2410 39       		.byte	0x39
 19478 2411 25       		.byte	0x25
 19479 2412 79       		.byte	0x79
 19480 2413 00       		.sleb128 0
 19481 2414 1A       		.byte	0x1a
 19482 2415 9F       		.byte	0x9f
 19483 2416 5A000000 		.4byte	.LVL679
 19484 241a 32010000 		.4byte	.LVL700
 19485 241e 0100     		.2byte	0x1
 19486 2420 59       		.byte	0x59
 19487 2421 00000000 		.4byte	0
 19488 2425 00000000 		.4byte	0
 19489              	.LLST165:
 19490 2429 0E000000 		.4byte	.LVL670
 19491 242d 16000000 		.4byte	.LVL672
 19492 2431 0100     		.2byte	0x1
 19493 2433 51       		.byte	0x51
 19494 2434 16000000 		.4byte	.LVL672
 19495 2438 74010000 		.4byte	.LFE38
 19496 243c 0100     		.2byte	0x1
 19497 243e 58       		.byte	0x58
 19498 243f 00000000 		.4byte	0
 19499 2443 00000000 		.4byte	0
 19500              	.LLST166:
 19501 2447 00000000 		.4byte	.LVL710
 19502 244b 19000000 		.4byte	.LVL714-1
 19503 244f 0100     		.2byte	0x1
 19504 2451 50       		.byte	0x50
 19505 2452 19000000 		.4byte	.LVL714-1
 19506 2456 AC010000 		.4byte	.LFE39
 19507 245a 0100     		.2byte	0x1
 19508 245c 54       		.byte	0x54
 19509 245d 00000000 		.4byte	0
 19510 2461 00000000 		.4byte	0
 19511              	.LLST167:
 19512 2465 00000000 		.4byte	.LVL710
 19513 2469 16000000 		.4byte	.LVL713
 19514 246d 0100     		.2byte	0x1
 19515 246f 51       		.byte	0x51
 19516 2470 16000000 		.4byte	.LVL713
 19517 2474 3E000000 		.4byte	.LVL717
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 484


 19518 2478 0100     		.2byte	0x1
 19519 247a 58       		.byte	0x58
 19520 247b 3E000000 		.4byte	.LVL717
 19521 247f A2010000 		.4byte	.LVL749
 19522 2483 0400     		.2byte	0x4
 19523 2485 F3       		.byte	0xf3
 19524 2486 01       		.uleb128 0x1
 19525 2487 51       		.byte	0x51
 19526 2488 9F       		.byte	0x9f
 19527 2489 A2010000 		.4byte	.LVL749
 19528 248d A6010000 		.4byte	.LVL750
 19529 2491 0100     		.2byte	0x1
 19530 2493 58       		.byte	0x58
 19531 2494 A6010000 		.4byte	.LVL750
 19532 2498 AC010000 		.4byte	.LFE39
 19533 249c 0400     		.2byte	0x4
 19534 249e F3       		.byte	0xf3
 19535 249f 01       		.uleb128 0x1
 19536 24a0 51       		.byte	0x51
 19537 24a1 9F       		.byte	0x9f
 19538 24a2 00000000 		.4byte	0
 19539 24a6 00000000 		.4byte	0
 19540              	.LLST168:
 19541 24aa 00000000 		.4byte	.LVL710
 19542 24ae 19000000 		.4byte	.LVL714-1
 19543 24b2 0100     		.2byte	0x1
 19544 24b4 52       		.byte	0x52
 19545 24b5 19000000 		.4byte	.LVL714-1
 19546 24b9 AC010000 		.4byte	.LFE39
 19547 24bd 0100     		.2byte	0x1
 19548 24bf 56       		.byte	0x56
 19549 24c0 00000000 		.4byte	0
 19550 24c4 00000000 		.4byte	0
 19551              	.LLST169:
 19552 24c8 00000000 		.4byte	.LVL710
 19553 24cc 10000000 		.4byte	.LVL712
 19554 24d0 0100     		.2byte	0x1
 19555 24d2 53       		.byte	0x53
 19556 24d3 10000000 		.4byte	.LVL712
 19557 24d7 AC010000 		.4byte	.LFE39
 19558 24db 0100     		.2byte	0x1
 19559 24dd 57       		.byte	0x57
 19560 24de 00000000 		.4byte	0
 19561 24e2 00000000 		.4byte	0
 19562              	.LLST170:
 19563 24e6 1A000000 		.4byte	.LVL714
 19564 24ea 3E000000 		.4byte	.LVL717
 19565 24ee 0100     		.2byte	0x1
 19566 24f0 50       		.byte	0x50
 19567 24f1 A2010000 		.4byte	.LVL749
 19568 24f5 A6010000 		.4byte	.LVL750
 19569 24f9 0100     		.2byte	0x1
 19570 24fb 50       		.byte	0x50
 19571 24fc 00000000 		.4byte	0
 19572 2500 00000000 		.4byte	0
 19573              	.LLST171:
 19574 2504 5E000000 		.4byte	.LVL720
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 485


 19575 2508 64000000 		.4byte	.LVL721
 19576 250c 0100     		.2byte	0x1
 19577 250e 50       		.byte	0x50
 19578 250f 64000000 		.4byte	.LVL721
 19579 2513 67000000 		.4byte	.LVL722-1
 19580 2517 0200     		.2byte	0x2
 19581 2519 74       		.byte	0x74
 19582 251a 08       		.sleb128 8
 19583 251b 68000000 		.4byte	.LVL722
 19584 251f 6A000000 		.4byte	.LVL723
 19585 2523 0100     		.2byte	0x1
 19586 2525 50       		.byte	0x50
 19587 2526 72000000 		.4byte	.LVL724
 19588 252a 7E000000 		.4byte	.LVL725
 19589 252e 0100     		.2byte	0x1
 19590 2530 50       		.byte	0x50
 19591 2531 82000000 		.4byte	.LVL726
 19592 2535 8A000000 		.4byte	.LVL727
 19593 2539 0100     		.2byte	0x1
 19594 253b 50       		.byte	0x50
 19595 253c 8E000000 		.4byte	.LVL728
 19596 2540 96000000 		.4byte	.LVL729
 19597 2544 0100     		.2byte	0x1
 19598 2546 50       		.byte	0x50
 19599 2547 00000000 		.4byte	0
 19600 254b 00000000 		.4byte	0
 19601              	.LLST172:
 19602 254f CA000000 		.4byte	.LVL731
 19603 2553 D0000000 		.4byte	.LVL732
 19604 2557 0100     		.2byte	0x1
 19605 2559 50       		.byte	0x50
 19606 255a D0000000 		.4byte	.LVL732
 19607 255e D4000000 		.4byte	.LVL733
 19608 2562 0100     		.2byte	0x1
 19609 2564 5A       		.byte	0x5a
 19610 2565 D4000000 		.4byte	.LVL733
 19611 2569 D6000000 		.4byte	.LVL734
 19612 256d 0100     		.2byte	0x1
 19613 256f 50       		.byte	0x50
 19614 2570 D6000000 		.4byte	.LVL734
 19615 2574 50010000 		.4byte	.LVL742
 19616 2578 0100     		.2byte	0x1
 19617 257a 5A       		.byte	0x5a
 19618 257b 00000000 		.4byte	0
 19619 257f 00000000 		.4byte	0
 19620              	.LLST173:
 19621 2583 24010000 		.4byte	.LVL739
 19622 2587 26010000 		.4byte	.LVL740
 19623 258b 0100     		.2byte	0x1
 19624 258d 55       		.byte	0x55
 19625 258e 5A010000 		.4byte	.LVL743
 19626 2592 84010000 		.4byte	.LVL748
 19627 2596 0100     		.2byte	0x1
 19628 2598 55       		.byte	0x55
 19629 2599 00000000 		.4byte	0
 19630 259d 00000000 		.4byte	0
 19631              	.LLST174:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 486


 19632 25a1 D6000000 		.4byte	.LVL734
 19633 25a5 D8000000 		.4byte	.LVL735
 19634 25a9 0500     		.2byte	0x5
 19635 25ab 76       		.byte	0x76
 19636 25ac 00       		.sleb128 0
 19637 25ad 39       		.byte	0x39
 19638 25ae 25       		.byte	0x25
 19639 25af 9F       		.byte	0x9f
 19640 25b0 D8000000 		.4byte	.LVL735
 19641 25b4 24010000 		.4byte	.LVL739
 19642 25b8 0100     		.2byte	0x1
 19643 25ba 55       		.byte	0x55
 19644 25bb 26010000 		.4byte	.LVL740
 19645 25bf 50010000 		.4byte	.LVL742
 19646 25c3 0100     		.2byte	0x1
 19647 25c5 55       		.byte	0x55
 19648 25c6 00000000 		.4byte	0
 19649 25ca 00000000 		.4byte	0
 19650              	.LLST175:
 19651 25ce 54000000 		.4byte	.LVL718
 19652 25d2 58000000 		.4byte	.LVL719
 19653 25d6 0800     		.2byte	0x8
 19654 25d8 73       		.byte	0x73
 19655 25d9 00       		.sleb128 0
 19656 25da 39       		.byte	0x39
 19657 25db 25       		.byte	0x25
 19658 25dc 79       		.byte	0x79
 19659 25dd 00       		.sleb128 0
 19660 25de 1A       		.byte	0x1a
 19661 25df 9F       		.byte	0x9f
 19662 25e0 58000000 		.4byte	.LVL719
 19663 25e4 50010000 		.4byte	.LVL742
 19664 25e8 0100     		.2byte	0x1
 19665 25ea 59       		.byte	0x59
 19666 25eb 00000000 		.4byte	0
 19667 25ef 00000000 		.4byte	0
 19668              	.LLST176:
 19669 25f3 0E000000 		.4byte	.LVL711
 19670 25f7 16000000 		.4byte	.LVL713
 19671 25fb 0100     		.2byte	0x1
 19672 25fd 51       		.byte	0x51
 19673 25fe 16000000 		.4byte	.LVL713
 19674 2602 AC010000 		.4byte	.LFE39
 19675 2606 0100     		.2byte	0x1
 19676 2608 58       		.byte	0x58
 19677 2609 00000000 		.4byte	0
 19678 260d 00000000 		.4byte	0
 19679              	.LLST177:
 19680 2611 00000000 		.4byte	.LVL751
 19681 2615 22000000 		.4byte	.LVL756
 19682 2619 0100     		.2byte	0x1
 19683 261b 50       		.byte	0x50
 19684 261c 22000000 		.4byte	.LVL756
 19685 2620 3E000000 		.4byte	.LVL762
 19686 2624 0100     		.2byte	0x1
 19687 2626 54       		.byte	0x54
 19688 2627 3E000000 		.4byte	.LVL762
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 487


 19689 262b 40000000 		.4byte	.LFE57
 19690 262f 0100     		.2byte	0x1
 19691 2631 50       		.byte	0x50
 19692 2632 00000000 		.4byte	0
 19693 2636 00000000 		.4byte	0
 19694              	.LLST178:
 19695 263a 00000000 		.4byte	.LVL751
 19696 263e 20000000 		.4byte	.LVL755
 19697 2642 0100     		.2byte	0x1
 19698 2644 51       		.byte	0x51
 19699 2645 20000000 		.4byte	.LVL755
 19700 2649 22000000 		.4byte	.LVL756
 19701 264d 0700     		.2byte	0x7
 19702 264f 70       		.byte	0x70
 19703 2650 00       		.sleb128 0
 19704 2651 75       		.byte	0x75
 19705 2652 00       		.sleb128 0
 19706 2653 22       		.byte	0x22
 19707 2654 23       		.byte	0x23
 19708 2655 0B       		.uleb128 0xb
 19709 2656 22000000 		.4byte	.LVL756
 19710 265a 25000000 		.4byte	.LVL757-1
 19711 265e 0700     		.2byte	0x7
 19712 2660 74       		.byte	0x74
 19713 2661 00       		.sleb128 0
 19714 2662 75       		.byte	0x75
 19715 2663 00       		.sleb128 0
 19716 2664 22       		.byte	0x22
 19717 2665 23       		.byte	0x23
 19718 2666 0B       		.uleb128 0xb
 19719 2667 25000000 		.4byte	.LVL757-1
 19720 266b 3E000000 		.4byte	.LVL762
 19721 266f 0400     		.2byte	0x4
 19722 2671 F3       		.byte	0xf3
 19723 2672 01       		.uleb128 0x1
 19724 2673 51       		.byte	0x51
 19725 2674 9F       		.byte	0x9f
 19726 2675 3E000000 		.4byte	.LVL762
 19727 2679 40000000 		.4byte	.LFE57
 19728 267d 0100     		.2byte	0x1
 19729 267f 51       		.byte	0x51
 19730 2680 00000000 		.4byte	0
 19731 2684 00000000 		.4byte	0
 19732              	.LLST179:
 19733 2688 02000000 		.4byte	.LVL752
 19734 268c 10000000 		.4byte	.LVL754
 19735 2690 0100     		.2byte	0x1
 19736 2692 53       		.byte	0x53
 19737 2693 10000000 		.4byte	.LVL754
 19738 2697 2E000000 		.4byte	.LVL758
 19739 269b 0100     		.2byte	0x1
 19740 269d 55       		.byte	0x55
 19741 269e 30000000 		.4byte	.LVL759
 19742 26a2 3E000000 		.4byte	.LVL762
 19743 26a6 0100     		.2byte	0x1
 19744 26a8 55       		.byte	0x55
 19745 26a9 3E000000 		.4byte	.LVL762
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 488


 19746 26ad 40000000 		.4byte	.LFE57
 19747 26b1 0100     		.2byte	0x1
 19748 26b3 53       		.byte	0x53
 19749 26b4 00000000 		.4byte	0
 19750 26b8 00000000 		.4byte	0
 19751              	.LLST180:
 19752 26bc 0E000000 		.4byte	.LVL753
 19753 26c0 38000000 		.4byte	.LVL761
 19754 26c4 0100     		.2byte	0x1
 19755 26c6 56       		.byte	0x56
 19756 26c7 38000000 		.4byte	.LVL761
 19757 26cb 3E000000 		.4byte	.LVL762
 19758 26cf 0300     		.2byte	0x3
 19759 26d1 76       		.byte	0x76
 19760 26d2 7F       		.sleb128 -1
 19761 26d3 9F       		.byte	0x9f
 19762 26d4 00000000 		.4byte	0
 19763 26d8 00000000 		.4byte	0
 19764              	.LLST181:
 19765 26dc 00000000 		.4byte	.LVL763
 19766 26e0 14000000 		.4byte	.LVL764
 19767 26e4 0100     		.2byte	0x1
 19768 26e6 50       		.byte	0x50
 19769 26e7 14000000 		.4byte	.LVL764
 19770 26eb 26000000 		.4byte	.LVL766
 19771 26ef 0100     		.2byte	0x1
 19772 26f1 54       		.byte	0x54
 19773 26f2 26000000 		.4byte	.LVL766
 19774 26f6 2A000000 		.4byte	.LVL767
 19775 26fa 0100     		.2byte	0x1
 19776 26fc 50       		.byte	0x50
 19777 26fd 2A000000 		.4byte	.LVL767
 19778 2701 2C000000 		.4byte	.LVL768
 19779 2705 0400     		.2byte	0x4
 19780 2707 F3       		.byte	0xf3
 19781 2708 01       		.uleb128 0x1
 19782 2709 50       		.byte	0x50
 19783 270a 9F       		.byte	0x9f
 19784 270b 2C000000 		.4byte	.LVL768
 19785 270f 3A000000 		.4byte	.LFE58
 19786 2713 0100     		.2byte	0x1
 19787 2715 54       		.byte	0x54
 19788 2716 00000000 		.4byte	0
 19789 271a 00000000 		.4byte	0
 19790              	.LLST182:
 19791 271e 00000000 		.4byte	.LVL769
 19792 2722 0B000000 		.4byte	.LVL770-1
 19793 2726 0100     		.2byte	0x1
 19794 2728 50       		.byte	0x50
 19795 2729 0B000000 		.4byte	.LVL770-1
 19796 272d 96000000 		.4byte	.LVL785
 19797 2731 0100     		.2byte	0x1
 19798 2733 54       		.byte	0x54
 19799 2734 96000000 		.4byte	.LVL785
 19800 2738 9C000000 		.4byte	.LFE40
 19801 273c 0400     		.2byte	0x4
 19802 273e F3       		.byte	0xf3
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 489


 19803 273f 01       		.uleb128 0x1
 19804 2740 50       		.byte	0x50
 19805 2741 9F       		.byte	0x9f
 19806 2742 00000000 		.4byte	0
 19807 2746 00000000 		.4byte	0
 19808              	.LLST183:
 19809 274a 0C000000 		.4byte	.LVL770
 19810 274e 28000000 		.4byte	.LVL771
 19811 2752 0100     		.2byte	0x1
 19812 2754 50       		.byte	0x50
 19813 2755 40000000 		.4byte	.LVL774
 19814 2759 52000000 		.4byte	.LVL776
 19815 275d 0100     		.2byte	0x1
 19816 275f 50       		.byte	0x50
 19817 2760 80000000 		.4byte	.LVL781
 19818 2764 8E000000 		.4byte	.LVL783
 19819 2768 0100     		.2byte	0x1
 19820 276a 50       		.byte	0x50
 19821 276b 00000000 		.4byte	0
 19822 276f 00000000 		.4byte	0
 19823              	.LLST184:
 19824 2773 38000000 		.4byte	.LVL773
 19825 2777 8A000000 		.4byte	.LVL782
 19826 277b 0600     		.2byte	0x6
 19827 277d 0C       		.byte	0xc
 19828 277e 0000214E 		.4byte	0x4e210000
 19829 2782 9F       		.byte	0x9f
 19830 2783 00000000 		.4byte	0
 19831 2787 00000000 		.4byte	0
 19832              	.LLST185:
 19833 278b 44000000 		.4byte	.LVL775
 19834 278f 8A000000 		.4byte	.LVL782
 19835 2793 0100     		.2byte	0x1
 19836 2795 55       		.byte	0x55
 19837 2796 00000000 		.4byte	0
 19838 279a 00000000 		.4byte	0
 19839              	.LLST186:
 19840 279e 00000000 		.4byte	.LVL786
 19841 27a2 09000000 		.4byte	.LVL787-1
 19842 27a6 0100     		.2byte	0x1
 19843 27a8 50       		.byte	0x50
 19844 27a9 09000000 		.4byte	.LVL787-1
 19845 27ad 24000000 		.4byte	.LFE41
 19846 27b1 0100     		.2byte	0x1
 19847 27b3 54       		.byte	0x54
 19848 27b4 00000000 		.4byte	0
 19849 27b8 00000000 		.4byte	0
 19850              	.LLST187:
 19851 27bc 0A000000 		.4byte	.LVL787
 19852 27c0 12000000 		.4byte	.LVL788
 19853 27c4 0100     		.2byte	0x1
 19854 27c6 50       		.byte	0x50
 19855 27c7 16000000 		.4byte	.LVL789
 19856 27cb 1E000000 		.4byte	.LVL790
 19857 27cf 0100     		.2byte	0x1
 19858 27d1 50       		.byte	0x50
 19859 27d2 1E000000 		.4byte	.LVL790
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 490


 19860 27d6 24000000 		.4byte	.LFE41
 19861 27da 0100     		.2byte	0x1
 19862 27dc 53       		.byte	0x53
 19863 27dd 00000000 		.4byte	0
 19864 27e1 00000000 		.4byte	0
 19865              	.LLST188:
 19866 27e5 00000000 		.4byte	.LVL791
 19867 27e9 0C000000 		.4byte	.LVL792
 19868 27ed 0100     		.2byte	0x1
 19869 27ef 50       		.byte	0x50
 19870 27f0 0C000000 		.4byte	.LVL792
 19871 27f4 0F000000 		.4byte	.LVL793-1
 19872 27f8 0200     		.2byte	0x2
 19873 27fa 70       		.byte	0x70
 19874 27fb 00       		.sleb128 0
 19875 27fc 0F000000 		.4byte	.LVL793-1
 19876 2800 24000000 		.4byte	.LVL797
 19877 2804 0200     		.2byte	0x2
 19878 2806 91       		.byte	0x91
 19879 2807 74       		.sleb128 -12
 19880 2808 24000000 		.4byte	.LVL797
 19881 280c 28000000 		.4byte	.LFE42
 19882 2810 0200     		.2byte	0x2
 19883 2812 7D       		.byte	0x7d
 19884 2813 74       		.sleb128 -12
 19885 2814 00000000 		.4byte	0
 19886 2818 00000000 		.4byte	0
 19887              	.LLST189:
 19888 281c 10000000 		.4byte	.LVL793
 19889 2820 1A000000 		.4byte	.LVL794
 19890 2824 0100     		.2byte	0x1
 19891 2826 50       		.byte	0x50
 19892 2827 1C000000 		.4byte	.LVL795
 19893 282b 1E000000 		.4byte	.LVL796
 19894 282f 0100     		.2byte	0x1
 19895 2831 50       		.byte	0x50
 19896 2832 00000000 		.4byte	0
 19897 2836 00000000 		.4byte	0
 19898              	.LLST190:
 19899 283a 00000000 		.4byte	.LVL798
 19900 283e 0C000000 		.4byte	.LVL799
 19901 2842 0100     		.2byte	0x1
 19902 2844 50       		.byte	0x50
 19903 2845 0C000000 		.4byte	.LVL799
 19904 2849 0F000000 		.4byte	.LVL800-1
 19905 284d 0200     		.2byte	0x2
 19906 284f 70       		.byte	0x70
 19907 2850 00       		.sleb128 0
 19908 2851 0F000000 		.4byte	.LVL800-1
 19909 2855 5A000000 		.4byte	.LFE43
 19910 2859 0300     		.2byte	0x3
 19911 285b 91       		.byte	0x91
 19912 285c BC7F     		.sleb128 -68
 19913 285e 00000000 		.4byte	0
 19914 2862 00000000 		.4byte	0
 19915              	.LLST191:
 19916 2866 10000000 		.4byte	.LVL800
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 491


 19917 286a 1C000000 		.4byte	.LVL801
 19918 286e 0100     		.2byte	0x1
 19919 2870 50       		.byte	0x50
 19920 2871 20000000 		.4byte	.LVL802
 19921 2875 44000000 		.4byte	.LVL803
 19922 2879 0100     		.2byte	0x1
 19923 287b 50       		.byte	0x50
 19924 287c 4C000000 		.4byte	.LVL805
 19925 2880 4E000000 		.4byte	.LVL806
 19926 2884 0100     		.2byte	0x1
 19927 2886 50       		.byte	0x50
 19928 2887 4E000000 		.4byte	.LVL806
 19929 288b 5A000000 		.4byte	.LFE43
 19930 288f 0100     		.2byte	0x1
 19931 2891 54       		.byte	0x54
 19932 2892 00000000 		.4byte	0
 19933 2896 00000000 		.4byte	0
 19934              	.LLST192:
 19935 289a 00000000 		.4byte	.LVL808
 19936 289e 11000000 		.4byte	.LVL810-1
 19937 28a2 0100     		.2byte	0x1
 19938 28a4 50       		.byte	0x50
 19939 28a5 11000000 		.4byte	.LVL810-1
 19940 28a9 7A010000 		.4byte	.LFE44
 19941 28ad 0100     		.2byte	0x1
 19942 28af 54       		.byte	0x54
 19943 28b0 00000000 		.4byte	0
 19944 28b4 00000000 		.4byte	0
 19945              	.LLST193:
 19946 28b8 00000000 		.4byte	.LVL808
 19947 28bc 0E000000 		.4byte	.LVL809
 19948 28c0 0100     		.2byte	0x1
 19949 28c2 51       		.byte	0x51
 19950 28c3 0E000000 		.4byte	.LVL809
 19951 28c7 8A000000 		.4byte	.LVL830
 19952 28cb 0100     		.2byte	0x1
 19953 28cd 55       		.byte	0x55
 19954 28ce 8C000000 		.4byte	.LVL831
 19955 28d2 FC000000 		.4byte	.LVL850
 19956 28d6 0100     		.2byte	0x1
 19957 28d8 55       		.byte	0x55
 19958 28d9 FE000000 		.4byte	.LVL851
 19959 28dd 00010000 		.4byte	.LVL852
 19960 28e1 0100     		.2byte	0x1
 19961 28e3 55       		.byte	0x55
 19962 28e4 02010000 		.4byte	.LVL853
 19963 28e8 04010000 		.4byte	.LVL854
 19964 28ec 0100     		.2byte	0x1
 19965 28ee 55       		.byte	0x55
 19966 28ef 6A010000 		.4byte	.LVL861
 19967 28f3 6E010000 		.4byte	.LVL862
 19968 28f7 0100     		.2byte	0x1
 19969 28f9 55       		.byte	0x55
 19970 28fa 00000000 		.4byte	0
 19971 28fe 00000000 		.4byte	0
 19972              	.LLST194:
 19973 2902 12000000 		.4byte	.LVL810
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 492


 19974 2906 18000000 		.4byte	.LVL811
 19975 290a 0100     		.2byte	0x1
 19976 290c 50       		.byte	0x50
 19977 290d 18000000 		.4byte	.LVL811
 19978 2911 6E000000 		.4byte	.LVL823
 19979 2915 0100     		.2byte	0x1
 19980 2917 56       		.byte	0x56
 19981 2918 74000000 		.4byte	.LVL825
 19982 291c 7C000000 		.4byte	.LVL826
 19983 2920 0100     		.2byte	0x1
 19984 2922 56       		.byte	0x56
 19985 2923 82000000 		.4byte	.LVL828
 19986 2927 B8000000 		.4byte	.LVL837
 19987 292b 0100     		.2byte	0x1
 19988 292d 56       		.byte	0x56
 19989 292e BE000000 		.4byte	.LVL839
 19990 2932 CC000000 		.4byte	.LVL840
 19991 2936 0100     		.2byte	0x1
 19992 2938 56       		.byte	0x56
 19993 2939 D2000000 		.4byte	.LVL842
 19994 293d F2000000 		.4byte	.LVL847
 19995 2941 0100     		.2byte	0x1
 19996 2943 56       		.byte	0x56
 19997 2944 F8000000 		.4byte	.LVL849
 19998 2948 3C010000 		.4byte	.LVL856
 19999 294c 0100     		.2byte	0x1
 20000 294e 56       		.byte	0x56
 20001 294f 42010000 		.4byte	.LVL857
 20002 2953 5E010000 		.4byte	.LVL859
 20003 2957 0100     		.2byte	0x1
 20004 2959 56       		.byte	0x56
 20005 295a 64010000 		.4byte	.LVL860
 20006 295e 74010000 		.4byte	.LVL863
 20007 2962 0100     		.2byte	0x1
 20008 2964 56       		.byte	0x56
 20009 2965 00000000 		.4byte	0
 20010 2969 00000000 		.4byte	0
 20011              	.LLST195:
 20012 296d 5A000000 		.4byte	.LVL818
 20013 2971 5C000000 		.4byte	.LVL819
 20014 2975 0100     		.2byte	0x1
 20015 2977 51       		.byte	0x51
 20016 2978 5E000000 		.4byte	.LVL820
 20017 297c 65000000 		.4byte	.LVL821-1
 20018 2980 0100     		.2byte	0x1
 20019 2982 51       		.byte	0x51
 20020 2983 68000000 		.4byte	.LVL822
 20021 2987 72000000 		.4byte	.LVL824
 20022 298b 0100     		.2byte	0x1
 20023 298d 50       		.byte	0x50
 20024 298e 72000000 		.4byte	.LVL824
 20025 2992 74000000 		.4byte	.LVL825
 20026 2996 0100     		.2byte	0x1
 20027 2998 51       		.byte	0x51
 20028 2999 74000000 		.4byte	.LVL825
 20029 299d 80000000 		.4byte	.LVL827
 20030 29a1 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 493


 20031 29a3 50       		.byte	0x50
 20032 29a4 80000000 		.4byte	.LVL827
 20033 29a8 82000000 		.4byte	.LVL828
 20034 29ac 0100     		.2byte	0x1
 20035 29ae 51       		.byte	0x51
 20036 29af 82000000 		.4byte	.LVL828
 20037 29b3 84000000 		.4byte	.LVL829
 20038 29b7 0100     		.2byte	0x1
 20039 29b9 50       		.byte	0x50
 20040 29ba 84000000 		.4byte	.LVL829
 20041 29be A1000000 		.4byte	.LVL833-1
 20042 29c2 0100     		.2byte	0x1
 20043 29c4 51       		.byte	0x51
 20044 29c5 A2000000 		.4byte	.LVL833
 20045 29c9 A8000000 		.4byte	.LVL834
 20046 29cd 0100     		.2byte	0x1
 20047 29cf 50       		.byte	0x50
 20048 29d0 A8000000 		.4byte	.LVL834
 20049 29d4 AD000000 		.4byte	.LVL835-1
 20050 29d8 0100     		.2byte	0x1
 20051 29da 51       		.byte	0x51
 20052 29db B0000000 		.4byte	.LVL836
 20053 29df BC000000 		.4byte	.LVL838
 20054 29e3 0100     		.2byte	0x1
 20055 29e5 50       		.byte	0x50
 20056 29e6 BC000000 		.4byte	.LVL838
 20057 29ea BE000000 		.4byte	.LVL839
 20058 29ee 0100     		.2byte	0x1
 20059 29f0 51       		.byte	0x51
 20060 29f1 BE000000 		.4byte	.LVL839
 20061 29f5 D0000000 		.4byte	.LVL841
 20062 29f9 0100     		.2byte	0x1
 20063 29fb 50       		.byte	0x50
 20064 29fc D0000000 		.4byte	.LVL841
 20065 2a00 D2000000 		.4byte	.LVL842
 20066 2a04 0100     		.2byte	0x1
 20067 2a06 51       		.byte	0x51
 20068 2a07 D2000000 		.4byte	.LVL842
 20069 2a0b D4000000 		.4byte	.LVL843
 20070 2a0f 0100     		.2byte	0x1
 20071 2a11 50       		.byte	0x50
 20072 2a12 D4000000 		.4byte	.LVL843
 20073 2a16 DA000000 		.4byte	.LVL844
 20074 2a1a 0100     		.2byte	0x1
 20075 2a1c 51       		.byte	0x51
 20076 2a1d DA000000 		.4byte	.LVL844
 20077 2a21 DC000000 		.4byte	.LVL845
 20078 2a25 0100     		.2byte	0x1
 20079 2a27 50       		.byte	0x50
 20080 2a28 DC000000 		.4byte	.LVL845
 20081 2a2c ED000000 		.4byte	.LVL846-1
 20082 2a30 0100     		.2byte	0x1
 20083 2a32 51       		.byte	0x51
 20084 2a33 02010000 		.4byte	.LVL853
 20085 2a37 04010000 		.4byte	.LVL854
 20086 2a3b 0100     		.2byte	0x1
 20087 2a3d 51       		.byte	0x51
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 494


 20088 2a3e 00000000 		.4byte	0
 20089 2a42 00000000 		.4byte	0
 20090              	.LLST196:
 20091 2a46 3E000000 		.4byte	.LVL814
 20092 2a4a FE000000 		.4byte	.LVL851
 20093 2a4e 0100     		.2byte	0x1
 20094 2a50 57       		.byte	0x57
 20095 2a51 02010000 		.4byte	.LVL853
 20096 2a55 04010000 		.4byte	.LVL854
 20097 2a59 0100     		.2byte	0x1
 20098 2a5b 57       		.byte	0x57
 20099 2a5c 00000000 		.4byte	0
 20100 2a60 00000000 		.4byte	0
 20101              	.LLST197:
 20102 2a64 30000000 		.4byte	.LVL813
 20103 2a68 EE000000 		.4byte	.LVL846
 20104 2a6c 0200     		.2byte	0x2
 20105 2a6e 30       		.byte	0x30
 20106 2a6f 9F       		.byte	0x9f
 20107 2a70 EE000000 		.4byte	.LVL846
 20108 2a74 F6000000 		.4byte	.LVL848
 20109 2a78 0100     		.2byte	0x1
 20110 2a7a 50       		.byte	0x50
 20111 2a7b F8000000 		.4byte	.LVL849
 20112 2a7f FC000000 		.4byte	.LVL850
 20113 2a83 0100     		.2byte	0x1
 20114 2a85 50       		.byte	0x50
 20115 2a86 FC000000 		.4byte	.LVL850
 20116 2a8a FE000000 		.4byte	.LVL851
 20117 2a8e 0100     		.2byte	0x1
 20118 2a90 55       		.byte	0x55
 20119 2a91 FE000000 		.4byte	.LVL851
 20120 2a95 04010000 		.4byte	.LVL854
 20121 2a99 0200     		.2byte	0x2
 20122 2a9b 30       		.byte	0x30
 20123 2a9c 9F       		.byte	0x9f
 20124 2a9d 04010000 		.4byte	.LVL854
 20125 2aa1 6A010000 		.4byte	.LVL861
 20126 2aa5 0100     		.2byte	0x1
 20127 2aa7 55       		.byte	0x55
 20128 2aa8 6E010000 		.4byte	.LVL862
 20129 2aac 74010000 		.4byte	.LVL863
 20130 2ab0 0100     		.2byte	0x1
 20131 2ab2 55       		.byte	0x55
 20132 2ab3 00000000 		.4byte	0
 20133 2ab7 00000000 		.4byte	0
 20134              	.LLST198:
 20135 2abb 30000000 		.4byte	.LVL813
 20136 2abf 48000000 		.4byte	.LVL815
 20137 2ac3 0100     		.2byte	0x1
 20138 2ac5 53       		.byte	0x53
 20139 2ac6 48000000 		.4byte	.LVL815
 20140 2aca 54000000 		.4byte	.LVL816
 20141 2ace 0300     		.2byte	0x3
 20142 2ad0 73       		.byte	0x73
 20143 2ad1 01       		.sleb128 1
 20144 2ad2 9F       		.byte	0x9f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 495


 20145 2ad3 FE000000 		.4byte	.LVL851
 20146 2ad7 02010000 		.4byte	.LVL853
 20147 2adb 0100     		.2byte	0x1
 20148 2add 53       		.byte	0x53
 20149 2ade 00000000 		.4byte	0
 20150 2ae2 00000000 		.4byte	0
 20151              	.LLST199:
 20152 2ae6 00000000 		.4byte	.LVL864
 20153 2aea 10000000 		.4byte	.LVL866
 20154 2aee 0100     		.2byte	0x1
 20155 2af0 50       		.byte	0x50
 20156 2af1 10000000 		.4byte	.LVL866
 20157 2af5 68000000 		.4byte	.LVL877
 20158 2af9 0100     		.2byte	0x1
 20159 2afb 55       		.byte	0x55
 20160 2afc 68000000 		.4byte	.LVL877
 20161 2b00 6A000000 		.4byte	.LVL878
 20162 2b04 0100     		.2byte	0x1
 20163 2b06 50       		.byte	0x50
 20164 2b07 6A000000 		.4byte	.LVL878
 20165 2b0b 6C000000 		.4byte	.LVL879
 20166 2b0f 0400     		.2byte	0x4
 20167 2b11 F3       		.byte	0xf3
 20168 2b12 01       		.uleb128 0x1
 20169 2b13 50       		.byte	0x50
 20170 2b14 9F       		.byte	0x9f
 20171 2b15 6C000000 		.4byte	.LVL879
 20172 2b19 6E000000 		.4byte	.LVL880
 20173 2b1d 0100     		.2byte	0x1
 20174 2b1f 55       		.byte	0x55
 20175 2b20 6E000000 		.4byte	.LVL880
 20176 2b24 72000000 		.4byte	.LFE45
 20177 2b28 0400     		.2byte	0x4
 20178 2b2a F3       		.byte	0xf3
 20179 2b2b 01       		.uleb128 0x1
 20180 2b2c 50       		.byte	0x50
 20181 2b2d 9F       		.byte	0x9f
 20182 2b2e 00000000 		.4byte	0
 20183 2b32 00000000 		.4byte	0
 20184              	.LLST200:
 20185 2b36 00000000 		.4byte	.LVL864
 20186 2b3a 0E000000 		.4byte	.LVL865
 20187 2b3e 0100     		.2byte	0x1
 20188 2b40 51       		.byte	0x51
 20189 2b41 0E000000 		.4byte	.LVL865
 20190 2b45 10000000 		.4byte	.LVL866
 20191 2b49 0200     		.2byte	0x2
 20192 2b4b 91       		.byte	0x91
 20193 2b4c 64       		.sleb128 -28
 20194 2b4d 10000000 		.4byte	.LVL866
 20195 2b51 13000000 		.4byte	.LVL867-1
 20196 2b55 0200     		.2byte	0x2
 20197 2b57 70       		.byte	0x70
 20198 2b58 00       		.sleb128 0
 20199 2b59 13000000 		.4byte	.LVL867-1
 20200 2b5d 68000000 		.4byte	.LVL877
 20201 2b61 0200     		.2byte	0x2
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 496


 20202 2b63 91       		.byte	0x91
 20203 2b64 64       		.sleb128 -28
 20204 2b65 68000000 		.4byte	.LVL877
 20205 2b69 6C000000 		.4byte	.LVL879
 20206 2b6d 0100     		.2byte	0x1
 20207 2b6f 51       		.byte	0x51
 20208 2b70 6C000000 		.4byte	.LVL879
 20209 2b74 72000000 		.4byte	.LFE45
 20210 2b78 0200     		.2byte	0x2
 20211 2b7a 91       		.byte	0x91
 20212 2b7b 64       		.sleb128 -28
 20213 2b7c 00000000 		.4byte	0
 20214 2b80 00000000 		.4byte	0
 20215              	.LLST201:
 20216 2b84 14000000 		.4byte	.LVL867
 20217 2b88 20000000 		.4byte	.LVL868
 20218 2b8c 0100     		.2byte	0x1
 20219 2b8e 50       		.byte	0x50
 20220 2b8f 24000000 		.4byte	.LVL869
 20221 2b93 3C000000 		.4byte	.LVL870
 20222 2b97 0100     		.2byte	0x1
 20223 2b99 50       		.byte	0x50
 20224 2b9a 44000000 		.4byte	.LVL872
 20225 2b9e 46000000 		.4byte	.LVL873
 20226 2ba2 0100     		.2byte	0x1
 20227 2ba4 50       		.byte	0x50
 20228 2ba5 46000000 		.4byte	.LVL873
 20229 2ba9 68000000 		.4byte	.LVL877
 20230 2bad 0100     		.2byte	0x1
 20231 2baf 54       		.byte	0x54
 20232 2bb0 6C000000 		.4byte	.LVL879
 20233 2bb4 6E000000 		.4byte	.LVL880
 20234 2bb8 0100     		.2byte	0x1
 20235 2bba 54       		.byte	0x54
 20236 2bbb 00000000 		.4byte	0
 20237 2bbf 00000000 		.4byte	0
 20238              	.LLST202:
 20239 2bc3 00000000 		.4byte	.LVL881
 20240 2bc7 0B000000 		.4byte	.LVL882-1
 20241 2bcb 0100     		.2byte	0x1
 20242 2bcd 50       		.byte	0x50
 20243 2bce 0B000000 		.4byte	.LVL882-1
 20244 2bd2 1A000000 		.4byte	.LFE46
 20245 2bd6 0100     		.2byte	0x1
 20246 2bd8 54       		.byte	0x54
 20247 2bd9 00000000 		.4byte	0
 20248 2bdd 00000000 		.4byte	0
 20249              	.LLST203:
 20250 2be1 0C000000 		.4byte	.LVL882
 20251 2be5 16000000 		.4byte	.LVL883
 20252 2be9 0100     		.2byte	0x1
 20253 2beb 50       		.byte	0x50
 20254 2bec 00000000 		.4byte	0
 20255 2bf0 00000000 		.4byte	0
 20256              	.LLST204:
 20257 2bf4 00000000 		.4byte	.LVL884
 20258 2bf8 0D000000 		.4byte	.LVL886-1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 497


 20259 2bfc 0100     		.2byte	0x1
 20260 2bfe 50       		.byte	0x50
 20261 2bff 0D000000 		.4byte	.LVL886-1
 20262 2c03 4C000000 		.4byte	.LFE47
 20263 2c07 0100     		.2byte	0x1
 20264 2c09 55       		.byte	0x55
 20265 2c0a 00000000 		.4byte	0
 20266 2c0e 00000000 		.4byte	0
 20267              	.LLST205:
 20268 2c12 00000000 		.4byte	.LVL884
 20269 2c16 0A000000 		.4byte	.LVL885
 20270 2c1a 0100     		.2byte	0x1
 20271 2c1c 51       		.byte	0x51
 20272 2c1d 0A000000 		.4byte	.LVL885
 20273 2c21 4C000000 		.4byte	.LFE47
 20274 2c25 0100     		.2byte	0x1
 20275 2c27 56       		.byte	0x56
 20276 2c28 00000000 		.4byte	0
 20277 2c2c 00000000 		.4byte	0
 20278              	.LLST206:
 20279 2c30 0E000000 		.4byte	.LVL886
 20280 2c34 18000000 		.4byte	.LVL887
 20281 2c38 0100     		.2byte	0x1
 20282 2c3a 50       		.byte	0x50
 20283 2c3b 1E000000 		.4byte	.LVL889
 20284 2c3f 20000000 		.4byte	.LVL890
 20285 2c43 0100     		.2byte	0x1
 20286 2c45 54       		.byte	0x54
 20287 2c46 20000000 		.4byte	.LVL890
 20288 2c4a 24000000 		.4byte	.LVL891
 20289 2c4e 0100     		.2byte	0x1
 20290 2c50 50       		.byte	0x50
 20291 2c51 28000000 		.4byte	.LVL892
 20292 2c55 2E000000 		.4byte	.LVL893
 20293 2c59 0100     		.2byte	0x1
 20294 2c5b 50       		.byte	0x50
 20295 2c5c 2E000000 		.4byte	.LVL893
 20296 2c60 40000000 		.4byte	.LVL895
 20297 2c64 0100     		.2byte	0x1
 20298 2c66 54       		.byte	0x54
 20299 2c67 40000000 		.4byte	.LVL895
 20300 2c6b 46000000 		.4byte	.LVL896
 20301 2c6f 0100     		.2byte	0x1
 20302 2c71 50       		.byte	0x50
 20303 2c72 46000000 		.4byte	.LVL896
 20304 2c76 4C000000 		.4byte	.LFE47
 20305 2c7a 0100     		.2byte	0x1
 20306 2c7c 54       		.byte	0x54
 20307 2c7d 00000000 		.4byte	0
 20308 2c81 00000000 		.4byte	0
 20309              	.LLST207:
 20310 2c85 00000000 		.4byte	.LVL897
 20311 2c89 0E000000 		.4byte	.LVL899
 20312 2c8d 0100     		.2byte	0x1
 20313 2c8f 50       		.byte	0x50
 20314 2c90 0E000000 		.4byte	.LVL899
 20315 2c94 11000000 		.4byte	.LVL900-1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 498


 20316 2c98 0200     		.2byte	0x2
 20317 2c9a 70       		.byte	0x70
 20318 2c9b 00       		.sleb128 0
 20319 2c9c 11000000 		.4byte	.LVL900-1
 20320 2ca0 3E000000 		.4byte	.LFE48
 20321 2ca4 0300     		.2byte	0x3
 20322 2ca6 91       		.byte	0x91
 20323 2ca7 BC7F     		.sleb128 -68
 20324 2ca9 00000000 		.4byte	0
 20325 2cad 00000000 		.4byte	0
 20326              	.LLST208:
 20327 2cb1 00000000 		.4byte	.LVL897
 20328 2cb5 0C000000 		.4byte	.LVL898
 20329 2cb9 0100     		.2byte	0x1
 20330 2cbb 51       		.byte	0x51
 20331 2cbc 0C000000 		.4byte	.LVL898
 20332 2cc0 3E000000 		.4byte	.LFE48
 20333 2cc4 0100     		.2byte	0x1
 20334 2cc6 55       		.byte	0x55
 20335 2cc7 00000000 		.4byte	0
 20336 2ccb 00000000 		.4byte	0
 20337              	.LLST209:
 20338 2ccf 12000000 		.4byte	.LVL900
 20339 2cd3 1A000000 		.4byte	.LVL901
 20340 2cd7 0100     		.2byte	0x1
 20341 2cd9 50       		.byte	0x50
 20342 2cda 1E000000 		.4byte	.LVL902
 20343 2cde 30000000 		.4byte	.LVL903
 20344 2ce2 0100     		.2byte	0x1
 20345 2ce4 50       		.byte	0x50
 20346 2ce5 36000000 		.4byte	.LVL905
 20347 2ce9 38000000 		.4byte	.LVL906
 20348 2ced 0100     		.2byte	0x1
 20349 2cef 50       		.byte	0x50
 20350 2cf0 38000000 		.4byte	.LVL906
 20351 2cf4 3E000000 		.4byte	.LFE48
 20352 2cf8 0100     		.2byte	0x1
 20353 2cfa 54       		.byte	0x54
 20354 2cfb 00000000 		.4byte	0
 20355 2cff 00000000 		.4byte	0
 20356              	.LLST210:
 20357 2d03 00000000 		.4byte	.LVL907
 20358 2d07 12000000 		.4byte	.LVL910
 20359 2d0b 0100     		.2byte	0x1
 20360 2d0d 50       		.byte	0x50
 20361 2d0e 12000000 		.4byte	.LVL910
 20362 2d12 15000000 		.4byte	.LVL911-1
 20363 2d16 0200     		.2byte	0x2
 20364 2d18 70       		.byte	0x70
 20365 2d19 00       		.sleb128 0
 20366 2d1a 15000000 		.4byte	.LVL911-1
 20367 2d1e CE000000 		.4byte	.LFE49
 20368 2d22 0200     		.2byte	0x2
 20369 2d24 91       		.byte	0x91
 20370 2d25 44       		.sleb128 -60
 20371 2d26 00000000 		.4byte	0
 20372 2d2a 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 499


 20373              	.LLST211:
 20374 2d2e 00000000 		.4byte	.LVL907
 20375 2d32 10000000 		.4byte	.LVL909
 20376 2d36 0100     		.2byte	0x1
 20377 2d38 51       		.byte	0x51
 20378 2d39 10000000 		.4byte	.LVL909
 20379 2d3d CE000000 		.4byte	.LFE49
 20380 2d41 0100     		.2byte	0x1
 20381 2d43 59       		.byte	0x59
 20382 2d44 00000000 		.4byte	0
 20383 2d48 00000000 		.4byte	0
 20384              	.LLST212:
 20385 2d4c 00000000 		.4byte	.LVL907
 20386 2d50 0E000000 		.4byte	.LVL908
 20387 2d54 0100     		.2byte	0x1
 20388 2d56 52       		.byte	0x52
 20389 2d57 0E000000 		.4byte	.LVL908
 20390 2d5b 3A000000 		.4byte	.LVL914
 20391 2d5f 0100     		.2byte	0x1
 20392 2d61 54       		.byte	0x54
 20393 2d62 3A000000 		.4byte	.LVL914
 20394 2d66 5E000000 		.4byte	.LVL919
 20395 2d6a 0400     		.2byte	0x4
 20396 2d6c F3       		.byte	0xf3
 20397 2d6d 01       		.uleb128 0x1
 20398 2d6e 52       		.byte	0x52
 20399 2d6f 9F       		.byte	0x9f
 20400 2d70 5E000000 		.4byte	.LVL919
 20401 2d74 62000000 		.4byte	.LVL921
 20402 2d78 0100     		.2byte	0x1
 20403 2d7a 54       		.byte	0x54
 20404 2d7b 62000000 		.4byte	.LVL921
 20405 2d7f CE000000 		.4byte	.LFE49
 20406 2d83 0400     		.2byte	0x4
 20407 2d85 F3       		.byte	0xf3
 20408 2d86 01       		.uleb128 0x1
 20409 2d87 52       		.byte	0x52
 20410 2d88 9F       		.byte	0x9f
 20411 2d89 00000000 		.4byte	0
 20412 2d8d 00000000 		.4byte	0
 20413              	.LLST213:
 20414 2d91 16000000 		.4byte	.LVL911
 20415 2d95 3C000000 		.4byte	.LVL915
 20416 2d99 0100     		.2byte	0x1
 20417 2d9b 50       		.byte	0x50
 20418 2d9c 5E000000 		.4byte	.LVL919
 20419 2da0 64000000 		.4byte	.LVL922
 20420 2da4 0100     		.2byte	0x1
 20421 2da6 50       		.byte	0x50
 20422 2da7 64000000 		.4byte	.LVL922
 20423 2dab 72000000 		.4byte	.LVL924
 20424 2daf 0100     		.2byte	0x1
 20425 2db1 58       		.byte	0x58
 20426 2db2 72000000 		.4byte	.LVL924
 20427 2db6 78000000 		.4byte	.LVL925
 20428 2dba 0100     		.2byte	0x1
 20429 2dbc 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 500


 20430 2dbd 78000000 		.4byte	.LVL925
 20431 2dc1 AC000000 		.4byte	.LVL934
 20432 2dc5 0100     		.2byte	0x1
 20433 2dc7 58       		.byte	0x58
 20434 2dc8 B6000000 		.4byte	.LVL935
 20435 2dcc CE000000 		.4byte	.LFE49
 20436 2dd0 0100     		.2byte	0x1
 20437 2dd2 58       		.byte	0x58
 20438 2dd3 00000000 		.4byte	0
 20439 2dd7 00000000 		.4byte	0
 20440              	.LLST214:
 20441 2ddb 30000000 		.4byte	.LVL912
 20442 2ddf 3C000000 		.4byte	.LVL915
 20443 2de3 0200     		.2byte	0x2
 20444 2de5 30       		.byte	0x30
 20445 2de6 9F       		.byte	0x9f
 20446 2de7 3C000000 		.4byte	.LVL915
 20447 2deb 5E000000 		.4byte	.LVL919
 20448 2def 0100     		.2byte	0x1
 20449 2df1 56       		.byte	0x56
 20450 2df2 5E000000 		.4byte	.LVL919
 20451 2df6 64000000 		.4byte	.LVL922
 20452 2dfa 0200     		.2byte	0x2
 20453 2dfc 30       		.byte	0x30
 20454 2dfd 9F       		.byte	0x9f
 20455 2dfe 64000000 		.4byte	.LVL922
 20456 2e02 C6000000 		.4byte	.LVL936
 20457 2e06 0100     		.2byte	0x1
 20458 2e08 56       		.byte	0x56
 20459 2e09 00000000 		.4byte	0
 20460 2e0d 00000000 		.4byte	0
 20461              	.LLST215:
 20462 2e11 36000000 		.4byte	.LVL913
 20463 2e15 3C000000 		.4byte	.LVL915
 20464 2e19 0200     		.2byte	0x2
 20465 2e1b 32       		.byte	0x32
 20466 2e1c 9F       		.byte	0x9f
 20467 2e1d 3C000000 		.4byte	.LVL915
 20468 2e21 5E000000 		.4byte	.LVL919
 20469 2e25 0100     		.2byte	0x1
 20470 2e27 54       		.byte	0x54
 20471 2e28 5E000000 		.4byte	.LVL919
 20472 2e2c A6000000 		.4byte	.LVL932
 20473 2e30 0100     		.2byte	0x1
 20474 2e32 55       		.byte	0x55
 20475 2e33 A6000000 		.4byte	.LVL932
 20476 2e37 A8000000 		.4byte	.LVL933
 20477 2e3b 0300     		.2byte	0x3
 20478 2e3d 75       		.byte	0x75
 20479 2e3e 7F       		.sleb128 -1
 20480 2e3f 9F       		.byte	0x9f
 20481 2e40 A8000000 		.4byte	.LVL933
 20482 2e44 AC000000 		.4byte	.LVL934
 20483 2e48 0100     		.2byte	0x1
 20484 2e4a 55       		.byte	0x55
 20485 2e4b AC000000 		.4byte	.LVL934
 20486 2e4f B6000000 		.4byte	.LVL935
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 501


 20487 2e53 0100     		.2byte	0x1
 20488 2e55 54       		.byte	0x54
 20489 2e56 00000000 		.4byte	0
 20490 2e5a 00000000 		.4byte	0
 20491              	.LLST216:
 20492 2e5e 44000000 		.4byte	.LVL916
 20493 2e62 5E000000 		.4byte	.LVL919
 20494 2e66 0100     		.2byte	0x1
 20495 2e68 50       		.byte	0x50
 20496 2e69 AC000000 		.4byte	.LVL934
 20497 2e6d B6000000 		.4byte	.LVL935
 20498 2e71 0100     		.2byte	0x1
 20499 2e73 50       		.byte	0x50
 20500 2e74 00000000 		.4byte	0
 20501 2e78 00000000 		.4byte	0
 20502              	.LLST217:
 20503 2e7c 60000000 		.4byte	.LVL920
 20504 2e80 6A000000 		.4byte	.LVL923
 20505 2e84 0100     		.2byte	0x1
 20506 2e86 57       		.byte	0x57
 20507 2e87 6A000000 		.4byte	.LVL923
 20508 2e8b 78000000 		.4byte	.LVL925
 20509 2e8f 0100     		.2byte	0x1
 20510 2e91 5A       		.byte	0x5a
 20511 2e92 78000000 		.4byte	.LVL925
 20512 2e96 AC000000 		.4byte	.LVL934
 20513 2e9a 0100     		.2byte	0x1
 20514 2e9c 57       		.byte	0x57
 20515 2e9d 00000000 		.4byte	0
 20516 2ea1 00000000 		.4byte	0
 20517              	.LLST218:
 20518 2ea5 60000000 		.4byte	.LVL920
 20519 2ea9 64000000 		.4byte	.LVL922
 20520 2ead 0200     		.2byte	0x2
 20521 2eaf 30       		.byte	0x30
 20522 2eb0 9F       		.byte	0x9f
 20523 2eb1 64000000 		.4byte	.LVL922
 20524 2eb5 AC000000 		.4byte	.LVL934
 20525 2eb9 0100     		.2byte	0x1
 20526 2ebb 54       		.byte	0x54
 20527 2ebc 00000000 		.4byte	0
 20528 2ec0 00000000 		.4byte	0
 20529              	.LLST219:
 20530 2ec4 00000000 		.4byte	.LVL937
 20531 2ec8 0B000000 		.4byte	.LVL938-1
 20532 2ecc 0100     		.2byte	0x1
 20533 2ece 50       		.byte	0x50
 20534 2ecf 0B000000 		.4byte	.LVL938-1
 20535 2ed3 B4000000 		.4byte	.LFE50
 20536 2ed7 0100     		.2byte	0x1
 20537 2ed9 55       		.byte	0x55
 20538 2eda 00000000 		.4byte	0
 20539 2ede 00000000 		.4byte	0
 20540              	.LLST220:
 20541 2ee2 0C000000 		.4byte	.LVL938
 20542 2ee6 12000000 		.4byte	.LVL939
 20543 2eea 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 502


 20544 2eec 50       		.byte	0x50
 20545 2eed 12000000 		.4byte	.LVL939
 20546 2ef1 42000000 		.4byte	.LVL942
 20547 2ef5 0100     		.2byte	0x1
 20548 2ef7 54       		.byte	0x54
 20549 2ef8 42000000 		.4byte	.LVL942
 20550 2efc 4A000000 		.4byte	.LVL943
 20551 2f00 0200     		.2byte	0x2
 20552 2f02 30       		.byte	0x30
 20553 2f03 9F       		.byte	0x9f
 20554 2f04 4A000000 		.4byte	.LVL943
 20555 2f08 A0000000 		.4byte	.LVL950
 20556 2f0c 0100     		.2byte	0x1
 20557 2f0e 54       		.byte	0x54
 20558 2f0f A0000000 		.4byte	.LVL950
 20559 2f13 A2000000 		.4byte	.LVL951
 20560 2f17 0100     		.2byte	0x1
 20561 2f19 50       		.byte	0x50
 20562 2f1a A2000000 		.4byte	.LVL951
 20563 2f1e B0000000 		.4byte	.LVL952
 20564 2f22 0100     		.2byte	0x1
 20565 2f24 54       		.byte	0x54
 20566 2f25 00000000 		.4byte	0
 20567 2f29 00000000 		.4byte	0
 20568              	.LLST221:
 20569 2f2d 42000000 		.4byte	.LVL942
 20570 2f31 60000000 		.4byte	.LVL945
 20571 2f35 0100     		.2byte	0x1
 20572 2f37 50       		.byte	0x50
 20573 2f38 60000000 		.4byte	.LVL945
 20574 2f3c 63000000 		.4byte	.LVL946-1
 20575 2f40 0100     		.2byte	0x1
 20576 2f42 51       		.byte	0x51
 20577 2f43 00000000 		.4byte	0
 20578 2f47 00000000 		.4byte	0
 20579              	.LLST222:
 20580 2f4b 00000000 		.4byte	.LVL953
 20581 2f4f 0C000000 		.4byte	.LVL955
 20582 2f53 0100     		.2byte	0x1
 20583 2f55 50       		.byte	0x50
 20584 2f56 0C000000 		.4byte	.LVL955
 20585 2f5a 0F000000 		.4byte	.LVL956-1
 20586 2f5e 0200     		.2byte	0x2
 20587 2f60 70       		.byte	0x70
 20588 2f61 00       		.sleb128 0
 20589 2f62 0F000000 		.4byte	.LVL956-1
 20590 2f66 C4000000 		.4byte	.LFE51
 20591 2f6a 0300     		.2byte	0x3
 20592 2f6c 91       		.byte	0x91
 20593 2f6d 8C7F     		.sleb128 -116
 20594 2f6f 00000000 		.4byte	0
 20595 2f73 00000000 		.4byte	0
 20596              	.LLST223:
 20597 2f77 10000000 		.4byte	.LVL956
 20598 2f7b 1E000000 		.4byte	.LVL957
 20599 2f7f 0100     		.2byte	0x1
 20600 2f81 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 503


 20601 2f82 22000000 		.4byte	.LVL958
 20602 2f86 32000000 		.4byte	.LVL959
 20603 2f8a 0100     		.2byte	0x1
 20604 2f8c 50       		.byte	0x50
 20605 2f8d 32000000 		.4byte	.LVL959
 20606 2f91 4C000000 		.4byte	.LVL960
 20607 2f95 0100     		.2byte	0x1
 20608 2f97 54       		.byte	0x54
 20609 2f98 4E000000 		.4byte	.LVL961
 20610 2f9c 7A000000 		.4byte	.LVL966
 20611 2fa0 0100     		.2byte	0x1
 20612 2fa2 54       		.byte	0x54
 20613 2fa3 7A000000 		.4byte	.LVL966
 20614 2fa7 82000000 		.4byte	.LVL967
 20615 2fab 0100     		.2byte	0x1
 20616 2fad 50       		.byte	0x50
 20617 2fae 86000000 		.4byte	.LVL968
 20618 2fb2 8C000000 		.4byte	.LVL969
 20619 2fb6 0100     		.2byte	0x1
 20620 2fb8 50       		.byte	0x50
 20621 2fb9 8C000000 		.4byte	.LVL969
 20622 2fbd 94000000 		.4byte	.LVL970
 20623 2fc1 0100     		.2byte	0x1
 20624 2fc3 53       		.byte	0x53
 20625 2fc4 94000000 		.4byte	.LVL970
 20626 2fc8 A2000000 		.4byte	.LVL973
 20627 2fcc 0100     		.2byte	0x1
 20628 2fce 54       		.byte	0x54
 20629 2fcf A2000000 		.4byte	.LVL973
 20630 2fd3 AE000000 		.4byte	.LVL974
 20631 2fd7 0100     		.2byte	0x1
 20632 2fd9 50       		.byte	0x50
 20633 2fda B4000000 		.4byte	.LVL976
 20634 2fde C4000000 		.4byte	.LFE51
 20635 2fe2 0100     		.2byte	0x1
 20636 2fe4 54       		.byte	0x54
 20637 2fe5 00000000 		.4byte	0
 20638 2fe9 00000000 		.4byte	0
 20639              	.LLST224:
 20640 2fed 06000000 		.4byte	.LVL954
 20641 2ff1 5E000000 		.4byte	.LVL964
 20642 2ff5 0200     		.2byte	0x2
 20643 2ff7 30       		.byte	0x30
 20644 2ff8 9F       		.byte	0x9f
 20645 2ff9 5E000000 		.4byte	.LVL964
 20646 2ffd 76000000 		.4byte	.LVL965
 20647 3001 0100     		.2byte	0x1
 20648 3003 50       		.byte	0x50
 20649 3004 76000000 		.4byte	.LVL965
 20650 3008 94000000 		.4byte	.LVL970
 20651 300c 0100     		.2byte	0x1
 20652 300e 55       		.byte	0x55
 20653 300f 94000000 		.4byte	.LVL970
 20654 3013 98000000 		.4byte	.LVL971
 20655 3017 0200     		.2byte	0x2
 20656 3019 30       		.byte	0x30
 20657 301a 9F       		.byte	0x9f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 504


 20658 301b 98000000 		.4byte	.LVL971
 20659 301f 9A000000 		.4byte	.LVL972
 20660 3023 0100     		.2byte	0x1
 20661 3025 50       		.byte	0x50
 20662 3026 9A000000 		.4byte	.LVL972
 20663 302a BE000000 		.4byte	.LVL978
 20664 302e 0100     		.2byte	0x1
 20665 3030 55       		.byte	0x55
 20666 3031 00000000 		.4byte	0
 20667 3035 00000000 		.4byte	0
 20668              	.LLST225:
 20669 3039 00000000 		.4byte	.LVL979
 20670 303d 0C000000 		.4byte	.LVL980
 20671 3041 0100     		.2byte	0x1
 20672 3043 50       		.byte	0x50
 20673 3044 0C000000 		.4byte	.LVL980
 20674 3048 0F000000 		.4byte	.LVL981-1
 20675 304c 0200     		.2byte	0x2
 20676 304e 70       		.byte	0x70
 20677 304f 00       		.sleb128 0
 20678 3050 0F000000 		.4byte	.LVL981-1
 20679 3054 08010000 		.4byte	.LVL1009
 20680 3058 0300     		.2byte	0x3
 20681 305a 91       		.byte	0x91
 20682 305b AC7F     		.sleb128 -84
 20683 305d 08010000 		.4byte	.LVL1009
 20684 3061 0C010000 		.4byte	.LFE52
 20685 3065 0300     		.2byte	0x3
 20686 3067 7D       		.byte	0x7d
 20687 3068 AC7F     		.sleb128 -84
 20688 306a 00000000 		.4byte	0
 20689 306e 00000000 		.4byte	0
 20690              	.LLST226:
 20691 3072 10000000 		.4byte	.LVL981
 20692 3076 1E000000 		.4byte	.LVL982
 20693 307a 0100     		.2byte	0x1
 20694 307c 50       		.byte	0x50
 20695 307d 22000000 		.4byte	.LVL983
 20696 3081 28000000 		.4byte	.LVL984
 20697 3085 0100     		.2byte	0x1
 20698 3087 50       		.byte	0x50
 20699 3088 28000000 		.4byte	.LVL984
 20700 308c 40000000 		.4byte	.LVL986
 20701 3090 0100     		.2byte	0x1
 20702 3092 53       		.byte	0x53
 20703 3093 4A000000 		.4byte	.LVL987
 20704 3097 50000000 		.4byte	.LVL988
 20705 309b 0200     		.2byte	0x2
 20706 309d 30       		.byte	0x30
 20707 309e 9F       		.byte	0x9f
 20708 309f 50000000 		.4byte	.LVL988
 20709 30a3 68000000 		.4byte	.LVL992
 20710 30a7 0100     		.2byte	0x1
 20711 30a9 54       		.byte	0x54
 20712 30aa 68000000 		.4byte	.LVL992
 20713 30ae 72000000 		.4byte	.LVL993
 20714 30b2 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 505


 20715 30b4 50       		.byte	0x50
 20716 30b5 C6000000 		.4byte	.LVL1001
 20717 30b9 00010000 		.4byte	.LVL1007
 20718 30bd 0100     		.2byte	0x1
 20719 30bf 54       		.byte	0x54
 20720 30c0 00010000 		.4byte	.LVL1007
 20721 30c4 02010000 		.4byte	.LVL1008
 20722 30c8 0100     		.2byte	0x1
 20723 30ca 53       		.byte	0x53
 20724 30cb 02010000 		.4byte	.LVL1008
 20725 30cf 08010000 		.4byte	.LVL1009
 20726 30d3 0100     		.2byte	0x1
 20727 30d5 54       		.byte	0x54
 20728 30d6 00000000 		.4byte	0
 20729 30da 00000000 		.4byte	0
 20730              	.LLST227:
 20731 30de 4A000000 		.4byte	.LVL987
 20732 30e2 64000000 		.4byte	.LVL991
 20733 30e6 0100     		.2byte	0x1
 20734 30e8 50       		.byte	0x50
 20735 30e9 64000000 		.4byte	.LVL991
 20736 30ed 00010000 		.4byte	.LVL1007
 20737 30f1 0100     		.2byte	0x1
 20738 30f3 55       		.byte	0x55
 20739 30f4 00000000 		.4byte	0
 20740 30f8 00000000 		.4byte	0
 20741              	.LLST228:
 20742 30fc AE000000 		.4byte	.LVL998
 20743 3100 B7000000 		.4byte	.LVL999-1
 20744 3104 0200     		.2byte	0x2
 20745 3106 91       		.byte	0x91
 20746 3107 4C       		.sleb128 -52
 20747 3108 00000000 		.4byte	0
 20748 310c 00000000 		.4byte	0
 20749              	.LLST229:
 20750 3110 5E000000 		.4byte	.LVL990
 20751 3114 00010000 		.4byte	.LVL1007
 20752 3118 0600     		.2byte	0x6
 20753 311a 0C       		.byte	0xc
 20754 311b 0000214E 		.4byte	0x4e210000
 20755 311f 9F       		.byte	0x9f
 20756 3120 00000000 		.4byte	0
 20757 3124 00000000 		.4byte	0
 20758              	.LLST230:
 20759 3128 00000000 		.4byte	.LVL1010
 20760 312c 08000000 		.4byte	.LVL1011
 20761 3130 0100     		.2byte	0x1
 20762 3132 50       		.byte	0x50
 20763 3133 08000000 		.4byte	.LVL1011
 20764 3137 16000000 		.4byte	.LVL1013
 20765 313b 0300     		.2byte	0x3
 20766 313d 91       		.byte	0x91
 20767 313e EC7E     		.sleb128 -148
 20768 3140 16000000 		.4byte	.LVL1013
 20769 3144 19000000 		.4byte	.LVL1014-1
 20770 3148 0200     		.2byte	0x2
 20771 314a 70       		.byte	0x70
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 506


 20772 314b 00       		.sleb128 0
 20773 314c 19000000 		.4byte	.LVL1014-1
 20774 3150 1C010000 		.4byte	.LFE53
 20775 3154 0300     		.2byte	0x3
 20776 3156 91       		.byte	0x91
 20777 3157 EC7E     		.sleb128 -148
 20778 3159 00000000 		.4byte	0
 20779 315d 00000000 		.4byte	0
 20780              	.LLST231:
 20781 3161 00000000 		.4byte	.LVL1010
 20782 3165 0F000000 		.4byte	.LVL1012-1
 20783 3169 0100     		.2byte	0x1
 20784 316b 51       		.byte	0x51
 20785 316c 0F000000 		.4byte	.LVL1012-1
 20786 3170 1C010000 		.4byte	.LFE53
 20787 3174 0300     		.2byte	0x3
 20788 3176 91       		.byte	0x91
 20789 3177 E87E     		.sleb128 -152
 20790 3179 00000000 		.4byte	0
 20791 317d 00000000 		.4byte	0
 20792              	.LLST232:
 20793 3181 1A000000 		.4byte	.LVL1014
 20794 3185 28000000 		.4byte	.LVL1015
 20795 3189 0100     		.2byte	0x1
 20796 318b 50       		.byte	0x50
 20797 318c 2C000000 		.4byte	.LVL1016
 20798 3190 3C000000 		.4byte	.LVL1017
 20799 3194 0100     		.2byte	0x1
 20800 3196 50       		.byte	0x50
 20801 3197 3C000000 		.4byte	.LVL1017
 20802 319b 5C000000 		.4byte	.LVL1020
 20803 319f 0100     		.2byte	0x1
 20804 31a1 54       		.byte	0x54
 20805 31a2 5C000000 		.4byte	.LVL1020
 20806 31a6 7A000000 		.4byte	.LVL1021
 20807 31aa 0100     		.2byte	0x1
 20808 31ac 50       		.byte	0x50
 20809 31ad 7A000000 		.4byte	.LVL1021
 20810 31b1 84000000 		.4byte	.LVL1022
 20811 31b5 0100     		.2byte	0x1
 20812 31b7 54       		.byte	0x54
 20813 31b8 84000000 		.4byte	.LVL1022
 20814 31bc 96000000 		.4byte	.LVL1024
 20815 31c0 0100     		.2byte	0x1
 20816 31c2 50       		.byte	0x50
 20817 31c3 DE000000 		.4byte	.LVL1029
 20818 31c7 F4000000 		.4byte	.LVL1031
 20819 31cb 0100     		.2byte	0x1
 20820 31cd 50       		.byte	0x50
 20821 31ce 02010000 		.4byte	.LVL1034
 20822 31d2 0A010000 		.4byte	.LVL1035
 20823 31d6 0100     		.2byte	0x1
 20824 31d8 54       		.byte	0x54
 20825 31d9 0A010000 		.4byte	.LVL1035
 20826 31dd 10010000 		.4byte	.LVL1036
 20827 31e1 0100     		.2byte	0x1
 20828 31e3 50       		.byte	0x50
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 507


 20829 31e4 16010000 		.4byte	.LVL1038
 20830 31e8 1C010000 		.4byte	.LFE53
 20831 31ec 0100     		.2byte	0x1
 20832 31ee 54       		.byte	0x54
 20833 31ef 00000000 		.4byte	0
 20834 31f3 00000000 		.4byte	0
 20835              	.LLST233:
 20836 31f7 8C000000 		.4byte	.LVL1023
 20837 31fb E4000000 		.4byte	.LVL1030
 20838 31ff 0100     		.2byte	0x1
 20839 3201 55       		.byte	0x55
 20840 3202 E4000000 		.4byte	.LVL1030
 20841 3206 F7000000 		.4byte	.LVL1032-1
 20842 320a 0100     		.2byte	0x1
 20843 320c 51       		.byte	0x51
 20844 320d 00010000 		.4byte	.LVL1033
 20845 3211 02010000 		.4byte	.LVL1034
 20846 3215 0100     		.2byte	0x1
 20847 3217 55       		.byte	0x55
 20848 3218 00000000 		.4byte	0
 20849 321c 00000000 		.4byte	0
 20850              	.LLST234:
 20851 3220 D4000000 		.4byte	.LVL1027
 20852 3224 DA000000 		.4byte	.LVL1028
 20853 3228 0100     		.2byte	0x1
 20854 322a 50       		.byte	0x50
 20855 322b DA000000 		.4byte	.LVL1028
 20856 322f DD000000 		.4byte	.LVL1029-1
 20857 3233 0100     		.2byte	0x1
 20858 3235 51       		.byte	0x51
 20859 3236 00010000 		.4byte	.LVL1033
 20860 323a 02010000 		.4byte	.LVL1034
 20861 323e 0100     		.2byte	0x1
 20862 3240 50       		.byte	0x50
 20863 3241 00000000 		.4byte	0
 20864 3245 00000000 		.4byte	0
 20865              	.LLST235:
 20866 3249 00000000 		.4byte	.LVL1039
 20867 324d 10000000 		.4byte	.LVL1042
 20868 3251 0100     		.2byte	0x1
 20869 3253 50       		.byte	0x50
 20870 3254 10000000 		.4byte	.LVL1042
 20871 3258 13000000 		.4byte	.LVL1043-1
 20872 325c 0200     		.2byte	0x2
 20873 325e 70       		.byte	0x70
 20874 325f 00       		.sleb128 0
 20875 3260 13000000 		.4byte	.LVL1043-1
 20876 3264 9E000000 		.4byte	.LFE54
 20877 3268 0300     		.2byte	0x3
 20878 326a 91       		.byte	0x91
 20879 326b B47F     		.sleb128 -76
 20880 326d 00000000 		.4byte	0
 20881 3271 00000000 		.4byte	0
 20882              	.LLST236:
 20883 3275 00000000 		.4byte	.LVL1039
 20884 3279 0E000000 		.4byte	.LVL1041
 20885 327d 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 508


 20886 327f 51       		.byte	0x51
 20887 3280 0E000000 		.4byte	.LVL1041
 20888 3284 9E000000 		.4byte	.LFE54
 20889 3288 0100     		.2byte	0x1
 20890 328a 55       		.byte	0x55
 20891 328b 00000000 		.4byte	0
 20892 328f 00000000 		.4byte	0
 20893              	.LLST237:
 20894 3293 00000000 		.4byte	.LVL1039
 20895 3297 0C000000 		.4byte	.LVL1040
 20896 329b 0100     		.2byte	0x1
 20897 329d 52       		.byte	0x52
 20898 329e 0C000000 		.4byte	.LVL1040
 20899 32a2 9E000000 		.4byte	.LFE54
 20900 32a6 0100     		.2byte	0x1
 20901 32a8 56       		.byte	0x56
 20902 32a9 00000000 		.4byte	0
 20903 32ad 00000000 		.4byte	0
 20904              	.LLST238:
 20905 32b1 14000000 		.4byte	.LVL1043
 20906 32b5 24000000 		.4byte	.LVL1044
 20907 32b9 0100     		.2byte	0x1
 20908 32bb 50       		.byte	0x50
 20909 32bc 28000000 		.4byte	.LVL1045
 20910 32c0 30000000 		.4byte	.LVL1046
 20911 32c4 0100     		.2byte	0x1
 20912 32c6 50       		.byte	0x50
 20913 32c7 34000000 		.4byte	.LVL1047
 20914 32cb 5C000000 		.4byte	.LVL1056
 20915 32cf 0100     		.2byte	0x1
 20916 32d1 50       		.byte	0x50
 20917 32d2 5C000000 		.4byte	.LVL1056
 20918 32d6 64000000 		.4byte	.LVL1057
 20919 32da 0100     		.2byte	0x1
 20920 32dc 57       		.byte	0x57
 20921 32dd 64000000 		.4byte	.LVL1057
 20922 32e1 66000000 		.4byte	.LVL1058
 20923 32e5 0200     		.2byte	0x2
 20924 32e7 30       		.byte	0x30
 20925 32e8 9F       		.byte	0x9f
 20926 32e9 66000000 		.4byte	.LVL1058
 20927 32ed 68000000 		.4byte	.LVL1059
 20928 32f1 0100     		.2byte	0x1
 20929 32f3 57       		.byte	0x57
 20930 32f4 68000000 		.4byte	.LVL1059
 20931 32f8 74000000 		.4byte	.LVL1060
 20932 32fc 0100     		.2byte	0x1
 20933 32fe 54       		.byte	0x54
 20934 32ff 74000000 		.4byte	.LVL1060
 20935 3303 86000000 		.4byte	.LVL1061
 20936 3307 0100     		.2byte	0x1
 20937 3309 50       		.byte	0x50
 20938 330a 88000000 		.4byte	.LVL1062
 20939 330e 8A000000 		.4byte	.LVL1063
 20940 3312 0100     		.2byte	0x1
 20941 3314 50       		.byte	0x50
 20942 3315 8C000000 		.4byte	.LVL1064
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 509


 20943 3319 8E000000 		.4byte	.LVL1065
 20944 331d 0100     		.2byte	0x1
 20945 331f 50       		.byte	0x50
 20946 3320 98000000 		.4byte	.LVL1068
 20947 3324 9E000000 		.4byte	.LFE54
 20948 3328 0100     		.2byte	0x1
 20949 332a 54       		.byte	0x54
 20950 332b 00000000 		.4byte	0
 20951 332f 00000000 		.4byte	0
 20952              	.LLST239:
 20953 3333 3A000000 		.4byte	.LVL1048
 20954 3337 44000000 		.4byte	.LVL1051
 20955 333b 0300     		.2byte	0x3
 20956 333d 72       		.byte	0x72
 20957 333e 01       		.sleb128 1
 20958 333f 9F       		.byte	0x9f
 20959 3340 44000000 		.4byte	.LVL1051
 20960 3344 46000000 		.4byte	.LVL1052
 20961 3348 0100     		.2byte	0x1
 20962 334a 52       		.byte	0x52
 20963 334b 4A000000 		.4byte	.LVL1053
 20964 334f 4E000000 		.4byte	.LVL1054
 20965 3353 0100     		.2byte	0x1
 20966 3355 52       		.byte	0x52
 20967 3356 00000000 		.4byte	0
 20968 335a 00000000 		.4byte	0
 20969              	.LLST240:
 20970 335e 3A000000 		.4byte	.LVL1048
 20971 3362 3E000000 		.4byte	.LVL1049
 20972 3366 0100     		.2byte	0x1
 20973 3368 53       		.byte	0x53
 20974 3369 3E000000 		.4byte	.LVL1049
 20975 336d 42000000 		.4byte	.LVL1050
 20976 3371 0300     		.2byte	0x3
 20977 3373 73       		.byte	0x73
 20978 3374 01       		.sleb128 1
 20979 3375 9F       		.byte	0x9f
 20980 3376 42000000 		.4byte	.LVL1050
 20981 337a 46000000 		.4byte	.LVL1052
 20982 337e 0100     		.2byte	0x1
 20983 3380 53       		.byte	0x53
 20984 3381 4A000000 		.4byte	.LVL1053
 20985 3385 5C000000 		.4byte	.LVL1056
 20986 3389 0100     		.2byte	0x1
 20987 338b 53       		.byte	0x53
 20988 338c 88000000 		.4byte	.LVL1062
 20989 3390 8C000000 		.4byte	.LVL1064
 20990 3394 0300     		.2byte	0x3
 20991 3396 08       		.byte	0x8
 20992 3397 27       		.byte	0x27
 20993 3398 9F       		.byte	0x9f
 20994 3399 8E000000 		.4byte	.LVL1065
 20995 339d 92000000 		.4byte	.LVL1066
 20996 33a1 0100     		.2byte	0x1
 20997 33a3 50       		.byte	0x50
 20998 33a4 00000000 		.4byte	0
 20999 33a8 00000000 		.4byte	0
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 510


 21000              	.LLST241:
 21001 33ac 3E000000 		.4byte	.LVL1049
 21002 33b0 46000000 		.4byte	.LVL1052
 21003 33b4 0600     		.2byte	0x6
 21004 33b6 71       		.byte	0x71
 21005 33b7 00       		.sleb128 0
 21006 33b8 08       		.byte	0x8
 21007 33b9 FF       		.byte	0xff
 21008 33ba 1A       		.byte	0x1a
 21009 33bb 9F       		.byte	0x9f
 21010 33bc 00000000 		.4byte	0
 21011 33c0 00000000 		.4byte	0
 21012              	.LLST242:
 21013 33c4 00000000 		.4byte	.LVL1069
 21014 33c8 0E000000 		.4byte	.LVL1070
 21015 33cc 0100     		.2byte	0x1
 21016 33ce 50       		.byte	0x50
 21017 33cf 0E000000 		.4byte	.LVL1070
 21018 33d3 11000000 		.4byte	.LVL1071-1
 21019 33d7 0200     		.2byte	0x2
 21020 33d9 70       		.byte	0x70
 21021 33da 00       		.sleb128 0
 21022 33db 11000000 		.4byte	.LVL1071-1
 21023 33df 50010000 		.4byte	.LVL1108
 21024 33e3 0300     		.2byte	0x3
 21025 33e5 91       		.byte	0x91
 21026 33e6 9C7F     		.sleb128 -100
 21027 33e8 50010000 		.4byte	.LVL1108
 21028 33ec 54010000 		.4byte	.LFE55
 21029 33f0 0300     		.2byte	0x3
 21030 33f2 7D       		.byte	0x7d
 21031 33f3 9C7F     		.sleb128 -100
 21032 33f5 00000000 		.4byte	0
 21033 33f9 00000000 		.4byte	0
 21034              	.LLST243:
 21035 33fd 12000000 		.4byte	.LVL1071
 21036 3401 1E000000 		.4byte	.LVL1072
 21037 3405 0100     		.2byte	0x1
 21038 3407 50       		.byte	0x50
 21039 3408 C8000000 		.4byte	.LVL1088
 21040 340c D0000000 		.4byte	.LVL1089
 21041 3410 0100     		.2byte	0x1
 21042 3412 50       		.byte	0x50
 21043 3413 D4000000 		.4byte	.LVL1090
 21044 3417 DE000000 		.4byte	.LVL1091
 21045 341b 0100     		.2byte	0x1
 21046 341d 50       		.byte	0x50
 21047 341e E4000000 		.4byte	.LVL1093
 21048 3422 EA000000 		.4byte	.LVL1094
 21049 3426 0100     		.2byte	0x1
 21050 3428 50       		.byte	0x50
 21051 3429 F6000000 		.4byte	.LVL1095
 21052 342d FC000000 		.4byte	.LVL1096
 21053 3431 0100     		.2byte	0x1
 21054 3433 50       		.byte	0x50
 21055 3434 FC000000 		.4byte	.LVL1096
 21056 3438 06010000 		.4byte	.LVL1097
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 511


 21057 343c 0200     		.2byte	0x2
 21058 343e 30       		.byte	0x30
 21059 343f 9F       		.byte	0x9f
 21060 3440 06010000 		.4byte	.LVL1097
 21061 3444 0E010000 		.4byte	.LVL1098
 21062 3448 0100     		.2byte	0x1
 21063 344a 50       		.byte	0x50
 21064 344b 2E010000 		.4byte	.LVL1101
 21065 344f 32010000 		.4byte	.LVL1103
 21066 3453 0100     		.2byte	0x1
 21067 3455 50       		.byte	0x50
 21068 3456 42010000 		.4byte	.LVL1105
 21069 345a 46010000 		.4byte	.LVL1106
 21070 345e 0100     		.2byte	0x1
 21071 3460 50       		.byte	0x50
 21072 3461 46010000 		.4byte	.LVL1106
 21073 3465 4A010000 		.4byte	.LVL1107
 21074 3469 0200     		.2byte	0x2
 21075 346b 30       		.byte	0x30
 21076 346c 9F       		.byte	0x9f
 21077 346d 00000000 		.4byte	0
 21078 3471 00000000 		.4byte	0
 21079              	.LLST244:
 21080 3475 22000000 		.4byte	.LVL1073
 21081 3479 26000000 		.4byte	.LVL1074
 21082 347d 0200     		.2byte	0x2
 21083 347f 30       		.byte	0x30
 21084 3480 9F       		.byte	0x9f
 21085 3481 26000000 		.4byte	.LVL1074
 21086 3485 80000000 		.4byte	.LVL1084
 21087 3489 0100     		.2byte	0x1
 21088 348b 55       		.byte	0x55
 21089 348c 80000000 		.4byte	.LVL1084
 21090 3490 96000000 		.4byte	.LVL1086
 21091 3494 0300     		.2byte	0x3
 21092 3496 75       		.byte	0x75
 21093 3497 01       		.sleb128 1
 21094 3498 9F       		.byte	0x9f
 21095 3499 96000000 		.4byte	.LVL1086
 21096 349d 30010000 		.4byte	.LVL1102
 21097 34a1 0100     		.2byte	0x1
 21098 34a3 55       		.byte	0x55
 21099 34a4 32010000 		.4byte	.LVL1103
 21100 34a8 4A010000 		.4byte	.LVL1107
 21101 34ac 0100     		.2byte	0x1
 21102 34ae 55       		.byte	0x55
 21103 34af 00000000 		.4byte	0
 21104 34b3 00000000 		.4byte	0
 21105              	.LLST245:
 21106 34b7 32000000 		.4byte	.LVL1075
 21107 34bb 48000000 		.4byte	.LVL1078
 21108 34bf 0100     		.2byte	0x1
 21109 34c1 54       		.byte	0x54
 21110 34c2 48000000 		.4byte	.LVL1078
 21111 34c6 4E000000 		.4byte	.LVL1079
 21112 34ca 0100     		.2byte	0x1
 21113 34cc 57       		.byte	0x57
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 512


 21114 34cd 4E000000 		.4byte	.LVL1079
 21115 34d1 5C000000 		.4byte	.LVL1081
 21116 34d5 0100     		.2byte	0x1
 21117 34d7 54       		.byte	0x54
 21118 34d8 5E000000 		.4byte	.LVL1082
 21119 34dc 96000000 		.4byte	.LVL1086
 21120 34e0 0100     		.2byte	0x1
 21121 34e2 54       		.byte	0x54
 21122 34e3 32010000 		.4byte	.LVL1103
 21123 34e7 3E010000 		.4byte	.LVL1104
 21124 34eb 0100     		.2byte	0x1
 21125 34ed 54       		.byte	0x54
 21126 34ee 00000000 		.4byte	0
 21127 34f2 00000000 		.4byte	0
 21128              	.LLST246:
 21129 34f6 00000000 		.4byte	.LVL1109
 21130 34fa 12000000 		.4byte	.LVL1112
 21131 34fe 0100     		.2byte	0x1
 21132 3500 50       		.byte	0x50
 21133 3501 12000000 		.4byte	.LVL1112
 21134 3505 4E000000 		.4byte	.LFE56
 21135 3509 0100     		.2byte	0x1
 21136 350b 58       		.byte	0x58
 21137 350c 00000000 		.4byte	0
 21138 3510 00000000 		.4byte	0
 21139              	.LLST247:
 21140 3514 00000000 		.4byte	.LVL1109
 21141 3518 0C000000 		.4byte	.LVL1111
 21142 351c 0100     		.2byte	0x1
 21143 351e 51       		.byte	0x51
 21144 351f 0C000000 		.4byte	.LVL1111
 21145 3523 4E000000 		.4byte	.LFE56
 21146 3527 0100     		.2byte	0x1
 21147 3529 56       		.byte	0x56
 21148 352a 00000000 		.4byte	0
 21149 352e 00000000 		.4byte	0
 21150              	.LLST248:
 21151 3532 00000000 		.4byte	.LVL1109
 21152 3536 12000000 		.4byte	.LVL1112
 21153 353a 0100     		.2byte	0x1
 21154 353c 52       		.byte	0x52
 21155 353d 12000000 		.4byte	.LVL1112
 21156 3541 4E000000 		.4byte	.LFE56
 21157 3545 0100     		.2byte	0x1
 21158 3547 57       		.byte	0x57
 21159 3548 00000000 		.4byte	0
 21160 354c 00000000 		.4byte	0
 21161              	.LLST249:
 21162 3550 0A000000 		.4byte	.LVL1110
 21163 3554 12000000 		.4byte	.LVL1112
 21164 3558 0200     		.2byte	0x2
 21165 355a 30       		.byte	0x30
 21166 355b 9F       		.byte	0x9f
 21167 355c 12000000 		.4byte	.LVL1112
 21168 3560 4E000000 		.4byte	.LFE56
 21169 3564 0100     		.2byte	0x1
 21170 3566 54       		.byte	0x54
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 513


 21171 3567 00000000 		.4byte	0
 21172 356b 00000000 		.4byte	0
 21173              	.LLST250:
 21174 356f 0A000000 		.4byte	.LVL1110
 21175 3573 12000000 		.4byte	.LVL1112
 21176 3577 0100     		.2byte	0x1
 21177 3579 50       		.byte	0x50
 21178 357a 12000000 		.4byte	.LVL1112
 21179 357e 2A000000 		.4byte	.LVL1115
 21180 3582 0100     		.2byte	0x1
 21181 3584 55       		.byte	0x55
 21182 3585 2A000000 		.4byte	.LVL1115
 21183 3589 34000000 		.4byte	.LVL1117
 21184 358d 0100     		.2byte	0x1
 21185 358f 52       		.byte	0x52
 21186 3590 34000000 		.4byte	.LVL1117
 21187 3594 3A000000 		.4byte	.LVL1118
 21188 3598 0100     		.2byte	0x1
 21189 359a 55       		.byte	0x55
 21190 359b 3A000000 		.4byte	.LVL1118
 21191 359f 3C000000 		.4byte	.LVL1119
 21192 35a3 0100     		.2byte	0x1
 21193 35a5 52       		.byte	0x52
 21194 35a6 3C000000 		.4byte	.LVL1119
 21195 35aa 4E000000 		.4byte	.LFE56
 21196 35ae 0100     		.2byte	0x1
 21197 35b0 55       		.byte	0x55
 21198 35b1 00000000 		.4byte	0
 21199 35b5 00000000 		.4byte	0
 21200              	.LLST251:
 21201 35b9 28000000 		.4byte	.LVL1114
 21202 35bd 34000000 		.4byte	.LVL1117
 21203 35c1 0600     		.2byte	0x6
 21204 35c3 73       		.byte	0x73
 21205 35c4 00       		.sleb128 0
 21206 35c5 08       		.byte	0x8
 21207 35c6 FF       		.byte	0xff
 21208 35c7 1A       		.byte	0x1a
 21209 35c8 9F       		.byte	0x9f
 21210 35c9 3A000000 		.4byte	.LVL1118
 21211 35cd 3C000000 		.4byte	.LVL1119
 21212 35d1 0600     		.2byte	0x6
 21213 35d3 73       		.byte	0x73
 21214 35d4 00       		.sleb128 0
 21215 35d5 08       		.byte	0x8
 21216 35d6 FF       		.byte	0xff
 21217 35d7 1A       		.byte	0x1a
 21218 35d8 9F       		.byte	0x9f
 21219 35d9 00000000 		.4byte	0
 21220 35dd 00000000 		.4byte	0
 21221              	.LLST252:
 21222 35e1 00000000 		.4byte	.LVL1120
 21223 35e5 08000000 		.4byte	.LVL1121
 21224 35e9 0100     		.2byte	0x1
 21225 35eb 50       		.byte	0x50
 21226 35ec 08000000 		.4byte	.LVL1121
 21227 35f0 1E000000 		.4byte	.LFE60
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 514


 21228 35f4 0400     		.2byte	0x4
 21229 35f6 F3       		.byte	0xf3
 21230 35f7 01       		.uleb128 0x1
 21231 35f8 50       		.byte	0x50
 21232 35f9 9F       		.byte	0x9f
 21233 35fa 00000000 		.4byte	0
 21234 35fe 00000000 		.4byte	0
 21235              	.LLST253:
 21236 3602 00000000 		.4byte	.LVL1120
 21237 3606 0B000000 		.4byte	.LVL1122-1
 21238 360a 0100     		.2byte	0x1
 21239 360c 51       		.byte	0x51
 21240 360d 0B000000 		.4byte	.LVL1122-1
 21241 3611 1E000000 		.4byte	.LFE60
 21242 3615 0400     		.2byte	0x4
 21243 3617 F3       		.byte	0xf3
 21244 3618 01       		.uleb128 0x1
 21245 3619 51       		.byte	0x51
 21246 361a 9F       		.byte	0x9f
 21247 361b 00000000 		.4byte	0
 21248 361f 00000000 		.4byte	0
 21249              	.LLST254:
 21250 3623 00000000 		.4byte	.LVL1125
 21251 3627 08000000 		.4byte	.LVL1126
 21252 362b 0100     		.2byte	0x1
 21253 362d 50       		.byte	0x50
 21254 362e 08000000 		.4byte	.LVL1126
 21255 3632 26000000 		.4byte	.LFE61
 21256 3636 0100     		.2byte	0x1
 21257 3638 54       		.byte	0x54
 21258 3639 00000000 		.4byte	0
 21259 363d 00000000 		.4byte	0
 21260              	.LLST255:
 21261 3641 00000000 		.4byte	.LVL1125
 21262 3645 0B000000 		.4byte	.LVL1127-1
 21263 3649 0100     		.2byte	0x1
 21264 364b 51       		.byte	0x51
 21265 364c 0B000000 		.4byte	.LVL1127-1
 21266 3650 26000000 		.4byte	.LFE61
 21267 3654 0400     		.2byte	0x4
 21268 3656 F3       		.byte	0xf3
 21269 3657 01       		.uleb128 0x1
 21270 3658 51       		.byte	0x51
 21271 3659 9F       		.byte	0x9f
 21272 365a 00000000 		.4byte	0
 21273 365e 00000000 		.4byte	0
 21274              	.LLST256:
 21275 3662 00000000 		.4byte	.LVL1131
 21276 3666 12000000 		.4byte	.LVL1132
 21277 366a 0100     		.2byte	0x1
 21278 366c 50       		.byte	0x50
 21279 366d 12000000 		.4byte	.LVL1132
 21280 3671 15000000 		.4byte	.LVL1133-1
 21281 3675 0100     		.2byte	0x1
 21282 3677 51       		.byte	0x51
 21283 3678 15000000 		.4byte	.LVL1133-1
 21284 367c 4C020000 		.4byte	.LFE62
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 515


 21285 3680 0400     		.2byte	0x4
 21286 3682 F3       		.byte	0xf3
 21287 3683 01       		.uleb128 0x1
 21288 3684 50       		.byte	0x50
 21289 3685 9F       		.byte	0x9f
 21290 3686 00000000 		.4byte	0
 21291 368a 00000000 		.4byte	0
 21292              	.LLST257:
 21293 368e 00000000 		.4byte	.LVL1131
 21294 3692 18000000 		.4byte	.LVL1134
 21295 3696 0200     		.2byte	0x2
 21296 3698 91       		.byte	0x91
 21297 3699 74       		.sleb128 -12
 21298 369a 18000000 		.4byte	.LVL1134
 21299 369e 1A000000 		.4byte	.LVL1135
 21300 36a2 0100     		.2byte	0x1
 21301 36a4 56       		.byte	0x56
 21302 36a5 1A000000 		.4byte	.LVL1135
 21303 36a9 32000000 		.4byte	.LVL1139
 21304 36ad 0100     		.2byte	0x1
 21305 36af 54       		.byte	0x54
 21306 36b0 32000000 		.4byte	.LVL1139
 21307 36b4 5A000000 		.4byte	.LVL1151
 21308 36b8 0100     		.2byte	0x1
 21309 36ba 52       		.byte	0x52
 21310 36bb 5A000000 		.4byte	.LVL1151
 21311 36bf 5E000000 		.4byte	.LVL1153
 21312 36c3 0300     		.2byte	0x3
 21313 36c5 72       		.byte	0x72
 21314 36c6 01       		.sleb128 1
 21315 36c7 9F       		.byte	0x9f
 21316 36c8 5E000000 		.4byte	.LVL1153
 21317 36cc 6A000000 		.4byte	.LVL1155
 21318 36d0 0100     		.2byte	0x1
 21319 36d2 52       		.byte	0x52
 21320 36d3 6A000000 		.4byte	.LVL1155
 21321 36d7 6E000000 		.4byte	.LVL1157
 21322 36db 0300     		.2byte	0x3
 21323 36dd 72       		.byte	0x72
 21324 36de 01       		.sleb128 1
 21325 36df 9F       		.byte	0x9f
 21326 36e0 6E000000 		.4byte	.LVL1157
 21327 36e4 8A000000 		.4byte	.LVL1161
 21328 36e8 0100     		.2byte	0x1
 21329 36ea 52       		.byte	0x52
 21330 36eb 8A000000 		.4byte	.LVL1161
 21331 36ef 8E000000 		.4byte	.LVL1163
 21332 36f3 0100     		.2byte	0x1
 21333 36f5 56       		.byte	0x56
 21334 36f6 8E000000 		.4byte	.LVL1163
 21335 36fa 90000000 		.4byte	.LVL1164
 21336 36fe 0100     		.2byte	0x1
 21337 3700 52       		.byte	0x52
 21338 3701 90000000 		.4byte	.LVL1164
 21339 3705 3C020000 		.4byte	.LVL1221
 21340 3709 0100     		.2byte	0x1
 21341 370b 56       		.byte	0x56
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 516


 21342 370c 00000000 		.4byte	0
 21343 3710 00000000 		.4byte	0
 21344              	.LLST258:
 21345 3714 30000000 		.4byte	.LVL1138
 21346 3718 38000000 		.4byte	.LVL1141
 21347 371c 0200     		.2byte	0x2
 21348 371e 30       		.byte	0x30
 21349 371f 9F       		.byte	0x9f
 21350 3720 38000000 		.4byte	.LVL1141
 21351 3724 40000000 		.4byte	.LVL1144
 21352 3728 0200     		.2byte	0x2
 21353 372a 31       		.byte	0x31
 21354 372b 9F       		.byte	0x9f
 21355 372c 40000000 		.4byte	.LVL1144
 21356 3730 44000000 		.4byte	.LVL1145
 21357 3734 0200     		.2byte	0x2
 21358 3736 30       		.byte	0x30
 21359 3737 9F       		.byte	0x9f
 21360 3738 44000000 		.4byte	.LVL1145
 21361 373c 4C000000 		.4byte	.LVL1148
 21362 3740 0200     		.2byte	0x2
 21363 3742 32       		.byte	0x32
 21364 3743 9F       		.byte	0x9f
 21365 3744 4C000000 		.4byte	.LVL1148
 21366 3748 4E000000 		.4byte	.LVL1149
 21367 374c 0200     		.2byte	0x2
 21368 374e 30       		.byte	0x30
 21369 374f 9F       		.byte	0x9f
 21370 3750 4E000000 		.4byte	.LVL1149
 21371 3754 EE000000 		.4byte	.LVL1173
 21372 3758 0100     		.2byte	0x1
 21373 375a 57       		.byte	0x57
 21374 375b 2C010000 		.4byte	.LVL1184
 21375 375f FE010000 		.4byte	.LVL1209
 21376 3763 0100     		.2byte	0x1
 21377 3765 57       		.byte	0x57
 21378 3766 0C020000 		.4byte	.LVL1212
 21379 376a 0E020000 		.4byte	.LVL1213
 21380 376e 0100     		.2byte	0x1
 21381 3770 57       		.byte	0x57
 21382 3771 00000000 		.4byte	0
 21383 3775 00000000 		.4byte	0
 21384              	.LLST259:
 21385 3779 3C010000 		.4byte	.LVL1188
 21386 377d 42010000 		.4byte	.LVL1189
 21387 3781 0200     		.2byte	0x2
 21388 3783 3A       		.byte	0x3a
 21389 3784 9F       		.byte	0x9f
 21390 3785 42010000 		.4byte	.LVL1189
 21391 3789 48010000 		.4byte	.LVL1190
 21392 378d 0200     		.2byte	0x2
 21393 378f 40       		.byte	0x40
 21394 3790 9F       		.byte	0x9f
 21395 3791 5A010000 		.4byte	.LVL1193
 21396 3795 F0010000 		.4byte	.LVL1206
 21397 3799 0100     		.2byte	0x1
 21398 379b 58       		.byte	0x58
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 517


 21399 379c F2010000 		.4byte	.LVL1207
 21400 37a0 F6010000 		.4byte	.LVL1208
 21401 37a4 0100     		.2byte	0x1
 21402 37a6 58       		.byte	0x58
 21403 37a7 00000000 		.4byte	0
 21404 37ab 00000000 		.4byte	0
 21405              	.LLST260:
 21406 37af 98010000 		.4byte	.LVL1196
 21407 37b3 9E010000 		.4byte	.LVL1197
 21408 37b7 0200     		.2byte	0x2
 21409 37b9 30       		.byte	0x30
 21410 37ba 9F       		.byte	0x9f
 21411 37bb 9E010000 		.4byte	.LVL1197
 21412 37bf A0010000 		.4byte	.LVL1198
 21413 37c3 0100     		.2byte	0x1
 21414 37c5 54       		.byte	0x54
 21415 37c6 A0010000 		.4byte	.LVL1198
 21416 37ca C2010000 		.4byte	.LVL1202
 21417 37ce 0100     		.2byte	0x1
 21418 37d0 5C       		.byte	0x5c
 21419 37d1 C2010000 		.4byte	.LVL1202
 21420 37d5 D8010000 		.4byte	.LVL1204
 21421 37d9 0100     		.2byte	0x1
 21422 37db 54       		.byte	0x54
 21423 37dc D8010000 		.4byte	.LVL1204
 21424 37e0 E6010000 		.4byte	.LVL1205
 21425 37e4 0300     		.2byte	0x3
 21426 37e6 7C       		.byte	0x7c
 21427 37e7 02       		.sleb128 2
 21428 37e8 9F       		.byte	0x9f
 21429 37e9 E6010000 		.4byte	.LVL1205
 21430 37ed 2A020000 		.4byte	.LVL1217
 21431 37f1 0100     		.2byte	0x1
 21432 37f3 54       		.byte	0x54
 21433 37f4 00000000 		.4byte	0
 21434 37f8 00000000 		.4byte	0
 21435              	.LLST261:
 21436 37fc D8000000 		.4byte	.LVL1170
 21437 3800 DC000000 		.4byte	.LVL1171
 21438 3804 0200     		.2byte	0x2
 21439 3806 30       		.byte	0x30
 21440 3807 9F       		.byte	0x9f
 21441 3808 DC000000 		.4byte	.LVL1171
 21442 380c EE000000 		.4byte	.LVL1173
 21443 3810 0100     		.2byte	0x1
 21444 3812 54       		.byte	0x54
 21445 3813 EE000000 		.4byte	.LVL1173
 21446 3817 FA000000 		.4byte	.LVL1175
 21447 381b 0100     		.2byte	0x1
 21448 381d 57       		.byte	0x57
 21449 381e FA000000 		.4byte	.LVL1175
 21450 3822 FC000000 		.4byte	.LVL1176
 21451 3826 0100     		.2byte	0x1
 21452 3828 54       		.byte	0x54
 21453 3829 FC000000 		.4byte	.LVL1176
 21454 382d 04010000 		.4byte	.LVL1177
 21455 3831 0100     		.2byte	0x1
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 518


 21456 3833 57       		.byte	0x57
 21457 3834 04010000 		.4byte	.LVL1177
 21458 3838 18010000 		.4byte	.LVL1180
 21459 383c 0100     		.2byte	0x1
 21460 383e 54       		.byte	0x54
 21461 383f 18010000 		.4byte	.LVL1180
 21462 3843 24010000 		.4byte	.LVL1182
 21463 3847 0100     		.2byte	0x1
 21464 3849 57       		.byte	0x57
 21465 384a 24010000 		.4byte	.LVL1182
 21466 384e 26010000 		.4byte	.LVL1183
 21467 3852 0100     		.2byte	0x1
 21468 3854 54       		.byte	0x54
 21469 3855 26010000 		.4byte	.LVL1183
 21470 3859 2C010000 		.4byte	.LVL1184
 21471 385d 0100     		.2byte	0x1
 21472 385f 57       		.byte	0x57
 21473 3860 E6010000 		.4byte	.LVL1205
 21474 3864 00020000 		.4byte	.LVL1210
 21475 3868 0100     		.2byte	0x1
 21476 386a 54       		.byte	0x54
 21477 386b 00020000 		.4byte	.LVL1210
 21478 386f 0C020000 		.4byte	.LVL1212
 21479 3873 0100     		.2byte	0x1
 21480 3875 57       		.byte	0x57
 21481 3876 0C020000 		.4byte	.LVL1212
 21482 387a 0E020000 		.4byte	.LVL1213
 21483 387e 0100     		.2byte	0x1
 21484 3880 54       		.byte	0x54
 21485 3881 0E020000 		.4byte	.LVL1213
 21486 3885 10020000 		.4byte	.LVL1214
 21487 3889 0100     		.2byte	0x1
 21488 388b 53       		.byte	0x53
 21489 388c 10020000 		.4byte	.LVL1214
 21490 3890 2A020000 		.4byte	.LVL1217
 21491 3894 0100     		.2byte	0x1
 21492 3896 57       		.byte	0x57
 21493 3897 2A020000 		.4byte	.LVL1217
 21494 389b 34020000 		.4byte	.LVL1219
 21495 389f 0100     		.2byte	0x1
 21496 38a1 54       		.byte	0x54
 21497 38a2 34020000 		.4byte	.LVL1219
 21498 38a6 36020000 		.4byte	.LVL1220
 21499 38aa 0100     		.2byte	0x1
 21500 38ac 57       		.byte	0x57
 21501 38ad 36020000 		.4byte	.LVL1220
 21502 38b1 3C020000 		.4byte	.LVL1221
 21503 38b5 0100     		.2byte	0x1
 21504 38b7 54       		.byte	0x54
 21505 38b8 00000000 		.4byte	0
 21506 38bc 00000000 		.4byte	0
 21507              	.LLST262:
 21508 38c0 30000000 		.4byte	.LVL1138
 21509 38c4 5A000000 		.4byte	.LVL1151
 21510 38c8 0200     		.2byte	0x2
 21511 38ca 30       		.byte	0x30
 21512 38cb 9F       		.byte	0x9f
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 519


 21513 38cc 5A000000 		.4byte	.LVL1151
 21514 38d0 64000000 		.4byte	.LVL1154
 21515 38d4 0100     		.2byte	0x1
 21516 38d6 55       		.byte	0x55
 21517 38d7 6A000000 		.4byte	.LVL1155
 21518 38db 70000000 		.4byte	.LVL1158
 21519 38df 0100     		.2byte	0x1
 21520 38e1 55       		.byte	0x55
 21521 38e2 70000000 		.4byte	.LVL1158
 21522 38e6 72000000 		.4byte	.LVL1159
 21523 38ea 0200     		.2byte	0x2
 21524 38ec 30       		.byte	0x30
 21525 38ed 9F       		.byte	0x9f
 21526 38ee 72000000 		.4byte	.LVL1159
 21527 38f2 3C020000 		.4byte	.LVL1221
 21528 38f6 0100     		.2byte	0x1
 21529 38f8 55       		.byte	0x55
 21530 38f9 00000000 		.4byte	0
 21531 38fd 00000000 		.4byte	0
 21532              	.LLST263:
 21533 3901 86010000 		.4byte	.LVL1194
 21534 3905 9E010000 		.4byte	.LVL1197
 21535 3909 0100     		.2byte	0x1
 21536 390b 5E       		.byte	0x5e
 21537 390c 9E010000 		.4byte	.LVL1197
 21538 3910 A0010000 		.4byte	.LVL1198
 21539 3914 0100     		.2byte	0x1
 21540 3916 50       		.byte	0x50
 21541 3917 A0010000 		.4byte	.LVL1198
 21542 391b AC010000 		.4byte	.LVL1200
 21543 391f 0100     		.2byte	0x1
 21544 3921 5E       		.byte	0x5e
 21545 3922 AC010000 		.4byte	.LVL1200
 21546 3926 00020000 		.4byte	.LVL1210
 21547 392a 0100     		.2byte	0x1
 21548 392c 50       		.byte	0x50
 21549 392d 0C020000 		.4byte	.LVL1212
 21550 3931 0E020000 		.4byte	.LVL1213
 21551 3935 0100     		.2byte	0x1
 21552 3937 50       		.byte	0x50
 21553 3938 00000000 		.4byte	0
 21554 393c 00000000 		.4byte	0
 21555              	.LLST264:
 21556 3940 1C000000 		.4byte	.LVL1136
 21557 3944 2B000000 		.4byte	.LVL1137-1
 21558 3948 0100     		.2byte	0x1
 21559 394a 51       		.byte	0x51
 21560 394b 30000000 		.4byte	.LVL1138
 21561 394f 56000000 		.4byte	.LVL1150
 21562 3953 0100     		.2byte	0x1
 21563 3955 51       		.byte	0x51
 21564 3956 5C000000 		.4byte	.LVL1152
 21565 395a EE000000 		.4byte	.LVL1173
 21566 395e 0100     		.2byte	0x1
 21567 3960 51       		.byte	0x51
 21568 3961 2C010000 		.4byte	.LVL1184
 21569 3965 34010000 		.4byte	.LVL1186
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 520


 21570 3969 0100     		.2byte	0x1
 21571 396b 51       		.byte	0x51
 21572 396c 3C010000 		.4byte	.LVL1188
 21573 3970 4D010000 		.4byte	.LVL1191-1
 21574 3974 0100     		.2byte	0x1
 21575 3976 51       		.byte	0x51
 21576 3977 50010000 		.4byte	.LVL1192
 21577 397b 00020000 		.4byte	.LVL1210
 21578 397f 0100     		.2byte	0x1
 21579 3981 51       		.byte	0x51
 21580 3982 0C020000 		.4byte	.LVL1212
 21581 3986 0E020000 		.4byte	.LVL1213
 21582 398a 0100     		.2byte	0x1
 21583 398c 51       		.byte	0x51
 21584 398d 3C020000 		.4byte	.LVL1221
 21585 3991 41020000 		.4byte	.LVL1222-1
 21586 3995 0100     		.2byte	0x1
 21587 3997 51       		.byte	0x51
 21588 3998 00000000 		.4byte	0
 21589 399c 00000000 		.4byte	0
 21590              	.LLST265:
 21591 39a0 96000000 		.4byte	.LVL1165
 21592 39a4 A6000000 		.4byte	.LVL1166
 21593 39a8 0100     		.2byte	0x1
 21594 39aa 51       		.byte	0x51
 21595 39ab A6000000 		.4byte	.LVL1166
 21596 39af A8000000 		.4byte	.LVL1167
 21597 39b3 0100     		.2byte	0x1
 21598 39b5 53       		.byte	0x53
 21599 39b6 A8000000 		.4byte	.LVL1167
 21600 39ba AA000000 		.4byte	.LVL1168
 21601 39be 0100     		.2byte	0x1
 21602 39c0 51       		.byte	0x51
 21603 39c1 AA000000 		.4byte	.LVL1168
 21604 39c5 D0000000 		.4byte	.LVL1169
 21605 39c9 0100     		.2byte	0x1
 21606 39cb 53       		.byte	0x53
 21607 39cc 2C010000 		.4byte	.LVL1184
 21608 39d0 2E010000 		.4byte	.LVL1185
 21609 39d4 0100     		.2byte	0x1
 21610 39d6 53       		.byte	0x53
 21611 39d7 3C010000 		.4byte	.LVL1188
 21612 39db 4D010000 		.4byte	.LVL1191-1
 21613 39df 0100     		.2byte	0x1
 21614 39e1 53       		.byte	0x53
 21615 39e2 50010000 		.4byte	.LVL1192
 21616 39e6 9E010000 		.4byte	.LVL1197
 21617 39ea 0100     		.2byte	0x1
 21618 39ec 53       		.byte	0x53
 21619 39ed AA010000 		.4byte	.LVL1199
 21620 39f1 C4010000 		.4byte	.LVL1203
 21621 39f5 0100     		.2byte	0x1
 21622 39f7 53       		.byte	0x53
 21623 39f8 F6010000 		.4byte	.LVL1208
 21624 39fc 3C020000 		.4byte	.LVL1221
 21625 3a00 0100     		.2byte	0x1
 21626 3a02 58       		.byte	0x58
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 521


 21627 3a03 00000000 		.4byte	0
 21628 3a07 00000000 		.4byte	0
 21629              	.LLST266:
 21630 3a0b D8000000 		.4byte	.LVL1170
 21631 3a0f 2C010000 		.4byte	.LVL1184
 21632 3a13 0100     		.2byte	0x1
 21633 3a15 58       		.byte	0x58
 21634 3a16 00000000 		.4byte	0
 21635 3a1a 00000000 		.4byte	0
 21636              		.section	.debug_aranges,"",%progbits
 21637 0000 0C020000 		.4byte	0x20c
 21638 0004 0200     		.2byte	0x2
 21639 0006 00000000 		.4byte	.Ldebug_info0
 21640 000a 04       		.byte	0x4
 21641 000b 00       		.byte	0
 21642 000c 0000     		.2byte	0
 21643 000e 0000     		.2byte	0
 21644 0010 00000000 		.4byte	.LFB0
 21645 0014 0A000000 		.4byte	.LFE0-.LFB0
 21646 0018 00000000 		.4byte	.LFB1
 21647 001c 16000000 		.4byte	.LFE1-.LFB1
 21648 0020 00000000 		.4byte	.LFB2
 21649 0024 08000000 		.4byte	.LFE2-.LFB2
 21650 0028 00000000 		.4byte	.LFB3
 21651 002c 14000000 		.4byte	.LFE3-.LFB3
 21652 0030 00000000 		.4byte	.LFB4
 21653 0034 12000000 		.4byte	.LFE4-.LFB4
 21654 0038 00000000 		.4byte	.LFB5
 21655 003c 0A000000 		.4byte	.LFE5-.LFB5
 21656 0040 00000000 		.4byte	.LFB6
 21657 0044 1E000000 		.4byte	.LFE6-.LFB6
 21658 0048 00000000 		.4byte	.LFB7
 21659 004c 10000000 		.4byte	.LFE7-.LFB7
 21660 0050 00000000 		.4byte	.LFB8
 21661 0054 24000000 		.4byte	.LFE8-.LFB8
 21662 0058 00000000 		.4byte	.LFB9
 21663 005c 26000000 		.4byte	.LFE9-.LFB9
 21664 0060 00000000 		.4byte	.LFB13
 21665 0064 18000000 		.4byte	.LFE13-.LFB13
 21666 0068 00000000 		.4byte	.LFB22
 21667 006c 24000000 		.4byte	.LFE22-.LFB22
 21668 0070 00000000 		.4byte	.LFB23
 21669 0074 24000000 		.4byte	.LFE23-.LFB23
 21670 0078 00000000 		.4byte	.LFB28
 21671 007c 6A000000 		.4byte	.LFE28-.LFB28
 21672 0080 00000000 		.4byte	.LFB29
 21673 0084 48010000 		.4byte	.LFE29-.LFB29
 21674 0088 00000000 		.4byte	.LFB31
 21675 008c 58000000 		.4byte	.LFE31-.LFB31
 21676 0090 00000000 		.4byte	.LFB59
 21677 0094 12000000 		.4byte	.LFE59-.LFB59
 21678 0098 00000000 		.4byte	.LFB35
 21679 009c 46000000 		.4byte	.LFE35-.LFB35
 21680 00a0 00000000 		.4byte	.LFB10
 21681 00a4 50000000 		.4byte	.LFE10-.LFB10
 21682 00a8 00000000 		.4byte	.LFB11
 21683 00ac 34000000 		.4byte	.LFE11-.LFB11
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 522


 21684 00b0 00000000 		.4byte	.LFB32
 21685 00b4 70000000 		.4byte	.LFE32-.LFB32
 21686 00b8 00000000 		.4byte	.LFB33
 21687 00bc 6C000000 		.4byte	.LFE33-.LFB33
 21688 00c0 00000000 		.4byte	.LFB34
 21689 00c4 C0020000 		.4byte	.LFE34-.LFB34
 21690 00c8 00000000 		.4byte	.LFB15
 21691 00cc 04010000 		.4byte	.LFE15-.LFB15
 21692 00d0 00000000 		.4byte	.LFB14
 21693 00d4 D4000000 		.4byte	.LFE14-.LFB14
 21694 00d8 00000000 		.4byte	.LFB19
 21695 00dc B2000000 		.4byte	.LFE19-.LFB19
 21696 00e0 00000000 		.4byte	.LFB17
 21697 00e4 14010000 		.4byte	.LFE17-.LFB17
 21698 00e8 00000000 		.4byte	.LFB16
 21699 00ec 7C000000 		.4byte	.LFE16-.LFB16
 21700 00f0 00000000 		.4byte	.LFB27
 21701 00f4 20000000 		.4byte	.LFE27-.LFB27
 21702 00f8 00000000 		.4byte	.LFB18
 21703 00fc 52000000 		.4byte	.LFE18-.LFB18
 21704 0100 00000000 		.4byte	.LFB20
 21705 0104 D6000000 		.4byte	.LFE20-.LFB20
 21706 0108 00000000 		.4byte	.LFB25
 21707 010c 56000000 		.4byte	.LFE25-.LFB25
 21708 0110 00000000 		.4byte	.LFB30
 21709 0114 BA000000 		.4byte	.LFE30-.LFB30
 21710 0118 00000000 		.4byte	.LFB21
 21711 011c 4C000000 		.4byte	.LFE21-.LFB21
 21712 0120 00000000 		.4byte	.LFB26
 21713 0124 3A000000 		.4byte	.LFE26-.LFB26
 21714 0128 00000000 		.4byte	.LFB24
 21715 012c 60000000 		.4byte	.LFE24-.LFB24
 21716 0130 00000000 		.4byte	.LFB12
 21717 0134 8C000000 		.4byte	.LFE12-.LFB12
 21718 0138 00000000 		.4byte	.LFB36
 21719 013c 54000000 		.4byte	.LFE36-.LFB36
 21720 0140 00000000 		.4byte	.LFB37
 21721 0144 D0010000 		.4byte	.LFE37-.LFB37
 21722 0148 00000000 		.4byte	.LFB38
 21723 014c 74010000 		.4byte	.LFE38-.LFB38
 21724 0150 00000000 		.4byte	.LFB39
 21725 0154 AC010000 		.4byte	.LFE39-.LFB39
 21726 0158 00000000 		.4byte	.LFB57
 21727 015c 40000000 		.4byte	.LFE57-.LFB57
 21728 0160 00000000 		.4byte	.LFB58
 21729 0164 3A000000 		.4byte	.LFE58-.LFB58
 21730 0168 00000000 		.4byte	.LFB40
 21731 016c 9C000000 		.4byte	.LFE40-.LFB40
 21732 0170 00000000 		.4byte	.LFB41
 21733 0174 24000000 		.4byte	.LFE41-.LFB41
 21734 0178 00000000 		.4byte	.LFB42
 21735 017c 28000000 		.4byte	.LFE42-.LFB42
 21736 0180 00000000 		.4byte	.LFB43
 21737 0184 5A000000 		.4byte	.LFE43-.LFB43
 21738 0188 00000000 		.4byte	.LFB44
 21739 018c 7A010000 		.4byte	.LFE44-.LFB44
 21740 0190 00000000 		.4byte	.LFB45
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 523


 21741 0194 72000000 		.4byte	.LFE45-.LFB45
 21742 0198 00000000 		.4byte	.LFB46
 21743 019c 1A000000 		.4byte	.LFE46-.LFB46
 21744 01a0 00000000 		.4byte	.LFB47
 21745 01a4 4C000000 		.4byte	.LFE47-.LFB47
 21746 01a8 00000000 		.4byte	.LFB48
 21747 01ac 3E000000 		.4byte	.LFE48-.LFB48
 21748 01b0 00000000 		.4byte	.LFB49
 21749 01b4 CE000000 		.4byte	.LFE49-.LFB49
 21750 01b8 00000000 		.4byte	.LFB50
 21751 01bc B4000000 		.4byte	.LFE50-.LFB50
 21752 01c0 00000000 		.4byte	.LFB51
 21753 01c4 C4000000 		.4byte	.LFE51-.LFB51
 21754 01c8 00000000 		.4byte	.LFB52
 21755 01cc 0C010000 		.4byte	.LFE52-.LFB52
 21756 01d0 00000000 		.4byte	.LFB53
 21757 01d4 1C010000 		.4byte	.LFE53-.LFB53
 21758 01d8 00000000 		.4byte	.LFB54
 21759 01dc 9E000000 		.4byte	.LFE54-.LFB54
 21760 01e0 00000000 		.4byte	.LFB55
 21761 01e4 54010000 		.4byte	.LFE55-.LFB55
 21762 01e8 00000000 		.4byte	.LFB56
 21763 01ec 4E000000 		.4byte	.LFE56-.LFB56
 21764 01f0 00000000 		.4byte	.LFB60
 21765 01f4 1E000000 		.4byte	.LFE60-.LFB60
 21766 01f8 00000000 		.4byte	.LFB61
 21767 01fc 26000000 		.4byte	.LFE61-.LFB61
 21768 0200 00000000 		.4byte	.LFB62
 21769 0204 4C020000 		.4byte	.LFE62-.LFB62
 21770 0208 00000000 		.4byte	0
 21771 020c 00000000 		.4byte	0
 21772              		.section	.debug_ranges,"",%progbits
 21773              	.Ldebug_ranges0:
 21774 0000 00000000 		.4byte	.LFB0
 21775 0004 0A000000 		.4byte	.LFE0
 21776 0008 00000000 		.4byte	.LFB1
 21777 000c 16000000 		.4byte	.LFE1
 21778 0010 00000000 		.4byte	.LFB2
 21779 0014 08000000 		.4byte	.LFE2
 21780 0018 00000000 		.4byte	.LFB3
 21781 001c 14000000 		.4byte	.LFE3
 21782 0020 00000000 		.4byte	.LFB4
 21783 0024 12000000 		.4byte	.LFE4
 21784 0028 00000000 		.4byte	.LFB5
 21785 002c 0A000000 		.4byte	.LFE5
 21786 0030 00000000 		.4byte	.LFB6
 21787 0034 1E000000 		.4byte	.LFE6
 21788 0038 00000000 		.4byte	.LFB7
 21789 003c 10000000 		.4byte	.LFE7
 21790 0040 00000000 		.4byte	.LFB8
 21791 0044 24000000 		.4byte	.LFE8
 21792 0048 00000000 		.4byte	.LFB9
 21793 004c 26000000 		.4byte	.LFE9
 21794 0050 00000000 		.4byte	.LFB13
 21795 0054 18000000 		.4byte	.LFE13
 21796 0058 00000000 		.4byte	.LFB22
 21797 005c 24000000 		.4byte	.LFE22
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 524


 21798 0060 00000000 		.4byte	.LFB23
 21799 0064 24000000 		.4byte	.LFE23
 21800 0068 00000000 		.4byte	.LFB28
 21801 006c 6A000000 		.4byte	.LFE28
 21802 0070 00000000 		.4byte	.LFB29
 21803 0074 48010000 		.4byte	.LFE29
 21804 0078 00000000 		.4byte	.LFB31
 21805 007c 58000000 		.4byte	.LFE31
 21806 0080 00000000 		.4byte	.LFB59
 21807 0084 12000000 		.4byte	.LFE59
 21808 0088 00000000 		.4byte	.LFB35
 21809 008c 46000000 		.4byte	.LFE35
 21810 0090 00000000 		.4byte	.LFB10
 21811 0094 50000000 		.4byte	.LFE10
 21812 0098 00000000 		.4byte	.LFB11
 21813 009c 34000000 		.4byte	.LFE11
 21814 00a0 00000000 		.4byte	.LFB32
 21815 00a4 70000000 		.4byte	.LFE32
 21816 00a8 00000000 		.4byte	.LFB33
 21817 00ac 6C000000 		.4byte	.LFE33
 21818 00b0 00000000 		.4byte	.LFB34
 21819 00b4 C0020000 		.4byte	.LFE34
 21820 00b8 00000000 		.4byte	.LFB15
 21821 00bc 04010000 		.4byte	.LFE15
 21822 00c0 00000000 		.4byte	.LFB14
 21823 00c4 D4000000 		.4byte	.LFE14
 21824 00c8 00000000 		.4byte	.LFB19
 21825 00cc B2000000 		.4byte	.LFE19
 21826 00d0 00000000 		.4byte	.LFB17
 21827 00d4 14010000 		.4byte	.LFE17
 21828 00d8 00000000 		.4byte	.LFB16
 21829 00dc 7C000000 		.4byte	.LFE16
 21830 00e0 00000000 		.4byte	.LFB27
 21831 00e4 20000000 		.4byte	.LFE27
 21832 00e8 00000000 		.4byte	.LFB18
 21833 00ec 52000000 		.4byte	.LFE18
 21834 00f0 00000000 		.4byte	.LFB20
 21835 00f4 D6000000 		.4byte	.LFE20
 21836 00f8 00000000 		.4byte	.LFB25
 21837 00fc 56000000 		.4byte	.LFE25
 21838 0100 00000000 		.4byte	.LFB30
 21839 0104 BA000000 		.4byte	.LFE30
 21840 0108 00000000 		.4byte	.LFB21
 21841 010c 4C000000 		.4byte	.LFE21
 21842 0110 00000000 		.4byte	.LFB26
 21843 0114 3A000000 		.4byte	.LFE26
 21844 0118 00000000 		.4byte	.LFB24
 21845 011c 60000000 		.4byte	.LFE24
 21846 0120 00000000 		.4byte	.LFB12
 21847 0124 8C000000 		.4byte	.LFE12
 21848 0128 00000000 		.4byte	.LFB36
 21849 012c 54000000 		.4byte	.LFE36
 21850 0130 00000000 		.4byte	.LFB37
 21851 0134 D0010000 		.4byte	.LFE37
 21852 0138 00000000 		.4byte	.LFB38
 21853 013c 74010000 		.4byte	.LFE38
 21854 0140 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 525


 21855 0144 AC010000 		.4byte	.LFE39
 21856 0148 00000000 		.4byte	.LFB57
 21857 014c 40000000 		.4byte	.LFE57
 21858 0150 00000000 		.4byte	.LFB58
 21859 0154 3A000000 		.4byte	.LFE58
 21860 0158 00000000 		.4byte	.LFB40
 21861 015c 9C000000 		.4byte	.LFE40
 21862 0160 00000000 		.4byte	.LFB41
 21863 0164 24000000 		.4byte	.LFE41
 21864 0168 00000000 		.4byte	.LFB42
 21865 016c 28000000 		.4byte	.LFE42
 21866 0170 00000000 		.4byte	.LFB43
 21867 0174 5A000000 		.4byte	.LFE43
 21868 0178 00000000 		.4byte	.LFB44
 21869 017c 7A010000 		.4byte	.LFE44
 21870 0180 00000000 		.4byte	.LFB45
 21871 0184 72000000 		.4byte	.LFE45
 21872 0188 00000000 		.4byte	.LFB46
 21873 018c 1A000000 		.4byte	.LFE46
 21874 0190 00000000 		.4byte	.LFB47
 21875 0194 4C000000 		.4byte	.LFE47
 21876 0198 00000000 		.4byte	.LFB48
 21877 019c 3E000000 		.4byte	.LFE48
 21878 01a0 00000000 		.4byte	.LFB49
 21879 01a4 CE000000 		.4byte	.LFE49
 21880 01a8 00000000 		.4byte	.LFB50
 21881 01ac B4000000 		.4byte	.LFE50
 21882 01b0 00000000 		.4byte	.LFB51
 21883 01b4 C4000000 		.4byte	.LFE51
 21884 01b8 00000000 		.4byte	.LFB52
 21885 01bc 0C010000 		.4byte	.LFE52
 21886 01c0 00000000 		.4byte	.LFB53
 21887 01c4 1C010000 		.4byte	.LFE53
 21888 01c8 00000000 		.4byte	.LFB54
 21889 01cc 9E000000 		.4byte	.LFE54
 21890 01d0 00000000 		.4byte	.LFB55
 21891 01d4 54010000 		.4byte	.LFE55
 21892 01d8 00000000 		.4byte	.LFB56
 21893 01dc 4E000000 		.4byte	.LFE56
 21894 01e0 00000000 		.4byte	.LFB60
 21895 01e4 1E000000 		.4byte	.LFE60
 21896 01e8 00000000 		.4byte	.LFB61
 21897 01ec 26000000 		.4byte	.LFE61
 21898 01f0 00000000 		.4byte	.LFB62
 21899 01f4 4C020000 		.4byte	.LFE62
 21900 01f8 00000000 		.4byte	0
 21901 01fc 00000000 		.4byte	0
 21902              		.section	.debug_line,"",%progbits
 21903              	.Ldebug_line0:
 21904 0000 A5100000 		.section	.debug_str,"MS",%progbits,1
 21904      0200C801 
 21904      00000201 
 21904      FB0E0D00 
 21904      01010101 
 21905              	.LASF82:
 21906 0000 5245535F 		.ascii	"RES_WRPRT\000"
 21906      57525052 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 526


 21906      5400
 21907              	.LASF76:
 21908 000a 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 21908      4F4F5F4D 
 21908      414E595F 
 21908      4F50454E 
 21908      5F46494C 
 21909              	.LASF124:
 21910 0021 7075745F 		.ascii	"put_fat\000"
 21910      66617400 
 21911              	.LASF22:
 21912 0029 66735F74 		.ascii	"fs_type\000"
 21912      79706500 
 21913              	.LASF148:
 21914 0031 63736563 		.ascii	"csect\000"
 21914      7400
 21915              	.LASF96:
 21916 0037 63686B5F 		.ascii	"chk_chr\000"
 21916      63687200 
 21917              	.LASF186:
 21918 003f 46617446 		.ascii	"FatFs\000"
 21918      7300
 21919              	.LASF161:
 21920 0045 69667074 		.ascii	"ifptr\000"
 21920      7200
 21921              	.LASF86:
 21922 004b 76615F6C 		.ascii	"va_list\000"
 21922      69737400 
 21923              	.LASF83:
 21924 0053 5245535F 		.ascii	"RES_NOTRDY\000"
 21924      4E4F5452 
 21924      445900
 21925              	.LASF27:
 21926 005e 6E5F726F 		.ascii	"n_rootdir\000"
 21926      6F746469 
 21926      7200
 21927              	.LASF105:
 21928 0068 70617468 		.ascii	"path\000"
 21928      00
 21929              	.LASF139:
 21930 006d 6469725F 		.ascii	"dir_register\000"
 21930      72656769 
 21930      73746572 
 21930      00
 21931              	.LASF149:
 21932 007a 72627566 		.ascii	"rbuff\000"
 21932      6600
 21933              	.LASF9:
 21934 0080 6C6F6E67 		.ascii	"long long unsigned int\000"
 21934      206C6F6E 
 21934      6720756E 
 21934      7369676E 
 21934      65642069 
 21935              	.LASF135:
 21936 0097 6469725F 		.ascii	"dir_find\000"
 21936      66696E64 
 21936      00
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 527


 21937              	.LASF180:
 21938 00a0 64697276 		.ascii	"dirvn\000"
 21938      6E00
 21939              	.LASF49:
 21940 00a6 73656374 		.ascii	"sect\000"
 21940      00
 21941              	.LASF120:
 21942 00ab 66617369 		.ascii	"fasize\000"
 21942      7A6500
 21943              	.LASF123:
 21944 00b2 6E727376 		.ascii	"nrsv\000"
 21944      00
 21945              	.LASF113:
 21946 00b7 70617274 		.ascii	"part\000"
 21946      00
 21947              	.LASF50:
 21948 00bc 6469725F 		.ascii	"dir_sect\000"
 21948      73656374 
 21948      00
 21949              	.LASF36:
 21950 00c5 64697262 		.ascii	"dirbase\000"
 21950      61736500 
 21951              	.LASF8:
 21952 00cd 6C6F6E67 		.ascii	"long long int\000"
 21952      206C6F6E 
 21952      6720696E 
 21952      7400
 21953              	.LASF0:
 21954 00db 7369676E 		.ascii	"signed char\000"
 21954      65642063 
 21954      68617200 
 21955              	.LASF173:
 21956 00e7 736F626A 		.ascii	"sobj\000"
 21956      00
 21957              	.LASF77:
 21958 00ec 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 21958      4E56414C 
 21958      49445F50 
 21958      4152414D 
 21958      45544552 
 21959              	.LASF33:
 21960 0101 6673697A 		.ascii	"fsize\000"
 21960      6500
 21961              	.LASF32:
 21962 0107 6E5F6661 		.ascii	"n_fatent\000"
 21962      74656E74 
 21962      00
 21963              	.LASF67:
 21964 0110 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
 21964      4E56414C 
 21964      49445F4F 
 21964      424A4543 
 21964      5400
 21965              	.LASF4:
 21966 0122 6C6F6E67 		.ascii	"long int\000"
 21966      20696E74 
 21966      00
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 528


 21967              	.LASF130:
 21968 012b 6469725F 		.ascii	"dir_remove\000"
 21968      72656D6F 
 21968      766500
 21969              	.LASF154:
 21970 0136 70757463 		.ascii	"putc_flush\000"
 21970      5F666C75 
 21970      736800
 21971              	.LASF84:
 21972 0141 5245535F 		.ascii	"RES_PARERR\000"
 21972      50415245 
 21972      525200
 21973              	.LASF24:
 21974 014c 6E5F6661 		.ascii	"n_fats\000"
 21974      747300
 21975              	.LASF145:
 21976 0153 62756666 		.ascii	"buff\000"
 21976      00
 21977              	.LASF102:
 21978 0158 73745F63 		.ascii	"st_clust\000"
 21978      6C757374 
 21978      00
 21979              	.LASF71:
 21980 0161 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 21980      4F5F4649 
 21980      4C455359 
 21980      5354454D 
 21980      00
 21981              	.LASF11:
 21982 0172 75696E74 		.ascii	"uint16_t\000"
 21982      31365F74 
 21982      00
 21983              	.LASF75:
 21984 017b 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 21984      4F545F45 
 21984      4E4F5547 
 21984      485F434F 
 21984      524500
 21985              	.LASF66:
 21986 018e 46525F45 		.ascii	"FR_EXIST\000"
 21986      58495354 
 21986      00
 21987              	.LASF35:
 21988 0197 66617462 		.ascii	"fatbase\000"
 21988      61736500 
 21989              	.LASF16:
 21990 019f 44574F52 		.ascii	"DWORD\000"
 21990      4400
 21991              	.LASF150:
 21992 01a5 665F7772 		.ascii	"f_write\000"
 21992      69746500 
 21993              	.LASF20:
 21994 01ad 4653495A 		.ascii	"FSIZE_t\000"
 21994      455F7400 
 21995              	.LASF198:
 21996 01b5 5F5F7661 		.ascii	"__va_list\000"
 21996      5F6C6973 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 529


 21996      7400
 21997              	.LASF165:
 21998 01bf 665F7374 		.ascii	"f_stat\000"
 21998      617400
 21999              	.LASF109:
 22000 01c6 73796E63 		.ascii	"sync_window\000"
 22000      5F77696E 
 22000      646F7700 
 22001              	.LASF6:
 22002 01d2 5F5F7569 		.ascii	"__uint32_t\000"
 22002      6E743332 
 22002      5F7400
 22003              	.LASF134:
 22004 01dd 73747265 		.ascii	"stretch\000"
 22004      74636800 
 22005              	.LASF28:
 22006 01e5 6373697A 		.ascii	"csize\000"
 22006      6500
 22007              	.LASF193:
 22008 01eb 6469736B 		.ascii	"disk_initialize\000"
 22008      5F696E69 
 22008      7469616C 
 22008      697A6500 
 22009              	.LASF23:
 22010 01fb 70647276 		.ascii	"pdrv\000"
 22010      00
 22011              	.LASF30:
 22012 0200 66726565 		.ascii	"free_clst\000"
 22012      5F636C73 
 22012      7400
 22013              	.LASF14:
 22014 020a 42595445 		.ascii	"BYTE\000"
 22014      00
 22015              	.LASF140:
 22016 020f 6469725F 		.ascii	"dir_read\000"
 22016      72656164 
 22016      00
 22017              	.LASF88:
 22018 0218 70757462 		.ascii	"putbuff\000"
 22018      75666600 
 22019              	.LASF51:
 22020 0220 6469725F 		.ascii	"dir_ptr\000"
 22020      70747200 
 22021              	.LASF41:
 22022 0228 61747472 		.ascii	"attr\000"
 22022      00
 22023              	.LASF116:
 22024 022d 6D6F6465 		.ascii	"mode\000"
 22024      00
 22025              	.LASF99:
 22026 0232 636C7374 		.ascii	"clst2sect\000"
 22026      32736563 
 22026      7400
 22027              	.LASF126:
 22028 023c 6469725F 		.ascii	"dir_sdi\000"
 22028      73646900 
 22029              	.LASF10:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 530


 22030 0244 756E7369 		.ascii	"unsigned int\000"
 22030      676E6564 
 22030      20696E74 
 22030      00
 22031              	.LASF107:
 22032 0251 70757463 		.ascii	"putc_init\000"
 22032      5F696E69 
 22032      7400
 22033              	.LASF181:
 22034 025b 62616463 		.ascii	"badchr\000"
 22034      687200
 22035              	.LASF13:
 22036 0262 55494E54 		.ascii	"UINT\000"
 22036      00
 22037              	.LASF54:
 22038 0267 6674696D 		.ascii	"ftime\000"
 22038      6500
 22039              	.LASF7:
 22040 026d 6C6F6E67 		.ascii	"long unsigned int\000"
 22040      20756E73 
 22040      69676E65 
 22040      6420696E 
 22040      7400
 22041              	.LASF190:
 22042 027f 6469736B 		.ascii	"disk_status\000"
 22042      5F737461 
 22042      74757300 
 22043              	.LASF87:
 22044 028b 6E636872 		.ascii	"nchr\000"
 22044      00
 22045              	.LASF156:
 22046 0290 665F636C 		.ascii	"f_close\000"
 22046      6F736500 
 22047              	.LASF117:
 22048 0298 62736563 		.ascii	"bsect\000"
 22048      7400
 22049              	.LASF119:
 22050 029e 73797365 		.ascii	"sysect\000"
 22050      637400
 22051              	.LASF3:
 22052 02a5 73686F72 		.ascii	"short unsigned int\000"
 22052      7420756E 
 22052      7369676E 
 22052      65642069 
 22052      6E7400
 22053              	.LASF37:
 22054 02b8 64617461 		.ascii	"database\000"
 22054      62617365 
 22054      00
 22055              	.LASF174:
 22056 02c1 665F7265 		.ascii	"f_rename\000"
 22056      6E616D65 
 22056      00
 22057              	.LASF100:
 22058 02ca 636C7374 		.ascii	"clst\000"
 22058      00
 22059              	.LASF183:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 531


 22060 02cf 665F7075 		.ascii	"f_putc\000"
 22060      746300
 22061              	.LASF60:
 22062 02d6 46525F49 		.ascii	"FR_INT_ERR\000"
 22062      4E545F45 
 22062      525200
 22063              	.LASF176:
 22064 02e1 70617468 		.ascii	"path_new\000"
 22064      5F6E6577 
 22064      00
 22065              	.LASF59:
 22066 02ea 46525F44 		.ascii	"FR_DISK_ERR\000"
 22066      49534B5F 
 22066      45525200 
 22067              	.LASF38:
 22068 02f6 77696E73 		.ascii	"winsect\000"
 22068      65637400 
 22069              	.LASF95:
 22070 02fe 6D656D5F 		.ascii	"mem_cmp\000"
 22070      636D7000 
 22071              	.LASF178:
 22072 0306 6C616265 		.ascii	"label\000"
 22072      6C00
 22073              	.LASF122:
 22074 030c 737A6266 		.ascii	"szbfat\000"
 22074      617400
 22075              	.LASF133:
 22076 0313 6469725F 		.ascii	"dir_next\000"
 22076      6E657874 
 22076      00
 22077              	.LASF17:
 22078 031c 57434841 		.ascii	"WCHAR\000"
 22078      5200
 22079              	.LASF168:
 22080 0322 6E667265 		.ascii	"nfree\000"
 22080      6500
 22081              	.LASF189:
 22082 0328 44626354 		.ascii	"DbcTbl\000"
 22082      626C00
 22083              	.LASF56:
 22084 032f 666E616D 		.ascii	"fname\000"
 22084      6500
 22085              	.LASF185:
 22086 0335 665F7072 		.ascii	"f_printf\000"
 22086      696E7466 
 22086      00
 22087              	.LASF68:
 22088 033e 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 22088      52495445 
 22088      5F50524F 
 22088      54454354 
 22088      454400
 22089              	.LASF194:
 22090 0351 6469736B 		.ascii	"disk_ioctl\000"
 22090      5F696F63 
 22090      746C00
 22091              	.LASF40:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 532


 22092 035c 46415446 		.ascii	"FATFS\000"
 22092      5300
 22093              	.LASF172:
 22094 0362 665F6D6B 		.ascii	"f_mkdir\000"
 22094      64697200 
 22095              	.LASF53:
 22096 036a 66646174 		.ascii	"fdate\000"
 22096      6500
 22097              	.LASF184:
 22098 0370 665F7075 		.ascii	"f_puts\000"
 22098      747300
 22099              	.LASF155:
 22100 0377 665F7379 		.ascii	"f_sync\000"
 22100      6E6300
 22101              	.LASF151:
 22102 037e 77636E74 		.ascii	"wcnt\000"
 22102      00
 22103              	.LASF157:
 22104 0383 665F6368 		.ascii	"f_chdrive\000"
 22104      64726976 
 22104      6500
 22105              	.LASF47:
 22106 038d 66707472 		.ascii	"fptr\000"
 22106      00
 22107              	.LASF177:
 22108 0392 665F6765 		.ascii	"f_getlabel\000"
 22108      746C6162 
 22108      656C00
 22109              	.LASF114:
 22110 039d 6D62725F 		.ascii	"mbr_pt\000"
 22110      707400
 22111              	.LASF94:
 22112 03a4 6D656D5F 		.ascii	"mem_set\000"
 22112      73657400 
 22113              	.LASF39:
 22114 03ac 73697A65 		.ascii	"sizetype\000"
 22114      74797065 
 22114      00
 22115              	.LASF103:
 22116 03b5 6765745F 		.ascii	"get_fileinfo\000"
 22116      66696C65 
 22116      696E666F 
 22116      00
 22117              	.LASF158:
 22118 03c2 665F6368 		.ascii	"f_chdir\000"
 22118      64697200 
 22119              	.LASF121:
 22120 03ca 6E636C73 		.ascii	"nclst\000"
 22120      7400
 22121              	.LASF73:
 22122 03d0 46525F54 		.ascii	"FR_TIMEOUT\000"
 22122      494D454F 
 22122      555400
 22123              	.LASF15:
 22124 03db 574F5244 		.ascii	"WORD\000"
 22124      00
 22125              	.LASF31:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 533


 22126 03e0 63646972 		.ascii	"cdir\000"
 22126      00
 22127              	.LASF43:
 22128 03e5 73636C75 		.ascii	"sclust\000"
 22128      737400
 22129              	.LASF80:
 22130 03ec 5245535F 		.ascii	"RES_OK\000"
 22130      4F4B00
 22131              	.LASF62:
 22132 03f3 46525F4E 		.ascii	"FR_NO_FILE\000"
 22132      4F5F4649 
 22132      4C4500
 22133              	.LASF167:
 22134 03fe 66617466 		.ascii	"fatfs\000"
 22134      7300
 22135              	.LASF18:
 22136 0404 54434841 		.ascii	"TCHAR\000"
 22136      5200
 22137              	.LASF131:
 22138 040a 6469725F 		.ascii	"dir_clear\000"
 22138      636C6561 
 22138      7200
 22139              	.LASF92:
 22140 0414 73745F64 		.ascii	"st_dword\000"
 22140      776F7264 
 22140      00
 22141              	.LASF141:
 22142 041d 73796E63 		.ascii	"sync_fs\000"
 22142      5F667300 
 22143              	.LASF70:
 22144 0425 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 22144      4F545F45 
 22144      4E41424C 
 22144      454400
 22145              	.LASF29:
 22146 0434 6C617374 		.ascii	"last_clst\000"
 22146      5F636C73 
 22146      7400
 22147              	.LASF166:
 22148 043e 665F6765 		.ascii	"f_getfree\000"
 22148      74667265 
 22148      6500
 22149              	.LASF106:
 22150 0448 6765745F 		.ascii	"get_ldnumber\000"
 22150      6C646E75 
 22150      6D626572 
 22150      00
 22151              	.LASF132:
 22152 0455 69627566 		.ascii	"ibuf\000"
 22152      00
 22153              	.LASF44:
 22154 045a 6F626A73 		.ascii	"objsize\000"
 22154      697A6500 
 22155              	.LASF142:
 22156 0462 665F6D6F 		.ascii	"f_mount\000"
 22156      756E7400 
 22157              	.LASF171:
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 534


 22158 046a 64636C73 		.ascii	"dclst\000"
 22158      7400
 22159              	.LASF125:
 22160 0470 6765745F 		.ascii	"get_fat\000"
 22160      66617400 
 22161              	.LASF127:
 22162 0478 63726561 		.ascii	"create_chain\000"
 22162      74655F63 
 22162      6861696E 
 22162      00
 22163              	.LASF159:
 22164 0485 665F6C73 		.ascii	"f_lseek\000"
 22164      65656B00 
 22165              	.LASF115:
 22166 048d 6D6F756E 		.ascii	"mount_volume\000"
 22166      745F766F 
 22166      6C756D65 
 22166      00
 22167              	.LASF1:
 22168 049a 756E7369 		.ascii	"unsigned char\000"
 22168      676E6564 
 22168      20636861 
 22168      7200
 22169              	.LASF170:
 22170 04a8 665F756E 		.ascii	"f_unlink\000"
 22170      6C696E6B 
 22170      00
 22171              	.LASF152:
 22172 04b1 77627566 		.ascii	"wbuff\000"
 22172      6600
 22173              	.LASF2:
 22174 04b7 73686F72 		.ascii	"short int\000"
 22174      7420696E 
 22174      7400
 22175              	.LASF112:
 22176 04c1 66696E64 		.ascii	"find_volume\000"
 22176      5F766F6C 
 22176      756D6500 
 22177              	.LASF97:
 22178 04cd 6462635F 		.ascii	"dbc_1st\000"
 22178      31737400 
 22179              	.LASF46:
 22180 04d5 666C6167 		.ascii	"flag\000"
 22180      00
 22181              	.LASF136:
 22182 04da 666F6C6C 		.ascii	"follow_path\000"
 22182      6F775F70 
 22182      61746800 
 22183              	.LASF111:
 22184 04e6 63686563 		.ascii	"check_fs\000"
 22184      6B5F6673 
 22184      00
 22185              	.LASF69:
 22186 04ef 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 22186      4E56414C 
 22186      49445F44 
 22186      52495645 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 535


 22186      00
 22187              	.LASF195:
 22188 0500 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 22188      43313120 
 22188      352E342E 
 22188      31203230 
 22188      31363036 
 22189 0533 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 22189      20726576 
 22189      6973696F 
 22189      6E203233 
 22189      37373135 
 22190 0566 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 22190      66756E63 
 22190      74696F6E 
 22190      2D736563 
 22190      74696F6E 
 22191              	.LASF108:
 22192 058e 76616C69 		.ascii	"validate\000"
 22192      64617465 
 22192      00
 22193              	.LASF52:
 22194 0597 64707472 		.ascii	"dptr\000"
 22194      00
 22195              	.LASF72:
 22196 059c 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 22196      4B46535F 
 22196      41424F52 
 22196      54454400 
 22197              	.LASF164:
 22198 05ac 665F7265 		.ascii	"f_readdir\000"
 22198      61646469 
 22198      7200
 22199              	.LASF74:
 22200 05b6 46525F4C 		.ascii	"FR_LOCKED\000"
 22200      4F434B45 
 22200      4400
 22201              	.LASF25:
 22202 05c0 77666C61 		.ascii	"wflag\000"
 22202      6700
 22203              	.LASF12:
 22204 05c6 75696E74 		.ascii	"uint32_t\000"
 22204      33325F74 
 22204      00
 22205              	.LASF153:
 22206 05cf 70757463 		.ascii	"putc_bfd\000"
 22206      5F626664 
 22206      00
 22207              	.LASF101:
 22208 05d8 6C645F63 		.ascii	"ld_clust\000"
 22208      6C757374 
 22208      00
 22209              	.LASF19:
 22210 05e1 63686172 		.ascii	"char\000"
 22210      00
 22211              	.LASF196:
 22212 05e6 2E2E5C2E 		.ascii	"..\\..\\FatFs\\ff.c\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 536


 22212      2E5C4661 
 22212      7446735C 
 22212      66662E63 
 22212      00
 22213              	.LASF104:
 22214 05f7 63726561 		.ascii	"create_name\000"
 22214      74655F6E 
 22214      616D6500 
 22215              	.LASF5:
 22216 0603 5F5F7569 		.ascii	"__uint16_t\000"
 22216      6E743136 
 22216      5F7400
 22217              	.LASF58:
 22218 060e 46525F4F 		.ascii	"FR_OK\000"
 22218      4B00
 22219              	.LASF129:
 22220 0614 70636C73 		.ascii	"pclst\000"
 22220      7400
 22221              	.LASF137:
 22222 061a 6469725F 		.ascii	"dir_alloc\000"
 22222      616C6C6F 
 22222      6300
 22223              	.LASF128:
 22224 0624 72656D6F 		.ascii	"remove_chain\000"
 22224      76655F63 
 22224      6861696E 
 22224      00
 22225              	.LASF79:
 22226 0631 44535441 		.ascii	"DSTATUS\000"
 22226      54555300 
 22227              	.LASF182:
 22228 0639 665F6765 		.ascii	"f_gets\000"
 22228      747300
 22229              	.LASF138:
 22230 0640 6E656E74 		.ascii	"nent\000"
 22230      00
 22231              	.LASF98:
 22232 0645 6462635F 		.ascii	"dbc_2nd\000"
 22232      326E6400 
 22233              	.LASF34:
 22234 064d 766F6C62 		.ascii	"volbase\000"
 22234      61736500 
 22235              	.LASF89:
 22236 0655 6C645F77 		.ascii	"ld_word\000"
 22236      6F726400 
 22237              	.LASF199:
 22238 065d 5F5F6170 		.ascii	"__ap\000"
 22238      00
 22239              	.LASF162:
 22240 0662 665F6F70 		.ascii	"f_opendir\000"
 22240      656E6469 
 22240      7200
 22241              	.LASF64:
 22242 066c 46525F49 		.ascii	"FR_INVALID_NAME\000"
 22242      4E56414C 
 22242      49445F4E 
 22242      414D4500 
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 537


 22243              	.LASF191:
 22244 067c 6469736B 		.ascii	"disk_write\000"
 22244      5F777269 
 22244      746500
 22245              	.LASF110:
 22246 0687 6D6F7665 		.ascii	"move_window\000"
 22246      5F77696E 
 22246      646F7700 
 22247              	.LASF90:
 22248 0693 6C645F64 		.ascii	"ld_dword\000"
 22248      776F7264 
 22248      00
 22249              	.LASF26:
 22250 069c 6673695F 		.ascii	"fsi_flag\000"
 22250      666C6167 
 22250      00
 22251              	.LASF93:
 22252 06a5 6D656D5F 		.ascii	"mem_cpy\000"
 22252      63707900 
 22253              	.LASF146:
 22254 06ad 72656D61 		.ascii	"remain\000"
 22254      696E00
 22255              	.LASF144:
 22256 06b4 665F7265 		.ascii	"f_read\000"
 22256      616400
 22257              	.LASF188:
 22258 06bb 43757272 		.ascii	"CurrVol\000"
 22258      566F6C00 
 22259              	.LASF55:
 22260 06c3 66617474 		.ascii	"fattrib\000"
 22260      72696200 
 22261              	.LASF175:
 22262 06cb 70617468 		.ascii	"path_old\000"
 22262      5F6F6C64 
 22262      00
 22263              	.LASF91:
 22264 06d4 73745F77 		.ascii	"st_word\000"
 22264      6F726400 
 22265              	.LASF57:
 22266 06dc 46494C49 		.ascii	"FILINFO\000"
 22266      4E464F00 
 22267              	.LASF179:
 22268 06e4 665F7365 		.ascii	"f_setlabel\000"
 22268      746C6162 
 22268      656C00
 22269              	.LASF169:
 22270 06ef 665F7472 		.ascii	"f_truncate\000"
 22270      756E6361 
 22270      746500
 22271              	.LASF147:
 22272 06fa 72636E74 		.ascii	"rcnt\000"
 22272      00
 22273              	.LASF21:
 22274 06ff 4C42415F 		.ascii	"LBA_t\000"
 22274      7400
 22275              	.LASF160:
 22276 0705 6E736563 		.ascii	"nsect\000"
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 538


 22276      7400
 22277              	.LASF42:
 22278 070b 73746174 		.ascii	"stat\000"
 22278      00
 22279              	.LASF78:
 22280 0710 46524553 		.ascii	"FRESULT\000"
 22280      554C5400 
 22281              	.LASF81:
 22282 0718 5245535F 		.ascii	"RES_ERROR\000"
 22282      4552524F 
 22282      5200
 22283              	.LASF85:
 22284 0722 5F5F676E 		.ascii	"__gnuc_va_list\000"
 22284      75635F76 
 22284      615F6C69 
 22284      737400
 22285              	.LASF143:
 22286 0731 665F6F70 		.ascii	"f_open\000"
 22286      656E00
 22287              	.LASF63:
 22288 0738 46525F4E 		.ascii	"FR_NO_PATH\000"
 22288      4F5F5041 
 22288      544800
 22289              	.LASF163:
 22290 0743 665F636C 		.ascii	"f_closedir\000"
 22290      6F736564 
 22290      697200
 22291              	.LASF197:
 22292 074e 433A5C55 		.ascii	"C:\\Users\\wa2n8\\Desktop\\PSoC\\PSoC5LP-FatFs-with"
 22292      73657273 
 22292      5C776132 
 22292      6E385C44 
 22292      65736B74 
 22293 077c 2D467265 		.ascii	"-FreeRTOS\\PSoC_FatFs\\baremetal.cydsn\000"
 22293      6552544F 
 22293      535C5053 
 22293      6F435F46 
 22293      61744673 
 22294              	.LASF61:
 22295 07a1 46525F4E 		.ascii	"FR_NOT_READY\000"
 22295      4F545F52 
 22295      45414459 
 22295      00
 22296              	.LASF45:
 22297 07ae 46464F42 		.ascii	"FFOBJID\000"
 22297      4A494400 
 22298              	.LASF192:
 22299 07b6 6469736B 		.ascii	"disk_read\000"
 22299      5F726561 
 22299      6400
 22300              	.LASF65:
 22301 07c0 46525F44 		.ascii	"FR_DENIED\000"
 22301      454E4945 
 22301      4400
 22302              	.LASF187:
 22303 07ca 46736964 		.ascii	"Fsid\000"
 22303      00
ARM GAS  C:\Users\wa2n8\AppData\Local\Temp\cchCNxi8.s 			page 539


 22304              	.LASF48:
 22305 07cf 636C7573 		.ascii	"clust\000"
 22305      7400
 22306              	.LASF118:
 22307 07d5 74736563 		.ascii	"tsect\000"
 22307      7400
 22308              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
